
TDK2025_chassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013704  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  080139d8  080139d8  000149d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013f30  08013f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  08013f38  08013f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013f48  08013f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  24000000  08013f4c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000038b0  24000080  08013fcc  00015080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003930  08013fcc  00015930  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015080  2**0
                  CONTENTS, READONLY
 10 .debug_info   000386db  00000000  00000000  000150ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000550e  00000000  00000000  0004d789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f18  00000000  00000000  00052c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001858  00000000  00000000  00054bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ba32  00000000  00000000  00056408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c0e6  00000000  00000000  00091e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001710b8  00000000  00000000  000bdf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022efd8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008ba0  00000000  00000000  0022f01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  00237bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080139bc 	.word	0x080139bc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	080139bc 	.word	0x080139bc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	@ 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	3c01      	subs	r4, #1
 800045c:	bf28      	it	cs
 800045e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000462:	d2e9      	bcs.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b988 	b.w	80009c0 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	468e      	mov	lr, r1
 80006d0:	4604      	mov	r4, r0
 80006d2:	4688      	mov	r8, r1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d14a      	bne.n	800076e <__udivmoddi4+0xa6>
 80006d8:	428a      	cmp	r2, r1
 80006da:	4617      	mov	r7, r2
 80006dc:	d962      	bls.n	80007a4 <__udivmoddi4+0xdc>
 80006de:	fab2 f682 	clz	r6, r2
 80006e2:	b14e      	cbz	r6, 80006f8 <__udivmoddi4+0x30>
 80006e4:	f1c6 0320 	rsb	r3, r6, #32
 80006e8:	fa01 f806 	lsl.w	r8, r1, r6
 80006ec:	fa20 f303 	lsr.w	r3, r0, r3
 80006f0:	40b7      	lsls	r7, r6
 80006f2:	ea43 0808 	orr.w	r8, r3, r8
 80006f6:	40b4      	lsls	r4, r6
 80006f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006fc:	fa1f fc87 	uxth.w	ip, r7
 8000700:	fbb8 f1fe 	udiv	r1, r8, lr
 8000704:	0c23      	lsrs	r3, r4, #16
 8000706:	fb0e 8811 	mls	r8, lr, r1, r8
 800070a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800070e:	fb01 f20c 	mul.w	r2, r1, ip
 8000712:	429a      	cmp	r2, r3
 8000714:	d909      	bls.n	800072a <__udivmoddi4+0x62>
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	f101 30ff 	add.w	r0, r1, #4294967295
 800071c:	f080 80ea 	bcs.w	80008f4 <__udivmoddi4+0x22c>
 8000720:	429a      	cmp	r2, r3
 8000722:	f240 80e7 	bls.w	80008f4 <__udivmoddi4+0x22c>
 8000726:	3902      	subs	r1, #2
 8000728:	443b      	add	r3, r7
 800072a:	1a9a      	subs	r2, r3, r2
 800072c:	b2a3      	uxth	r3, r4
 800072e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000732:	fb0e 2210 	mls	r2, lr, r0, r2
 8000736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800073a:	fb00 fc0c 	mul.w	ip, r0, ip
 800073e:	459c      	cmp	ip, r3
 8000740:	d909      	bls.n	8000756 <__udivmoddi4+0x8e>
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	f100 32ff 	add.w	r2, r0, #4294967295
 8000748:	f080 80d6 	bcs.w	80008f8 <__udivmoddi4+0x230>
 800074c:	459c      	cmp	ip, r3
 800074e:	f240 80d3 	bls.w	80008f8 <__udivmoddi4+0x230>
 8000752:	443b      	add	r3, r7
 8000754:	3802      	subs	r0, #2
 8000756:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800075a:	eba3 030c 	sub.w	r3, r3, ip
 800075e:	2100      	movs	r1, #0
 8000760:	b11d      	cbz	r5, 800076a <__udivmoddi4+0xa2>
 8000762:	40f3      	lsrs	r3, r6
 8000764:	2200      	movs	r2, #0
 8000766:	e9c5 3200 	strd	r3, r2, [r5]
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	428b      	cmp	r3, r1
 8000770:	d905      	bls.n	800077e <__udivmoddi4+0xb6>
 8000772:	b10d      	cbz	r5, 8000778 <__udivmoddi4+0xb0>
 8000774:	e9c5 0100 	strd	r0, r1, [r5]
 8000778:	2100      	movs	r1, #0
 800077a:	4608      	mov	r0, r1
 800077c:	e7f5      	b.n	800076a <__udivmoddi4+0xa2>
 800077e:	fab3 f183 	clz	r1, r3
 8000782:	2900      	cmp	r1, #0
 8000784:	d146      	bne.n	8000814 <__udivmoddi4+0x14c>
 8000786:	4573      	cmp	r3, lr
 8000788:	d302      	bcc.n	8000790 <__udivmoddi4+0xc8>
 800078a:	4282      	cmp	r2, r0
 800078c:	f200 8105 	bhi.w	800099a <__udivmoddi4+0x2d2>
 8000790:	1a84      	subs	r4, r0, r2
 8000792:	eb6e 0203 	sbc.w	r2, lr, r3
 8000796:	2001      	movs	r0, #1
 8000798:	4690      	mov	r8, r2
 800079a:	2d00      	cmp	r5, #0
 800079c:	d0e5      	beq.n	800076a <__udivmoddi4+0xa2>
 800079e:	e9c5 4800 	strd	r4, r8, [r5]
 80007a2:	e7e2      	b.n	800076a <__udivmoddi4+0xa2>
 80007a4:	2a00      	cmp	r2, #0
 80007a6:	f000 8090 	beq.w	80008ca <__udivmoddi4+0x202>
 80007aa:	fab2 f682 	clz	r6, r2
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	f040 80a4 	bne.w	80008fc <__udivmoddi4+0x234>
 80007b4:	1a8a      	subs	r2, r1, r2
 80007b6:	0c03      	lsrs	r3, r0, #16
 80007b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007bc:	b280      	uxth	r0, r0
 80007be:	b2bc      	uxth	r4, r7
 80007c0:	2101      	movs	r1, #1
 80007c2:	fbb2 fcfe 	udiv	ip, r2, lr
 80007c6:	fb0e 221c 	mls	r2, lr, ip, r2
 80007ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007ce:	fb04 f20c 	mul.w	r2, r4, ip
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d907      	bls.n	80007e6 <__udivmoddi4+0x11e>
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80007dc:	d202      	bcs.n	80007e4 <__udivmoddi4+0x11c>
 80007de:	429a      	cmp	r2, r3
 80007e0:	f200 80e0 	bhi.w	80009a4 <__udivmoddi4+0x2dc>
 80007e4:	46c4      	mov	ip, r8
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	fbb3 f2fe 	udiv	r2, r3, lr
 80007ec:	fb0e 3312 	mls	r3, lr, r2, r3
 80007f0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80007f4:	fb02 f404 	mul.w	r4, r2, r4
 80007f8:	429c      	cmp	r4, r3
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0x144>
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0x142>
 8000804:	429c      	cmp	r4, r3
 8000806:	f200 80ca 	bhi.w	800099e <__udivmoddi4+0x2d6>
 800080a:	4602      	mov	r2, r0
 800080c:	1b1b      	subs	r3, r3, r4
 800080e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000812:	e7a5      	b.n	8000760 <__udivmoddi4+0x98>
 8000814:	f1c1 0620 	rsb	r6, r1, #32
 8000818:	408b      	lsls	r3, r1
 800081a:	fa22 f706 	lsr.w	r7, r2, r6
 800081e:	431f      	orrs	r7, r3
 8000820:	fa0e f401 	lsl.w	r4, lr, r1
 8000824:	fa20 f306 	lsr.w	r3, r0, r6
 8000828:	fa2e fe06 	lsr.w	lr, lr, r6
 800082c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000830:	4323      	orrs	r3, r4
 8000832:	fa00 f801 	lsl.w	r8, r0, r1
 8000836:	fa1f fc87 	uxth.w	ip, r7
 800083a:	fbbe f0f9 	udiv	r0, lr, r9
 800083e:	0c1c      	lsrs	r4, r3, #16
 8000840:	fb09 ee10 	mls	lr, r9, r0, lr
 8000844:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000848:	fb00 fe0c 	mul.w	lr, r0, ip
 800084c:	45a6      	cmp	lr, r4
 800084e:	fa02 f201 	lsl.w	r2, r2, r1
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x1a0>
 8000854:	193c      	adds	r4, r7, r4
 8000856:	f100 3aff 	add.w	sl, r0, #4294967295
 800085a:	f080 809c 	bcs.w	8000996 <__udivmoddi4+0x2ce>
 800085e:	45a6      	cmp	lr, r4
 8000860:	f240 8099 	bls.w	8000996 <__udivmoddi4+0x2ce>
 8000864:	3802      	subs	r0, #2
 8000866:	443c      	add	r4, r7
 8000868:	eba4 040e 	sub.w	r4, r4, lr
 800086c:	fa1f fe83 	uxth.w	lr, r3
 8000870:	fbb4 f3f9 	udiv	r3, r4, r9
 8000874:	fb09 4413 	mls	r4, r9, r3, r4
 8000878:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800087c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000880:	45a4      	cmp	ip, r4
 8000882:	d908      	bls.n	8000896 <__udivmoddi4+0x1ce>
 8000884:	193c      	adds	r4, r7, r4
 8000886:	f103 3eff 	add.w	lr, r3, #4294967295
 800088a:	f080 8082 	bcs.w	8000992 <__udivmoddi4+0x2ca>
 800088e:	45a4      	cmp	ip, r4
 8000890:	d97f      	bls.n	8000992 <__udivmoddi4+0x2ca>
 8000892:	3b02      	subs	r3, #2
 8000894:	443c      	add	r4, r7
 8000896:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800089a:	eba4 040c 	sub.w	r4, r4, ip
 800089e:	fba0 ec02 	umull	lr, ip, r0, r2
 80008a2:	4564      	cmp	r4, ip
 80008a4:	4673      	mov	r3, lr
 80008a6:	46e1      	mov	r9, ip
 80008a8:	d362      	bcc.n	8000970 <__udivmoddi4+0x2a8>
 80008aa:	d05f      	beq.n	800096c <__udivmoddi4+0x2a4>
 80008ac:	b15d      	cbz	r5, 80008c6 <__udivmoddi4+0x1fe>
 80008ae:	ebb8 0203 	subs.w	r2, r8, r3
 80008b2:	eb64 0409 	sbc.w	r4, r4, r9
 80008b6:	fa04 f606 	lsl.w	r6, r4, r6
 80008ba:	fa22 f301 	lsr.w	r3, r2, r1
 80008be:	431e      	orrs	r6, r3
 80008c0:	40cc      	lsrs	r4, r1
 80008c2:	e9c5 6400 	strd	r6, r4, [r5]
 80008c6:	2100      	movs	r1, #0
 80008c8:	e74f      	b.n	800076a <__udivmoddi4+0xa2>
 80008ca:	fbb1 fcf2 	udiv	ip, r1, r2
 80008ce:	0c01      	lsrs	r1, r0, #16
 80008d0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80008d4:	b280      	uxth	r0, r0
 80008d6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80008da:	463b      	mov	r3, r7
 80008dc:	4638      	mov	r0, r7
 80008de:	463c      	mov	r4, r7
 80008e0:	46b8      	mov	r8, r7
 80008e2:	46be      	mov	lr, r7
 80008e4:	2620      	movs	r6, #32
 80008e6:	fbb1 f1f7 	udiv	r1, r1, r7
 80008ea:	eba2 0208 	sub.w	r2, r2, r8
 80008ee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80008f2:	e766      	b.n	80007c2 <__udivmoddi4+0xfa>
 80008f4:	4601      	mov	r1, r0
 80008f6:	e718      	b.n	800072a <__udivmoddi4+0x62>
 80008f8:	4610      	mov	r0, r2
 80008fa:	e72c      	b.n	8000756 <__udivmoddi4+0x8e>
 80008fc:	f1c6 0220 	rsb	r2, r6, #32
 8000900:	fa2e f302 	lsr.w	r3, lr, r2
 8000904:	40b7      	lsls	r7, r6
 8000906:	40b1      	lsls	r1, r6
 8000908:	fa20 f202 	lsr.w	r2, r0, r2
 800090c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000910:	430a      	orrs	r2, r1
 8000912:	fbb3 f8fe 	udiv	r8, r3, lr
 8000916:	b2bc      	uxth	r4, r7
 8000918:	fb0e 3318 	mls	r3, lr, r8, r3
 800091c:	0c11      	lsrs	r1, r2, #16
 800091e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000922:	fb08 f904 	mul.w	r9, r8, r4
 8000926:	40b0      	lsls	r0, r6
 8000928:	4589      	cmp	r9, r1
 800092a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800092e:	b280      	uxth	r0, r0
 8000930:	d93e      	bls.n	80009b0 <__udivmoddi4+0x2e8>
 8000932:	1879      	adds	r1, r7, r1
 8000934:	f108 3cff 	add.w	ip, r8, #4294967295
 8000938:	d201      	bcs.n	800093e <__udivmoddi4+0x276>
 800093a:	4589      	cmp	r9, r1
 800093c:	d81f      	bhi.n	800097e <__udivmoddi4+0x2b6>
 800093e:	eba1 0109 	sub.w	r1, r1, r9
 8000942:	fbb1 f9fe 	udiv	r9, r1, lr
 8000946:	fb09 f804 	mul.w	r8, r9, r4
 800094a:	fb0e 1119 	mls	r1, lr, r9, r1
 800094e:	b292      	uxth	r2, r2
 8000950:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000954:	4542      	cmp	r2, r8
 8000956:	d229      	bcs.n	80009ac <__udivmoddi4+0x2e4>
 8000958:	18ba      	adds	r2, r7, r2
 800095a:	f109 31ff 	add.w	r1, r9, #4294967295
 800095e:	d2c4      	bcs.n	80008ea <__udivmoddi4+0x222>
 8000960:	4542      	cmp	r2, r8
 8000962:	d2c2      	bcs.n	80008ea <__udivmoddi4+0x222>
 8000964:	f1a9 0102 	sub.w	r1, r9, #2
 8000968:	443a      	add	r2, r7
 800096a:	e7be      	b.n	80008ea <__udivmoddi4+0x222>
 800096c:	45f0      	cmp	r8, lr
 800096e:	d29d      	bcs.n	80008ac <__udivmoddi4+0x1e4>
 8000970:	ebbe 0302 	subs.w	r3, lr, r2
 8000974:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000978:	3801      	subs	r0, #1
 800097a:	46e1      	mov	r9, ip
 800097c:	e796      	b.n	80008ac <__udivmoddi4+0x1e4>
 800097e:	eba7 0909 	sub.w	r9, r7, r9
 8000982:	4449      	add	r1, r9
 8000984:	f1a8 0c02 	sub.w	ip, r8, #2
 8000988:	fbb1 f9fe 	udiv	r9, r1, lr
 800098c:	fb09 f804 	mul.w	r8, r9, r4
 8000990:	e7db      	b.n	800094a <__udivmoddi4+0x282>
 8000992:	4673      	mov	r3, lr
 8000994:	e77f      	b.n	8000896 <__udivmoddi4+0x1ce>
 8000996:	4650      	mov	r0, sl
 8000998:	e766      	b.n	8000868 <__udivmoddi4+0x1a0>
 800099a:	4608      	mov	r0, r1
 800099c:	e6fd      	b.n	800079a <__udivmoddi4+0xd2>
 800099e:	443b      	add	r3, r7
 80009a0:	3a02      	subs	r2, #2
 80009a2:	e733      	b.n	800080c <__udivmoddi4+0x144>
 80009a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009a8:	443b      	add	r3, r7
 80009aa:	e71c      	b.n	80007e6 <__udivmoddi4+0x11e>
 80009ac:	4649      	mov	r1, r9
 80009ae:	e79c      	b.n	80008ea <__udivmoddi4+0x222>
 80009b0:	eba1 0109 	sub.w	r1, r1, r9
 80009b4:	46c4      	mov	ip, r8
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fb09 f804 	mul.w	r8, r9, r4
 80009be:	e7c4      	b.n	800094a <__udivmoddi4+0x282>

080009c0 <__aeabi_idiv0>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80009ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80009d2:	f012 fdad 	bl	8013530 <cosf>
 80009d6:	eef0 7a40 	vmov.f32	s15, s0
 80009da:	eeb0 0a67 	vmov.f32	s0, s15
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80009ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80009f2:	f012 fcd9 	bl	80133a8 <sinf>
 80009f6:	eef0 7a40 	vmov.f32	s15, s0
 80009fa:	eeb0 0a67 	vmov.f32	s0, s15
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_ZNK8DC_motor9get_speedEv>:
class DC_motor{
public:
	void setup();
	void PI_run();
	void update_speed(int sign);
	float get_speed() const { return speed; } 
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eeb0 0a67 	vmov.f32	s0, s15
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>:
	void setspeed(float target_speed);
	void set_motor_parameter(float reduction_ratio,int resolution) ;


	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim,
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6178      	str	r0, [r7, #20]
 8000a2c:	6139      	str	r1, [r7, #16]
 8000a2e:	60fa      	str	r2, [r7, #12]
 8000a30:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a34:	edc7 0a00 	vstr	s1, [r7]
 8000a38:	817b      	strh	r3, [r7, #10]
			uint32_t _PWM_TIM_CHANNEL,float _kp,float _ki,bool dirpin) {
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f04f 0200 	mov.w	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f04f 0200 	mov.w	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f04f 0200 	mov.w	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	f04f 0200 	mov.w	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f04f 0200 	mov.w	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	f04f 0200 	mov.w	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f04f 0200 	mov.w	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	4a1e      	ldr	r2, [pc, #120]	@ (8000b00 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb+0xdc>)
 8000a86:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f240 321f 	movw	r2, #799	@ 0x31f
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	641a      	str	r2, [r3, #64]	@ 0x40
		enc_htim = _enc_htim;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	645a      	str	r2, [r3, #68]	@ 0x44
		dirPort = _dirPort;
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	649a      	str	r2, [r3, #72]	@ 0x48
		dirPin = _dirPin;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	897a      	ldrh	r2, [r7, #10]
 8000acc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		PWM_htim = _PWM_htim;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	6a3a      	ldr	r2, [r7, #32]
 8000ad4:	651a      	str	r2, [r3, #80]	@ 0x50
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ada:	655a      	str	r2, [r3, #84]	@ 0x54
		kp = _kp;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
		ki = _ki;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
		dir_pin = dirpin;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000aee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	};
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	4618      	mov	r0, r3
 8000af6:	371c      	adds	r7, #28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	3a83126f 	.word	0x3a83126f

08000b04 <_Z13chassis_setupv>:
DC_motor wheel_FR ={&htim2,GPIOG,GPIO_PIN_14,&htim5,TIM_CHANNEL_2,4,20,1};
DC_motor wheel_BL ={&htim8,GPIOG,GPIO_PIN_15,&htim5,TIM_CHANNEL_3,4.0,20,1};
DC_motor wheel_BR ={&htim4,GPIOD,GPIO_PIN_15,&htim5,TIM_CHANNEL_4,4,20,1};


void chassis_setup(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
    wheel_FR.setup();
 8000b08:	4806      	ldr	r0, [pc, #24]	@ (8000b24 <_Z13chassis_setupv+0x20>)
 8000b0a:	f00f fb6a 	bl	80101e2 <_ZN8DC_motor5setupEv>
    wheel_FL.setup();
 8000b0e:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <_Z13chassis_setupv+0x24>)
 8000b10:	f00f fb67 	bl	80101e2 <_ZN8DC_motor5setupEv>
    wheel_BR.setup();
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <_Z13chassis_setupv+0x28>)
 8000b16:	f00f fb64 	bl	80101e2 <_ZN8DC_motor5setupEv>
    wheel_BL.setup();
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <_Z13chassis_setupv+0x2c>)
 8000b1c:	f00f fb61 	bl	80101e2 <_ZN8DC_motor5setupEv>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2400010c 	.word	0x2400010c
 8000b28:	240000b4 	.word	0x240000b4
 8000b2c:	240001bc 	.word	0x240001bc
 8000b30:	24000164 	.word	0x24000164

08000b34 <_Z18mecan_IK_transformfff>:


void mecan_IK_transform(float _v_x, float _v_y, float _v_w) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b090      	sub	sp, #64	@ 0x40
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000b42:	ed87 1a01 	vstr	s2, [r7, #4]
    // Convert wheel_diameter to radius
    float r = wheel_diameter / 2.0f / 1.0f; // wheel radius in centimeters
 8000b46:	4b59      	ldr	r3, [pc, #356]	@ (8000cac <_Z18mecan_IK_transformfff+0x178>)
 8000b48:	ed93 7a00 	vldr	s14, [r3]
 8000b4c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b54:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Chassis geometry factor
    float L = chassis_length / 1.0f;
 8000b58:	4b55      	ldr	r3, [pc, #340]	@ (8000cb0 <_Z18mecan_IK_transformfff+0x17c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    float W = chassis_width / 1.0f;
 8000b5e:	4b55      	ldr	r3, [pc, #340]	@ (8000cb4 <_Z18mecan_IK_transformfff+0x180>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
    float a = L + W;
 8000b64:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000b68:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b70:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Calculate wheel speeds in cm/s
    float v1 = -_v_x + _v_y + _v_w * a / 2.0f; // Front Right
 8000b74:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b80:	edd7 6a01 	vldr	s13, [r7, #4]
 8000b84:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000b88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000b8c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000b90:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b98:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float v2 =  _v_x + _v_y - _v_w * a / 2.0f; // Front Left
 8000b9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ba0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ba8:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bac:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000bb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bb4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000bb8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bc0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float v3 =  _v_x + _v_y + _v_w * a / 2.0f; // Back Right
 8000bc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bd0:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bd4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000bd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bdc:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000be0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float v4 = -_v_x + _v_y - _v_w * a / 2.0f; // Back Left
 8000bec:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bf8:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bfc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c04:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000c08:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c10:	edc7 7a08 	vstr	s15, [r7, #32]

    // Convert linear speed (cm/s) to angular speed (rad/s)
    float w1 = v1 / r / pi;
 8000c14:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000c18:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000c1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c20:	4b25      	ldr	r3, [pc, #148]	@ (8000cb8 <_Z18mecan_IK_transformfff+0x184>)
 8000c22:	ed93 7a00 	vldr	s14, [r3]
 8000c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c2a:	edc7 7a07 	vstr	s15, [r7, #28]
    float w2 = v2 / r / pi;
 8000c2e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000c32:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000c36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <_Z18mecan_IK_transformfff+0x184>)
 8000c3c:	ed93 7a00 	vldr	s14, [r3]
 8000c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c44:	edc7 7a06 	vstr	s15, [r7, #24]
    float w3 = v3 / r / pi;
 8000c48:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000c4c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000c50:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <_Z18mecan_IK_transformfff+0x184>)
 8000c56:	ed93 7a00 	vldr	s14, [r3]
 8000c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c5e:	edc7 7a05 	vstr	s15, [r7, #20]
    float w4 = v4 / r / pi;
 8000c62:	ed97 7a08 	vldr	s14, [r7, #32]
 8000c66:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000c6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c6e:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <_Z18mecan_IK_transformfff+0x184>)
 8000c70:	ed93 7a00 	vldr	s14, [r3]
 8000c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c78:	edc7 7a04 	vstr	s15, [r7, #16]

    wheel_FR.setspeed(w1);
 8000c7c:	ed97 0a07 	vldr	s0, [r7, #28]
 8000c80:	480e      	ldr	r0, [pc, #56]	@ (8000cbc <_Z18mecan_IK_transformfff+0x188>)
 8000c82:	f00f fa67 	bl	8010154 <_ZN8DC_motor8setspeedEf>
    wheel_FL.setspeed(w2);
 8000c86:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c8a:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <_Z18mecan_IK_transformfff+0x18c>)
 8000c8c:	f00f fa62 	bl	8010154 <_ZN8DC_motor8setspeedEf>
    wheel_BR.setspeed(w3);
 8000c90:	ed97 0a05 	vldr	s0, [r7, #20]
 8000c94:	480b      	ldr	r0, [pc, #44]	@ (8000cc4 <_Z18mecan_IK_transformfff+0x190>)
 8000c96:	f00f fa5d 	bl	8010154 <_ZN8DC_motor8setspeedEf>
    wheel_BL.setspeed(w4);
 8000c9a:	ed97 0a04 	vldr	s0, [r7, #16]
 8000c9e:	480a      	ldr	r0, [pc, #40]	@ (8000cc8 <_Z18mecan_IK_transformfff+0x194>)
 8000ca0:	f00f fa58 	bl	8010154 <_ZN8DC_motor8setspeedEf>
}
 8000ca4:	bf00      	nop
 8000ca6:	3740      	adds	r7, #64	@ 0x40
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	24000008 	.word	0x24000008
 8000cb0:	24000004 	.word	0x24000004
 8000cb4:	24000000 	.word	0x24000000
 8000cb8:	24000010 	.word	0x24000010
 8000cbc:	2400010c 	.word	0x2400010c
 8000cc0:	240000b4 	.word	0x240000b4
 8000cc4:	240001bc 	.word	0x240001bc
 8000cc8:	24000164 	.word	0x24000164

08000ccc <_Z18mecan_FK_transformv>:

void mecan_FK_transform() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
    float v1 = wheel_FR.get_speed()*wheel_diameter*pi;
 8000cd2:	484c      	ldr	r0, [pc, #304]	@ (8000e04 <_Z18mecan_FK_transformv+0x138>)
 8000cd4:	f7ff fe96 	bl	8000a04 <_ZNK8DC_motor9get_speedEv>
 8000cd8:	eeb0 7a40 	vmov.f32	s14, s0
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8000e08 <_Z18mecan_FK_transformv+0x13c>)
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ce6:	4b49      	ldr	r3, [pc, #292]	@ (8000e0c <_Z18mecan_FK_transformv+0x140>)
 8000ce8:	edd3 7a00 	vldr	s15, [r3]
 8000cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf0:	edc7 7a03 	vstr	s15, [r7, #12]
    float v2 = wheel_FL.get_speed()*wheel_diameter*pi;
 8000cf4:	4846      	ldr	r0, [pc, #280]	@ (8000e10 <_Z18mecan_FK_transformv+0x144>)
 8000cf6:	f7ff fe85 	bl	8000a04 <_ZNK8DC_motor9get_speedEv>
 8000cfa:	eeb0 7a40 	vmov.f32	s14, s0
 8000cfe:	4b42      	ldr	r3, [pc, #264]	@ (8000e08 <_Z18mecan_FK_transformv+0x13c>)
 8000d00:	edd3 7a00 	vldr	s15, [r3]
 8000d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d08:	4b40      	ldr	r3, [pc, #256]	@ (8000e0c <_Z18mecan_FK_transformv+0x140>)
 8000d0a:	edd3 7a00 	vldr	s15, [r3]
 8000d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d12:	edc7 7a02 	vstr	s15, [r7, #8]
    float v3 = wheel_BR.get_speed()*wheel_diameter*pi;
 8000d16:	483f      	ldr	r0, [pc, #252]	@ (8000e14 <_Z18mecan_FK_transformv+0x148>)
 8000d18:	f7ff fe74 	bl	8000a04 <_ZNK8DC_motor9get_speedEv>
 8000d1c:	eeb0 7a40 	vmov.f32	s14, s0
 8000d20:	4b39      	ldr	r3, [pc, #228]	@ (8000e08 <_Z18mecan_FK_transformv+0x13c>)
 8000d22:	edd3 7a00 	vldr	s15, [r3]
 8000d26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2a:	4b38      	ldr	r3, [pc, #224]	@ (8000e0c <_Z18mecan_FK_transformv+0x140>)
 8000d2c:	edd3 7a00 	vldr	s15, [r3]
 8000d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d34:	edc7 7a01 	vstr	s15, [r7, #4]
    float v4 = wheel_BL.get_speed()*wheel_diameter*pi;
 8000d38:	4837      	ldr	r0, [pc, #220]	@ (8000e18 <_Z18mecan_FK_transformv+0x14c>)
 8000d3a:	f7ff fe63 	bl	8000a04 <_ZNK8DC_motor9get_speedEv>
 8000d3e:	eeb0 7a40 	vmov.f32	s14, s0
 8000d42:	4b31      	ldr	r3, [pc, #196]	@ (8000e08 <_Z18mecan_FK_transformv+0x13c>)
 8000d44:	edd3 7a00 	vldr	s15, [r3]
 8000d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <_Z18mecan_FK_transformv+0x140>)
 8000d4e:	edd3 7a00 	vldr	s15, [r3]
 8000d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d56:	edc7 7a00 	vstr	s15, [r7]
    v_x = -(v1 - v2 - v3 + v4) / 4.0f;
 8000d5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d6e:	edd7 7a00 	vldr	s15, [r7]
 8000d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d76:	eeb1 7a67 	vneg.f32	s14, s15
 8000d7a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d82:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <_Z18mecan_FK_transformv+0x150>)
 8000d84:	edc3 7a00 	vstr	s15, [r3]
    v_y = (v1 + v2 + v3 + v4) / 4.0f;
 8000d88:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d94:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d9c:	edd7 7a00 	vldr	s15, [r7]
 8000da0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000da4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dac:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <_Z18mecan_FK_transformv+0x154>)
 8000dae:	edc3 7a00 	vstr	s15, [r3]
    v_w = -(-v1 + v2 - v3 + v4) / (4.0f * (chassis_width + chassis_length) / 2.0f);
 8000db2:	ed97 7a02 	vldr	s14, [r7, #8]
 8000db6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dc6:	edd7 7a00 	vldr	s15, [r7]
 8000dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dce:	eef1 6a67 	vneg.f32	s13, s15
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <_Z18mecan_FK_transformv+0x158>)
 8000dd4:	ed93 7a00 	vldr	s14, [r3]
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_Z18mecan_FK_transformv+0x15c>)
 8000dda:	edd3 7a00 	vldr	s15, [r3]
 8000dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dea:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000dee:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8000df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <_Z18mecan_FK_transformv+0x160>)
 8000df8:	edc3 7a00 	vstr	s15, [r3]
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2400010c 	.word	0x2400010c
 8000e08:	24000008 	.word	0x24000008
 8000e0c:	24000010 	.word	0x24000010
 8000e10:	240000b4 	.word	0x240000b4
 8000e14:	240001bc 	.word	0x240001bc
 8000e18:	24000164 	.word	0x24000164
 8000e1c:	2400009c 	.word	0x2400009c
 8000e20:	240000a0 	.word	0x240000a0
 8000e24:	24000000 	.word	0x24000000
 8000e28:	24000004 	.word	0x24000004
 8000e2c:	240000a4 	.word	0x240000a4

08000e30 <_Z12localizationv>:


void localization() {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
    // 方向角轉換用
    float cos_t = cos(theta);
 8000e36:	4b4e      	ldr	r3, [pc, #312]	@ (8000f70 <_Z12localizationv+0x140>)
 8000e38:	edd3 7a00 	vldr	s15, [r3]
 8000e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e40:	f7ff fdc0 	bl	80009c4 <_ZSt3cosf>
 8000e44:	ed87 0a01 	vstr	s0, [r7, #4]
    float sin_t = sin(theta);
 8000e48:	4b49      	ldr	r3, [pc, #292]	@ (8000f70 <_Z12localizationv+0x140>)
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e52:	f7ff fdc7 	bl	80009e4 <_ZSt3sinf>
 8000e56:	ed87 0a00 	vstr	s0, [r7]

    // 機體座標轉換成世界座標再積分
    map_x += (v_x * cos_t - v_y * sin_t) * span;
 8000e5a:	4b46      	ldr	r3, [pc, #280]	@ (8000f74 <_Z12localizationv+0x144>)
 8000e5c:	ed93 7a00 	vldr	s14, [r3]
 8000e60:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e68:	4b43      	ldr	r3, [pc, #268]	@ (8000f78 <_Z12localizationv+0x148>)
 8000e6a:	edd3 6a00 	vldr	s13, [r3]
 8000e6e:	edd7 7a00 	vldr	s15, [r7]
 8000e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e7a:	4b40      	ldr	r3, [pc, #256]	@ (8000f7c <_Z12localizationv+0x14c>)
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e84:	4b3e      	ldr	r3, [pc, #248]	@ (8000f80 <_Z12localizationv+0x150>)
 8000e86:	edd3 7a00 	vldr	s15, [r3]
 8000e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f80 <_Z12localizationv+0x150>)
 8000e90:	edc3 7a00 	vstr	s15, [r3]
    map_y += (v_x * sin_t + v_y * cos_t) * span;
 8000e94:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <_Z12localizationv+0x144>)
 8000e96:	ed93 7a00 	vldr	s14, [r3]
 8000e9a:	edd7 7a00 	vldr	s15, [r7]
 8000e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ea2:	4b35      	ldr	r3, [pc, #212]	@ (8000f78 <_Z12localizationv+0x148>)
 8000ea4:	edd3 6a00 	vldr	s13, [r3]
 8000ea8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eb4:	4b31      	ldr	r3, [pc, #196]	@ (8000f7c <_Z12localizationv+0x14c>)
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ebe:	4b31      	ldr	r3, [pc, #196]	@ (8000f84 <_Z12localizationv+0x154>)
 8000ec0:	edd3 7a00 	vldr	s15, [r3]
 8000ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f84 <_Z12localizationv+0x154>)
 8000eca:	edc3 7a00 	vstr	s15, [r3]
    theta += v_w * span;
 8000ece:	4b2e      	ldr	r3, [pc, #184]	@ (8000f88 <_Z12localizationv+0x158>)
 8000ed0:	ed93 7a00 	vldr	s14, [r3]
 8000ed4:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <_Z12localizationv+0x14c>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ede:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <_Z12localizationv+0x140>)
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee8:	4b21      	ldr	r3, [pc, #132]	@ (8000f70 <_Z12localizationv+0x140>)
 8000eea:	edc3 7a00 	vstr	s15, [r3]

    // 可選：角度標準化在 -π ~ π，避免θ無限增長
    if (theta > M_PI) {
 8000eee:	4b20      	ldr	r3, [pc, #128]	@ (8000f70 <_Z12localizationv+0x140>)
 8000ef0:	edd3 7a00 	vldr	s15, [r3]
 8000ef4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef8:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8000f60 <_Z12localizationv+0x130>
 8000efc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	dd0d      	ble.n	8000f22 <_Z12localizationv+0xf2>
        theta -= 2 * pi;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <_Z12localizationv+0x140>)
 8000f08:	ed93 7a00 	vldr	s14, [r3]
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <_Z12localizationv+0x15c>)
 8000f0e:	edd3 7a00 	vldr	s15, [r3]
 8000f12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <_Z12localizationv+0x140>)
 8000f1c:	edc3 7a00 	vstr	s15, [r3]
    } else if (theta < -M_PI) {
        theta += 2 * pi;
    }
}
 8000f20:	e019      	b.n	8000f56 <_Z12localizationv+0x126>
    } else if (theta < -M_PI) {
 8000f22:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <_Z12localizationv+0x140>)
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2c:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000f68 <_Z12localizationv+0x138>
 8000f30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f38:	d400      	bmi.n	8000f3c <_Z12localizationv+0x10c>
}
 8000f3a:	e00c      	b.n	8000f56 <_Z12localizationv+0x126>
        theta += 2 * pi;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <_Z12localizationv+0x15c>)
 8000f3e:	edd3 7a00 	vldr	s15, [r3]
 8000f42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <_Z12localizationv+0x140>)
 8000f48:	edd3 7a00 	vldr	s15, [r3]
 8000f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <_Z12localizationv+0x140>)
 8000f52:	edc3 7a00 	vstr	s15, [r3]
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	54442d18 	.word	0x54442d18
 8000f64:	400921fb 	.word	0x400921fb
 8000f68:	54442d18 	.word	0x54442d18
 8000f6c:	c00921fb 	.word	0xc00921fb
 8000f70:	240000b0 	.word	0x240000b0
 8000f74:	2400009c 	.word	0x2400009c
 8000f78:	240000a0 	.word	0x240000a0
 8000f7c:	2400000c 	.word	0x2400000c
 8000f80:	240000a8 	.word	0x240000a8
 8000f84:	240000ac 	.word	0x240000ac
 8000f88:	240000a4 	.word	0x240000a4
 8000f8c:	24000010 	.word	0x24000010

08000f90 <_Z20chassis_update_speedfff>:

	cmd_v_x = (world_v_x * cos(theta)) + (world_v_y * sin(theta));
	cmd_v_y = (-world_v_x * sin(theta)) + (world_v_y * cos(theta));
}

void chassis_update_speed(float _v_x,float _v_y,float _v_w){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f9e:	ed87 1a01 	vstr	s2, [r7, #4]
    mecan_IK_transform(_v_x,_v_y,_v_w);
 8000fa2:	ed97 1a01 	vldr	s2, [r7, #4]
 8000fa6:	edd7 0a02 	vldr	s1, [r7, #8]
 8000faa:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fae:	f7ff fdc1 	bl	8000b34 <_Z18mecan_IK_transformfff>
    wheel_FR.PI_run();
 8000fb2:	4813      	ldr	r0, [pc, #76]	@ (8001000 <_Z20chassis_update_speedfff+0x70>)
 8000fb4:	f00e ff98 	bl	800fee8 <_ZN8DC_motor6PI_runEv>
    wheel_FL.PI_run();
 8000fb8:	4812      	ldr	r0, [pc, #72]	@ (8001004 <_Z20chassis_update_speedfff+0x74>)
 8000fba:	f00e ff95 	bl	800fee8 <_ZN8DC_motor6PI_runEv>
    wheel_BR.PI_run();
 8000fbe:	4812      	ldr	r0, [pc, #72]	@ (8001008 <_Z20chassis_update_speedfff+0x78>)
 8000fc0:	f00e ff92 	bl	800fee8 <_ZN8DC_motor6PI_runEv>
    wheel_BL.PI_run();
 8000fc4:	4811      	ldr	r0, [pc, #68]	@ (800100c <_Z20chassis_update_speedfff+0x7c>)
 8000fc6:	f00e ff8f 	bl	800fee8 <_ZN8DC_motor6PI_runEv>
    wheel_FR.update_speed(1);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <_Z20chassis_update_speedfff+0x70>)
 8000fce:	f00f f8d0 	bl	8010172 <_ZN8DC_motor12update_speedEi>
    wheel_FL.update_speed(-1);
 8000fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd6:	480b      	ldr	r0, [pc, #44]	@ (8001004 <_Z20chassis_update_speedfff+0x74>)
 8000fd8:	f00f f8cb 	bl	8010172 <_ZN8DC_motor12update_speedEi>
    wheel_BR.update_speed(1);
 8000fdc:	2101      	movs	r1, #1
 8000fde:	480a      	ldr	r0, [pc, #40]	@ (8001008 <_Z20chassis_update_speedfff+0x78>)
 8000fe0:	f00f f8c7 	bl	8010172 <_ZN8DC_motor12update_speedEi>
    wheel_BL.update_speed(-1);
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	4808      	ldr	r0, [pc, #32]	@ (800100c <_Z20chassis_update_speedfff+0x7c>)
 8000fea:	f00f f8c2 	bl	8010172 <_ZN8DC_motor12update_speedEi>
    mecan_FK_transform();
 8000fee:	f7ff fe6d 	bl	8000ccc <_Z18mecan_FK_transformv>
    localization();
 8000ff2:	f7ff ff1d 	bl	8000e30 <_Z12localizationv>
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2400010c 	.word	0x2400010c
 8001004:	240000b4 	.word	0x240000b4
 8001008:	240001bc 	.word	0x240001bc
 800100c:	24000164 	.word	0x24000164

08001010 <_Z41__static_initialization_and_destruction_0v>:
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af04      	add	r7, sp, #16
DC_motor wheel_FL ={&htim1,GPIOG,GPIO_PIN_11,&htim5,TIM_CHANNEL_1,4,20,0};
 8001016:	2300      	movs	r3, #0
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2300      	movs	r3, #0
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8001026:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800102a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800102e:	4a1e      	ldr	r2, [pc, #120]	@ (80010a8 <_Z41__static_initialization_and_destruction_0v+0x98>)
 8001030:	491e      	ldr	r1, [pc, #120]	@ (80010ac <_Z41__static_initialization_and_destruction_0v+0x9c>)
 8001032:	481f      	ldr	r0, [pc, #124]	@ (80010b0 <_Z41__static_initialization_and_destruction_0v+0xa0>)
 8001034:	f7ff fcf6 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor wheel_FR ={&htim2,GPIOG,GPIO_PIN_14,&htim5,TIM_CHANNEL_2,4,20,1};
 8001038:	2301      	movs	r3, #1
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2304      	movs	r3, #4
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8001048:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800104c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001050:	4a15      	ldr	r2, [pc, #84]	@ (80010a8 <_Z41__static_initialization_and_destruction_0v+0x98>)
 8001052:	4918      	ldr	r1, [pc, #96]	@ (80010b4 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8001054:	4818      	ldr	r0, [pc, #96]	@ (80010b8 <_Z41__static_initialization_and_destruction_0v+0xa8>)
 8001056:	f7ff fce5 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor wheel_BL ={&htim8,GPIOG,GPIO_PIN_15,&htim5,TIM_CHANNEL_3,4.0,20,1};
 800105a:	2301      	movs	r3, #1
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2308      	movs	r3, #8
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800106a:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800106e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001072:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <_Z41__static_initialization_and_destruction_0v+0x98>)
 8001074:	4911      	ldr	r1, [pc, #68]	@ (80010bc <_Z41__static_initialization_and_destruction_0v+0xac>)
 8001076:	4812      	ldr	r0, [pc, #72]	@ (80010c0 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 8001078:	f7ff fcd4 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor wheel_BR ={&htim4,GPIOD,GPIO_PIN_15,&htim5,TIM_CHANNEL_4,4,20,1};
 800107c:	2301      	movs	r3, #1
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	230c      	movs	r3, #12
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800108c:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001090:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8001096:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <_Z41__static_initialization_and_destruction_0v+0xb8>)
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <_Z41__static_initialization_and_destruction_0v+0xbc>)
 800109a:	f7ff fcc3 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2400062c 	.word	0x2400062c
 80010a8:	58021800 	.word	0x58021800
 80010ac:	240004fc 	.word	0x240004fc
 80010b0:	240000b4 	.word	0x240000b4
 80010b4:	24000548 	.word	0x24000548
 80010b8:	2400010c 	.word	0x2400010c
 80010bc:	24000710 	.word	0x24000710
 80010c0:	24000164 	.word	0x24000164
 80010c4:	58020c00 	.word	0x58020c00
 80010c8:	240005e0 	.word	0x240005e0
 80010cc:	240001bc 	.word	0x240001bc

080010d0 <_GLOBAL__sub_I_chassis_width>:
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	f7ff ff9c 	bl	8001010 <_Z41__static_initialization_and_destruction_0v>
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	0a5a      	lsrs	r2, r3, #9
 80010ec:	490f      	ldr	r1, [pc, #60]	@ (800112c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80010ee:	fba1 1202 	umull	r1, r2, r1, r2
 80010f2:	09d2      	lsrs	r2, r2, #7
 80010f4:	490e      	ldr	r1, [pc, #56]	@ (8001130 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80010f6:	fb01 f202 	mul.w	r2, r1, r2
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	0a5b      	lsrs	r3, r3, #9
 8001104:	4a09      	ldr	r2, [pc, #36]	@ (800112c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	09db      	lsrs	r3, r3, #7
 800110c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	441a      	add	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	00044b83 	.word	0x00044b83
 8001130:	3b9aca00 	.word	0x3b9aca00

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f002 fcba 	bl	8003ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f836 	bl	80011ac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001140:	f000 f8a2 	bl	8001288 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001144:	f001 f9c6 	bl	80024d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001148:	f001 f97c 	bl	8002444 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800114c:	f001 f8e2 	bl	8002314 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001150:	f000 fc8c 	bl	8001a6c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001154:	f000 fce0 	bl	8001b18 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001158:	f000 fd5a 	bl	8001c10 <MX_TIM6_Init>
  MX_TIM15_Init();
 800115c:	f000 fea8 	bl	8001eb0 <MX_TIM15_Init>
  MX_TIM1_Init();
 8001160:	f000 fb80 	bl	8001864 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001164:	f001 f922 	bl	80023ac <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001168:	f000 fbd6 	bl	8001918 <MX_TIM2_Init>
  MX_I2C1_Init();
 800116c:	f000 fafa 	bl	8001764 <MX_I2C1_Init>
  MX_ADC3_Init();
 8001170:	f000 f9d0 	bl	8001514 <MX_ADC3_Init>
  MX_TIM7_Init();
 8001174:	f000 fd82 	bl	8001c7c <MX_TIM7_Init>
  MX_I2C2_Init();
 8001178:	f000 fb34 	bl	80017e4 <MX_I2C2_Init>
  MX_TIM12_Init();
 800117c:	f000 fe0e 	bl	8001d9c <MX_TIM12_Init>
  MX_TIM23_Init();
 8001180:	f001 f81c 	bl	80021bc <MX_TIM23_Init>
  MX_TIM24_Init();
 8001184:	f001 f870 	bl	8002268 <MX_TIM24_Init>
  MX_TIM8_Init();
 8001188:	f000 fdae 	bl	8001ce8 <MX_TIM8_Init>
  MX_TIM13_Init();
 800118c:	f000 fe6c 	bl	8001e68 <MX_TIM13_Init>
  MX_ADC1_Init();
 8001190:	f000 f8aa 	bl	80012e8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001194:	f000 fc14 	bl	80019c0 <MX_TIM3_Init>
  MX_TIM16_Init();
 8001198:	f000 ff1c 	bl	8001fd4 <MX_TIM16_Init>
  MX_TIM17_Init();
 800119c:	f000 ff94 	bl	80020c8 <MX_TIM17_Init>
  MX_ADC2_Init();
 80011a0:	f000 f946 	bl	8001430 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //hadc1.Init.DMAContinuousRequests = ENABLE;
  main_function();
 80011a4:	f001 face 	bl	8002744 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <main+0x74>

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b09c      	sub	sp, #112	@ 0x70
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b6:	224c      	movs	r2, #76	@ 0x4c
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f012 faac 	bl	8013718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2220      	movs	r2, #32
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f012 faa6 	bl	8013718 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011cc:	2002      	movs	r0, #2
 80011ce:	f007 ffd1 	bl	8009174 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001284 <SystemClock_Config+0xd8>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a2a      	ldr	r2, [pc, #168]	@ (8001284 <SystemClock_Config+0xd8>)
 80011dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011e0:	6193      	str	r3, [r2, #24]
 80011e2:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <SystemClock_Config+0xd8>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011ee:	bf00      	nop
 80011f0:	4b24      	ldr	r3, [pc, #144]	@ (8001284 <SystemClock_Config+0xd8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011fc:	d1f8      	bne.n	80011f0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fe:	2302      	movs	r3, #2
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001202:	2301      	movs	r3, #1
 8001204:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001206:	2340      	movs	r3, #64	@ 0x40
 8001208:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120a:	2302      	movs	r3, #2
 800120c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120e:	2300      	movs	r3, #0
 8001210:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001212:	2304      	movs	r3, #4
 8001214:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001216:	2320      	movs	r3, #32
 8001218:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800121a:	2301      	movs	r3, #1
 800121c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800121e:	2302      	movs	r3, #2
 8001220:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001222:	2302      	movs	r3, #2
 8001224:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001226:	230c      	movs	r3, #12
 8001228:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800122a:	2300      	movs	r3, #0
 800122c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001236:	4618      	mov	r0, r3
 8001238:	f007 ffd6 	bl	80091e8 <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001242:	f001 fa61 	bl	8002708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001246:	233f      	movs	r3, #63	@ 0x3f
 8001248:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124a:	2303      	movs	r3, #3
 800124c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001252:	2308      	movs	r3, #8
 8001254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001256:	2340      	movs	r3, #64	@ 0x40
 8001258:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800125a:	2340      	movs	r3, #64	@ 0x40
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800125e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001262:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001264:	2340      	movs	r3, #64	@ 0x40
 8001266:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2103      	movs	r1, #3
 800126c:	4618      	mov	r0, r3
 800126e:	f008 fb95 	bl	800999c <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001278:	f001 fa46 	bl	8002708 <Error_Handler>
  }
}
 800127c:	bf00      	nop
 800127e:	3770      	adds	r7, #112	@ 0x70
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	58024800 	.word	0x58024800

08001288 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ae      	sub	sp, #184	@ 0xb8
 800128c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	22b8      	movs	r2, #184	@ 0xb8
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f012 fa3f 	bl	8013718 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800129a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 80012a6:	2320      	movs	r3, #32
 80012a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 80012aa:	2381      	movs	r3, #129	@ 0x81
 80012ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80012ba:	2340      	movs	r3, #64	@ 0x40
 80012bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4618      	mov	r0, r3
 80012d0:	f008 fef0 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80012da:	f001 fa15 	bl	8002708 <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	37b8      	adds	r7, #184	@ 0xb8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2224      	movs	r2, #36	@ 0x24
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f012 fa09 	bl	8013718 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001306:	4b45      	ldr	r3, [pc, #276]	@ (800141c <MX_ADC1_Init+0x134>)
 8001308:	4a45      	ldr	r2, [pc, #276]	@ (8001420 <MX_ADC1_Init+0x138>)
 800130a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800130c:	4b43      	ldr	r3, [pc, #268]	@ (800141c <MX_ADC1_Init+0x134>)
 800130e:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001312:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001314:	4b41      	ldr	r3, [pc, #260]	@ (800141c <MX_ADC1_Init+0x134>)
 8001316:	2208      	movs	r2, #8
 8001318:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800131a:	4b40      	ldr	r3, [pc, #256]	@ (800141c <MX_ADC1_Init+0x134>)
 800131c:	2201      	movs	r2, #1
 800131e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001320:	4b3e      	ldr	r3, [pc, #248]	@ (800141c <MX_ADC1_Init+0x134>)
 8001322:	2204      	movs	r2, #4
 8001324:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001326:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <MX_ADC1_Init+0x134>)
 8001328:	2200      	movs	r2, #0
 800132a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800132c:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <MX_ADC1_Init+0x134>)
 800132e:	2201      	movs	r2, #1
 8001330:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001332:	4b3a      	ldr	r3, [pc, #232]	@ (800141c <MX_ADC1_Init+0x134>)
 8001334:	2203      	movs	r2, #3
 8001336:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001338:	4b38      	ldr	r3, [pc, #224]	@ (800141c <MX_ADC1_Init+0x134>)
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001340:	4b36      	ldr	r3, [pc, #216]	@ (800141c <MX_ADC1_Init+0x134>)
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001346:	4b35      	ldr	r3, [pc, #212]	@ (800141c <MX_ADC1_Init+0x134>)
 8001348:	2200      	movs	r2, #0
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800134c:	4b33      	ldr	r3, [pc, #204]	@ (800141c <MX_ADC1_Init+0x134>)
 800134e:	2200      	movs	r2, #0
 8001350:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001352:	4b32      	ldr	r3, [pc, #200]	@ (800141c <MX_ADC1_Init+0x134>)
 8001354:	2200      	movs	r2, #0
 8001356:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001358:	4b30      	ldr	r3, [pc, #192]	@ (800141c <MX_ADC1_Init+0x134>)
 800135a:	2200      	movs	r2, #0
 800135c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = ENABLE;
 800135e:	4b2f      	ldr	r3, [pc, #188]	@ (800141c <MX_ADC1_Init+0x134>)
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 2;
 8001366:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <MX_ADC1_Init+0x134>)
 8001368:	2202      	movs	r2, #2
 800136a:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800136c:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <MX_ADC1_Init+0x134>)
 800136e:	2200      	movs	r2, #0
 8001370:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001372:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <MX_ADC1_Init+0x134>)
 8001374:	2200      	movs	r2, #0
 8001376:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001378:	4b28      	ldr	r3, [pc, #160]	@ (800141c <MX_ADC1_Init+0x134>)
 800137a:	2201      	movs	r2, #1
 800137c:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137e:	4827      	ldr	r0, [pc, #156]	@ (800141c <MX_ADC1_Init+0x134>)
 8001380:	f002 ff64 	bl	800424c <HAL_ADC_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800138a:	f001 f9bd 	bl	8002708 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	4820      	ldr	r0, [pc, #128]	@ (800141c <MX_ADC1_Init+0x134>)
 800139a:	f004 fbcb 	bl	8005b34 <HAL_ADCEx_MultiModeConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80013a4:	f001 f9b0 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <MX_ADC1_Init+0x13c>)
 80013aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ac:	2306      	movs	r3, #6
 80013ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013b0:	2301      	movs	r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013b4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ba:	2304      	movs	r3, #4
 80013bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	4813      	ldr	r0, [pc, #76]	@ (800141c <MX_ADC1_Init+0x134>)
 80013ce:	f003 fc79 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80013d8:	f001 f996 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_ADC1_Init+0x140>)
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013e0:	230c      	movs	r3, #12
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <MX_ADC1_Init+0x134>)
 80013ea:	f003 fc6b 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80013f4:	f001 f988 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_ADC1_Init+0x144>)
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013fc:	2312      	movs	r3, #18
 80013fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_ADC1_Init+0x134>)
 8001406:	f003 fc5d 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8001410:	f001 f97a 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3730      	adds	r7, #48	@ 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	24000214 	.word	0x24000214
 8001420:	40022000 	.word	0x40022000
 8001424:	10c00010 	.word	0x10c00010
 8001428:	21800100 	.word	0x21800100
 800142c:	4b840000 	.word	0x4b840000

08001430 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2224      	movs	r2, #36	@ 0x24
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f012 f96b 	bl	8013718 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001442:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <MX_ADC2_Init+0xd8>)
 8001444:	4a31      	ldr	r2, [pc, #196]	@ (800150c <MX_ADC2_Init+0xdc>)
 8001446:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001448:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <MX_ADC2_Init+0xd8>)
 800144a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800144e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001450:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <MX_ADC2_Init+0xd8>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001456:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <MX_ADC2_Init+0xd8>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800145c:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <MX_ADC2_Init+0xd8>)
 800145e:	2204      	movs	r2, #4
 8001460:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001462:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <MX_ADC2_Init+0xd8>)
 8001464:	2200      	movs	r2, #0
 8001466:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001468:	4b27      	ldr	r3, [pc, #156]	@ (8001508 <MX_ADC2_Init+0xd8>)
 800146a:	2200      	movs	r2, #0
 800146c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800146e:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <MX_ADC2_Init+0xd8>)
 8001470:	2201      	movs	r2, #1
 8001472:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001474:	4b24      	ldr	r3, [pc, #144]	@ (8001508 <MX_ADC2_Init+0xd8>)
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <MX_ADC2_Init+0xd8>)
 800147e:	2200      	movs	r2, #0
 8001480:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <MX_ADC2_Init+0xd8>)
 8001484:	2200      	movs	r2, #0
 8001486:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <MX_ADC2_Init+0xd8>)
 800148a:	2200      	movs	r2, #0
 800148c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800148e:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <MX_ADC2_Init+0xd8>)
 8001490:	2200      	movs	r2, #0
 8001492:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <MX_ADC2_Init+0xd8>)
 8001496:	2200      	movs	r2, #0
 8001498:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = ENABLE;
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <MX_ADC2_Init+0xd8>)
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_ADC2_Init+0xd8>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <MX_ADC2_Init+0xd8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <MX_ADC2_Init+0xd8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_ADC2_Init+0xd8>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014ba:	4813      	ldr	r0, [pc, #76]	@ (8001508 <MX_ADC2_Init+0xd8>)
 80014bc:	f002 fec6 	bl	800424c <HAL_ADC_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
 80014c6:	f001 f91f 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_ADC2_Init+0xe0>)
 80014cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ce:	2306      	movs	r3, #6
 80014d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014d6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80014da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014dc:	2304      	movs	r3, #4
 80014de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	@ (8001508 <MX_ADC2_Init+0xd8>)
 80014f0:	f003 fbe8 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 80014fa:	f001 f905 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	@ 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	24000284 	.word	0x24000284
 800150c:	40022100 	.word	0x40022100
 8001510:	0c900008 	.word	0x0c900008

08001514 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2224      	movs	r2, #36	@ 0x24
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f012 f8f9 	bl	8013718 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001526:	4b82      	ldr	r3, [pc, #520]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001528:	4a82      	ldr	r2, [pc, #520]	@ (8001734 <MX_ADC3_Init+0x220>)
 800152a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800152c:	4b80      	ldr	r3, [pc, #512]	@ (8001730 <MX_ADC3_Init+0x21c>)
 800152e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001532:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001534:	4b7e      	ldr	r3, [pc, #504]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001536:	2208      	movs	r2, #8
 8001538:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800153a:	4b7d      	ldr	r3, [pc, #500]	@ (8001730 <MX_ADC3_Init+0x21c>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001540:	4b7b      	ldr	r3, [pc, #492]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001542:	2201      	movs	r2, #1
 8001544:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001546:	4b7a      	ldr	r3, [pc, #488]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001548:	2204      	movs	r2, #4
 800154a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800154c:	4b78      	ldr	r3, [pc, #480]	@ (8001730 <MX_ADC3_Init+0x21c>)
 800154e:	2200      	movs	r2, #0
 8001550:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001552:	4b77      	ldr	r3, [pc, #476]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001554:	2201      	movs	r2, #1
 8001556:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 12;
 8001558:	4b75      	ldr	r3, [pc, #468]	@ (8001730 <MX_ADC3_Init+0x21c>)
 800155a:	220c      	movs	r2, #12
 800155c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800155e:	4b74      	ldr	r3, [pc, #464]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001566:	4b72      	ldr	r3, [pc, #456]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001568:	2200      	movs	r2, #0
 800156a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156c:	4b70      	ldr	r3, [pc, #448]	@ (8001730 <MX_ADC3_Init+0x21c>)
 800156e:	2200      	movs	r2, #0
 8001570:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001572:	4b6f      	ldr	r3, [pc, #444]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800157a:	4b6d      	ldr	r3, [pc, #436]	@ (8001730 <MX_ADC3_Init+0x21c>)
 800157c:	2200      	movs	r2, #0
 800157e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001580:	4b6b      	ldr	r3, [pc, #428]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001582:	2203      	movs	r2, #3
 8001584:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001586:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001588:	2200      	movs	r2, #0
 800158a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800158c:	4b68      	ldr	r3, [pc, #416]	@ (8001730 <MX_ADC3_Init+0x21c>)
 800158e:	2200      	movs	r2, #0
 8001590:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001592:	4b67      	ldr	r3, [pc, #412]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800159a:	4b65      	ldr	r3, [pc, #404]	@ (8001730 <MX_ADC3_Init+0x21c>)
 800159c:	2200      	movs	r2, #0
 800159e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015a0:	4863      	ldr	r0, [pc, #396]	@ (8001730 <MX_ADC3_Init+0x21c>)
 80015a2:	f002 fe53 	bl	800424c <HAL_ADC_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 80015ac:	f001 f8ac 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015b0:	2301      	movs	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b4:	2306      	movs	r3, #6
 80015b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015bc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80015c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015c2:	2304      	movs	r3, #4
 80015c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4857      	ldr	r0, [pc, #348]	@ (8001730 <MX_ADC3_Init+0x21c>)
 80015d4:	f003 fb76 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80015de:	f001 f893 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015e2:	4b55      	ldr	r3, [pc, #340]	@ (8001738 <MX_ADC3_Init+0x224>)
 80015e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015e6:	230c      	movs	r3, #12
 80015e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4850      	ldr	r0, [pc, #320]	@ (8001730 <MX_ADC3_Init+0x21c>)
 80015f0:	f003 fb68 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015fa:	f001 f885 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015fe:	4b4f      	ldr	r3, [pc, #316]	@ (800173c <MX_ADC3_Init+0x228>)
 8001600:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001602:	2312      	movs	r3, #18
 8001604:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4849      	ldr	r0, [pc, #292]	@ (8001730 <MX_ADC3_Init+0x21c>)
 800160c:	f003 fb5a 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001616:	f001 f877 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800161a:	4b49      	ldr	r3, [pc, #292]	@ (8001740 <MX_ADC3_Init+0x22c>)
 800161c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800161e:	2318      	movs	r3, #24
 8001620:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4842      	ldr	r0, [pc, #264]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001628:	f003 fb4c 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 8001632:	f001 f869 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001636:	4b43      	ldr	r3, [pc, #268]	@ (8001744 <MX_ADC3_Init+0x230>)
 8001638:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800163a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	483a      	ldr	r0, [pc, #232]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001646:	f003 fb3d 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 8001650:	f001 f85a 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001654:	4b3c      	ldr	r3, [pc, #240]	@ (8001748 <MX_ADC3_Init+0x234>)
 8001656:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001658:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800165c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	4619      	mov	r1, r3
 8001662:	4833      	ldr	r0, [pc, #204]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001664:	f003 fb2e 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 800166e:	f001 f84b 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001672:	4b36      	ldr	r3, [pc, #216]	@ (800174c <MX_ADC3_Init+0x238>)
 8001674:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001676:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800167a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4619      	mov	r1, r3
 8001680:	482b      	ldr	r0, [pc, #172]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001682:	f003 fb1f 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 800168c:	f001 f83c 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001690:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <MX_ADC3_Init+0x23c>)
 8001692:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001694:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001698:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	4619      	mov	r1, r3
 800169e:	4824      	ldr	r0, [pc, #144]	@ (8001730 <MX_ADC3_Init+0x21c>)
 80016a0:	f003 fb10 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 80016aa:	f001 f82d 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016ae:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <MX_ADC3_Init+0x240>)
 80016b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80016b2:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80016b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	481c      	ldr	r0, [pc, #112]	@ (8001730 <MX_ADC3_Init+0x21c>)
 80016be:	f003 fb01 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 80016c8:	f001 f81e 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016cc:	4b22      	ldr	r3, [pc, #136]	@ (8001758 <MX_ADC3_Init+0x244>)
 80016ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80016d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	4619      	mov	r1, r3
 80016da:	4815      	ldr	r0, [pc, #84]	@ (8001730 <MX_ADC3_Init+0x21c>)
 80016dc:	f003 faf2 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 80016e6:	f001 f80f 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <MX_ADC3_Init+0x248>)
 80016ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80016ee:	f240 2306 	movw	r3, #518	@ 0x206
 80016f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	480d      	ldr	r0, [pc, #52]	@ (8001730 <MX_ADC3_Init+0x21c>)
 80016fa:	f003 fae3 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC3_Init+0x1f4>
  {
    Error_Handler();
 8001704:	f001 f800 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_ADC3_Init+0x24c>)
 800170a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800170c:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8001710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	@ (8001730 <MX_ADC3_Init+0x21c>)
 8001718:	f003 fad4 	bl	8004cc4 <HAL_ADC_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC3_Init+0x212>
  {
    Error_Handler();
 8001722:	f000 fff1 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	240002f4 	.word	0x240002f4
 8001734:	58026000 	.word	0x58026000
 8001738:	04300002 	.word	0x04300002
 800173c:	08600004 	.word	0x08600004
 8001740:	0c900008 	.word	0x0c900008
 8001744:	10c00010 	.word	0x10c00010
 8001748:	14f00020 	.word	0x14f00020
 800174c:	19200040 	.word	0x19200040
 8001750:	1d500080 	.word	0x1d500080
 8001754:	21800100 	.word	0x21800100
 8001758:	25b00200 	.word	0x25b00200
 800175c:	2a000400 	.word	0x2a000400
 8001760:	2e300800 	.word	0x2e300800

08001764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800176a:	4a1c      	ldr	r2, [pc, #112]	@ (80017dc <MX_I2C1_Init+0x78>)
 800176c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001770:	4a1b      	ldr	r2, [pc, #108]	@ (80017e0 <MX_I2C1_Init+0x7c>)
 8001772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800177c:	2201      	movs	r2, #1
 800177e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <MX_I2C1_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <MX_I2C1_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800179e:	480e      	ldr	r0, [pc, #56]	@ (80017d8 <MX_I2C1_Init+0x74>)
 80017a0:	f007 fbb4 	bl	8008f0c <HAL_I2C_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017aa:	f000 ffad 	bl	8002708 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ae:	2100      	movs	r1, #0
 80017b0:	4809      	ldr	r0, [pc, #36]	@ (80017d8 <MX_I2C1_Init+0x74>)
 80017b2:	f007 fc47 	bl	8009044 <HAL_I2CEx_ConfigAnalogFilter>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017bc:	f000 ffa4 	bl	8002708 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017c0:	2100      	movs	r1, #0
 80017c2:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_I2C1_Init+0x74>)
 80017c4:	f007 fc89 	bl	80090da <HAL_I2CEx_ConfigDigitalFilter>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017ce:	f000 ff9b 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	24000454 	.word	0x24000454
 80017dc:	40005400 	.word	0x40005400
 80017e0:	20a0c4df 	.word	0x20a0c4df

080017e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <MX_I2C2_Init+0x74>)
 80017ea:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <MX_I2C2_Init+0x78>)
 80017ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <MX_I2C2_Init+0x74>)
 80017f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <MX_I2C2_Init+0x7c>)
 80017f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017f4:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <MX_I2C2_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <MX_I2C2_Init+0x74>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_I2C2_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001806:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <MX_I2C2_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <MX_I2C2_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_I2C2_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <MX_I2C2_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800181e:	480e      	ldr	r0, [pc, #56]	@ (8001858 <MX_I2C2_Init+0x74>)
 8001820:	f007 fb74 	bl	8008f0c <HAL_I2C_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800182a:	f000 ff6d 	bl	8002708 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800182e:	2100      	movs	r1, #0
 8001830:	4809      	ldr	r0, [pc, #36]	@ (8001858 <MX_I2C2_Init+0x74>)
 8001832:	f007 fc07 	bl	8009044 <HAL_I2CEx_ConfigAnalogFilter>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800183c:	f000 ff64 	bl	8002708 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001840:	2100      	movs	r1, #0
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_I2C2_Init+0x74>)
 8001844:	f007 fc49 	bl	80090da <HAL_I2CEx_ConfigDigitalFilter>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800184e:	f000 ff5b 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	240004a8 	.word	0x240004a8
 800185c:	40005800 	.word	0x40005800
 8001860:	20a0c4df 	.word	0x20a0c4df

08001864 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	@ 0x30
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2224      	movs	r2, #36	@ 0x24
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f011 ff50 	bl	8013718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001882:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <MX_TIM1_Init+0xac>)
 8001884:	4a23      	ldr	r2, [pc, #140]	@ (8001914 <MX_TIM1_Init+0xb0>)
 8001886:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <MX_TIM1_Init+0xac>)
 800188a:	2200      	movs	r2, #0
 800188c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <MX_TIM1_Init+0xac>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001894:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <MX_TIM1_Init+0xac>)
 8001896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800189a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <MX_TIM1_Init+0xac>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <MX_TIM1_Init+0xac>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a8:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <MX_TIM1_Init+0xac>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018ae:	2303      	movs	r3, #3
 80018b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018b6:	2301      	movs	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018c6:	2301      	movs	r3, #1
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	4619      	mov	r1, r3
 80018d8:	480d      	ldr	r0, [pc, #52]	@ (8001910 <MX_TIM1_Init+0xac>)
 80018da:	f00b fa6f 	bl	800cdbc <HAL_TIM_Encoder_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80018e4:	f000 ff10 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f4:	463b      	mov	r3, r7
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <MX_TIM1_Init+0xac>)
 80018fa:	f00c f97f 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001904:	f000 ff00 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3730      	adds	r7, #48	@ 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	240004fc 	.word	0x240004fc
 8001914:	40010000 	.word	0x40010000

08001918 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	@ 0x30
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2224      	movs	r2, #36	@ 0x24
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f011 fef6 	bl	8013718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	463b      	mov	r3, r7
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001936:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <MX_TIM2_Init+0xa4>)
 8001938:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800193c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800193e:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <MX_TIM2_Init+0xa4>)
 8001940:	2200      	movs	r2, #0
 8001942:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <MX_TIM2_Init+0xa4>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <MX_TIM2_Init+0xa4>)
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <MX_TIM2_Init+0xa4>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001958:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <MX_TIM2_Init+0xa4>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800195e:	2303      	movs	r3, #3
 8001960:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001966:	2301      	movs	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001976:	2301      	movs	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4619      	mov	r1, r3
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <MX_TIM2_Init+0xa4>)
 800198a:	f00b fa17 	bl	800cdbc <HAL_TIM_Encoder_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001994:	f000 feb8 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	@ (80019bc <MX_TIM2_Init+0xa4>)
 80019a6:	f00c f929 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80019b0:	f000 feaa 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	3730      	adds	r7, #48	@ 0x30
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	24000548 	.word	0x24000548

080019c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2224      	movs	r2, #36	@ 0x24
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f011 fea2 	bl	8013718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019de:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <MX_TIM3_Init+0xa4>)
 80019e0:	4a21      	ldr	r2, [pc, #132]	@ (8001a68 <MX_TIM3_Init+0xa8>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <MX_TIM3_Init+0xa4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <MX_TIM3_Init+0xa4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <MX_TIM3_Init+0xa4>)
 80019f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <MX_TIM3_Init+0xa4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <MX_TIM3_Init+0xa4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a04:	2303      	movs	r3, #3
 8001a06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480d      	ldr	r0, [pc, #52]	@ (8001a64 <MX_TIM3_Init+0xa4>)
 8001a30:	f00b f9c4 	bl	800cdbc <HAL_TIM_Encoder_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a3a:	f000 fe65 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	@ (8001a64 <MX_TIM3_Init+0xa4>)
 8001a4c:	f00c f8d6 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a56:	f000 fe57 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3730      	adds	r7, #48	@ 0x30
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	24000594 	.word	0x24000594
 8001a68:	40000400 	.word	0x40000400

08001a6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	@ 0x30
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	2224      	movs	r2, #36	@ 0x24
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f011 fe4c 	bl	8013718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	463b      	mov	r3, r7
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a8a:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <MX_TIM4_Init+0xa4>)
 8001a8c:	4a21      	ldr	r2, [pc, #132]	@ (8001b14 <MX_TIM4_Init+0xa8>)
 8001a8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a90:	4b1f      	ldr	r3, [pc, #124]	@ (8001b10 <MX_TIM4_Init+0xa4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a96:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <MX_TIM4_Init+0xa4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b10 <MX_TIM4_Init+0xa4>)
 8001a9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aa2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <MX_TIM4_Init+0xa4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aaa:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <MX_TIM4_Init+0xa4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480d      	ldr	r0, [pc, #52]	@ (8001b10 <MX_TIM4_Init+0xa4>)
 8001adc:	f00b f96e 	bl	800cdbc <HAL_TIM_Encoder_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001ae6:	f000 fe0f 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	4619      	mov	r1, r3
 8001af6:	4806      	ldr	r0, [pc, #24]	@ (8001b10 <MX_TIM4_Init+0xa4>)
 8001af8:	f00c f880 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b02:	f000 fe01 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	3730      	adds	r7, #48	@ 0x30
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	240005e0 	.word	0x240005e0
 8001b14:	40000800 	.word	0x40000800

08001b18 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	@ 0x28
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	615a      	str	r2, [r3, #20]
 8001b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b3c:	4b32      	ldr	r3, [pc, #200]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001b3e:	4a33      	ldr	r2, [pc, #204]	@ (8001c0c <MX_TIM5_Init+0xf4>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 31;
 8001b42:	4b31      	ldr	r3, [pc, #196]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001b44:	221f      	movs	r2, #31
 8001b46:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 799;
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001b50:	f240 321f 	movw	r2, #799	@ 0x31f
 8001b54:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b2c      	ldr	r3, [pc, #176]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b62:	4829      	ldr	r0, [pc, #164]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001b64:	f00a ff6a 	bl	800ca3c <HAL_TIM_PWM_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001b6e:	f000 fdcb 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4821      	ldr	r0, [pc, #132]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001b82:	f00c f83b 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001b8c:	f000 fdbc 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b90:	2360      	movs	r3, #96	@ 0x60
 8001b92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4818      	ldr	r0, [pc, #96]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001ba8:	f00b fb44 	bl	800d234 <HAL_TIM_PWM_ConfigChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001bb2:	f000 fda9 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2204      	movs	r2, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4812      	ldr	r0, [pc, #72]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001bbe:	f00b fb39 	bl	800d234 <HAL_TIM_PWM_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001bc8:	f000 fd9e 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bcc:	463b      	mov	r3, r7
 8001bce:	2208      	movs	r2, #8
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001bd4:	f00b fb2e 	bl	800d234 <HAL_TIM_PWM_ConfigChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8001bde:	f000 fd93 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001be2:	463b      	mov	r3, r7
 8001be4:	220c      	movs	r2, #12
 8001be6:	4619      	mov	r1, r3
 8001be8:	4807      	ldr	r0, [pc, #28]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001bea:	f00b fb23 	bl	800d234 <HAL_TIM_PWM_ConfigChannel>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM5_Init+0xe0>
  {
    Error_Handler();
 8001bf4:	f000 fd88 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001bf8:	4803      	ldr	r0, [pc, #12]	@ (8001c08 <MX_TIM5_Init+0xf0>)
 8001bfa:	f001 fb17 	bl	800322c <HAL_TIM_MspPostInit>

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	@ 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2400062c 	.word	0x2400062c
 8001c0c:	40000c00 	.word	0x40000c00

08001c10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c20:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <MX_TIM6_Init+0x64>)
 8001c22:	4a15      	ldr	r2, [pc, #84]	@ (8001c78 <MX_TIM6_Init+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 255;
 8001c26:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <MX_TIM6_Init+0x64>)
 8001c28:	22ff      	movs	r2, #255	@ 0xff
 8001c2a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <MX_TIM6_Init+0x64>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <MX_TIM6_Init+0x64>)
 8001c34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c38:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <MX_TIM6_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c40:	480c      	ldr	r0, [pc, #48]	@ (8001c74 <MX_TIM6_Init+0x64>)
 8001c42:	f00a fe1d 	bl	800c880 <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c4c:	f000 fd5c 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <MX_TIM6_Init+0x64>)
 8001c5e:	f00b ffcd 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c68:	f000 fd4e 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	24000678 	.word	0x24000678
 8001c78:	40001000 	.word	0x40001000

08001c7c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <MX_TIM7_Init+0x64>)
 8001c8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ce4 <MX_TIM7_Init+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 255;
 8001c92:	4b13      	ldr	r3, [pc, #76]	@ (8001ce0 <MX_TIM7_Init+0x64>)
 8001c94:	22ff      	movs	r2, #255	@ 0xff
 8001c96:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <MX_TIM7_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ce0 <MX_TIM7_Init+0x64>)
 8001ca0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ca4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <MX_TIM7_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cac:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <MX_TIM7_Init+0x64>)
 8001cae:	f00a fde7 	bl	800c880 <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001cb8:	f000 fd26 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <MX_TIM7_Init+0x64>)
 8001cca:	f00b ff97 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001cd4:	f000 fd18 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	240006c4 	.word	0x240006c4
 8001ce4:	40001400 	.word	0x40001400

08001ce8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08c      	sub	sp, #48	@ 0x30
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2224      	movs	r2, #36	@ 0x24
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f011 fd0e 	bl	8013718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d06:	4b23      	ldr	r3, [pc, #140]	@ (8001d94 <MX_TIM8_Init+0xac>)
 8001d08:	4a23      	ldr	r2, [pc, #140]	@ (8001d98 <MX_TIM8_Init+0xb0>)
 8001d0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d0c:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <MX_TIM8_Init+0xac>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <MX_TIM8_Init+0xac>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d18:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <MX_TIM8_Init+0xac>)
 8001d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <MX_TIM8_Init+0xac>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d26:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <MX_TIM8_Init+0xac>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <MX_TIM8_Init+0xac>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d32:	2303      	movs	r3, #3
 8001d34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480d      	ldr	r0, [pc, #52]	@ (8001d94 <MX_TIM8_Init+0xac>)
 8001d5e:	f00b f82d 	bl	800cdbc <HAL_TIM_Encoder_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001d68:	f000 fcce 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <MX_TIM8_Init+0xac>)
 8001d7e:	f00b ff3d 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001d88:	f000 fcbe 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	3730      	adds	r7, #48	@ 0x30
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	24000710 	.word	0x24000710
 8001d98:	40010400 	.word	0x40010400

08001d9c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dae:	463b      	mov	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
 8001dbc:	615a      	str	r2, [r3, #20]
 8001dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001dc0:	4b27      	ldr	r3, [pc, #156]	@ (8001e60 <MX_TIM12_Init+0xc4>)
 8001dc2:	4a28      	ldr	r2, [pc, #160]	@ (8001e64 <MX_TIM12_Init+0xc8>)
 8001dc4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001dc6:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <MX_TIM12_Init+0xc4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b24      	ldr	r3, [pc, #144]	@ (8001e60 <MX_TIM12_Init+0xc4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001dd2:	4b23      	ldr	r3, [pc, #140]	@ (8001e60 <MX_TIM12_Init+0xc4>)
 8001dd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dd8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dda:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <MX_TIM12_Init+0xc4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <MX_TIM12_Init+0xc4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001de6:	481e      	ldr	r0, [pc, #120]	@ (8001e60 <MX_TIM12_Init+0xc4>)
 8001de8:	f00a fe28 	bl	800ca3c <HAL_TIM_PWM_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8001df2:	f000 fc89 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	4619      	mov	r1, r3
 8001e04:	4816      	ldr	r0, [pc, #88]	@ (8001e60 <MX_TIM12_Init+0xc4>)
 8001e06:	f00b fef9 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001e10:	f000 fc7a 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e14:	2360      	movs	r3, #96	@ 0x60
 8001e16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e24:	463b      	mov	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480d      	ldr	r0, [pc, #52]	@ (8001e60 <MX_TIM12_Init+0xc4>)
 8001e2c:	f00b fa02 	bl	800d234 <HAL_TIM_PWM_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8001e36:	f000 fc67 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4807      	ldr	r0, [pc, #28]	@ (8001e60 <MX_TIM12_Init+0xc4>)
 8001e42:	f00b f9f7 	bl	800d234 <HAL_TIM_PWM_ConfigChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 8001e4c:	f000 fc5c 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e50:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <MX_TIM12_Init+0xc4>)
 8001e52:	f001 f9eb 	bl	800322c <HAL_TIM_MspPostInit>

}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	@ 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2400075c 	.word	0x2400075c
 8001e64:	40001800 	.word	0x40001800

08001e68 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001eac <MX_TIM13_Init+0x44>)
 8001e70:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2549;
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e74:	f640 12f5 	movw	r2, #2549	@ 0x9f5
 8001e78:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24999;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e82:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001e86:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e96:	f00a fcf3 	bl	800c880 <HAL_TIM_Base_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001ea0:	f000 fc32 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	240007a8 	.word	0x240007a8
 8001eac:	40001c00 	.word	0x40001c00

08001eb0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b098      	sub	sp, #96	@ 0x60
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	615a      	str	r2, [r3, #20]
 8001ed4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2234      	movs	r2, #52	@ 0x34
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f011 fc1b 	bl	8013718 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001ee4:	4a3a      	ldr	r2, [pc, #232]	@ (8001fd0 <MX_TIM15_Init+0x120>)
 8001ee6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001ee8:	4b38      	ldr	r3, [pc, #224]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eee:	4b37      	ldr	r3, [pc, #220]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001ef4:	4b35      	ldr	r3, [pc, #212]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001ef6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001efa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efc:	4b33      	ldr	r3, [pc, #204]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001f02:	4b32      	ldr	r3, [pc, #200]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f08:	4b30      	ldr	r3, [pc, #192]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001f0e:	482f      	ldr	r0, [pc, #188]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001f10:	f00a fd94 	bl	800ca3c <HAL_TIM_PWM_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001f1a:	f000 fbf5 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f26:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4827      	ldr	r0, [pc, #156]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001f2e:	f00b fe65 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001f38:	f000 fbe6 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3c:	2360      	movs	r3, #96	@ 0x60
 8001f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f44:	2300      	movs	r3, #0
 8001f46:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f50:	2300      	movs	r3, #0
 8001f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f54:	2300      	movs	r3, #0
 8001f56:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481a      	ldr	r0, [pc, #104]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001f62:	f00b f967 	bl	800d234 <HAL_TIM_PWM_ConfigChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001f6c:	f000 fbcc 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f74:	2204      	movs	r2, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4814      	ldr	r0, [pc, #80]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001f7a:	f00b f95b 	bl	800d234 <HAL_TIM_PWM_ConfigChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001f84:	f000 fbc0 	bl	8002708 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4807      	ldr	r0, [pc, #28]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001fb0:	f00b fec0 	bl	800dd34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001fba:	f000 fba5 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001fbe:	4803      	ldr	r0, [pc, #12]	@ (8001fcc <MX_TIM15_Init+0x11c>)
 8001fc0:	f001 f934 	bl	800322c <HAL_TIM_MspPostInit>

}
 8001fc4:	bf00      	nop
 8001fc6:	3760      	adds	r7, #96	@ 0x60
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	240007f4 	.word	0x240007f4
 8001fd0:	40014000 	.word	0x40014000

08001fd4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b094      	sub	sp, #80	@ 0x50
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fda:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	615a      	str	r2, [r3, #20]
 8001fec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fee:	463b      	mov	r3, r7
 8001ff0:	2234      	movs	r2, #52	@ 0x34
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f011 fb8f 	bl	8013718 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ffa:	4b31      	ldr	r3, [pc, #196]	@ (80020c0 <MX_TIM16_Init+0xec>)
 8001ffc:	4a31      	ldr	r2, [pc, #196]	@ (80020c4 <MX_TIM16_Init+0xf0>)
 8001ffe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002000:	4b2f      	ldr	r3, [pc, #188]	@ (80020c0 <MX_TIM16_Init+0xec>)
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b2e      	ldr	r3, [pc, #184]	@ (80020c0 <MX_TIM16_Init+0xec>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800200c:	4b2c      	ldr	r3, [pc, #176]	@ (80020c0 <MX_TIM16_Init+0xec>)
 800200e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002012:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002014:	4b2a      	ldr	r3, [pc, #168]	@ (80020c0 <MX_TIM16_Init+0xec>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800201a:	4b29      	ldr	r3, [pc, #164]	@ (80020c0 <MX_TIM16_Init+0xec>)
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002020:	4b27      	ldr	r3, [pc, #156]	@ (80020c0 <MX_TIM16_Init+0xec>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002026:	4826      	ldr	r0, [pc, #152]	@ (80020c0 <MX_TIM16_Init+0xec>)
 8002028:	f00a fc2a 	bl	800c880 <HAL_TIM_Base_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002032:	f000 fb69 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002036:	4822      	ldr	r0, [pc, #136]	@ (80020c0 <MX_TIM16_Init+0xec>)
 8002038:	f00a fd00 	bl	800ca3c <HAL_TIM_PWM_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002042:	f000 fb61 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002046:	2360      	movs	r3, #96	@ 0x60
 8002048:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204e:	2300      	movs	r3, #0
 8002050:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002052:	2300      	movs	r3, #0
 8002054:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002062:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002066:	2200      	movs	r2, #0
 8002068:	4619      	mov	r1, r3
 800206a:	4815      	ldr	r0, [pc, #84]	@ (80020c0 <MX_TIM16_Init+0xec>)
 800206c:	f00b f8e2 	bl	800d234 <HAL_TIM_PWM_ConfigChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002076:	f000 fb47 	bl	8002708 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800208e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002092:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800209c:	463b      	mov	r3, r7
 800209e:	4619      	mov	r1, r3
 80020a0:	4807      	ldr	r0, [pc, #28]	@ (80020c0 <MX_TIM16_Init+0xec>)
 80020a2:	f00b fe47 	bl	800dd34 <HAL_TIMEx_ConfigBreakDeadTime>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80020ac:	f000 fb2c 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80020b0:	4803      	ldr	r0, [pc, #12]	@ (80020c0 <MX_TIM16_Init+0xec>)
 80020b2:	f001 f8bb 	bl	800322c <HAL_TIM_MspPostInit>

}
 80020b6:	bf00      	nop
 80020b8:	3750      	adds	r7, #80	@ 0x50
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	24000840 	.word	0x24000840
 80020c4:	40014400 	.word	0x40014400

080020c8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b094      	sub	sp, #80	@ 0x50
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	611a      	str	r2, [r3, #16]
 80020de:	615a      	str	r2, [r3, #20]
 80020e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020e2:	463b      	mov	r3, r7
 80020e4:	2234      	movs	r2, #52	@ 0x34
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f011 fb15 	bl	8013718 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80020ee:	4b31      	ldr	r3, [pc, #196]	@ (80021b4 <MX_TIM17_Init+0xec>)
 80020f0:	4a31      	ldr	r2, [pc, #196]	@ (80021b8 <MX_TIM17_Init+0xf0>)
 80020f2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80020f4:	4b2f      	ldr	r3, [pc, #188]	@ (80021b4 <MX_TIM17_Init+0xec>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fa:	4b2e      	ldr	r3, [pc, #184]	@ (80021b4 <MX_TIM17_Init+0xec>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002100:	4b2c      	ldr	r3, [pc, #176]	@ (80021b4 <MX_TIM17_Init+0xec>)
 8002102:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002106:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002108:	4b2a      	ldr	r3, [pc, #168]	@ (80021b4 <MX_TIM17_Init+0xec>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800210e:	4b29      	ldr	r3, [pc, #164]	@ (80021b4 <MX_TIM17_Init+0xec>)
 8002110:	2200      	movs	r2, #0
 8002112:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002114:	4b27      	ldr	r3, [pc, #156]	@ (80021b4 <MX_TIM17_Init+0xec>)
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800211a:	4826      	ldr	r0, [pc, #152]	@ (80021b4 <MX_TIM17_Init+0xec>)
 800211c:	f00a fbb0 	bl	800c880 <HAL_TIM_Base_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002126:	f000 faef 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800212a:	4822      	ldr	r0, [pc, #136]	@ (80021b4 <MX_TIM17_Init+0xec>)
 800212c:	f00a fc86 	bl	800ca3c <HAL_TIM_PWM_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002136:	f000 fae7 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800213a:	2360      	movs	r3, #96	@ 0x60
 800213c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002142:	2300      	movs	r3, #0
 8002144:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002146:	2300      	movs	r3, #0
 8002148:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002156:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800215a:	2200      	movs	r2, #0
 800215c:	4619      	mov	r1, r3
 800215e:	4815      	ldr	r0, [pc, #84]	@ (80021b4 <MX_TIM17_Init+0xec>)
 8002160:	f00b f868 	bl	800d234 <HAL_TIM_PWM_ConfigChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800216a:	f000 facd 	bl	8002708 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002182:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002186:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002190:	463b      	mov	r3, r7
 8002192:	4619      	mov	r1, r3
 8002194:	4807      	ldr	r0, [pc, #28]	@ (80021b4 <MX_TIM17_Init+0xec>)
 8002196:	f00b fdcd 	bl	800dd34 <HAL_TIMEx_ConfigBreakDeadTime>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80021a0:	f000 fab2 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80021a4:	4803      	ldr	r0, [pc, #12]	@ (80021b4 <MX_TIM17_Init+0xec>)
 80021a6:	f001 f841 	bl	800322c <HAL_TIM_MspPostInit>

}
 80021aa:	bf00      	nop
 80021ac:	3750      	adds	r7, #80	@ 0x50
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2400088c 	.word	0x2400088c
 80021b8:	40014800 	.word	0x40014800

080021bc <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	@ 0x30
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	2224      	movs	r2, #36	@ 0x24
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f011 faa4 	bl	8013718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d0:	463b      	mov	r3, r7
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80021da:	4b21      	ldr	r3, [pc, #132]	@ (8002260 <MX_TIM23_Init+0xa4>)
 80021dc:	4a21      	ldr	r2, [pc, #132]	@ (8002264 <MX_TIM23_Init+0xa8>)
 80021de:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80021e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <MX_TIM23_Init+0xa4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002260 <MX_TIM23_Init+0xa4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80021ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002260 <MX_TIM23_Init+0xa4>)
 80021ee:	f04f 32ff 	mov.w	r2, #4294967295
 80021f2:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <MX_TIM23_Init+0xa4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fa:	4b19      	ldr	r3, [pc, #100]	@ (8002260 <MX_TIM23_Init+0xa4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002200:	2303      	movs	r3, #3
 8002202:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002208:	2301      	movs	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002218:	2301      	movs	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	4619      	mov	r1, r3
 800222a:	480d      	ldr	r0, [pc, #52]	@ (8002260 <MX_TIM23_Init+0xa4>)
 800222c:	f00a fdc6 	bl	800cdbc <HAL_TIM_Encoder_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8002236:	f000 fa67 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002242:	463b      	mov	r3, r7
 8002244:	4619      	mov	r1, r3
 8002246:	4806      	ldr	r0, [pc, #24]	@ (8002260 <MX_TIM23_Init+0xa4>)
 8002248:	f00b fcd8 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8002252:	f000 fa59 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	3730      	adds	r7, #48	@ 0x30
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	240008d8 	.word	0x240008d8
 8002264:	4000e000 	.word	0x4000e000

08002268 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	@ 0x30
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	2224      	movs	r2, #36	@ 0x24
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f011 fa4e 	bl	8013718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	463b      	mov	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8002286:	4b21      	ldr	r3, [pc, #132]	@ (800230c <MX_TIM24_Init+0xa4>)
 8002288:	4a21      	ldr	r2, [pc, #132]	@ (8002310 <MX_TIM24_Init+0xa8>)
 800228a:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 800228c:	4b1f      	ldr	r3, [pc, #124]	@ (800230c <MX_TIM24_Init+0xa4>)
 800228e:	2200      	movs	r2, #0
 8002290:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002292:	4b1e      	ldr	r3, [pc, #120]	@ (800230c <MX_TIM24_Init+0xa4>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8002298:	4b1c      	ldr	r3, [pc, #112]	@ (800230c <MX_TIM24_Init+0xa4>)
 800229a:	f04f 32ff 	mov.w	r2, #4294967295
 800229e:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	4b1a      	ldr	r3, [pc, #104]	@ (800230c <MX_TIM24_Init+0xa4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a6:	4b19      	ldr	r3, [pc, #100]	@ (800230c <MX_TIM24_Init+0xa4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022ac:	2303      	movs	r3, #3
 80022ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022b4:	2301      	movs	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022c4:	2301      	movs	r3, #1
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	4619      	mov	r1, r3
 80022d6:	480d      	ldr	r0, [pc, #52]	@ (800230c <MX_TIM24_Init+0xa4>)
 80022d8:	f00a fd70 	bl	800cdbc <HAL_TIM_Encoder_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 80022e2:	f000 fa11 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80022ee:	463b      	mov	r3, r7
 80022f0:	4619      	mov	r1, r3
 80022f2:	4806      	ldr	r0, [pc, #24]	@ (800230c <MX_TIM24_Init+0xa4>)
 80022f4:	f00b fc82 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 80022fe:	f000 fa03 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	3730      	adds	r7, #48	@ 0x30
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	24000924 	.word	0x24000924
 8002310:	4000e400 	.word	0x4000e400

08002314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002318:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 800231a:	4a23      	ldr	r2, [pc, #140]	@ (80023a8 <MX_USART1_UART_Init+0x94>)
 800231c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800231e:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 8002320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002326:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800232c:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002332:	4b1c      	ldr	r3, [pc, #112]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002338:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 800233a:	220c      	movs	r2, #12
 800233c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233e:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002344:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800234a:	4b16      	ldr	r3, [pc, #88]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002350:	4b14      	ldr	r3, [pc, #80]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002356:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 8002358:	2200      	movs	r2, #0
 800235a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800235c:	4811      	ldr	r0, [pc, #68]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 800235e:	f00b fd93 	bl	800de88 <HAL_UART_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002368:	f000 f9ce 	bl	8002708 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800236c:	2100      	movs	r1, #0
 800236e:	480d      	ldr	r0, [pc, #52]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 8002370:	f00d fc53 	bl	800fc1a <HAL_UARTEx_SetTxFifoThreshold>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800237a:	f000 f9c5 	bl	8002708 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800237e:	2100      	movs	r1, #0
 8002380:	4808      	ldr	r0, [pc, #32]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 8002382:	f00d fc88 	bl	800fc96 <HAL_UARTEx_SetRxFifoThreshold>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800238c:	f000 f9bc 	bl	8002708 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002390:	4804      	ldr	r0, [pc, #16]	@ (80023a4 <MX_USART1_UART_Init+0x90>)
 8002392:	f00d fc09 	bl	800fba8 <HAL_UARTEx_DisableFifoMode>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800239c:	f000 f9b4 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	24000970 	.word	0x24000970
 80023a8:	40011000 	.word	0x40011000

080023ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023b0:	4b22      	ldr	r3, [pc, #136]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023b2:	4a23      	ldr	r2, [pc, #140]	@ (8002440 <MX_USART3_UART_Init+0x94>)
 80023b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023b6:	4b21      	ldr	r3, [pc, #132]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023be:	4b1f      	ldr	r3, [pc, #124]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ca:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023d2:	220c      	movs	r2, #12
 80023d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d6:	4b19      	ldr	r3, [pc, #100]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023dc:	4b17      	ldr	r3, [pc, #92]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023e2:	4b16      	ldr	r3, [pc, #88]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023e8:	4b14      	ldr	r3, [pc, #80]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ee:	4b13      	ldr	r3, [pc, #76]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023f4:	4811      	ldr	r0, [pc, #68]	@ (800243c <MX_USART3_UART_Init+0x90>)
 80023f6:	f00b fd47 	bl	800de88 <HAL_UART_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002400:	f000 f982 	bl	8002708 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002404:	2100      	movs	r1, #0
 8002406:	480d      	ldr	r0, [pc, #52]	@ (800243c <MX_USART3_UART_Init+0x90>)
 8002408:	f00d fc07 	bl	800fc1a <HAL_UARTEx_SetTxFifoThreshold>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002412:	f000 f979 	bl	8002708 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002416:	2100      	movs	r1, #0
 8002418:	4808      	ldr	r0, [pc, #32]	@ (800243c <MX_USART3_UART_Init+0x90>)
 800241a:	f00d fc3c 	bl	800fc96 <HAL_UARTEx_SetRxFifoThreshold>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002424:	f000 f970 	bl	8002708 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002428:	4804      	ldr	r0, [pc, #16]	@ (800243c <MX_USART3_UART_Init+0x90>)
 800242a:	f00d fbbd 	bl	800fba8 <HAL_UARTEx_DisableFifoMode>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002434:	f000 f968 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	24000a04 	.word	0x24000a04
 8002440:	40004800 	.word	0x40004800

08002444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800244a:	4b21      	ldr	r3, [pc, #132]	@ (80024d0 <MX_DMA_Init+0x8c>)
 800244c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002450:	4a1f      	ldr	r2, [pc, #124]	@ (80024d0 <MX_DMA_Init+0x8c>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800245a:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <MX_DMA_Init+0x8c>)
 800245c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	200b      	movs	r0, #11
 800246e:	f003 fd1e 	bl	8005eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002472:	200b      	movs	r0, #11
 8002474:	f003 fd35 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002478:	2200      	movs	r2, #0
 800247a:	2100      	movs	r1, #0
 800247c:	200c      	movs	r0, #12
 800247e:	f003 fd16 	bl	8005eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002482:	200c      	movs	r0, #12
 8002484:	f003 fd2d 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	200d      	movs	r0, #13
 800248e:	f003 fd0e 	bl	8005eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002492:	200d      	movs	r0, #13
 8002494:	f003 fd25 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	200e      	movs	r0, #14
 800249e:	f003 fd06 	bl	8005eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80024a2:	200e      	movs	r0, #14
 80024a4:	f003 fd1d 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2100      	movs	r1, #0
 80024ac:	200f      	movs	r0, #15
 80024ae:	f003 fcfe 	bl	8005eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80024b2:	200f      	movs	r0, #15
 80024b4:	f003 fd15 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2100      	movs	r1, #0
 80024bc:	2010      	movs	r0, #16
 80024be:	f003 fcf6 	bl	8005eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80024c2:	2010      	movs	r0, #16
 80024c4:	f003 fd0d 	bl	8005ee2 <HAL_NVIC_EnableIRQ>

}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	58024400 	.word	0x58024400

080024d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08e      	sub	sp, #56	@ 0x38
 80024d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ea:	4b80      	ldr	r3, [pc, #512]	@ (80026ec <MX_GPIO_Init+0x218>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f0:	4a7e      	ldr	r2, [pc, #504]	@ (80026ec <MX_GPIO_Init+0x218>)
 80024f2:	f043 0310 	orr.w	r3, r3, #16
 80024f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024fa:	4b7c      	ldr	r3, [pc, #496]	@ (80026ec <MX_GPIO_Init+0x218>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	623b      	str	r3, [r7, #32]
 8002506:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002508:	4b78      	ldr	r3, [pc, #480]	@ (80026ec <MX_GPIO_Init+0x218>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250e:	4a77      	ldr	r2, [pc, #476]	@ (80026ec <MX_GPIO_Init+0x218>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002518:	4b74      	ldr	r3, [pc, #464]	@ (80026ec <MX_GPIO_Init+0x218>)
 800251a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002526:	4b71      	ldr	r3, [pc, #452]	@ (80026ec <MX_GPIO_Init+0x218>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252c:	4a6f      	ldr	r2, [pc, #444]	@ (80026ec <MX_GPIO_Init+0x218>)
 800252e:	f043 0320 	orr.w	r3, r3, #32
 8002532:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002536:	4b6d      	ldr	r3, [pc, #436]	@ (80026ec <MX_GPIO_Init+0x218>)
 8002538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002544:	4b69      	ldr	r3, [pc, #420]	@ (80026ec <MX_GPIO_Init+0x218>)
 8002546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800254a:	4a68      	ldr	r2, [pc, #416]	@ (80026ec <MX_GPIO_Init+0x218>)
 800254c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002550:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002554:	4b65      	ldr	r3, [pc, #404]	@ (80026ec <MX_GPIO_Init+0x218>)
 8002556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800255a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	4b62      	ldr	r3, [pc, #392]	@ (80026ec <MX_GPIO_Init+0x218>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002568:	4a60      	ldr	r2, [pc, #384]	@ (80026ec <MX_GPIO_Init+0x218>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002572:	4b5e      	ldr	r3, [pc, #376]	@ (80026ec <MX_GPIO_Init+0x218>)
 8002574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	4b5a      	ldr	r3, [pc, #360]	@ (80026ec <MX_GPIO_Init+0x218>)
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002586:	4a59      	ldr	r2, [pc, #356]	@ (80026ec <MX_GPIO_Init+0x218>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002590:	4b56      	ldr	r3, [pc, #344]	@ (80026ec <MX_GPIO_Init+0x218>)
 8002592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800259e:	4b53      	ldr	r3, [pc, #332]	@ (80026ec <MX_GPIO_Init+0x218>)
 80025a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a4:	4a51      	ldr	r2, [pc, #324]	@ (80026ec <MX_GPIO_Init+0x218>)
 80025a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025ae:	4b4f      	ldr	r3, [pc, #316]	@ (80026ec <MX_GPIO_Init+0x218>)
 80025b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025bc:	4b4b      	ldr	r3, [pc, #300]	@ (80026ec <MX_GPIO_Init+0x218>)
 80025be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c2:	4a4a      	ldr	r2, [pc, #296]	@ (80026ec <MX_GPIO_Init+0x218>)
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025cc:	4b47      	ldr	r3, [pc, #284]	@ (80026ec <MX_GPIO_Init+0x218>)
 80025ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80025da:	2200      	movs	r2, #0
 80025dc:	f64c 71fe 	movw	r1, #53246	@ 0xcffe
 80025e0:	4843      	ldr	r0, [pc, #268]	@ (80026f0 <MX_GPIO_Init+0x21c>)
 80025e2:	f006 fc79 	bl	8008ed8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 80025e6:	2200      	movs	r2, #0
 80025e8:	f64c 611e 	movw	r1, #52766	@ 0xce1e
 80025ec:	4841      	ldr	r0, [pc, #260]	@ (80026f4 <MX_GPIO_Init+0x220>)
 80025ee:	f006 fc73 	bl	8008ed8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80025f2:	2200      	movs	r2, #0
 80025f4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80025f8:	483f      	ldr	r0, [pc, #252]	@ (80026f8 <MX_GPIO_Init+0x224>)
 80025fa:	f006 fc6d 	bl	8008ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 80025fe:	f243 0306 	movw	r3, #12294	@ 0x3006
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002604:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002608:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002612:	4619      	mov	r1, r3
 8002614:	4839      	ldr	r0, [pc, #228]	@ (80026fc <MX_GPIO_Init+0x228>)
 8002616:	f006 fab7 	bl	8008b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800261a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002620:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002624:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800262a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800262e:	4619      	mov	r1, r3
 8002630:	4833      	ldr	r0, [pc, #204]	@ (8002700 <MX_GPIO_Init+0x22c>)
 8002632:	f006 faa9 	bl	8008b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002636:	2301      	movs	r3, #1
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800263a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002648:	4619      	mov	r1, r3
 800264a:	4829      	ldr	r0, [pc, #164]	@ (80026f0 <MX_GPIO_Init+0x21c>)
 800264c:	f006 fa9c 	bl	8008b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG6 PG7 PG8
                           PG9 PG10 PG11 PG14
                           PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002650:	f64c 73fe 	movw	r3, #53246	@ 0xcffe
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	2301      	movs	r3, #1
 8002658:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002666:	4619      	mov	r1, r3
 8002668:	4821      	ldr	r0, [pc, #132]	@ (80026f0 <MX_GPIO_Init+0x21c>)
 800266a:	f006 fa8d 	bl	8008b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 800266e:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002674:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002678:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800267e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002682:	4619      	mov	r1, r3
 8002684:	481f      	ldr	r0, [pc, #124]	@ (8002704 <MX_GPIO_Init+0x230>)
 8002686:	f006 fa7f 	bl	8008b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800268a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002690:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002694:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800269a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800269e:	4619      	mov	r1, r3
 80026a0:	4814      	ldr	r0, [pc, #80]	@ (80026f4 <MX_GPIO_Init+0x220>)
 80026a2:	f006 fa71 	bl	8008b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD14
                           PD15 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 80026a6:	f64c 631e 	movw	r3, #52766	@ 0xce1e
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ac:	2301      	movs	r3, #1
 80026ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026bc:	4619      	mov	r1, r3
 80026be:	480d      	ldr	r0, [pc, #52]	@ (80026f4 <MX_GPIO_Init+0x220>)
 80026c0:	f006 fa62 	bl	8008b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ca:	2301      	movs	r3, #1
 80026cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026da:	4619      	mov	r1, r3
 80026dc:	4806      	ldr	r0, [pc, #24]	@ (80026f8 <MX_GPIO_Init+0x224>)
 80026de:	f006 fa53 	bl	8008b88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80026e2:	bf00      	nop
 80026e4:	3738      	adds	r7, #56	@ 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	58024400 	.word	0x58024400
 80026f0:	58021800 	.word	0x58021800
 80026f4:	58020c00 	.word	0x58020c00
 80026f8:	58020800 	.word	0x58020800
 80026fc:	58020400 	.word	0x58020400
 8002700:	58021400 	.word	0x58021400
 8002704:	58021000 	.word	0x58021000

08002708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800270c:	b672      	cpsid	i
}
 800270e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <Error_Handler+0x8>

08002714 <_Z5setupv>:
//  }
//}



void setup(){
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	//ros_setup();
	//path_setup();
//	ROS1::init();
	HAL_TIM_Base_Start_IT(&htim7);
 8002718:	4807      	ldr	r0, [pc, #28]	@ (8002738 <_Z5setupv+0x24>)
 800271a:	f00a f909 	bl	800c930 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 800271e:	4807      	ldr	r0, [pc, #28]	@ (800273c <_Z5setupv+0x28>)
 8002720:	f00a f906 	bl	800c930 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8002724:	4806      	ldr	r0, [pc, #24]	@ (8002740 <_Z5setupv+0x2c>)
 8002726:	f00a f903 	bl	800c930 <HAL_TIM_Base_Start_IT>
	chassis_setup();
 800272a:	f7fe f9eb 	bl	8000b04 <_Z13chassis_setupv>
	//lifter_setup();
	path_setup();
 800272e:	f010 fc1f 	bl	8012f70 <_Z10path_setupv>
//	ros_setup();

}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	240006c4 	.word	0x240006c4
 800273c:	24000678 	.word	0x24000678
 8002740:	240007a8 	.word	0x240007a8

08002744 <main_function>:
{
	//ros_loop();
}


void main_function(){
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	//path_setup();
	setup();
 8002748:	f7ff ffe4 	bl	8002714 <_Z5setupv>

	while(1){
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <main_function+0x8>

08002750 <HAL_TIM_PeriodElapsedCallback>:
}




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

	if (htim -> Instance == TIM6){
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a15      	ldr	r2, [pc, #84]	@ (80027b4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d11a      	bne.n	8002798 <HAL_TIM_PeriodElapsedCallback+0x48>
//		chassis_move();
		path(path_dir);
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f010 fde8 	bl	801333c <_Z4pathi>
		////ROS1::spinCycle();
		//path(path_dir);
		chassis_update_speed(cmd_v_x,cmd_v_y,cmd_v_w);
 800276c:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002774:	ed93 7a00 	vldr	s14, [r3]
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800277a:	edd3 6a00 	vldr	s13, [r3]
 800277e:	eeb0 1a66 	vmov.f32	s2, s13
 8002782:	eef0 0a47 	vmov.f32	s1, s14
 8002786:	eeb0 0a67 	vmov.f32	s0, s15
 800278a:	f7fe fc01 	bl	8000f90 <_Z20chassis_update_speedfff>
		//move_mode();
		ms++;
 800278e:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	4a0c      	ldr	r2, [pc, #48]	@ (80027c8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002796:	6013      	str	r3, [r2, #0]
		}
	if (htim -> Instance == TIM13){
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0b      	ldr	r2, [pc, #44]	@ (80027cc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d104      	bne.n	80027ac <HAL_TIM_PeriodElapsedCallback+0x5c>
	   // path();
//		lifter_measuredistance();
	    test++;
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	4a09      	ldr	r2, [pc, #36]	@ (80027d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80027aa:	6013      	str	r3, [r2, #0]
	    }
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40001000 	.word	0x40001000
 80027b8:	240037ac 	.word	0x240037ac
 80027bc:	240037b0 	.word	0x240037b0
 80027c0:	240037b4 	.word	0x240037b4
 80027c4:	240037b8 	.word	0x240037b8
 80027c8:	24000c78 	.word	0x24000c78
 80027cc:	40001c00 	.word	0x40001c00
 80027d0:	24000014 	.word	0x24000014

080027d4 <HAL_ADC_ConvCpltCallback>:

int adc1 = 0,adc3 = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	if (hadc -> Instance == ADC1){
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002810 <HAL_ADC_ConvCpltCallback+0x3c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d104      	bne.n	80027f0 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1++;
 80027e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <HAL_ADC_ConvCpltCallback+0x40>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	4a09      	ldr	r2, [pc, #36]	@ (8002814 <HAL_ADC_ConvCpltCallback+0x40>)
 80027ee:	6013      	str	r3, [r2, #0]
	}
	if (hadc -> Instance == ADC3){
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a08      	ldr	r2, [pc, #32]	@ (8002818 <HAL_ADC_ConvCpltCallback+0x44>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d104      	bne.n	8002804 <HAL_ADC_ConvCpltCallback+0x30>
		adc3++;
 80027fa:	4b08      	ldr	r3, [pc, #32]	@ (800281c <HAL_ADC_ConvCpltCallback+0x48>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	4a06      	ldr	r2, [pc, #24]	@ (800281c <HAL_ADC_ConvCpltCallback+0x48>)
 8002802:	6013      	str	r3, [r2, #0]
	}
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40022000 	.word	0x40022000
 8002814:	24000c7c 	.word	0x24000c7c
 8002818:	58026000 	.word	0x58026000
 800281c:	24000c80 	.word	0x24000c80

08002820 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <HAL_MspInit+0x3c>)
 8002828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800282c:	4a0b      	ldr	r2, [pc, #44]	@ (800285c <HAL_MspInit+0x3c>)
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002836:	4b09      	ldr	r3, [pc, #36]	@ (800285c <HAL_MspInit+0x3c>)
 8002838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	2005      	movs	r0, #5
 800284a:	f003 fb30 	bl	8005eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800284e:	2005      	movs	r0, #5
 8002850:	f003 fb47 	bl	8005ee2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	58024400 	.word	0x58024400

08002860 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b090      	sub	sp, #64	@ 0x40
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4aaf      	ldr	r2, [pc, #700]	@ (8002b3c <HAL_ADC_MspInit+0x2dc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	f040 8087 	bne.w	8002992 <HAL_ADC_MspInit+0x132>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002884:	4bae      	ldr	r3, [pc, #696]	@ (8002b40 <HAL_ADC_MspInit+0x2e0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	4aad      	ldr	r2, [pc, #692]	@ (8002b40 <HAL_ADC_MspInit+0x2e0>)
 800288c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800288e:	4bac      	ldr	r3, [pc, #688]	@ (8002b40 <HAL_ADC_MspInit+0x2e0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d10e      	bne.n	80028b4 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002896:	4bab      	ldr	r3, [pc, #684]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 8002898:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800289c:	4aa9      	ldr	r2, [pc, #676]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 800289e:	f043 0320 	orr.w	r3, r3, #32
 80028a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80028a6:	4ba7      	ldr	r3, [pc, #668]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80028a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b4:	4ba3      	ldr	r3, [pc, #652]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80028b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ba:	4aa2      	ldr	r2, [pc, #648]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028c4:	4b9f      	ldr	r3, [pc, #636]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80028c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d2:	4b9c      	ldr	r3, [pc, #624]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80028d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d8:	4a9a      	ldr	r2, [pc, #616]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028e2:	4b98      	ldr	r3, [pc, #608]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80028e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	623b      	str	r3, [r7, #32]
 80028ee:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028f0:	2310      	movs	r3, #16
 80028f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028f4:	2303      	movs	r3, #3
 80028f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002900:	4619      	mov	r1, r3
 8002902:	4891      	ldr	r0, [pc, #580]	@ (8002b48 <HAL_ADC_MspInit+0x2e8>)
 8002904:	f006 f940 	bl	8008b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002908:	2330      	movs	r3, #48	@ 0x30
 800290a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800290c:	2303      	movs	r3, #3
 800290e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002918:	4619      	mov	r1, r3
 800291a:	488c      	ldr	r0, [pc, #560]	@ (8002b4c <HAL_ADC_MspInit+0x2ec>)
 800291c:	f006 f934 	bl	8008b88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002920:	4b8b      	ldr	r3, [pc, #556]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 8002922:	4a8c      	ldr	r2, [pc, #560]	@ (8002b54 <HAL_ADC_MspInit+0x2f4>)
 8002924:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002926:	4b8a      	ldr	r3, [pc, #552]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 8002928:	2209      	movs	r2, #9
 800292a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800292c:	4b88      	ldr	r3, [pc, #544]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002932:	4b87      	ldr	r3, [pc, #540]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 8002934:	2200      	movs	r2, #0
 8002936:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002938:	4b85      	ldr	r3, [pc, #532]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 800293a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800293e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002940:	4b83      	ldr	r3, [pc, #524]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 8002942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002946:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002948:	4b81      	ldr	r3, [pc, #516]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 800294a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800294e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002950:	4b7f      	ldr	r3, [pc, #508]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 8002952:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002956:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002958:	4b7d      	ldr	r3, [pc, #500]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 800295a:	2200      	movs	r2, #0
 800295c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800295e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 8002960:	2200      	movs	r2, #0
 8002962:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002964:	487a      	ldr	r0, [pc, #488]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 8002966:	f003 fad7 	bl	8005f18 <HAL_DMA_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8002970:	f7ff feca 	bl	8002708 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a76      	ldr	r2, [pc, #472]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 8002978:	659a      	str	r2, [r3, #88]	@ 0x58
 800297a:	4a75      	ldr	r2, [pc, #468]	@ (8002b50 <HAL_ADC_MspInit+0x2f0>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002980:	2200      	movs	r2, #0
 8002982:	2100      	movs	r1, #0
 8002984:	2012      	movs	r0, #18
 8002986:	f003 fa92 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800298a:	2012      	movs	r0, #18
 800298c:	f003 faa9 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002990:	e0d0      	b.n	8002b34 <HAL_ADC_MspInit+0x2d4>
  else if(hadc->Instance==ADC2)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a70      	ldr	r2, [pc, #448]	@ (8002b58 <HAL_ADC_MspInit+0x2f8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d13b      	bne.n	8002a14 <HAL_ADC_MspInit+0x1b4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800299c:	4b68      	ldr	r3, [pc, #416]	@ (8002b40 <HAL_ADC_MspInit+0x2e0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	4a67      	ldr	r2, [pc, #412]	@ (8002b40 <HAL_ADC_MspInit+0x2e0>)
 80029a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80029a6:	4b66      	ldr	r3, [pc, #408]	@ (8002b40 <HAL_ADC_MspInit+0x2e0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10e      	bne.n	80029cc <HAL_ADC_MspInit+0x16c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80029ae:	4b65      	ldr	r3, [pc, #404]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80029b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80029b4:	4a63      	ldr	r2, [pc, #396]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80029b6:	f043 0320 	orr.w	r3, r3, #32
 80029ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80029be:	4b61      	ldr	r3, [pc, #388]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80029c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029dc:	4b59      	ldr	r3, [pc, #356]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 80029de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029ea:	2340      	movs	r3, #64	@ 0x40
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ee:	2303      	movs	r3, #3
 80029f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029fa:	4619      	mov	r1, r3
 80029fc:	4852      	ldr	r0, [pc, #328]	@ (8002b48 <HAL_ADC_MspInit+0x2e8>)
 80029fe:	f006 f8c3 	bl	8008b88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	2012      	movs	r0, #18
 8002a08:	f003 fa51 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a0c:	2012      	movs	r0, #18
 8002a0e:	f003 fa68 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
}
 8002a12:	e08f      	b.n	8002b34 <HAL_ADC_MspInit+0x2d4>
  else if(hadc->Instance==ADC3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a50      	ldr	r2, [pc, #320]	@ (8002b5c <HAL_ADC_MspInit+0x2fc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	f040 808a 	bne.w	8002b34 <HAL_ADC_MspInit+0x2d4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a20:	4b48      	ldr	r3, [pc, #288]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 8002a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a26:	4a47      	ldr	r2, [pc, #284]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 8002a28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a30:	4b44      	ldr	r3, [pc, #272]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 8002a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a3e:	4b41      	ldr	r3, [pc, #260]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 8002a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a44:	4a3f      	ldr	r2, [pc, #252]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 8002a46:	f043 0320 	orr.w	r3, r3, #32
 8002a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 8002a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5c:	4b39      	ldr	r3, [pc, #228]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 8002a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a62:	4a38      	ldr	r2, [pc, #224]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a6c:	4b35      	ldr	r3, [pc, #212]	@ (8002b44 <HAL_ADC_MspInit+0x2e4>)
 8002a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002a7a:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8002a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a80:	2303      	movs	r3, #3
 8002a82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4834      	ldr	r0, [pc, #208]	@ (8002b60 <HAL_ADC_MspInit+0x300>)
 8002a90:	f006 f87a 	bl	8008b88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a94:	2303      	movs	r3, #3
 8002a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4829      	ldr	r0, [pc, #164]	@ (8002b4c <HAL_ADC_MspInit+0x2ec>)
 8002aa8:	f006 f86e 	bl	8008b88 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002aac:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002ab0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002ab4:	f001 f88e 	bl	8003bd4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002ab8:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002abc:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002ac0:	f001 f888 	bl	8003bd4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream5;
 8002ac4:	4b27      	ldr	r3, [pc, #156]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002ac6:	4a28      	ldr	r2, [pc, #160]	@ (8002b68 <HAL_ADC_MspInit+0x308>)
 8002ac8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002aca:	4b26      	ldr	r3, [pc, #152]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002acc:	2273      	movs	r2, #115	@ 0x73
 8002ace:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ad0:	4b24      	ldr	r3, [pc, #144]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ad6:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002adc:	4b21      	ldr	r3, [pc, #132]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002ade:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ae2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002ae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002aea:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002aee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002af6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002afa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b02:	4b18      	ldr	r3, [pc, #96]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002b08:	4816      	ldr	r0, [pc, #88]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002b0a:	f003 fa05 	bl	8005f18 <HAL_DMA_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_ADC_MspInit+0x2b8>
      Error_Handler();
 8002b14:	f7ff fdf8 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a12      	ldr	r2, [pc, #72]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002b1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b1e:	4a11      	ldr	r2, [pc, #68]	@ (8002b64 <HAL_ADC_MspInit+0x304>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 1, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2101      	movs	r1, #1
 8002b28:	207f      	movs	r0, #127	@ 0x7f
 8002b2a:	f003 f9c0 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002b2e:	207f      	movs	r0, #127	@ 0x7f
 8002b30:	f003 f9d7 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
}
 8002b34:	bf00      	nop
 8002b36:	3740      	adds	r7, #64	@ 0x40
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	24000c84 	.word	0x24000c84
 8002b44:	58024400 	.word	0x58024400
 8002b48:	58020000 	.word	0x58020000
 8002b4c:	58020800 	.word	0x58020800
 8002b50:	24000364 	.word	0x24000364
 8002b54:	40020010 	.word	0x40020010
 8002b58:	40022100 	.word	0x40022100
 8002b5c:	58026000 	.word	0x58026000
 8002b60:	58021400 	.word	0x58021400
 8002b64:	240003dc 	.word	0x240003dc
 8002b68:	40020088 	.word	0x40020088

08002b6c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0ba      	sub	sp, #232	@ 0xe8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b84:	f107 0318 	add.w	r3, r7, #24
 8002b88:	22b8      	movs	r2, #184	@ 0xb8
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f010 fdc3 	bl	8013718 <memset>
  if(hi2c->Instance==I2C1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a4c      	ldr	r2, [pc, #304]	@ (8002cc8 <HAL_I2C_MspInit+0x15c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d146      	bne.n	8002c2a <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b9c:	f04f 0208 	mov.w	r2, #8
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bae:	f107 0318 	add.w	r3, r7, #24
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f007 fa7e 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002bbe:	f7ff fda3 	bl	8002708 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc2:	4b42      	ldr	r3, [pc, #264]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bc8:	4a40      	ldr	r2, [pc, #256]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002be0:	23c0      	movs	r3, #192	@ 0xc0
 8002be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be6:	2312      	movs	r3, #18
 8002be8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c02:	4619      	mov	r1, r3
 8002c04:	4832      	ldr	r0, [pc, #200]	@ (8002cd0 <HAL_I2C_MspInit+0x164>)
 8002c06:	f005 ffbf 	bl	8008b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c0a:	4b30      	ldr	r3, [pc, #192]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c10:	4a2e      	ldr	r2, [pc, #184]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002c12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c28:	e04a      	b.n	8002cc0 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a29      	ldr	r2, [pc, #164]	@ (8002cd4 <HAL_I2C_MspInit+0x168>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d145      	bne.n	8002cc0 <HAL_I2C_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c34:	f04f 0208 	mov.w	r2, #8
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c46:	f107 0318 	add.w	r3, r7, #24
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f007 fa32 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8002c56:	f7ff fd57 	bl	8002708 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c60:	4a1a      	ldr	r2, [pc, #104]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002c62:	f043 0320 	orr.w	r3, r3, #32
 8002c66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c7e:	2312      	movs	r3, #18
 8002c80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c90:	2304      	movs	r3, #4
 8002c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	480e      	ldr	r0, [pc, #56]	@ (8002cd8 <HAL_I2C_MspInit+0x16c>)
 8002c9e:	f005 ff73 	bl	8008b88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ca8:	4a08      	ldr	r2, [pc, #32]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002caa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_I2C_MspInit+0x160>)
 8002cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	37e8      	adds	r7, #232	@ 0xe8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40005400 	.word	0x40005400
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	58020400 	.word	0x58020400
 8002cd4:	40005800 	.word	0x40005800
 8002cd8:	58021400 	.word	0x58021400

08002cdc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b096      	sub	sp, #88	@ 0x58
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4aaf      	ldr	r2, [pc, #700]	@ (8002fb8 <HAL_TIM_Encoder_MspInit+0x2dc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d12f      	bne.n	8002d5e <HAL_TIM_Encoder_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cfe:	4baf      	ldr	r3, [pc, #700]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d04:	4aad      	ldr	r2, [pc, #692]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d0e:	4bab      	ldr	r3, [pc, #684]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d1c:	4ba7      	ldr	r3, [pc, #668]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d22:	4aa6      	ldr	r2, [pc, #664]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d24:	f043 0310 	orr.w	r3, r3, #16
 8002d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d2c:	4ba3      	ldr	r3, [pc, #652]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002d3a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002d3e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d50:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002d54:	4619      	mov	r1, r3
 8002d56:	489a      	ldr	r0, [pc, #616]	@ (8002fc0 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d58:	f005 ff16 	bl	8008b88 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM24_MspInit 1 */

    /* USER CODE END TIM24_MspInit 1 */
  }

}
 8002d5c:	e178      	b.n	8003050 <HAL_TIM_Encoder_MspInit+0x374>
  else if(htim_encoder->Instance==TIM2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d66:	d14d      	bne.n	8002e04 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d68:	4b94      	ldr	r3, [pc, #592]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d6e:	4a93      	ldr	r2, [pc, #588]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d78:	4b90      	ldr	r3, [pc, #576]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	4b8d      	ldr	r3, [pc, #564]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d8c:	4a8b      	ldr	r2, [pc, #556]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d96:	4b89      	ldr	r3, [pc, #548]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da4:	4b85      	ldr	r3, [pc, #532]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002daa:	4a84      	ldr	r2, [pc, #528]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002db4:	4b81      	ldr	r3, [pc, #516]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4879      	ldr	r0, [pc, #484]	@ (8002fc4 <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002dde:	f005 fed3 	bl	8008b88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002de2:	2308      	movs	r3, #8
 8002de4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dee:	2300      	movs	r3, #0
 8002df0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002df2:	2301      	movs	r3, #1
 8002df4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4872      	ldr	r0, [pc, #456]	@ (8002fc8 <HAL_TIM_Encoder_MspInit+0x2ec>)
 8002dfe:	f005 fec3 	bl	8008b88 <HAL_GPIO_Init>
}
 8002e02:	e125      	b.n	8003050 <HAL_TIM_Encoder_MspInit+0x374>
  else if(htim_encoder->Instance==TIM3)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a70      	ldr	r2, [pc, #448]	@ (8002fcc <HAL_TIM_Encoder_MspInit+0x2f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d12e      	bne.n	8002e6c <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e0e:	4b6b      	ldr	r3, [pc, #428]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e14:	4a69      	ldr	r2, [pc, #420]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e16:	f043 0302 	orr.w	r3, r3, #2
 8002e1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e1e:	4b67      	ldr	r3, [pc, #412]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2c:	4b63      	ldr	r3, [pc, #396]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e32:	4a62      	ldr	r2, [pc, #392]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e3c:	4b5f      	ldr	r3, [pc, #380]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e4a:	2330      	movs	r3, #48	@ 0x30
 8002e4c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002e62:	4619      	mov	r1, r3
 8002e64:	4858      	ldr	r0, [pc, #352]	@ (8002fc8 <HAL_TIM_Encoder_MspInit+0x2ec>)
 8002e66:	f005 fe8f 	bl	8008b88 <HAL_GPIO_Init>
}
 8002e6a:	e0f1      	b.n	8003050 <HAL_TIM_Encoder_MspInit+0x374>
  else if(htim_encoder->Instance==TIM4)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a57      	ldr	r2, [pc, #348]	@ (8002fd0 <HAL_TIM_Encoder_MspInit+0x2f4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d12f      	bne.n	8002ed6 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e76:	4b51      	ldr	r3, [pc, #324]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e86:	4b4d      	ldr	r3, [pc, #308]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e94:	4b49      	ldr	r3, [pc, #292]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e9a:	4a48      	ldr	r2, [pc, #288]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ea4:	4b45      	ldr	r3, [pc, #276]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	623b      	str	r3, [r7, #32]
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002eb2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002eb6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4841      	ldr	r0, [pc, #260]	@ (8002fd4 <HAL_TIM_Encoder_MspInit+0x2f8>)
 8002ed0:	f005 fe5a 	bl	8008b88 <HAL_GPIO_Init>
}
 8002ed4:	e0bc      	b.n	8003050 <HAL_TIM_Encoder_MspInit+0x374>
  else if(htim_encoder->Instance==TIM8)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a3f      	ldr	r2, [pc, #252]	@ (8002fd8 <HAL_TIM_Encoder_MspInit+0x2fc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d136      	bne.n	8002f4e <HAL_TIM_Encoder_MspInit+0x272>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ee0:	4b36      	ldr	r3, [pc, #216]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002ee2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ee6:	4a35      	ldr	r2, [pc, #212]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ef0:	4b32      	ldr	r3, [pc, #200]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efe:	4b2f      	ldr	r3, [pc, #188]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f04:	4a2d      	ldr	r2, [pc, #180]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f1c:	23c0      	movs	r3, #192	@ 0xc0
 8002f1e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f20:	2302      	movs	r3, #2
 8002f22:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f30:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002f34:	4619      	mov	r1, r3
 8002f36:	4829      	ldr	r0, [pc, #164]	@ (8002fdc <HAL_TIM_Encoder_MspInit+0x300>)
 8002f38:	f005 fe26 	bl	8008b88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2100      	movs	r1, #0
 8002f40:	202c      	movs	r0, #44	@ 0x2c
 8002f42:	f002 ffb4 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002f46:	202c      	movs	r0, #44	@ 0x2c
 8002f48:	f002 ffcb 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
}
 8002f4c:	e080      	b.n	8003050 <HAL_TIM_Encoder_MspInit+0x374>
  else if(htim_encoder->Instance==TIM23)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <HAL_TIM_Encoder_MspInit+0x304>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d147      	bne.n	8002fe8 <HAL_TIM_Encoder_MspInit+0x30c>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002f58:	4b18      	ldr	r3, [pc, #96]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002f5e:	4a17      	ldr	r2, [pc, #92]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f64:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002f68:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002f6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f76:	4b11      	ldr	r3, [pc, #68]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f86:	4b0d      	ldr	r3, [pc, #52]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002f94:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002f98:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002fa6:	230d      	movs	r3, #13
 8002fa8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002faa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002fae:	4619      	mov	r1, r3
 8002fb0:	480c      	ldr	r0, [pc, #48]	@ (8002fe4 <HAL_TIM_Encoder_MspInit+0x308>)
 8002fb2:	f005 fde9 	bl	8008b88 <HAL_GPIO_Init>
}
 8002fb6:	e04b      	b.n	8003050 <HAL_TIM_Encoder_MspInit+0x374>
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	58021000 	.word	0x58021000
 8002fc4:	58020000 	.word	0x58020000
 8002fc8:	58020400 	.word	0x58020400
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800
 8002fd4:	58020c00 	.word	0x58020c00
 8002fd8:	40010400 	.word	0x40010400
 8002fdc:	58020800 	.word	0x58020800
 8002fe0:	4000e000 	.word	0x4000e000
 8002fe4:	58021800 	.word	0x58021800
  else if(htim_encoder->Instance==TIM24)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1a      	ldr	r2, [pc, #104]	@ (8003058 <HAL_TIM_Encoder_MspInit+0x37c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d12e      	bne.n	8003050 <HAL_TIM_Encoder_MspInit+0x374>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800305c <HAL_TIM_Encoder_MspInit+0x380>)
 8002ff4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002ff8:	4a18      	ldr	r2, [pc, #96]	@ (800305c <HAL_TIM_Encoder_MspInit+0x380>)
 8002ffa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ffe:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003002:	4b16      	ldr	r3, [pc, #88]	@ (800305c <HAL_TIM_Encoder_MspInit+0x380>)
 8003004:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003010:	4b12      	ldr	r3, [pc, #72]	@ (800305c <HAL_TIM_Encoder_MspInit+0x380>)
 8003012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003016:	4a11      	ldr	r2, [pc, #68]	@ (800305c <HAL_TIM_Encoder_MspInit+0x380>)
 8003018:	f043 0320 	orr.w	r3, r3, #32
 800301c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003020:	4b0e      	ldr	r3, [pc, #56]	@ (800305c <HAL_TIM_Encoder_MspInit+0x380>)
 8003022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800302e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003032:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8003040:	230e      	movs	r3, #14
 8003042:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003044:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003048:	4619      	mov	r1, r3
 800304a:	4805      	ldr	r0, [pc, #20]	@ (8003060 <HAL_TIM_Encoder_MspInit+0x384>)
 800304c:	f005 fd9c 	bl	8008b88 <HAL_GPIO_Init>
}
 8003050:	bf00      	nop
 8003052:	3758      	adds	r7, #88	@ 0x58
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	4000e400 	.word	0x4000e400
 800305c:	58024400 	.word	0x58024400
 8003060:	58021400 	.word	0x58021400

08003064 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a20      	ldr	r2, [pc, #128]	@ (80030f4 <HAL_TIM_PWM_MspInit+0x90>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10f      	bne.n	8003096 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <HAL_TIM_PWM_MspInit+0x94>)
 8003078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800307c:	4a1e      	ldr	r2, [pc, #120]	@ (80030f8 <HAL_TIM_PWM_MspInit+0x94>)
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003086:	4b1c      	ldr	r3, [pc, #112]	@ (80030f8 <HAL_TIM_PWM_MspInit+0x94>)
 8003088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM15_MspInit 1 */

    /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003094:	e028      	b.n	80030e8 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM12)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a18      	ldr	r2, [pc, #96]	@ (80030fc <HAL_TIM_PWM_MspInit+0x98>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d10f      	bne.n	80030c0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80030a0:	4b15      	ldr	r3, [pc, #84]	@ (80030f8 <HAL_TIM_PWM_MspInit+0x94>)
 80030a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030a6:	4a14      	ldr	r2, [pc, #80]	@ (80030f8 <HAL_TIM_PWM_MspInit+0x94>)
 80030a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <HAL_TIM_PWM_MspInit+0x94>)
 80030b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
}
 80030be:	e013      	b.n	80030e8 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM15)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003100 <HAL_TIM_PWM_MspInit+0x9c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10e      	bne.n	80030e8 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80030ca:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_TIM_PWM_MspInit+0x94>)
 80030cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030d0:	4a09      	ldr	r2, [pc, #36]	@ (80030f8 <HAL_TIM_PWM_MspInit+0x94>)
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030da:	4b07      	ldr	r3, [pc, #28]	@ (80030f8 <HAL_TIM_PWM_MspInit+0x94>)
 80030dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40000c00 	.word	0x40000c00
 80030f8:	58024400 	.word	0x58024400
 80030fc:	40001800 	.word	0x40001800
 8003100:	40014000 	.word	0x40014000

08003104 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a40      	ldr	r2, [pc, #256]	@ (8003214 <HAL_TIM_Base_MspInit+0x110>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d117      	bne.n	8003146 <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003116:	4b40      	ldr	r3, [pc, #256]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 8003118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800311c:	4a3e      	ldr	r2, [pc, #248]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 800311e:	f043 0310 	orr.w	r3, r3, #16
 8003122:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003126:	4b3c      	ldr	r3, [pc, #240]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 8003128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003134:	2200      	movs	r2, #0
 8003136:	2100      	movs	r1, #0
 8003138:	2036      	movs	r0, #54	@ 0x36
 800313a:	f002 feb8 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800313e:	2036      	movs	r0, #54	@ 0x36
 8003140:	f002 fecf 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003144:	e062      	b.n	800320c <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM7)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a34      	ldr	r2, [pc, #208]	@ (800321c <HAL_TIM_Base_MspInit+0x118>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d117      	bne.n	8003180 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003150:	4b31      	ldr	r3, [pc, #196]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 8003152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003156:	4a30      	ldr	r2, [pc, #192]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 8003158:	f043 0320 	orr.w	r3, r3, #32
 800315c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003160:	4b2d      	ldr	r3, [pc, #180]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 8003162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	2037      	movs	r0, #55	@ 0x37
 8003174:	f002 fe9b 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003178:	2037      	movs	r0, #55	@ 0x37
 800317a:	f002 feb2 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
}
 800317e:	e045      	b.n	800320c <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM13)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a26      	ldr	r2, [pc, #152]	@ (8003220 <HAL_TIM_Base_MspInit+0x11c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d117      	bne.n	80031ba <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800318a:	4b23      	ldr	r3, [pc, #140]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 800318c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003190:	4a21      	ldr	r2, [pc, #132]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 8003192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003196:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800319a:	4b1f      	ldr	r3, [pc, #124]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 800319c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80031a8:	2200      	movs	r2, #0
 80031aa:	2100      	movs	r1, #0
 80031ac:	202c      	movs	r0, #44	@ 0x2c
 80031ae:	f002 fe7e 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80031b2:	202c      	movs	r0, #44	@ 0x2c
 80031b4:	f002 fe95 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
}
 80031b8:	e028      	b.n	800320c <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM16)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a19      	ldr	r2, [pc, #100]	@ (8003224 <HAL_TIM_Base_MspInit+0x120>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d10f      	bne.n	80031e4 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80031c4:	4b14      	ldr	r3, [pc, #80]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 80031c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031ca:	4a13      	ldr	r2, [pc, #76]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031d4:	4b10      	ldr	r3, [pc, #64]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 80031d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
}
 80031e2:	e013      	b.n	800320c <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM17)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003228 <HAL_TIM_Base_MspInit+0x124>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d10e      	bne.n	800320c <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80031ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 80031f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031f4:	4a08      	ldr	r2, [pc, #32]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 80031f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031fe:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_TIM_Base_MspInit+0x114>)
 8003200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003204:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	bf00      	nop
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40001000 	.word	0x40001000
 8003218:	58024400 	.word	0x58024400
 800321c:	40001400 	.word	0x40001400
 8003220:	40001c00 	.word	0x40001c00
 8003224:	40014400 	.word	0x40014400
 8003228:	40014800 	.word	0x40014800

0800322c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	@ 0x30
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a5e      	ldr	r2, [pc, #376]	@ (80033c4 <HAL_TIM_MspPostInit+0x198>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d11f      	bne.n	800328e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	4b5e      	ldr	r3, [pc, #376]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 8003250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003254:	4a5c      	ldr	r2, [pc, #368]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800325e:	4b5a      	ldr	r3, [pc, #360]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 8003260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800326c:	230f      	movs	r3, #15
 800326e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003278:	2300      	movs	r3, #0
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800327c:	2302      	movs	r3, #2
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003280:	f107 031c 	add.w	r3, r7, #28
 8003284:	4619      	mov	r1, r3
 8003286:	4851      	ldr	r0, [pc, #324]	@ (80033cc <HAL_TIM_MspPostInit+0x1a0>)
 8003288:	f005 fc7e 	bl	8008b88 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800328c:	e095      	b.n	80033ba <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM12)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a4f      	ldr	r2, [pc, #316]	@ (80033d0 <HAL_TIM_MspPostInit+0x1a4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d120      	bne.n	80032da <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003298:	4b4b      	ldr	r3, [pc, #300]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 800329a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800329e:	4a4a      	ldr	r2, [pc, #296]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032a8:	4b47      	ldr	r3, [pc, #284]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 80032aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80032b6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80032ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80032c8:	2302      	movs	r3, #2
 80032ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	4619      	mov	r1, r3
 80032d2:	4840      	ldr	r0, [pc, #256]	@ (80033d4 <HAL_TIM_MspPostInit+0x1a8>)
 80032d4:	f005 fc58 	bl	8008b88 <HAL_GPIO_Init>
}
 80032d8:	e06f      	b.n	80033ba <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a3e      	ldr	r2, [pc, #248]	@ (80033d8 <HAL_TIM_MspPostInit+0x1ac>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d11f      	bne.n	8003324 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032e4:	4b38      	ldr	r3, [pc, #224]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 80032e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032ea:	4a37      	ldr	r2, [pc, #220]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 80032ec:	f043 0310 	orr.w	r3, r3, #16
 80032f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032f4:	4b34      	ldr	r3, [pc, #208]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 80032f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003302:	2360      	movs	r3, #96	@ 0x60
 8003304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003306:	2302      	movs	r3, #2
 8003308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330a:	2300      	movs	r3, #0
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330e:	2300      	movs	r3, #0
 8003310:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003312:	2304      	movs	r3, #4
 8003314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003316:	f107 031c 	add.w	r3, r7, #28
 800331a:	4619      	mov	r1, r3
 800331c:	482f      	ldr	r0, [pc, #188]	@ (80033dc <HAL_TIM_MspPostInit+0x1b0>)
 800331e:	f005 fc33 	bl	8008b88 <HAL_GPIO_Init>
}
 8003322:	e04a      	b.n	80033ba <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM16)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a2d      	ldr	r2, [pc, #180]	@ (80033e0 <HAL_TIM_MspPostInit+0x1b4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d120      	bne.n	8003370 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332e:	4b26      	ldr	r3, [pc, #152]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 8003330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003334:	4a24      	ldr	r2, [pc, #144]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 8003336:	f043 0302 	orr.w	r3, r3, #2
 800333a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800333e:	4b22      	ldr	r3, [pc, #136]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 8003340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800334c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800335e:	2301      	movs	r3, #1
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003362:	f107 031c 	add.w	r3, r7, #28
 8003366:	4619      	mov	r1, r3
 8003368:	481a      	ldr	r0, [pc, #104]	@ (80033d4 <HAL_TIM_MspPostInit+0x1a8>)
 800336a:	f005 fc0d 	bl	8008b88 <HAL_GPIO_Init>
}
 800336e:	e024      	b.n	80033ba <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM17)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1b      	ldr	r2, [pc, #108]	@ (80033e4 <HAL_TIM_MspPostInit+0x1b8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d11f      	bne.n	80033ba <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	4b13      	ldr	r3, [pc, #76]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 800337c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003380:	4a11      	ldr	r2, [pc, #68]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 8003382:	f043 0302 	orr.w	r3, r3, #2
 8003386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800338a:	4b0f      	ldr	r3, [pc, #60]	@ (80033c8 <HAL_TIM_MspPostInit+0x19c>)
 800338c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800339c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339e:	2302      	movs	r3, #2
 80033a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a6:	2300      	movs	r3, #0
 80033a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80033aa:	2301      	movs	r3, #1
 80033ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ae:	f107 031c 	add.w	r3, r7, #28
 80033b2:	4619      	mov	r1, r3
 80033b4:	4807      	ldr	r0, [pc, #28]	@ (80033d4 <HAL_TIM_MspPostInit+0x1a8>)
 80033b6:	f005 fbe7 	bl	8008b88 <HAL_GPIO_Init>
}
 80033ba:	bf00      	nop
 80033bc:	3730      	adds	r7, #48	@ 0x30
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40000c00 	.word	0x40000c00
 80033c8:	58024400 	.word	0x58024400
 80033cc:	58020000 	.word	0x58020000
 80033d0:	40001800 	.word	0x40001800
 80033d4:	58020400 	.word	0x58020400
 80033d8:	40014000 	.word	0x40014000
 80033dc:	58021000 	.word	0x58021000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800

080033e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b0ba      	sub	sp, #232	@ 0xe8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003400:	f107 0318 	add.w	r3, r7, #24
 8003404:	22b8      	movs	r2, #184	@ 0xb8
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f010 f985 	bl	8013718 <memset>
  if(huart->Instance==USART1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a59      	ldr	r2, [pc, #356]	@ (8003578 <HAL_UART_MspInit+0x190>)
 8003414:	4293      	cmp	r3, r2
 8003416:	f040 80bd 	bne.w	8003594 <HAL_UART_MspInit+0x1ac>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800341a:	f04f 0201 	mov.w	r2, #1
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003426:	2300      	movs	r3, #0
 8003428:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800342c:	f107 0318 	add.w	r3, r7, #24
 8003430:	4618      	mov	r0, r3
 8003432:	f006 fe3f 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800343c:	f7ff f964 	bl	8002708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003440:	4b4e      	ldr	r3, [pc, #312]	@ (800357c <HAL_UART_MspInit+0x194>)
 8003442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003446:	4a4d      	ldr	r2, [pc, #308]	@ (800357c <HAL_UART_MspInit+0x194>)
 8003448:	f043 0310 	orr.w	r3, r3, #16
 800344c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003450:	4b4a      	ldr	r3, [pc, #296]	@ (800357c <HAL_UART_MspInit+0x194>)
 8003452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345e:	4b47      	ldr	r3, [pc, #284]	@ (800357c <HAL_UART_MspInit+0x194>)
 8003460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003464:	4a45      	ldr	r2, [pc, #276]	@ (800357c <HAL_UART_MspInit+0x194>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800346e:	4b43      	ldr	r3, [pc, #268]	@ (800357c <HAL_UART_MspInit+0x194>)
 8003470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800347c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003480:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2300      	movs	r3, #0
 8003492:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003496:	2307      	movs	r3, #7
 8003498:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4837      	ldr	r0, [pc, #220]	@ (8003580 <HAL_UART_MspInit+0x198>)
 80034a4:	f005 fb70 	bl	8008b88 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream4;
 80034a8:	4b36      	ldr	r3, [pc, #216]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034aa:	4a37      	ldr	r2, [pc, #220]	@ (8003588 <HAL_UART_MspInit+0x1a0>)
 80034ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80034ae:	4b35      	ldr	r3, [pc, #212]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034b0:	222a      	movs	r2, #42	@ 0x2a
 80034b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034b4:	4b33      	ldr	r3, [pc, #204]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034b6:	2240      	movs	r2, #64	@ 0x40
 80034b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ba:	4b32      	ldr	r3, [pc, #200]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034c0:	4b30      	ldr	r3, [pc, #192]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80034d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034da:	4b2a      	ldr	r3, [pc, #168]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034dc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80034e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034e2:	4b28      	ldr	r3, [pc, #160]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034e8:	4826      	ldr	r0, [pc, #152]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034ea:	f002 fd15 	bl	8005f18 <HAL_DMA_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80034f4:	f7ff f908 	bl	8002708 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a22      	ldr	r2, [pc, #136]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 80034fc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80034fe:	4a21      	ldr	r2, [pc, #132]	@ (8003584 <HAL_UART_MspInit+0x19c>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8003504:	4b21      	ldr	r3, [pc, #132]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 8003506:	4a22      	ldr	r2, [pc, #136]	@ (8003590 <HAL_UART_MspInit+0x1a8>)
 8003508:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800350a:	4b20      	ldr	r3, [pc, #128]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 800350c:	2229      	movs	r2, #41	@ 0x29
 800350e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003510:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003516:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 8003518:	2200      	movs	r2, #0
 800351a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800351c:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 800351e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003522:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003524:	4b19      	ldr	r3, [pc, #100]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 8003526:	2200      	movs	r2, #0
 8003528:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800352a:	4b18      	ldr	r3, [pc, #96]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003530:	4b16      	ldr	r3, [pc, #88]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 8003532:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003536:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003538:	4b14      	ldr	r3, [pc, #80]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 800353a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800353e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003540:	4b12      	ldr	r3, [pc, #72]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 8003542:	2200      	movs	r2, #0
 8003544:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003546:	4811      	ldr	r0, [pc, #68]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 8003548:	f002 fce6 	bl	8005f18 <HAL_DMA_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 8003552:	f7ff f8d9 	bl	8002708 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a0c      	ldr	r2, [pc, #48]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 800355a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800355e:	4a0b      	ldr	r2, [pc, #44]	@ (800358c <HAL_UART_MspInit+0x1a4>)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003564:	2200      	movs	r2, #0
 8003566:	2100      	movs	r1, #0
 8003568:	2025      	movs	r0, #37	@ 0x25
 800356a:	f002 fca0 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800356e:	2025      	movs	r0, #37	@ 0x25
 8003570:	f002 fcb7 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003574:	e0bf      	b.n	80036f6 <HAL_UART_MspInit+0x30e>
 8003576:	bf00      	nop
 8003578:	40011000 	.word	0x40011000
 800357c:	58024400 	.word	0x58024400
 8003580:	58020000 	.word	0x58020000
 8003584:	24000a98 	.word	0x24000a98
 8003588:	40020070 	.word	0x40020070
 800358c:	24000b10 	.word	0x24000b10
 8003590:	40020028 	.word	0x40020028
  else if(huart->Instance==USART3)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a59      	ldr	r2, [pc, #356]	@ (8003700 <HAL_UART_MspInit+0x318>)
 800359a:	4293      	cmp	r3, r2
 800359c:	f040 80ab 	bne.w	80036f6 <HAL_UART_MspInit+0x30e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035a0:	f04f 0202 	mov.w	r2, #2
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035b2:	f107 0318 	add.w	r3, r7, #24
 80035b6:	4618      	mov	r0, r3
 80035b8:	f006 fd7c 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_UART_MspInit+0x1de>
      Error_Handler();
 80035c2:	f7ff f8a1 	bl	8002708 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003704 <HAL_UART_MspInit+0x31c>)
 80035c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003704 <HAL_UART_MspInit+0x31c>)
 80035ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003704 <HAL_UART_MspInit+0x31c>)
 80035d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e4:	4b47      	ldr	r3, [pc, #284]	@ (8003704 <HAL_UART_MspInit+0x31c>)
 80035e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ea:	4a46      	ldr	r2, [pc, #280]	@ (8003704 <HAL_UART_MspInit+0x31c>)
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035f4:	4b43      	ldr	r3, [pc, #268]	@ (8003704 <HAL_UART_MspInit+0x31c>)
 80035f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003602:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003606:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2300      	movs	r3, #0
 8003618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800361c:	2307      	movs	r3, #7
 800361e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003622:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003626:	4619      	mov	r1, r3
 8003628:	4837      	ldr	r0, [pc, #220]	@ (8003708 <HAL_UART_MspInit+0x320>)
 800362a:	f005 faad 	bl	8008b88 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 800362e:	4b37      	ldr	r3, [pc, #220]	@ (800370c <HAL_UART_MspInit+0x324>)
 8003630:	4a37      	ldr	r2, [pc, #220]	@ (8003710 <HAL_UART_MspInit+0x328>)
 8003632:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003634:	4b35      	ldr	r3, [pc, #212]	@ (800370c <HAL_UART_MspInit+0x324>)
 8003636:	222d      	movs	r2, #45	@ 0x2d
 8003638:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800363a:	4b34      	ldr	r3, [pc, #208]	@ (800370c <HAL_UART_MspInit+0x324>)
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003640:	4b32      	ldr	r3, [pc, #200]	@ (800370c <HAL_UART_MspInit+0x324>)
 8003642:	2200      	movs	r2, #0
 8003644:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003646:	4b31      	ldr	r3, [pc, #196]	@ (800370c <HAL_UART_MspInit+0x324>)
 8003648:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800364c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800364e:	4b2f      	ldr	r3, [pc, #188]	@ (800370c <HAL_UART_MspInit+0x324>)
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003654:	4b2d      	ldr	r3, [pc, #180]	@ (800370c <HAL_UART_MspInit+0x324>)
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800365a:	4b2c      	ldr	r3, [pc, #176]	@ (800370c <HAL_UART_MspInit+0x324>)
 800365c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003660:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003662:	4b2a      	ldr	r3, [pc, #168]	@ (800370c <HAL_UART_MspInit+0x324>)
 8003664:	2200      	movs	r2, #0
 8003666:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003668:	4b28      	ldr	r3, [pc, #160]	@ (800370c <HAL_UART_MspInit+0x324>)
 800366a:	2200      	movs	r2, #0
 800366c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800366e:	4827      	ldr	r0, [pc, #156]	@ (800370c <HAL_UART_MspInit+0x324>)
 8003670:	f002 fc52 	bl	8005f18 <HAL_DMA_Init>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_UART_MspInit+0x296>
      Error_Handler();
 800367a:	f7ff f845 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a22      	ldr	r2, [pc, #136]	@ (800370c <HAL_UART_MspInit+0x324>)
 8003682:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003686:	4a21      	ldr	r2, [pc, #132]	@ (800370c <HAL_UART_MspInit+0x324>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800368c:	4b21      	ldr	r3, [pc, #132]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 800368e:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <HAL_UART_MspInit+0x330>)
 8003690:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003692:	4b20      	ldr	r3, [pc, #128]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 8003694:	222e      	movs	r2, #46	@ 0x2e
 8003696:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003698:	4b1e      	ldr	r3, [pc, #120]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 800369a:	2240      	movs	r2, #64	@ 0x40
 800369c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800369e:	4b1d      	ldr	r3, [pc, #116]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 80036a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036aa:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036ac:	4b19      	ldr	r3, [pc, #100]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036b2:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80036b8:	4b16      	ldr	r3, [pc, #88]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036c4:	4b13      	ldr	r3, [pc, #76]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80036ca:	4812      	ldr	r0, [pc, #72]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 80036cc:	f002 fc24 	bl	8005f18 <HAL_DMA_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_UART_MspInit+0x2f2>
      Error_Handler();
 80036d6:	f7ff f817 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 80036de:	67da      	str	r2, [r3, #124]	@ 0x7c
 80036e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003714 <HAL_UART_MspInit+0x32c>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80036e6:	2200      	movs	r2, #0
 80036e8:	2100      	movs	r1, #0
 80036ea:	2027      	movs	r0, #39	@ 0x27
 80036ec:	f002 fbdf 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036f0:	2027      	movs	r0, #39	@ 0x27
 80036f2:	f002 fbf6 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
}
 80036f6:	bf00      	nop
 80036f8:	37e8      	adds	r7, #232	@ 0xe8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40004800 	.word	0x40004800
 8003704:	58024400 	.word	0x58024400
 8003708:	58020400 	.word	0x58020400
 800370c:	24000b88 	.word	0x24000b88
 8003710:	40020040 	.word	0x40020040
 8003714:	24000c00 	.word	0x24000c00
 8003718:	40020058 	.word	0x40020058

0800371c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <NMI_Handler+0x4>

08003724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <HardFault_Handler+0x4>

0800372c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <MemManage_Handler+0x4>

08003734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <BusFault_Handler+0x4>

0800373c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003740:	bf00      	nop
 8003742:	e7fd      	b.n	8003740 <UsageFault_Handler+0x4>

08003744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003772:	f000 fa0f 	bl	8003b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}

0800377a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800377a:	b480      	push	{r7}
 800377c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800378c:	4802      	ldr	r0, [pc, #8]	@ (8003798 <DMA1_Stream0_IRQHandler+0x10>)
 800378e:	f003 fee9 	bl	8007564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	24000364 	.word	0x24000364

0800379c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80037a0:	4802      	ldr	r0, [pc, #8]	@ (80037ac <DMA1_Stream1_IRQHandler+0x10>)
 80037a2:	f003 fedf 	bl	8007564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	24000b10 	.word	0x24000b10

080037b0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80037b4:	4802      	ldr	r0, [pc, #8]	@ (80037c0 <DMA1_Stream2_IRQHandler+0x10>)
 80037b6:	f003 fed5 	bl	8007564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	24000b88 	.word	0x24000b88

080037c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80037c8:	4802      	ldr	r0, [pc, #8]	@ (80037d4 <DMA1_Stream3_IRQHandler+0x10>)
 80037ca:	f003 fecb 	bl	8007564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	24000c00 	.word	0x24000c00

080037d8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80037dc:	4802      	ldr	r0, [pc, #8]	@ (80037e8 <DMA1_Stream4_IRQHandler+0x10>)
 80037de:	f003 fec1 	bl	8007564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	24000a98 	.word	0x24000a98

080037ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80037f0:	4802      	ldr	r0, [pc, #8]	@ (80037fc <DMA1_Stream5_IRQHandler+0x10>)
 80037f2:	f003 feb7 	bl	8007564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	240003dc 	.word	0x240003dc

08003800 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003804:	4803      	ldr	r0, [pc, #12]	@ (8003814 <ADC_IRQHandler+0x14>)
 8003806:	f001 f805 	bl	8004814 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800380a:	4803      	ldr	r0, [pc, #12]	@ (8003818 <ADC_IRQHandler+0x18>)
 800380c:	f001 f802 	bl	8004814 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003810:	bf00      	nop
 8003812:	bd80      	pop	{r7, pc}
 8003814:	24000214 	.word	0x24000214
 8003818:	24000284 	.word	0x24000284

0800381c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003820:	4802      	ldr	r0, [pc, #8]	@ (800382c <USART1_IRQHandler+0x10>)
 8003822:	f00a fc01 	bl	800e028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	24000970 	.word	0x24000970

08003830 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003834:	4802      	ldr	r0, [pc, #8]	@ (8003840 <USART3_IRQHandler+0x10>)
 8003836:	f00a fbf7 	bl	800e028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	24000a04 	.word	0x24000a04

08003844 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003848:	4803      	ldr	r0, [pc, #12]	@ (8003858 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800384a:	f009 fbeb 	bl	800d024 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800384e:	4803      	ldr	r0, [pc, #12]	@ (800385c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003850:	f009 fbe8 	bl	800d024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	24000710 	.word	0x24000710
 800385c:	240007a8 	.word	0x240007a8

08003860 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003864:	4802      	ldr	r0, [pc, #8]	@ (8003870 <TIM6_DAC_IRQHandler+0x10>)
 8003866:	f009 fbdd 	bl	800d024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	24000678 	.word	0x24000678

08003874 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003878:	4802      	ldr	r0, [pc, #8]	@ (8003884 <TIM7_IRQHandler+0x10>)
 800387a:	f009 fbd3 	bl	800d024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	240006c4 	.word	0x240006c4

08003888 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800388c:	4802      	ldr	r0, [pc, #8]	@ (8003898 <ADC3_IRQHandler+0x10>)
 800388e:	f000 ffc1 	bl	8004814 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	240002f4 	.word	0x240002f4

0800389c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038a4:	4a14      	ldr	r2, [pc, #80]	@ (80038f8 <_sbrk+0x5c>)
 80038a6:	4b15      	ldr	r3, [pc, #84]	@ (80038fc <_sbrk+0x60>)
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038b0:	4b13      	ldr	r3, [pc, #76]	@ (8003900 <_sbrk+0x64>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038b8:	4b11      	ldr	r3, [pc, #68]	@ (8003900 <_sbrk+0x64>)
 80038ba:	4a12      	ldr	r2, [pc, #72]	@ (8003904 <_sbrk+0x68>)
 80038bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038be:	4b10      	ldr	r3, [pc, #64]	@ (8003900 <_sbrk+0x64>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d207      	bcs.n	80038dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038cc:	f00f ff2c 	bl	8013728 <__errno>
 80038d0:	4603      	mov	r3, r0
 80038d2:	220c      	movs	r2, #12
 80038d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
 80038da:	e009      	b.n	80038f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038dc:	4b08      	ldr	r3, [pc, #32]	@ (8003900 <_sbrk+0x64>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038e2:	4b07      	ldr	r3, [pc, #28]	@ (8003900 <_sbrk+0x64>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	4a05      	ldr	r2, [pc, #20]	@ (8003900 <_sbrk+0x64>)
 80038ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038ee:	68fb      	ldr	r3, [r7, #12]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	24050000 	.word	0x24050000
 80038fc:	00000400 	.word	0x00000400
 8003900:	24000c88 	.word	0x24000c88
 8003904:	24003930 	.word	0x24003930

08003908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800390c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a08 <SystemInit+0x100>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003912:	4a3d      	ldr	r2, [pc, #244]	@ (8003a08 <SystemInit+0x100>)
 8003914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800391c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a0c <SystemInit+0x104>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	2b06      	cmp	r3, #6
 8003926:	d807      	bhi.n	8003938 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003928:	4b38      	ldr	r3, [pc, #224]	@ (8003a0c <SystemInit+0x104>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 030f 	bic.w	r3, r3, #15
 8003930:	4a36      	ldr	r2, [pc, #216]	@ (8003a0c <SystemInit+0x104>)
 8003932:	f043 0307 	orr.w	r3, r3, #7
 8003936:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003938:	4b35      	ldr	r3, [pc, #212]	@ (8003a10 <SystemInit+0x108>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a34      	ldr	r2, [pc, #208]	@ (8003a10 <SystemInit+0x108>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003944:	4b32      	ldr	r3, [pc, #200]	@ (8003a10 <SystemInit+0x108>)
 8003946:	2200      	movs	r2, #0
 8003948:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800394a:	4b31      	ldr	r3, [pc, #196]	@ (8003a10 <SystemInit+0x108>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4930      	ldr	r1, [pc, #192]	@ (8003a10 <SystemInit+0x108>)
 8003950:	4b30      	ldr	r3, [pc, #192]	@ (8003a14 <SystemInit+0x10c>)
 8003952:	4013      	ands	r3, r2
 8003954:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003956:	4b2d      	ldr	r3, [pc, #180]	@ (8003a0c <SystemInit+0x104>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003962:	4b2a      	ldr	r3, [pc, #168]	@ (8003a0c <SystemInit+0x104>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 030f 	bic.w	r3, r3, #15
 800396a:	4a28      	ldr	r2, [pc, #160]	@ (8003a0c <SystemInit+0x104>)
 800396c:	f043 0307 	orr.w	r3, r3, #7
 8003970:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003972:	4b27      	ldr	r3, [pc, #156]	@ (8003a10 <SystemInit+0x108>)
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003978:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <SystemInit+0x108>)
 800397a:	2200      	movs	r2, #0
 800397c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800397e:	4b24      	ldr	r3, [pc, #144]	@ (8003a10 <SystemInit+0x108>)
 8003980:	2200      	movs	r2, #0
 8003982:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003984:	4b22      	ldr	r3, [pc, #136]	@ (8003a10 <SystemInit+0x108>)
 8003986:	4a24      	ldr	r2, [pc, #144]	@ (8003a18 <SystemInit+0x110>)
 8003988:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800398a:	4b21      	ldr	r3, [pc, #132]	@ (8003a10 <SystemInit+0x108>)
 800398c:	4a23      	ldr	r2, [pc, #140]	@ (8003a1c <SystemInit+0x114>)
 800398e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003990:	4b1f      	ldr	r3, [pc, #124]	@ (8003a10 <SystemInit+0x108>)
 8003992:	4a23      	ldr	r2, [pc, #140]	@ (8003a20 <SystemInit+0x118>)
 8003994:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003996:	4b1e      	ldr	r3, [pc, #120]	@ (8003a10 <SystemInit+0x108>)
 8003998:	2200      	movs	r2, #0
 800399a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800399c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a10 <SystemInit+0x108>)
 800399e:	4a20      	ldr	r2, [pc, #128]	@ (8003a20 <SystemInit+0x118>)
 80039a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <SystemInit+0x108>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80039a8:	4b19      	ldr	r3, [pc, #100]	@ (8003a10 <SystemInit+0x108>)
 80039aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <SystemInit+0x118>)
 80039ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80039ae:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <SystemInit+0x108>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039b4:	4b16      	ldr	r3, [pc, #88]	@ (8003a10 <SystemInit+0x108>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a15      	ldr	r2, [pc, #84]	@ (8003a10 <SystemInit+0x108>)
 80039ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039c0:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <SystemInit+0x108>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80039c6:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <SystemInit+0x108>)
 80039c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d113      	bne.n	80039fc <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80039d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <SystemInit+0x108>)
 80039d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039da:	4a0d      	ldr	r2, [pc, #52]	@ (8003a10 <SystemInit+0x108>)
 80039dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a24 <SystemInit+0x11c>)
 80039e6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80039ea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80039ec:	4b08      	ldr	r3, [pc, #32]	@ (8003a10 <SystemInit+0x108>)
 80039ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039f2:	4a07      	ldr	r2, [pc, #28]	@ (8003a10 <SystemInit+0x108>)
 80039f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000ed00 	.word	0xe000ed00
 8003a0c:	52002000 	.word	0x52002000
 8003a10:	58024400 	.word	0x58024400
 8003a14:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a18:	02020200 	.word	0x02020200
 8003a1c:	01ff0000 	.word	0x01ff0000
 8003a20:	01010280 	.word	0x01010280
 8003a24:	52004000 	.word	0x52004000

08003a28 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003a2c:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <ExitRun0Mode+0x2c>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a08      	ldr	r2, [pc, #32]	@ (8003a54 <ExitRun0Mode+0x2c>)
 8003a32:	f043 0302 	orr.w	r3, r3, #2
 8003a36:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003a38:	bf00      	nop
 8003a3a:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <ExitRun0Mode+0x2c>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f9      	beq.n	8003a3a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	58024800 	.word	0x58024800

08003a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a58:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003a94 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003a5c:	f7ff ffe4 	bl	8003a28 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a60:	f7ff ff52 	bl	8003908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a64:	480c      	ldr	r0, [pc, #48]	@ (8003a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a66:	490d      	ldr	r1, [pc, #52]	@ (8003a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a68:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a6c:	e002      	b.n	8003a74 <LoopCopyDataInit>

08003a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a72:	3304      	adds	r3, #4

08003a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a78:	d3f9      	bcc.n	8003a6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8003aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a80:	e001      	b.n	8003a86 <LoopFillZerobss>

08003a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a84:	3204      	adds	r2, #4

08003a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a88:	d3fb      	bcc.n	8003a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a8a:	f00f fe53 	bl	8013734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a8e:	f7fd fb51 	bl	8001134 <main>
  bx  lr
 8003a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a94:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003a98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003a9c:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8003aa0:	08013f4c 	.word	0x08013f4c
  ldr r2, =_sbss
 8003aa4:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8003aa8:	24003930 	.word	0x24003930

08003aac <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aac:	e7fe      	b.n	8003aac <BDMA_Channel0_IRQHandler>
	...

08003ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab6:	2003      	movs	r0, #3
 8003ab8:	f002 f9ee 	bl	8005e98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003abc:	f006 f924 	bl	8009d08 <HAL_RCC_GetSysClockFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b15      	ldr	r3, [pc, #84]	@ (8003b18 <HAL_Init+0x68>)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	4913      	ldr	r1, [pc, #76]	@ (8003b1c <HAL_Init+0x6c>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ada:	4b0f      	ldr	r3, [pc, #60]	@ (8003b18 <HAL_Init+0x68>)
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8003b1c <HAL_Init+0x6c>)
 8003ae4:	5cd3      	ldrb	r3, [r2, r3]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
 8003af0:	4a0b      	ldr	r2, [pc, #44]	@ (8003b20 <HAL_Init+0x70>)
 8003af2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003af4:	4a0b      	ldr	r2, [pc, #44]	@ (8003b24 <HAL_Init+0x74>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003afa:	2000      	movs	r0, #0
 8003afc:	f000 f814 	bl	8003b28 <HAL_InitTick>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e002      	b.n	8003b10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b0a:	f7fe fe89 	bl	8002820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	58024400 	.word	0x58024400
 8003b1c:	08013c30 	.word	0x08013c30
 8003b20:	2400001c 	.word	0x2400001c
 8003b24:	24000018 	.word	0x24000018

08003b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003b30:	4b15      	ldr	r3, [pc, #84]	@ (8003b88 <HAL_InitTick+0x60>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e021      	b.n	8003b80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b3c:	4b13      	ldr	r3, [pc, #76]	@ (8003b8c <HAL_InitTick+0x64>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <HAL_InitTick+0x60>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	4619      	mov	r1, r3
 8003b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	4618      	mov	r0, r3
 8003b54:	f002 f9d3 	bl	8005efe <HAL_SYSTICK_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e00e      	b.n	8003b80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b0f      	cmp	r3, #15
 8003b66:	d80a      	bhi.n	8003b7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b70:	f002 f99d 	bl	8005eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b74:	4a06      	ldr	r2, [pc, #24]	@ (8003b90 <HAL_InitTick+0x68>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	24000024 	.word	0x24000024
 8003b8c:	24000018 	.word	0x24000018
 8003b90:	24000020 	.word	0x24000020

08003b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b98:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <HAL_IncTick+0x20>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <HAL_IncTick+0x24>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a04      	ldr	r2, [pc, #16]	@ (8003bb8 <HAL_IncTick+0x24>)
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	24000024 	.word	0x24000024
 8003bb8:	24000c8c 	.word	0x24000c8c

08003bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <HAL_GetTick+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	24000c8c 	.word	0x24000c8c

08003bd4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003bde:	4b07      	ldr	r3, [pc, #28]	@ (8003bfc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	4904      	ldr	r1, [pc, #16]	@ (8003bfc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	58000400 	.word	0x58000400

08003c00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	609a      	str	r2, [r3, #8]
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a18      	ldr	r2, [pc, #96]	@ (8003cd8 <LL_ADC_SetChannelPreselection+0x70>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d027      	beq.n	8003cca <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d107      	bne.n	8003c94 <LL_ADC_SetChannelPreselection+0x2c>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	0e9b      	lsrs	r3, r3, #26
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	e015      	b.n	8003cc0 <LL_ADC_SetChannelPreselection+0x58>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8003caa:	2320      	movs	r3, #32
 8003cac:	e003      	b.n	8003cb6 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	fab3 f383 	clz	r3, r3
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2201      	movs	r2, #1
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	69d2      	ldr	r2, [r2, #28]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	58026000 	.word	0x58026000

08003cdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3360      	adds	r3, #96	@ 0x60
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a10      	ldr	r2, [pc, #64]	@ (8003d3c <LL_ADC_SetOffset+0x60>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10b      	bne.n	8003d18 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003d16:	e00b      	b.n	8003d30 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	601a      	str	r2, [r3, #0]
}
 8003d30:	bf00      	nop
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	58026000 	.word	0x58026000

08003d40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3360      	adds	r3, #96	@ 0x60
 8003d4e:	461a      	mov	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	611a      	str	r2, [r3, #16]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a0c      	ldr	r2, [pc, #48]	@ (8003de0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00e      	beq.n	8003dd2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3360      	adds	r3, #96	@ 0x60
 8003db8:	461a      	mov	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	601a      	str	r2, [r3, #0]
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	58026000 	.word	0x58026000

08003de4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e24 <LL_ADC_SetOffsetSaturation+0x40>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d10e      	bne.n	8003e16 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3360      	adds	r3, #96	@ 0x60
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	58026000 	.word	0x58026000

08003e28 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4a0c      	ldr	r2, [pc, #48]	@ (8003e68 <LL_ADC_SetOffsetSign+0x40>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d10e      	bne.n	8003e5a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3360      	adds	r3, #96	@ 0x60
 8003e40:	461a      	mov	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	58026000 	.word	0x58026000

08003e6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3360      	adds	r3, #96	@ 0x60
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a0c      	ldr	r2, [pc, #48]	@ (8003ebc <LL_ADC_SetOffsetState+0x50>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d108      	bne.n	8003ea0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003e9e:	e007      	b.n	8003eb0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	601a      	str	r2, [r3, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	58026000 	.word	0x58026000

08003ec0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b087      	sub	sp, #28
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3330      	adds	r3, #48	@ 0x30
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	4413      	add	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	211f      	movs	r1, #31
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	401a      	ands	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0e9b      	lsrs	r3, r3, #26
 8003f1e:	f003 011f 	and.w	r1, r3, #31
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f023 0203 	bic.w	r2, r3, #3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a08      	ldr	r2, [pc, #32]	@ (8003fb4 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d107      	bne.n	8003fa6 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f023 0203 	bic.w	r2, r3, #3
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60da      	str	r2, [r3, #12]
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	58026000 	.word	0x58026000

08003fb8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b087      	sub	sp, #28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3314      	adds	r3, #20
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	0e5b      	lsrs	r3, r3, #25
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	4413      	add	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	0d1b      	lsrs	r3, r3, #20
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2107      	movs	r1, #7
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	401a      	ands	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	0d1b      	lsrs	r3, r3, #20
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	431a      	orrs	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004028:	bf00      	nop
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a1a      	ldr	r2, [pc, #104]	@ (80040ac <LL_ADC_SetChannelSingleDiff+0x78>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d115      	bne.n	8004074 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004054:	43db      	mvns	r3, r3
 8004056:	401a      	ands	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f003 0318 	and.w	r3, r3, #24
 800405e:	4914      	ldr	r1, [pc, #80]	@ (80040b0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004060:	40d9      	lsrs	r1, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	400b      	ands	r3, r1
 8004066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800406a:	431a      	orrs	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004072:	e014      	b.n	800409e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004080:	43db      	mvns	r3, r3
 8004082:	401a      	ands	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f003 0318 	and.w	r3, r3, #24
 800408a:	4909      	ldr	r1, [pc, #36]	@ (80040b0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800408c:	40d9      	lsrs	r1, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	400b      	ands	r3, r1
 8004092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004096:	431a      	orrs	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	58026000 	.word	0x58026000
 80040b0:	000fffff 	.word	0x000fffff

080040b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 031f 	and.w	r3, r3, #31
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	4b04      	ldr	r3, [pc, #16]	@ (800410c <LL_ADC_DisableDeepPowerDown+0x20>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6093      	str	r3, [r2, #8]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	5fffffc0 	.word	0x5fffffc0

08004110 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004124:	d101      	bne.n	800412a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	4b05      	ldr	r3, [pc, #20]	@ (800415c <LL_ADC_EnableInternalRegulator+0x24>)
 8004146:	4013      	ands	r3, r2
 8004148:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	6fffffc0 	.word	0x6fffffc0

08004160 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004174:	d101      	bne.n	800417a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <LL_ADC_Enable+0x24>)
 8004196:	4013      	ands	r3, r2
 8004198:	f043 0201 	orr.w	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	7fffffc0 	.word	0x7fffffc0

080041b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <LL_ADC_IsEnabled+0x18>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <LL_ADC_IsEnabled+0x1a>
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <LL_ADC_REG_StartConversion+0x24>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	f043 0204 	orr.w	r2, r3, #4
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	7fffffc0 	.word	0x7fffffc0

08004200 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b04      	cmp	r3, #4
 8004212:	d101      	bne.n	8004218 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b08      	cmp	r3, #8
 8004238:	d101      	bne.n	800423e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800424c:	b590      	push	{r4, r7, lr}
 800424e:	b089      	sub	sp, #36	@ 0x24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004258:	2300      	movs	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e1ee      	b.n	8004644 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fe faf3 	bl	8002860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff3f 	bl	8004110 <LL_ADC_IsDeepPowerDownEnabled>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff ff25 	bl	80040ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ff5a 	bl	8004160 <LL_ADC_IsInternalRegulatorEnabled>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d114      	bne.n	80042dc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff ff3e 	bl	8004138 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042bc:	4b8e      	ldr	r3, [pc, #568]	@ (80044f8 <HAL_ADC_Init+0x2ac>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	099b      	lsrs	r3, r3, #6
 80042c2:	4a8e      	ldr	r2, [pc, #568]	@ (80044fc <HAL_ADC_Init+0x2b0>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	3301      	adds	r3, #1
 80042cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042ce:	e002      	b.n	80042d6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f9      	bne.n	80042d0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ff3d 	bl	8004160 <LL_ADC_IsInternalRegulatorEnabled>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10d      	bne.n	8004308 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f0:	f043 0210 	orr.w	r2, r3, #16
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042fc:	f043 0201 	orr.w	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff77 	bl	8004200 <LL_ADC_REG_IsConversionOngoing>
 8004312:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	f040 8188 	bne.w	8004632 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f040 8184 	bne.w	8004632 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800432e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004332:	f043 0202 	orr.w	r2, r3, #2
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff36 	bl	80041b0 <LL_ADC_IsEnabled>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d136      	bne.n	80043b8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6c      	ldr	r2, [pc, #432]	@ (8004500 <HAL_ADC_Init+0x2b4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <HAL_ADC_Init+0x112>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6a      	ldr	r2, [pc, #424]	@ (8004504 <HAL_ADC_Init+0x2b8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d10e      	bne.n	800437c <HAL_ADC_Init+0x130>
 800435e:	4868      	ldr	r0, [pc, #416]	@ (8004500 <HAL_ADC_Init+0x2b4>)
 8004360:	f7ff ff26 	bl	80041b0 <LL_ADC_IsEnabled>
 8004364:	4604      	mov	r4, r0
 8004366:	4867      	ldr	r0, [pc, #412]	@ (8004504 <HAL_ADC_Init+0x2b8>)
 8004368:	f7ff ff22 	bl	80041b0 <LL_ADC_IsEnabled>
 800436c:	4603      	mov	r3, r0
 800436e:	4323      	orrs	r3, r4
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	e008      	b.n	800438e <HAL_ADC_Init+0x142>
 800437c:	4862      	ldr	r0, [pc, #392]	@ (8004508 <HAL_ADC_Init+0x2bc>)
 800437e:	f7ff ff17 	bl	80041b0 <LL_ADC_IsEnabled>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d012      	beq.n	80043b8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a5a      	ldr	r2, [pc, #360]	@ (8004500 <HAL_ADC_Init+0x2b4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_ADC_Init+0x15a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a58      	ldr	r2, [pc, #352]	@ (8004504 <HAL_ADC_Init+0x2b8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_ADC_Init+0x15e>
 80043a6:	4a59      	ldr	r2, [pc, #356]	@ (800450c <HAL_ADC_Init+0x2c0>)
 80043a8:	e000      	b.n	80043ac <HAL_ADC_Init+0x160>
 80043aa:	4a59      	ldr	r2, [pc, #356]	@ (8004510 <HAL_ADC_Init+0x2c4>)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f7ff fc24 	bl	8003c00 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a52      	ldr	r2, [pc, #328]	@ (8004508 <HAL_ADC_Init+0x2bc>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d129      	bne.n	8004416 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7e5b      	ldrb	r3, [r3, #25]
 80043c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043cc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80043d2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d013      	beq.n	8004404 <HAL_ADC_Init+0x1b8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	d00d      	beq.n	8004400 <HAL_ADC_Init+0x1b4>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b1c      	cmp	r3, #28
 80043ea:	d007      	beq.n	80043fc <HAL_ADC_Init+0x1b0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b18      	cmp	r3, #24
 80043f2:	d101      	bne.n	80043f8 <HAL_ADC_Init+0x1ac>
 80043f4:	2318      	movs	r3, #24
 80043f6:	e006      	b.n	8004406 <HAL_ADC_Init+0x1ba>
 80043f8:	2300      	movs	r3, #0
 80043fa:	e004      	b.n	8004406 <HAL_ADC_Init+0x1ba>
 80043fc:	2310      	movs	r3, #16
 80043fe:	e002      	b.n	8004406 <HAL_ADC_Init+0x1ba>
 8004400:	2308      	movs	r3, #8
 8004402:	e000      	b.n	8004406 <HAL_ADC_Init+0x1ba>
 8004404:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004406:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800440e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
 8004414:	e00e      	b.n	8004434 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7e5b      	ldrb	r3, [r3, #25]
 800441a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004420:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004426:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800442e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d106      	bne.n	800444c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	3b01      	subs	r3, #1
 8004444:	045b      	lsls	r3, r3, #17
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4313      	orrs	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004458:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a26      	ldr	r2, [pc, #152]	@ (8004508 <HAL_ADC_Init+0x2bc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d115      	bne.n	800449e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	4b26      	ldr	r3, [pc, #152]	@ (8004514 <HAL_ADC_Init+0x2c8>)
 800447a:	4013      	ands	r3, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	69b9      	ldr	r1, [r7, #24]
 8004482:	430b      	orrs	r3, r1
 8004484:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	611a      	str	r2, [r3, #16]
 800449c:	e009      	b.n	80044b2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004518 <HAL_ADC_Init+0x2cc>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	69b9      	ldr	r1, [r7, #24]
 80044ae:	430b      	orrs	r3, r1
 80044b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fea2 	bl	8004200 <LL_ADC_REG_IsConversionOngoing>
 80044bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff feaf 	bl	8004226 <LL_ADC_INJ_IsConversionOngoing>
 80044c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f040 808e 	bne.w	80045ee <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f040 808a 	bne.w	80045ee <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <HAL_ADC_Init+0x2bc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d11b      	bne.n	800451c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7e1b      	ldrb	r3, [r3, #24]
 80044e8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80044f0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e018      	b.n	800452a <HAL_ADC_Init+0x2de>
 80044f8:	24000018 	.word	0x24000018
 80044fc:	053e2d63 	.word	0x053e2d63
 8004500:	40022000 	.word	0x40022000
 8004504:	40022100 	.word	0x40022100
 8004508:	58026000 	.word	0x58026000
 800450c:	40022300 	.word	0x40022300
 8004510:	58026300 	.word	0x58026300
 8004514:	fff04007 	.word	0xfff04007
 8004518:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	7e1b      	ldrb	r3, [r3, #24]
 8004520:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004526:	4313      	orrs	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	4b46      	ldr	r3, [pc, #280]	@ (800464c <HAL_ADC_Init+0x400>)
 8004532:	4013      	ands	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	69b9      	ldr	r1, [r7, #24]
 800453a:	430b      	orrs	r3, r1
 800453c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004544:	2b01      	cmp	r3, #1
 8004546:	d137      	bne.n	80045b8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a3f      	ldr	r2, [pc, #252]	@ (8004650 <HAL_ADC_Init+0x404>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d116      	bne.n	8004586 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	4b3d      	ldr	r3, [pc, #244]	@ (8004654 <HAL_ADC_Init+0x408>)
 8004560:	4013      	ands	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800456a:	4311      	orrs	r1, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004570:	4311      	orrs	r1, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004576:	430a      	orrs	r2, r1
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	611a      	str	r2, [r3, #16]
 8004584:	e020      	b.n	80045c8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	4b32      	ldr	r3, [pc, #200]	@ (8004658 <HAL_ADC_Init+0x40c>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004594:	3a01      	subs	r2, #1
 8004596:	0411      	lsls	r1, r2, #16
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045a2:	4311      	orrs	r1, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80045a8:	430a      	orrs	r2, r1
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	611a      	str	r2, [r3, #16]
 80045b6:	e007      	b.n	80045c8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004650 <HAL_ADC_Init+0x404>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d002      	beq.n	80045ee <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f001 f95d 	bl	80058a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d10c      	bne.n	8004610 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	f023 010f 	bic.w	r1, r3, #15
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	1e5a      	subs	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	631a      	str	r2, [r3, #48]	@ 0x30
 800460e:	e007      	b.n	8004620 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 020f 	bic.w	r2, r2, #15
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004624:	f023 0303 	bic.w	r3, r3, #3
 8004628:	f043 0201 	orr.w	r2, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004630:	e007      	b.n	8004642 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004636:	f043 0210 	orr.w	r2, r3, #16
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004642:	7ffb      	ldrb	r3, [r7, #31]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3724      	adds	r7, #36	@ 0x24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}
 800464c:	ffffbffc 	.word	0xffffbffc
 8004650:	58026000 	.word	0x58026000
 8004654:	fc00f81f 	.word	0xfc00f81f
 8004658:	fc00f81e 	.word	0xfc00f81e

0800465c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a60      	ldr	r2, [pc, #384]	@ (80047f0 <HAL_ADC_Start_DMA+0x194>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <HAL_ADC_Start_DMA+0x20>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a5f      	ldr	r2, [pc, #380]	@ (80047f4 <HAL_ADC_Start_DMA+0x198>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d101      	bne.n	8004680 <HAL_ADC_Start_DMA+0x24>
 800467c:	4b5e      	ldr	r3, [pc, #376]	@ (80047f8 <HAL_ADC_Start_DMA+0x19c>)
 800467e:	e000      	b.n	8004682 <HAL_ADC_Start_DMA+0x26>
 8004680:	4b5e      	ldr	r3, [pc, #376]	@ (80047fc <HAL_ADC_Start_DMA+0x1a0>)
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fd16 	bl	80040b4 <LL_ADC_GetMultimode>
 8004688:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fdb6 	bl	8004200 <LL_ADC_REG_IsConversionOngoing>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	f040 80a2 	bne.w	80047e0 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_ADC_Start_DMA+0x4e>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e09d      	b.n	80047e6 <HAL_ADC_Start_DMA+0x18a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d006      	beq.n	80046c6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d003      	beq.n	80046c6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b09      	cmp	r3, #9
 80046c2:	f040 8086 	bne.w	80047d2 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 ffd0 	bl	800566c <ADC_Enable>
 80046cc:	4603      	mov	r3, r0
 80046ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d178      	bne.n	80047c8 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046da:	4b49      	ldr	r3, [pc, #292]	@ (8004800 <HAL_ADC_Start_DMA+0x1a4>)
 80046dc:	4013      	ands	r3, r2
 80046de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a42      	ldr	r2, [pc, #264]	@ (80047f4 <HAL_ADC_Start_DMA+0x198>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d002      	beq.n	80046f6 <HAL_ADC_Start_DMA+0x9a>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	e000      	b.n	80046f8 <HAL_ADC_Start_DMA+0x9c>
 80046f6:	4b3e      	ldr	r3, [pc, #248]	@ (80047f0 <HAL_ADC_Start_DMA+0x194>)
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d002      	beq.n	8004706 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d105      	bne.n	8004712 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004716:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d006      	beq.n	800472c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004722:	f023 0206 	bic.w	r2, r3, #6
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	665a      	str	r2, [r3, #100]	@ 0x64
 800472a:	e002      	b.n	8004732 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004736:	4a33      	ldr	r2, [pc, #204]	@ (8004804 <HAL_ADC_Start_DMA+0x1a8>)
 8004738:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473e:	4a32      	ldr	r2, [pc, #200]	@ (8004808 <HAL_ADC_Start_DMA+0x1ac>)
 8004740:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004746:	4a31      	ldr	r2, [pc, #196]	@ (800480c <HAL_ADC_Start_DMA+0x1b0>)
 8004748:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	221c      	movs	r2, #28
 8004750:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0210 	orr.w	r2, r2, #16
 8004768:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a28      	ldr	r2, [pc, #160]	@ (8004810 <HAL_ADC_Start_DMA+0x1b4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d10f      	bne.n	8004794 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f7ff fbfe 	bl	8003f84 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fbe9 	bl	8003f64 <LL_ADC_EnableDMAReq>
 8004792:	e007      	b.n	80047a4 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f7ff fbcd 	bl	8003f3e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3340      	adds	r3, #64	@ 0x40
 80047ae:	4619      	mov	r1, r3
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f001 ff08 	bl	80065c8 <HAL_DMA_Start_IT>
 80047b8:	4603      	mov	r3, r0
 80047ba:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff fd09 	bl	80041d8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80047c6:	e00d      	b.n	80047e4 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80047d0:	e008      	b.n	80047e4 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80047de:	e001      	b.n	80047e4 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
 80047e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40022000 	.word	0x40022000
 80047f4:	40022100 	.word	0x40022100
 80047f8:	40022300 	.word	0x40022300
 80047fc:	58026300 	.word	0x58026300
 8004800:	fffff0fe 	.word	0xfffff0fe
 8004804:	08005781 	.word	0x08005781
 8004808:	08005859 	.word	0x08005859
 800480c:	08005875 	.word	0x08005875
 8004810:	58026000 	.word	0x58026000

08004814 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	@ 0x28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800481c:	2300      	movs	r3, #0
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a87      	ldr	r2, [pc, #540]	@ (8004a54 <HAL_ADC_IRQHandler+0x240>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_ADC_IRQHandler+0x30>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a86      	ldr	r2, [pc, #536]	@ (8004a58 <HAL_ADC_IRQHandler+0x244>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d101      	bne.n	8004848 <HAL_ADC_IRQHandler+0x34>
 8004844:	4b85      	ldr	r3, [pc, #532]	@ (8004a5c <HAL_ADC_IRQHandler+0x248>)
 8004846:	e000      	b.n	800484a <HAL_ADC_IRQHandler+0x36>
 8004848:	4b85      	ldr	r3, [pc, #532]	@ (8004a60 <HAL_ADC_IRQHandler+0x24c>)
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fc32 	bl	80040b4 <LL_ADC_GetMultimode>
 8004850:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d017      	beq.n	800488c <HAL_ADC_IRQHandler+0x78>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d012      	beq.n	800488c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b00      	cmp	r3, #0
 8004870:	d105      	bne.n	800487e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004876:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 f94e 	bl	8005b20 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2202      	movs	r2, #2
 800488a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <HAL_ADC_IRQHandler+0x8c>
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8083 	beq.w	80049b2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d07d      	beq.n	80049b2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d105      	bne.n	80048ce <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff faf4 	bl	8003ec0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d062      	beq.n	80049a4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004a58 <HAL_ADC_IRQHandler+0x244>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d002      	beq.n	80048ee <HAL_ADC_IRQHandler+0xda>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	e000      	b.n	80048f0 <HAL_ADC_IRQHandler+0xdc>
 80048ee:	4b59      	ldr	r3, [pc, #356]	@ (8004a54 <HAL_ADC_IRQHandler+0x240>)
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d008      	beq.n	800490a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b05      	cmp	r3, #5
 8004902:	d002      	beq.n	800490a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b09      	cmp	r3, #9
 8004908:	d104      	bne.n	8004914 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	623b      	str	r3, [r7, #32]
 8004912:	e00c      	b.n	800492e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a4f      	ldr	r2, [pc, #316]	@ (8004a58 <HAL_ADC_IRQHandler+0x244>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d002      	beq.n	8004924 <HAL_ADC_IRQHandler+0x110>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	e000      	b.n	8004926 <HAL_ADC_IRQHandler+0x112>
 8004924:	4b4b      	ldr	r3, [pc, #300]	@ (8004a54 <HAL_ADC_IRQHandler+0x240>)
 8004926:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d135      	bne.n	80049a4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b08      	cmp	r3, #8
 8004944:	d12e      	bne.n	80049a4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fc58 	bl	8004200 <LL_ADC_REG_IsConversionOngoing>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d11a      	bne.n	800498c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 020c 	bic.w	r2, r2, #12
 8004964:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800496a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004976:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d112      	bne.n	80049a4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004982:	f043 0201 	orr.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	661a      	str	r2, [r3, #96]	@ 0x60
 800498a:	e00b      	b.n	80049a4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004990:	f043 0210 	orr.w	r2, r3, #16
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800499c:	f043 0201 	orr.w	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fd ff15 	bl	80027d4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	220c      	movs	r2, #12
 80049b0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <HAL_ADC_IRQHandler+0x1b2>
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10b      	bne.n	80049de <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80a0 	beq.w	8004b12 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 809a 	beq.w	8004b12 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d105      	bne.n	80049f6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ee:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fadc 	bl	8003fb8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004a00:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fa5a 	bl	8003ec0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a0c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a11      	ldr	r2, [pc, #68]	@ (8004a58 <HAL_ADC_IRQHandler+0x244>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d002      	beq.n	8004a1e <HAL_ADC_IRQHandler+0x20a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	e000      	b.n	8004a20 <HAL_ADC_IRQHandler+0x20c>
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <HAL_ADC_IRQHandler+0x240>)
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d008      	beq.n	8004a3a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b06      	cmp	r3, #6
 8004a32:	d002      	beq.n	8004a3a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b07      	cmp	r3, #7
 8004a38:	d104      	bne.n	8004a44 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	623b      	str	r3, [r7, #32]
 8004a42:	e014      	b.n	8004a6e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a03      	ldr	r2, [pc, #12]	@ (8004a58 <HAL_ADC_IRQHandler+0x244>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00a      	beq.n	8004a64 <HAL_ADC_IRQHandler+0x250>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	e008      	b.n	8004a66 <HAL_ADC_IRQHandler+0x252>
 8004a54:	40022000 	.word	0x40022000
 8004a58:	40022100 	.word	0x40022100
 8004a5c:	40022300 	.word	0x40022300
 8004a60:	58026300 	.word	0x58026300
 8004a64:	4b84      	ldr	r3, [pc, #528]	@ (8004c78 <HAL_ADC_IRQHandler+0x464>)
 8004a66:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d047      	beq.n	8004b04 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <HAL_ADC_IRQHandler+0x27a>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d03f      	beq.n	8004b04 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d13a      	bne.n	8004b04 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a98:	2b40      	cmp	r3, #64	@ 0x40
 8004a9a:	d133      	bne.n	8004b04 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d12e      	bne.n	8004b04 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff fbbb 	bl	8004226 <LL_ADC_INJ_IsConversionOngoing>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d11a      	bne.n	8004aec <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ac4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d112      	bne.n	8004b04 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae2:	f043 0201 	orr.w	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	661a      	str	r2, [r3, #96]	@ 0x60
 8004aea:	e00b      	b.n	8004b04 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af0:	f043 0210 	orr.w	r2, r3, #16
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004afc:	f043 0201 	orr.w	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 ffe3 	bl	8005ad0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2260      	movs	r2, #96	@ 0x60
 8004b10:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d011      	beq.n	8004b40 <HAL_ADC_IRQHandler+0x32c>
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00c      	beq.n	8004b40 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f8b2 	bl	8004c9c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2280      	movs	r2, #128	@ 0x80
 8004b3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <HAL_ADC_IRQHandler+0x35c>
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b58:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 ffc9 	bl	8005af8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d012      	beq.n	8004ba0 <HAL_ADC_IRQHandler+0x38c>
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 ffbb 	bl	8005b0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d043      	beq.n	8004c32 <HAL_ADC_IRQHandler+0x41e>
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d03e      	beq.n	8004c32 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc0:	e021      	b.n	8004c06 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d015      	beq.n	8004bf4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004c78 <HAL_ADC_IRQHandler+0x464>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_ADC_IRQHandler+0x3c8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a29      	ldr	r2, [pc, #164]	@ (8004c7c <HAL_ADC_IRQHandler+0x468>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d101      	bne.n	8004be0 <HAL_ADC_IRQHandler+0x3cc>
 8004bdc:	4b28      	ldr	r3, [pc, #160]	@ (8004c80 <HAL_ADC_IRQHandler+0x46c>)
 8004bde:	e000      	b.n	8004be2 <HAL_ADC_IRQHandler+0x3ce>
 8004be0:	4b28      	ldr	r3, [pc, #160]	@ (8004c84 <HAL_ADC_IRQHandler+0x470>)
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff fa74 	bl	80040d0 <LL_ADC_GetMultiDMATransfer>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf2:	e008      	b.n	8004c06 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004c02:	2301      	movs	r3, #1
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10e      	bne.n	8004c2a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c10:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c1c:	f043 0202 	orr.w	r2, r3, #2
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f843 	bl	8004cb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2210      	movs	r2, #16
 8004c30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d018      	beq.n	8004c6e <HAL_ADC_IRQHandler+0x45a>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d013      	beq.n	8004c6e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c56:	f043 0208 	orr.w	r2, r3, #8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c66:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 ff3b 	bl	8005ae4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004c6e:	bf00      	nop
 8004c70:	3728      	adds	r7, #40	@ 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40022000 	.word	0x40022000
 8004c7c:	40022100 	.word	0x40022100
 8004c80:	40022300 	.word	0x40022300
 8004c84:	58026300 	.word	0x58026300

08004c88 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b0a5      	sub	sp, #148	@ 0x94
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cde:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4aa4      	ldr	r2, [pc, #656]	@ (8004f78 <HAL_ADC_ConfigChannel+0x2b4>)
 8004ce6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d102      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x34>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	f000 bca2 	b.w	800563c <HAL_ADC_ConfigChannel+0x978>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fa7b 	bl	8004200 <LL_ADC_REG_IsConversionOngoing>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f040 8486 	bne.w	800561e <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	db31      	blt.n	8004d7e <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a97      	ldr	r2, [pc, #604]	@ (8004f7c <HAL_ADC_ConfigChannel+0x2b8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d02c      	beq.n	8004d7e <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d108      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0x7e>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	0e9b      	lsrs	r3, r3, #26
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	e016      	b.n	8004d70 <HAL_ADC_ConfigChannel+0xac>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d4a:	fa93 f3a3 	rbit	r3, r3
 8004d4e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004d50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d52:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004d54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8004d5a:	2320      	movs	r3, #32
 8004d5c:	e003      	b.n	8004d66 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8004d5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d60:	fab3 f383 	clz	r3, r3
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	69d1      	ldr	r1, [r2, #28]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f7ff f8ab 	bl	8003ee6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fa33 	bl	8004200 <LL_ADC_REG_IsConversionOngoing>
 8004d9a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fa3f 	bl	8004226 <LL_ADC_INJ_IsConversionOngoing>
 8004da8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f040 824a 	bne.w	800524a <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004db6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 8245 	bne.w	800524a <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	6819      	ldr	r1, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f7ff f906 	bl	8003fde <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a69      	ldr	r2, [pc, #420]	@ (8004f7c <HAL_ADC_ConfigChannel+0x2b8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d10d      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	08db      	lsrs	r3, r3, #3
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004df6:	e032      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004df8:	4b61      	ldr	r3, [pc, #388]	@ (8004f80 <HAL_ADC_ConfigChannel+0x2bc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004e00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e04:	d10b      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x15a>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	e01d      	b.n	8004e5a <HAL_ADC_ConfigChannel+0x196>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x180>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	089b      	lsrs	r3, r3, #2
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	e00a      	b.n	8004e5a <HAL_ADC_ConfigChannel+0x196>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d048      	beq.n	8004ef8 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6919      	ldr	r1, [r3, #16]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e76:	f7fe ff31 	bl	8003cdc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f7c <HAL_ADC_ConfigChannel+0x2b8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d119      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6919      	ldr	r1, [r3, #16]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f7fe ffc9 	bl	8003e28 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6919      	ldr	r1, [r3, #16]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d102      	bne.n	8004eae <HAL_ADC_ConfigChannel+0x1ea>
 8004ea8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004eac:	e000      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0x1ec>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	f7fe ff97 	bl	8003de4 <LL_ADC_SetOffsetSaturation>
 8004eb6:	e1c8      	b.n	800524a <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	6919      	ldr	r1, [r3, #16]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d102      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x20c>
 8004eca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004ece:	e000      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x20e>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f7fe ff64 	bl	8003da0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6919      	ldr	r1, [r3, #16]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	7e1b      	ldrb	r3, [r3, #24]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d102      	bne.n	8004eee <HAL_ADC_ConfigChannel+0x22a>
 8004ee8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004eec:	e000      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x22c>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f7fe ff3b 	bl	8003d6c <LL_ADC_SetDataRightShift>
 8004ef6:	e1a8      	b.n	800524a <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1f      	ldr	r2, [pc, #124]	@ (8004f7c <HAL_ADC_ConfigChannel+0x2b8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	f040 815b 	bne.w	80051ba <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe ff18 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x26c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2100      	movs	r1, #0
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe ff0d 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 8004f26:	4603      	mov	r3, r0
 8004f28:	0e9b      	lsrs	r3, r3, #26
 8004f2a:	f003 021f 	and.w	r2, r3, #31
 8004f2e:	e017      	b.n	8004f60 <HAL_ADC_ConfigChannel+0x29c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe ff02 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f42:	fa93 f3a3 	rbit	r3, r3
 8004f46:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004f48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004f52:	2320      	movs	r3, #32
 8004f54:	e003      	b.n	8004f5e <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8004f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f58:	fab3 f383 	clz	r3, r3
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <HAL_ADC_ConfigChannel+0x2c0>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	0e9b      	lsrs	r3, r3, #26
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	e017      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x2e4>
 8004f78:	47ff0000 	.word	0x47ff0000
 8004f7c:	58026000 	.word	0x58026000
 8004f80:	5c001000 	.word	0x5c001000
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f8c:	fa93 f3a3 	rbit	r3, r3
 8004f90:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004f92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f94:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004f96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	e003      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8004fa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fa2:	fab3 f383 	clz	r3, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d106      	bne.n	8004fba <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fe ff59 	bl	8003e6c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe febd 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x322>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe feb2 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	0e9b      	lsrs	r3, r3, #26
 8004fe0:	f003 021f 	and.w	r2, r3, #31
 8004fe4:	e017      	b.n	8005016 <HAL_ADC_ConfigChannel+0x352>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2101      	movs	r1, #1
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fe fea7 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ff8:	fa93 f3a3 	rbit	r3, r3
 8004ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005000:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8005008:	2320      	movs	r3, #32
 800500a:	e003      	b.n	8005014 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800500c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800500e:	fab3 f383 	clz	r3, r3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800501e:	2b00      	cmp	r3, #0
 8005020:	d105      	bne.n	800502e <HAL_ADC_ConfigChannel+0x36a>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	0e9b      	lsrs	r3, r3, #26
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	e011      	b.n	8005052 <HAL_ADC_ConfigChannel+0x38e>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005036:	fa93 f3a3 	rbit	r3, r3
 800503a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800503c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800503e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8005046:	2320      	movs	r3, #32
 8005048:	e003      	b.n	8005052 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800504a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800504c:	fab3 f383 	clz	r3, r3
 8005050:	b2db      	uxtb	r3, r3
 8005052:	429a      	cmp	r2, r3
 8005054:	d106      	bne.n	8005064 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2200      	movs	r2, #0
 800505c:	2101      	movs	r1, #1
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe ff04 	bl	8003e6c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2102      	movs	r1, #2
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe fe68 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 8005070:	4603      	mov	r3, r0
 8005072:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <HAL_ADC_ConfigChannel+0x3cc>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2102      	movs	r1, #2
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe fe5d 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 8005086:	4603      	mov	r3, r0
 8005088:	0e9b      	lsrs	r3, r3, #26
 800508a:	f003 021f 	and.w	r2, r3, #31
 800508e:	e017      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x3fc>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2102      	movs	r1, #2
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe fe52 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 800509c:	4603      	mov	r3, r0
 800509e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a2:	fa93 f3a3 	rbit	r3, r3
 80050a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80050a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80050ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80050b2:	2320      	movs	r3, #32
 80050b4:	e003      	b.n	80050be <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80050b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b8:	fab3 f383 	clz	r3, r3
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d105      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x414>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	0e9b      	lsrs	r3, r3, #26
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	e011      	b.n	80050fc <HAL_ADC_ConfigChannel+0x438>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e0:	fa93 f3a3 	rbit	r3, r3
 80050e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80050e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80050f0:	2320      	movs	r3, #32
 80050f2:	e003      	b.n	80050fc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	fab3 f383 	clz	r3, r3
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d106      	bne.n	800510e <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2200      	movs	r2, #0
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe feaf 	bl	8003e6c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2103      	movs	r1, #3
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe fe13 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 800511a:	4603      	mov	r3, r0
 800511c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <HAL_ADC_ConfigChannel+0x476>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2103      	movs	r1, #3
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fe08 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 8005130:	4603      	mov	r3, r0
 8005132:	0e9b      	lsrs	r3, r3, #26
 8005134:	f003 021f 	and.w	r2, r3, #31
 8005138:	e017      	b.n	800516a <HAL_ADC_ConfigChannel+0x4a6>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2103      	movs	r1, #3
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe fdfd 	bl	8003d40 <LL_ADC_GetOffsetChannel>
 8005146:	4603      	mov	r3, r0
 8005148:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	fa93 f3a3 	rbit	r3, r3
 8005150:	61fb      	str	r3, [r7, #28]
  return result;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800515c:	2320      	movs	r3, #32
 800515e:	e003      	b.n	8005168 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	fab3 f383 	clz	r3, r3
 8005166:	b2db      	uxtb	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005172:	2b00      	cmp	r3, #0
 8005174:	d105      	bne.n	8005182 <HAL_ADC_ConfigChannel+0x4be>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	0e9b      	lsrs	r3, r3, #26
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	e011      	b.n	80051a6 <HAL_ADC_ConfigChannel+0x4e2>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	fa93 f3a3 	rbit	r3, r3
 800518e:	613b      	str	r3, [r7, #16]
  return result;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800519a:	2320      	movs	r3, #32
 800519c:	e003      	b.n	80051a6 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	fab3 f383 	clz	r3, r3
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d14f      	bne.n	800524a <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2200      	movs	r2, #0
 80051b0:	2103      	movs	r1, #3
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fe5a 	bl	8003e6c <LL_ADC_SetOffsetState>
 80051b8:	e047      	b.n	800524a <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	069b      	lsls	r3, r3, #26
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d107      	bne.n	80051de <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80051dc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	069b      	lsls	r3, r3, #26
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d107      	bne.n	8005202 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005200:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005208:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	069b      	lsls	r3, r3, #26
 8005212:	429a      	cmp	r2, r3
 8005214:	d107      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005224:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800522c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	069b      	lsls	r3, r3, #26
 8005236:	429a      	cmp	r2, r3
 8005238:	d107      	bne.n	800524a <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005248:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe ffae 	bl	80041b0 <LL_ADC_IsEnabled>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	f040 81ea 	bne.w	8005630 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	461a      	mov	r2, r3
 800526a:	f7fe fee3 	bl	8004034 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	4a7a      	ldr	r2, [pc, #488]	@ (800545c <HAL_ADC_ConfigChannel+0x798>)
 8005274:	4293      	cmp	r3, r2
 8005276:	f040 80e0 	bne.w	800543a <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4977      	ldr	r1, [pc, #476]	@ (8005460 <HAL_ADC_ConfigChannel+0x79c>)
 8005284:	428b      	cmp	r3, r1
 8005286:	d147      	bne.n	8005318 <HAL_ADC_ConfigChannel+0x654>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4975      	ldr	r1, [pc, #468]	@ (8005464 <HAL_ADC_ConfigChannel+0x7a0>)
 800528e:	428b      	cmp	r3, r1
 8005290:	d040      	beq.n	8005314 <HAL_ADC_ConfigChannel+0x650>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4974      	ldr	r1, [pc, #464]	@ (8005468 <HAL_ADC_ConfigChannel+0x7a4>)
 8005298:	428b      	cmp	r3, r1
 800529a:	d039      	beq.n	8005310 <HAL_ADC_ConfigChannel+0x64c>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4972      	ldr	r1, [pc, #456]	@ (800546c <HAL_ADC_ConfigChannel+0x7a8>)
 80052a2:	428b      	cmp	r3, r1
 80052a4:	d032      	beq.n	800530c <HAL_ADC_ConfigChannel+0x648>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4971      	ldr	r1, [pc, #452]	@ (8005470 <HAL_ADC_ConfigChannel+0x7ac>)
 80052ac:	428b      	cmp	r3, r1
 80052ae:	d02b      	beq.n	8005308 <HAL_ADC_ConfigChannel+0x644>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	496f      	ldr	r1, [pc, #444]	@ (8005474 <HAL_ADC_ConfigChannel+0x7b0>)
 80052b6:	428b      	cmp	r3, r1
 80052b8:	d024      	beq.n	8005304 <HAL_ADC_ConfigChannel+0x640>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	496e      	ldr	r1, [pc, #440]	@ (8005478 <HAL_ADC_ConfigChannel+0x7b4>)
 80052c0:	428b      	cmp	r3, r1
 80052c2:	d01d      	beq.n	8005300 <HAL_ADC_ConfigChannel+0x63c>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	496c      	ldr	r1, [pc, #432]	@ (800547c <HAL_ADC_ConfigChannel+0x7b8>)
 80052ca:	428b      	cmp	r3, r1
 80052cc:	d016      	beq.n	80052fc <HAL_ADC_ConfigChannel+0x638>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	496b      	ldr	r1, [pc, #428]	@ (8005480 <HAL_ADC_ConfigChannel+0x7bc>)
 80052d4:	428b      	cmp	r3, r1
 80052d6:	d00f      	beq.n	80052f8 <HAL_ADC_ConfigChannel+0x634>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4969      	ldr	r1, [pc, #420]	@ (8005484 <HAL_ADC_ConfigChannel+0x7c0>)
 80052de:	428b      	cmp	r3, r1
 80052e0:	d008      	beq.n	80052f4 <HAL_ADC_ConfigChannel+0x630>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4968      	ldr	r1, [pc, #416]	@ (8005488 <HAL_ADC_ConfigChannel+0x7c4>)
 80052e8:	428b      	cmp	r3, r1
 80052ea:	d101      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x62c>
 80052ec:	4b67      	ldr	r3, [pc, #412]	@ (800548c <HAL_ADC_ConfigChannel+0x7c8>)
 80052ee:	e0a0      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 80052f0:	2300      	movs	r3, #0
 80052f2:	e09e      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 80052f4:	4b66      	ldr	r3, [pc, #408]	@ (8005490 <HAL_ADC_ConfigChannel+0x7cc>)
 80052f6:	e09c      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 80052f8:	4b66      	ldr	r3, [pc, #408]	@ (8005494 <HAL_ADC_ConfigChannel+0x7d0>)
 80052fa:	e09a      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 80052fc:	4b60      	ldr	r3, [pc, #384]	@ (8005480 <HAL_ADC_ConfigChannel+0x7bc>)
 80052fe:	e098      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005300:	4b5e      	ldr	r3, [pc, #376]	@ (800547c <HAL_ADC_ConfigChannel+0x7b8>)
 8005302:	e096      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005304:	4b64      	ldr	r3, [pc, #400]	@ (8005498 <HAL_ADC_ConfigChannel+0x7d4>)
 8005306:	e094      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005308:	4b64      	ldr	r3, [pc, #400]	@ (800549c <HAL_ADC_ConfigChannel+0x7d8>)
 800530a:	e092      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 800530c:	4b64      	ldr	r3, [pc, #400]	@ (80054a0 <HAL_ADC_ConfigChannel+0x7dc>)
 800530e:	e090      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005310:	4b64      	ldr	r3, [pc, #400]	@ (80054a4 <HAL_ADC_ConfigChannel+0x7e0>)
 8005312:	e08e      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005314:	2301      	movs	r3, #1
 8005316:	e08c      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4962      	ldr	r1, [pc, #392]	@ (80054a8 <HAL_ADC_ConfigChannel+0x7e4>)
 800531e:	428b      	cmp	r3, r1
 8005320:	d140      	bne.n	80053a4 <HAL_ADC_ConfigChannel+0x6e0>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	494f      	ldr	r1, [pc, #316]	@ (8005464 <HAL_ADC_ConfigChannel+0x7a0>)
 8005328:	428b      	cmp	r3, r1
 800532a:	d039      	beq.n	80053a0 <HAL_ADC_ConfigChannel+0x6dc>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	494d      	ldr	r1, [pc, #308]	@ (8005468 <HAL_ADC_ConfigChannel+0x7a4>)
 8005332:	428b      	cmp	r3, r1
 8005334:	d032      	beq.n	800539c <HAL_ADC_ConfigChannel+0x6d8>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	494c      	ldr	r1, [pc, #304]	@ (800546c <HAL_ADC_ConfigChannel+0x7a8>)
 800533c:	428b      	cmp	r3, r1
 800533e:	d02b      	beq.n	8005398 <HAL_ADC_ConfigChannel+0x6d4>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	494a      	ldr	r1, [pc, #296]	@ (8005470 <HAL_ADC_ConfigChannel+0x7ac>)
 8005346:	428b      	cmp	r3, r1
 8005348:	d024      	beq.n	8005394 <HAL_ADC_ConfigChannel+0x6d0>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4949      	ldr	r1, [pc, #292]	@ (8005474 <HAL_ADC_ConfigChannel+0x7b0>)
 8005350:	428b      	cmp	r3, r1
 8005352:	d01d      	beq.n	8005390 <HAL_ADC_ConfigChannel+0x6cc>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4947      	ldr	r1, [pc, #284]	@ (8005478 <HAL_ADC_ConfigChannel+0x7b4>)
 800535a:	428b      	cmp	r3, r1
 800535c:	d016      	beq.n	800538c <HAL_ADC_ConfigChannel+0x6c8>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4946      	ldr	r1, [pc, #280]	@ (800547c <HAL_ADC_ConfigChannel+0x7b8>)
 8005364:	428b      	cmp	r3, r1
 8005366:	d00f      	beq.n	8005388 <HAL_ADC_ConfigChannel+0x6c4>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4944      	ldr	r1, [pc, #272]	@ (8005480 <HAL_ADC_ConfigChannel+0x7bc>)
 800536e:	428b      	cmp	r3, r1
 8005370:	d008      	beq.n	8005384 <HAL_ADC_ConfigChannel+0x6c0>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4944      	ldr	r1, [pc, #272]	@ (8005488 <HAL_ADC_ConfigChannel+0x7c4>)
 8005378:	428b      	cmp	r3, r1
 800537a:	d101      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x6bc>
 800537c:	4b43      	ldr	r3, [pc, #268]	@ (800548c <HAL_ADC_ConfigChannel+0x7c8>)
 800537e:	e058      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005380:	2300      	movs	r3, #0
 8005382:	e056      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005384:	4b43      	ldr	r3, [pc, #268]	@ (8005494 <HAL_ADC_ConfigChannel+0x7d0>)
 8005386:	e054      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005388:	4b3d      	ldr	r3, [pc, #244]	@ (8005480 <HAL_ADC_ConfigChannel+0x7bc>)
 800538a:	e052      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 800538c:	4b3b      	ldr	r3, [pc, #236]	@ (800547c <HAL_ADC_ConfigChannel+0x7b8>)
 800538e:	e050      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005390:	4b41      	ldr	r3, [pc, #260]	@ (8005498 <HAL_ADC_ConfigChannel+0x7d4>)
 8005392:	e04e      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005394:	4b41      	ldr	r3, [pc, #260]	@ (800549c <HAL_ADC_ConfigChannel+0x7d8>)
 8005396:	e04c      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005398:	4b41      	ldr	r3, [pc, #260]	@ (80054a0 <HAL_ADC_ConfigChannel+0x7dc>)
 800539a:	e04a      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 800539c:	4b41      	ldr	r3, [pc, #260]	@ (80054a4 <HAL_ADC_ConfigChannel+0x7e0>)
 800539e:	e048      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e046      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4940      	ldr	r1, [pc, #256]	@ (80054ac <HAL_ADC_ConfigChannel+0x7e8>)
 80053aa:	428b      	cmp	r3, r1
 80053ac:	d140      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x76c>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	492c      	ldr	r1, [pc, #176]	@ (8005464 <HAL_ADC_ConfigChannel+0x7a0>)
 80053b4:	428b      	cmp	r3, r1
 80053b6:	d039      	beq.n	800542c <HAL_ADC_ConfigChannel+0x768>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	492a      	ldr	r1, [pc, #168]	@ (8005468 <HAL_ADC_ConfigChannel+0x7a4>)
 80053be:	428b      	cmp	r3, r1
 80053c0:	d032      	beq.n	8005428 <HAL_ADC_ConfigChannel+0x764>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4929      	ldr	r1, [pc, #164]	@ (800546c <HAL_ADC_ConfigChannel+0x7a8>)
 80053c8:	428b      	cmp	r3, r1
 80053ca:	d02b      	beq.n	8005424 <HAL_ADC_ConfigChannel+0x760>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4927      	ldr	r1, [pc, #156]	@ (8005470 <HAL_ADC_ConfigChannel+0x7ac>)
 80053d2:	428b      	cmp	r3, r1
 80053d4:	d024      	beq.n	8005420 <HAL_ADC_ConfigChannel+0x75c>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4926      	ldr	r1, [pc, #152]	@ (8005474 <HAL_ADC_ConfigChannel+0x7b0>)
 80053dc:	428b      	cmp	r3, r1
 80053de:	d01d      	beq.n	800541c <HAL_ADC_ConfigChannel+0x758>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4924      	ldr	r1, [pc, #144]	@ (8005478 <HAL_ADC_ConfigChannel+0x7b4>)
 80053e6:	428b      	cmp	r3, r1
 80053e8:	d016      	beq.n	8005418 <HAL_ADC_ConfigChannel+0x754>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4923      	ldr	r1, [pc, #140]	@ (800547c <HAL_ADC_ConfigChannel+0x7b8>)
 80053f0:	428b      	cmp	r3, r1
 80053f2:	d00f      	beq.n	8005414 <HAL_ADC_ConfigChannel+0x750>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4926      	ldr	r1, [pc, #152]	@ (8005494 <HAL_ADC_ConfigChannel+0x7d0>)
 80053fa:	428b      	cmp	r3, r1
 80053fc:	d008      	beq.n	8005410 <HAL_ADC_ConfigChannel+0x74c>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	492b      	ldr	r1, [pc, #172]	@ (80054b0 <HAL_ADC_ConfigChannel+0x7ec>)
 8005404:	428b      	cmp	r3, r1
 8005406:	d101      	bne.n	800540c <HAL_ADC_ConfigChannel+0x748>
 8005408:	4b2a      	ldr	r3, [pc, #168]	@ (80054b4 <HAL_ADC_ConfigChannel+0x7f0>)
 800540a:	e012      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 800540c:	2300      	movs	r3, #0
 800540e:	e010      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005410:	4b27      	ldr	r3, [pc, #156]	@ (80054b0 <HAL_ADC_ConfigChannel+0x7ec>)
 8005412:	e00e      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005414:	4b1a      	ldr	r3, [pc, #104]	@ (8005480 <HAL_ADC_ConfigChannel+0x7bc>)
 8005416:	e00c      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005418:	4b18      	ldr	r3, [pc, #96]	@ (800547c <HAL_ADC_ConfigChannel+0x7b8>)
 800541a:	e00a      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 800541c:	4b1e      	ldr	r3, [pc, #120]	@ (8005498 <HAL_ADC_ConfigChannel+0x7d4>)
 800541e:	e008      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005420:	4b1e      	ldr	r3, [pc, #120]	@ (800549c <HAL_ADC_ConfigChannel+0x7d8>)
 8005422:	e006      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005424:	4b1e      	ldr	r3, [pc, #120]	@ (80054a0 <HAL_ADC_ConfigChannel+0x7dc>)
 8005426:	e004      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005428:	4b1e      	ldr	r3, [pc, #120]	@ (80054a4 <HAL_ADC_ConfigChannel+0x7e0>)
 800542a:	e002      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <HAL_ADC_ConfigChannel+0x76e>
 8005430:	2300      	movs	r3, #0
 8005432:	4619      	mov	r1, r3
 8005434:	4610      	mov	r0, r2
 8005436:	f7fe fc17 	bl	8003c68 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f280 80f6 	bge.w	8005630 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a05      	ldr	r2, [pc, #20]	@ (8005460 <HAL_ADC_ConfigChannel+0x79c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d004      	beq.n	8005458 <HAL_ADC_ConfigChannel+0x794>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a15      	ldr	r2, [pc, #84]	@ (80054a8 <HAL_ADC_ConfigChannel+0x7e4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d131      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x7f8>
 8005458:	4b17      	ldr	r3, [pc, #92]	@ (80054b8 <HAL_ADC_ConfigChannel+0x7f4>)
 800545a:	e030      	b.n	80054be <HAL_ADC_ConfigChannel+0x7fa>
 800545c:	47ff0000 	.word	0x47ff0000
 8005460:	40022000 	.word	0x40022000
 8005464:	04300002 	.word	0x04300002
 8005468:	08600004 	.word	0x08600004
 800546c:	0c900008 	.word	0x0c900008
 8005470:	10c00010 	.word	0x10c00010
 8005474:	14f00020 	.word	0x14f00020
 8005478:	2a000400 	.word	0x2a000400
 800547c:	2e300800 	.word	0x2e300800
 8005480:	32601000 	.word	0x32601000
 8005484:	43210000 	.word	0x43210000
 8005488:	4b840000 	.word	0x4b840000
 800548c:	4fb80000 	.word	0x4fb80000
 8005490:	47520000 	.word	0x47520000
 8005494:	36902000 	.word	0x36902000
 8005498:	25b00200 	.word	0x25b00200
 800549c:	21800100 	.word	0x21800100
 80054a0:	1d500080 	.word	0x1d500080
 80054a4:	19200040 	.word	0x19200040
 80054a8:	40022100 	.word	0x40022100
 80054ac:	58026000 	.word	0x58026000
 80054b0:	3ac04000 	.word	0x3ac04000
 80054b4:	3ef08000 	.word	0x3ef08000
 80054b8:	40022300 	.word	0x40022300
 80054bc:	4b61      	ldr	r3, [pc, #388]	@ (8005644 <HAL_ADC_ConfigChannel+0x980>)
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fe fbc4 	bl	8003c4c <LL_ADC_GetCommonPathInternalCh>
 80054c4:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a5f      	ldr	r2, [pc, #380]	@ (8005648 <HAL_ADC_ConfigChannel+0x984>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d004      	beq.n	80054da <HAL_ADC_ConfigChannel+0x816>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a5d      	ldr	r2, [pc, #372]	@ (800564c <HAL_ADC_ConfigChannel+0x988>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d10e      	bne.n	80054f8 <HAL_ADC_ConfigChannel+0x834>
 80054da:	485b      	ldr	r0, [pc, #364]	@ (8005648 <HAL_ADC_ConfigChannel+0x984>)
 80054dc:	f7fe fe68 	bl	80041b0 <LL_ADC_IsEnabled>
 80054e0:	4604      	mov	r4, r0
 80054e2:	485a      	ldr	r0, [pc, #360]	@ (800564c <HAL_ADC_ConfigChannel+0x988>)
 80054e4:	f7fe fe64 	bl	80041b0 <LL_ADC_IsEnabled>
 80054e8:	4603      	mov	r3, r0
 80054ea:	4323      	orrs	r3, r4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	bf0c      	ite	eq
 80054f0:	2301      	moveq	r3, #1
 80054f2:	2300      	movne	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e008      	b.n	800550a <HAL_ADC_ConfigChannel+0x846>
 80054f8:	4855      	ldr	r0, [pc, #340]	@ (8005650 <HAL_ADC_ConfigChannel+0x98c>)
 80054fa:	f7fe fe59 	bl	80041b0 <LL_ADC_IsEnabled>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	bf0c      	ite	eq
 8005504:	2301      	moveq	r3, #1
 8005506:	2300      	movne	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d07d      	beq.n	800560a <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a50      	ldr	r2, [pc, #320]	@ (8005654 <HAL_ADC_ConfigChannel+0x990>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d130      	bne.n	800557a <HAL_ADC_ConfigChannel+0x8b6>
 8005518:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800551a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d12b      	bne.n	800557a <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a4a      	ldr	r2, [pc, #296]	@ (8005650 <HAL_ADC_ConfigChannel+0x98c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	f040 8081 	bne.w	8005630 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a45      	ldr	r2, [pc, #276]	@ (8005648 <HAL_ADC_ConfigChannel+0x984>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_ADC_ConfigChannel+0x87e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a43      	ldr	r2, [pc, #268]	@ (800564c <HAL_ADC_ConfigChannel+0x988>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d101      	bne.n	8005546 <HAL_ADC_ConfigChannel+0x882>
 8005542:	4a45      	ldr	r2, [pc, #276]	@ (8005658 <HAL_ADC_ConfigChannel+0x994>)
 8005544:	e000      	b.n	8005548 <HAL_ADC_ConfigChannel+0x884>
 8005546:	4a3f      	ldr	r2, [pc, #252]	@ (8005644 <HAL_ADC_ConfigChannel+0x980>)
 8005548:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800554a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f7fe fb68 	bl	8003c26 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005556:	4b41      	ldr	r3, [pc, #260]	@ (800565c <HAL_ADC_ConfigChannel+0x998>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	099b      	lsrs	r3, r3, #6
 800555c:	4a40      	ldr	r2, [pc, #256]	@ (8005660 <HAL_ADC_ConfigChannel+0x99c>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	099b      	lsrs	r3, r3, #6
 8005564:	3301      	adds	r3, #1
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800556a:	e002      	b.n	8005572 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3b01      	subs	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f9      	bne.n	800556c <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005578:	e05a      	b.n	8005630 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a39      	ldr	r2, [pc, #228]	@ (8005664 <HAL_ADC_ConfigChannel+0x9a0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d11e      	bne.n	80055c2 <HAL_ADC_ConfigChannel+0x8fe>
 8005584:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005586:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d119      	bne.n	80055c2 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2f      	ldr	r2, [pc, #188]	@ (8005650 <HAL_ADC_ConfigChannel+0x98c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d14b      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2a      	ldr	r2, [pc, #168]	@ (8005648 <HAL_ADC_ConfigChannel+0x984>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_ADC_ConfigChannel+0x8e8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a29      	ldr	r2, [pc, #164]	@ (800564c <HAL_ADC_ConfigChannel+0x988>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d101      	bne.n	80055b0 <HAL_ADC_ConfigChannel+0x8ec>
 80055ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005658 <HAL_ADC_ConfigChannel+0x994>)
 80055ae:	e000      	b.n	80055b2 <HAL_ADC_ConfigChannel+0x8ee>
 80055b0:	4a24      	ldr	r2, [pc, #144]	@ (8005644 <HAL_ADC_ConfigChannel+0x980>)
 80055b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f7fe fb33 	bl	8003c26 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055c0:	e036      	b.n	8005630 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a28      	ldr	r2, [pc, #160]	@ (8005668 <HAL_ADC_ConfigChannel+0x9a4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d131      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x96c>
 80055cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d12c      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a1d      	ldr	r2, [pc, #116]	@ (8005650 <HAL_ADC_ConfigChannel+0x98c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d127      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a18      	ldr	r2, [pc, #96]	@ (8005648 <HAL_ADC_ConfigChannel+0x984>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <HAL_ADC_ConfigChannel+0x930>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a17      	ldr	r2, [pc, #92]	@ (800564c <HAL_ADC_ConfigChannel+0x988>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d101      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x934>
 80055f4:	4a18      	ldr	r2, [pc, #96]	@ (8005658 <HAL_ADC_ConfigChannel+0x994>)
 80055f6:	e000      	b.n	80055fa <HAL_ADC_ConfigChannel+0x936>
 80055f8:	4a12      	ldr	r2, [pc, #72]	@ (8005644 <HAL_ADC_ConfigChannel+0x980>)
 80055fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f7fe fb0f 	bl	8003c26 <LL_ADC_SetCommonPathInternalCh>
 8005608:	e012      	b.n	8005630 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800561c:	e008      	b.n	8005630 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005622:	f043 0220 	orr.w	r2, r3, #32
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005638:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800563c:	4618      	mov	r0, r3
 800563e:	3794      	adds	r7, #148	@ 0x94
 8005640:	46bd      	mov	sp, r7
 8005642:	bd90      	pop	{r4, r7, pc}
 8005644:	58026300 	.word	0x58026300
 8005648:	40022000 	.word	0x40022000
 800564c:	40022100 	.word	0x40022100
 8005650:	58026000 	.word	0x58026000
 8005654:	c7520000 	.word	0xc7520000
 8005658:	40022300 	.word	0x40022300
 800565c:	24000018 	.word	0x24000018
 8005660:	053e2d63 	.word	0x053e2d63
 8005664:	c3210000 	.word	0xc3210000
 8005668:	cb840000 	.word	0xcb840000

0800566c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe fd99 	bl	80041b0 <LL_ADC_IsEnabled>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d16e      	bne.n	8005762 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	4b38      	ldr	r3, [pc, #224]	@ (800576c <ADC_Enable+0x100>)
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005696:	f043 0210 	orr.w	r2, r3, #16
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e05a      	b.n	8005764 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fe fd68 	bl	8004188 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056b8:	f7fe fa80 	bl	8003bbc <HAL_GetTick>
 80056bc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005770 <ADC_Enable+0x104>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <ADC_Enable+0x66>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a29      	ldr	r2, [pc, #164]	@ (8005774 <ADC_Enable+0x108>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d101      	bne.n	80056d6 <ADC_Enable+0x6a>
 80056d2:	4b29      	ldr	r3, [pc, #164]	@ (8005778 <ADC_Enable+0x10c>)
 80056d4:	e000      	b.n	80056d8 <ADC_Enable+0x6c>
 80056d6:	4b29      	ldr	r3, [pc, #164]	@ (800577c <ADC_Enable+0x110>)
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fe fceb 	bl	80040b4 <LL_ADC_GetMultimode>
 80056de:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a23      	ldr	r2, [pc, #140]	@ (8005774 <ADC_Enable+0x108>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d002      	beq.n	80056f0 <ADC_Enable+0x84>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	e000      	b.n	80056f2 <ADC_Enable+0x86>
 80056f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005770 <ADC_Enable+0x104>)
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02c      	beq.n	8005754 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d130      	bne.n	8005762 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005700:	e028      	b.n	8005754 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fd52 	bl	80041b0 <LL_ADC_IsEnabled>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d104      	bne.n	800571c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe fd36 	bl	8004188 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800571c:	f7fe fa4e 	bl	8003bbc <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d914      	bls.n	8005754 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d00d      	beq.n	8005754 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573c:	f043 0210 	orr.w	r2, r3, #16
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005748:	f043 0201 	orr.w	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e007      	b.n	8005764 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d1cf      	bne.n	8005702 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	8000003f 	.word	0x8000003f
 8005770:	40022000 	.word	0x40022000
 8005774:	40022100 	.word	0x40022100
 8005778:	40022300 	.word	0x40022300
 800577c:	58026300 	.word	0x58026300

08005780 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005792:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005796:	2b00      	cmp	r3, #0
 8005798:	d14b      	bne.n	8005832 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800579e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d021      	beq.n	80057f8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fe fb81 	bl	8003ec0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d032      	beq.n	800582a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d12b      	bne.n	800582a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d11f      	bne.n	800582a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ee:	f043 0201 	orr.w	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80057f6:	e018      	b.n	800582a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d111      	bne.n	800582a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800580a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d105      	bne.n	800582a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005822:	f043 0201 	orr.w	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7fc ffd2 	bl	80027d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005830:	e00e      	b.n	8005850 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fa36 	bl	8004cb0 <HAL_ADC_ErrorCallback>
}
 8005844:	e004      	b.n	8005850 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800584a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	4798      	blx	r3
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005864:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fa0e 	bl	8004c88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005886:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005892:	f043 0204 	orr.w	r2, r3, #4
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff fa08 	bl	8004cb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a6c      	ldr	r2, [pc, #432]	@ (8005a68 <ADC_ConfigureBoostMode+0x1c0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d004      	beq.n	80058c4 <ADC_ConfigureBoostMode+0x1c>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a6b      	ldr	r2, [pc, #428]	@ (8005a6c <ADC_ConfigureBoostMode+0x1c4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d109      	bne.n	80058d8 <ADC_ConfigureBoostMode+0x30>
 80058c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005a70 <ADC_ConfigureBoostMode+0x1c8>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e008      	b.n	80058ea <ADC_ConfigureBoostMode+0x42>
 80058d8:	4b66      	ldr	r3, [pc, #408]	@ (8005a74 <ADC_ConfigureBoostMode+0x1cc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01c      	beq.n	8005928 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80058ee:	f004 fb85 	bl	8009ffc <HAL_RCC_GetHCLKFreq>
 80058f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058fc:	d010      	beq.n	8005920 <ADC_ConfigureBoostMode+0x78>
 80058fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005902:	d873      	bhi.n	80059ec <ADC_ConfigureBoostMode+0x144>
 8005904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005908:	d002      	beq.n	8005910 <ADC_ConfigureBoostMode+0x68>
 800590a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800590e:	d16d      	bne.n	80059ec <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	0c1b      	lsrs	r3, r3, #16
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	fbb2 f3f3 	udiv	r3, r2, r3
 800591c:	60fb      	str	r3, [r7, #12]
        break;
 800591e:	e068      	b.n	80059f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	089b      	lsrs	r3, r3, #2
 8005924:	60fb      	str	r3, [r7, #12]
        break;
 8005926:	e064      	b.n	80059f2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005928:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800592c:	f04f 0100 	mov.w	r1, #0
 8005930:	f005 fd60 	bl	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005934:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800593e:	d051      	beq.n	80059e4 <ADC_ConfigureBoostMode+0x13c>
 8005940:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005944:	d854      	bhi.n	80059f0 <ADC_ConfigureBoostMode+0x148>
 8005946:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800594a:	d047      	beq.n	80059dc <ADC_ConfigureBoostMode+0x134>
 800594c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005950:	d84e      	bhi.n	80059f0 <ADC_ConfigureBoostMode+0x148>
 8005952:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005956:	d03d      	beq.n	80059d4 <ADC_ConfigureBoostMode+0x12c>
 8005958:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800595c:	d848      	bhi.n	80059f0 <ADC_ConfigureBoostMode+0x148>
 800595e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005962:	d033      	beq.n	80059cc <ADC_ConfigureBoostMode+0x124>
 8005964:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005968:	d842      	bhi.n	80059f0 <ADC_ConfigureBoostMode+0x148>
 800596a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800596e:	d029      	beq.n	80059c4 <ADC_ConfigureBoostMode+0x11c>
 8005970:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005974:	d83c      	bhi.n	80059f0 <ADC_ConfigureBoostMode+0x148>
 8005976:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800597a:	d01a      	beq.n	80059b2 <ADC_ConfigureBoostMode+0x10a>
 800597c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005980:	d836      	bhi.n	80059f0 <ADC_ConfigureBoostMode+0x148>
 8005982:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005986:	d014      	beq.n	80059b2 <ADC_ConfigureBoostMode+0x10a>
 8005988:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800598c:	d830      	bhi.n	80059f0 <ADC_ConfigureBoostMode+0x148>
 800598e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005992:	d00e      	beq.n	80059b2 <ADC_ConfigureBoostMode+0x10a>
 8005994:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005998:	d82a      	bhi.n	80059f0 <ADC_ConfigureBoostMode+0x148>
 800599a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800599e:	d008      	beq.n	80059b2 <ADC_ConfigureBoostMode+0x10a>
 80059a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80059a4:	d824      	bhi.n	80059f0 <ADC_ConfigureBoostMode+0x148>
 80059a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059aa:	d002      	beq.n	80059b2 <ADC_ConfigureBoostMode+0x10a>
 80059ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059b0:	d11e      	bne.n	80059f0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	0c9b      	lsrs	r3, r3, #18
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	60fb      	str	r3, [r7, #12]
        break;
 80059c2:	e016      	b.n	80059f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	091b      	lsrs	r3, r3, #4
 80059c8:	60fb      	str	r3, [r7, #12]
        break;
 80059ca:	e012      	b.n	80059f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	60fb      	str	r3, [r7, #12]
        break;
 80059d2:	e00e      	b.n	80059f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	099b      	lsrs	r3, r3, #6
 80059d8:	60fb      	str	r3, [r7, #12]
        break;
 80059da:	e00a      	b.n	80059f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	09db      	lsrs	r3, r3, #7
 80059e0:	60fb      	str	r3, [r7, #12]
        break;
 80059e2:	e006      	b.n	80059f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	60fb      	str	r3, [r7, #12]
        break;
 80059ea:	e002      	b.n	80059f2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80059ec:	bf00      	nop
 80059ee:	e000      	b.n	80059f2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80059f0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	085b      	lsrs	r3, r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005a78 <ADC_ConfigureBoostMode+0x1d0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d808      	bhi.n	8005a12 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005a0e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005a10:	e025      	b.n	8005a5e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4a19      	ldr	r2, [pc, #100]	@ (8005a7c <ADC_ConfigureBoostMode+0x1d4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d80a      	bhi.n	8005a30 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a2c:	609a      	str	r2, [r3, #8]
}
 8005a2e:	e016      	b.n	8005a5e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4a13      	ldr	r2, [pc, #76]	@ (8005a80 <ADC_ConfigureBoostMode+0x1d8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d80a      	bhi.n	8005a4e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a4a:	609a      	str	r2, [r3, #8]
}
 8005a4c:	e007      	b.n	8005a5e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005a5c:	609a      	str	r2, [r3, #8]
}
 8005a5e:	bf00      	nop
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40022000 	.word	0x40022000
 8005a6c:	40022100 	.word	0x40022100
 8005a70:	40022300 	.word	0x40022300
 8005a74:	58026300 	.word	0x58026300
 8005a78:	005f5e10 	.word	0x005f5e10
 8005a7c:	00bebc20 	.word	0x00bebc20
 8005a80:	017d7840 	.word	0x017d7840

08005a84 <LL_ADC_IsEnabled>:
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <LL_ADC_IsEnabled+0x18>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <LL_ADC_IsEnabled+0x1a>
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <LL_ADC_REG_IsConversionOngoing>:
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d101      	bne.n	8005ac2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b0a3      	sub	sp, #140	@ 0x8c
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e0c1      	b.n	8005cd6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a5e      	ldr	r2, [pc, #376]	@ (8005ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d102      	bne.n	8005b72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8005ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	e001      	b.n	8005b76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005b72:	2300      	movs	r3, #0
 8005b74:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b80:	f043 0220 	orr.w	r2, r3, #32
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0a0      	b.n	8005cd6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff ff87 	bl	8005aaa <LL_ADC_REG_IsConversionOngoing>
 8005b9c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff ff80 	bl	8005aaa <LL_ADC_REG_IsConversionOngoing>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f040 8081 	bne.w	8005cb4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005bb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d17c      	bne.n	8005cb4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a48      	ldr	r2, [pc, #288]	@ (8005ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a46      	ldr	r2, [pc, #280]	@ (8005ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005bce:	4b46      	ldr	r3, [pc, #280]	@ (8005ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005bd0:	e000      	b.n	8005bd4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005bd2:	4b46      	ldr	r3, [pc, #280]	@ (8005cec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005bd4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d039      	beq.n	8005c52 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005bde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a39      	ldr	r2, [pc, #228]	@ (8005ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d10e      	bne.n	8005c22 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005c04:	4836      	ldr	r0, [pc, #216]	@ (8005ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005c06:	f7ff ff3d 	bl	8005a84 <LL_ADC_IsEnabled>
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	4835      	ldr	r0, [pc, #212]	@ (8005ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005c0e:	f7ff ff39 	bl	8005a84 <LL_ADC_IsEnabled>
 8005c12:	4603      	mov	r3, r0
 8005c14:	4323      	orrs	r3, r4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bf0c      	ite	eq
 8005c1a:	2301      	moveq	r3, #1
 8005c1c:	2300      	movne	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	e008      	b.n	8005c34 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005c22:	4833      	ldr	r0, [pc, #204]	@ (8005cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005c24:	f7ff ff2e 	bl	8005a84 <LL_ADC_IsEnabled>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bf0c      	ite	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	2300      	movne	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d047      	beq.n	8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005c38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	6811      	ldr	r1, [r2, #0]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	6892      	ldr	r2, [r2, #8]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c4e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c50:	e03a      	b.n	8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005c52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c5c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d004      	beq.n	8005c72 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d10e      	bne.n	8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005c72:	481b      	ldr	r0, [pc, #108]	@ (8005ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005c74:	f7ff ff06 	bl	8005a84 <LL_ADC_IsEnabled>
 8005c78:	4604      	mov	r4, r0
 8005c7a:	481a      	ldr	r0, [pc, #104]	@ (8005ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005c7c:	f7ff ff02 	bl	8005a84 <LL_ADC_IsEnabled>
 8005c80:	4603      	mov	r3, r0
 8005c82:	4323      	orrs	r3, r4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bf0c      	ite	eq
 8005c88:	2301      	moveq	r3, #1
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	e008      	b.n	8005ca2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005c90:	4817      	ldr	r0, [pc, #92]	@ (8005cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005c92:	f7ff fef7 	bl	8005a84 <LL_ADC_IsEnabled>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d010      	beq.n	8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ca6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	4b12      	ldr	r3, [pc, #72]	@ (8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005cb0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005cb2:	e009      	b.n	8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cb8:	f043 0220 	orr.w	r2, r3, #32
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005cc6:	e000      	b.n	8005cca <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005cc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005cd2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	378c      	adds	r7, #140	@ 0x8c
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd90      	pop	{r4, r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40022000 	.word	0x40022000
 8005ce4:	40022100 	.word	0x40022100
 8005ce8:	40022300 	.word	0x40022300
 8005cec:	58026300 	.word	0x58026300
 8005cf0:	58026000 	.word	0x58026000
 8005cf4:	fffff0e0 	.word	0xfffff0e0

08005cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d08:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <__NVIC_SetPriorityGrouping+0x40>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d14:	4013      	ands	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <__NVIC_SetPriorityGrouping+0x44>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d26:	4a04      	ldr	r2, [pc, #16]	@ (8005d38 <__NVIC_SetPriorityGrouping+0x40>)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	60d3      	str	r3, [r2, #12]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	e000ed00 	.word	0xe000ed00
 8005d3c:	05fa0000 	.word	0x05fa0000

08005d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d44:	4b04      	ldr	r3, [pc, #16]	@ (8005d58 <__NVIC_GetPriorityGrouping+0x18>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	f003 0307 	and.w	r3, r3, #7
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	e000ed00 	.word	0xe000ed00

08005d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	db0b      	blt.n	8005d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d6e:	88fb      	ldrh	r3, [r7, #6]
 8005d70:	f003 021f 	and.w	r2, r3, #31
 8005d74:	4907      	ldr	r1, [pc, #28]	@ (8005d94 <__NVIC_EnableIRQ+0x38>)
 8005d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	e000e100 	.word	0xe000e100

08005d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	6039      	str	r1, [r7, #0]
 8005da2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	db0a      	blt.n	8005dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	490c      	ldr	r1, [pc, #48]	@ (8005de4 <__NVIC_SetPriority+0x4c>)
 8005db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005db6:	0112      	lsls	r2, r2, #4
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	440b      	add	r3, r1
 8005dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dc0:	e00a      	b.n	8005dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	4908      	ldr	r1, [pc, #32]	@ (8005de8 <__NVIC_SetPriority+0x50>)
 8005dc8:	88fb      	ldrh	r3, [r7, #6]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	3b04      	subs	r3, #4
 8005dd0:	0112      	lsls	r2, r2, #4
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	761a      	strb	r2, [r3, #24]
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	e000e100 	.word	0xe000e100
 8005de8:	e000ed00 	.word	0xe000ed00

08005dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b089      	sub	sp, #36	@ 0x24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f1c3 0307 	rsb	r3, r3, #7
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	bf28      	it	cs
 8005e0a:	2304      	movcs	r3, #4
 8005e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3304      	adds	r3, #4
 8005e12:	2b06      	cmp	r3, #6
 8005e14:	d902      	bls.n	8005e1c <NVIC_EncodePriority+0x30>
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	3b03      	subs	r3, #3
 8005e1a:	e000      	b.n	8005e1e <NVIC_EncodePriority+0x32>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	43da      	mvns	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	401a      	ands	r2, r3
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e34:	f04f 31ff 	mov.w	r1, #4294967295
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3e:	43d9      	mvns	r1, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e44:	4313      	orrs	r3, r2
         );
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3724      	adds	r7, #36	@ 0x24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e64:	d301      	bcc.n	8005e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e66:	2301      	movs	r3, #1
 8005e68:	e00f      	b.n	8005e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e94 <SysTick_Config+0x40>)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e72:	210f      	movs	r1, #15
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	f7ff ff8e 	bl	8005d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e7c:	4b05      	ldr	r3, [pc, #20]	@ (8005e94 <SysTick_Config+0x40>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e82:	4b04      	ldr	r3, [pc, #16]	@ (8005e94 <SysTick_Config+0x40>)
 8005e84:	2207      	movs	r2, #7
 8005e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	e000e010 	.word	0xe000e010

08005e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff29 	bl	8005cf8 <__NVIC_SetPriorityGrouping>
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	607a      	str	r2, [r7, #4]
 8005eba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ebc:	f7ff ff40 	bl	8005d40 <__NVIC_GetPriorityGrouping>
 8005ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	6978      	ldr	r0, [r7, #20]
 8005ec8:	f7ff ff90 	bl	8005dec <NVIC_EncodePriority>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff ff5f 	bl	8005d98 <__NVIC_SetPriority>
}
 8005eda:	bf00      	nop
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	4603      	mov	r3, r0
 8005eea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff ff33 	bl	8005d5c <__NVIC_EnableIRQ>
}
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff ffa4 	bl	8005e54 <SysTick_Config>
 8005f0c:	4603      	mov	r3, r0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005f20:	f7fd fe4c 	bl	8003bbc <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e312      	b.n	8006556 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a66      	ldr	r2, [pc, #408]	@ (80060d0 <HAL_DMA_Init+0x1b8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d04a      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a65      	ldr	r2, [pc, #404]	@ (80060d4 <HAL_DMA_Init+0x1bc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d045      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a63      	ldr	r2, [pc, #396]	@ (80060d8 <HAL_DMA_Init+0x1c0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d040      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a62      	ldr	r2, [pc, #392]	@ (80060dc <HAL_DMA_Init+0x1c4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d03b      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a60      	ldr	r2, [pc, #384]	@ (80060e0 <HAL_DMA_Init+0x1c8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d036      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a5f      	ldr	r2, [pc, #380]	@ (80060e4 <HAL_DMA_Init+0x1cc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d031      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a5d      	ldr	r2, [pc, #372]	@ (80060e8 <HAL_DMA_Init+0x1d0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d02c      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a5c      	ldr	r2, [pc, #368]	@ (80060ec <HAL_DMA_Init+0x1d4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d027      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a5a      	ldr	r2, [pc, #360]	@ (80060f0 <HAL_DMA_Init+0x1d8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d022      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a59      	ldr	r2, [pc, #356]	@ (80060f4 <HAL_DMA_Init+0x1dc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d01d      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a57      	ldr	r2, [pc, #348]	@ (80060f8 <HAL_DMA_Init+0x1e0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d018      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a56      	ldr	r2, [pc, #344]	@ (80060fc <HAL_DMA_Init+0x1e4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d013      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a54      	ldr	r2, [pc, #336]	@ (8006100 <HAL_DMA_Init+0x1e8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a53      	ldr	r2, [pc, #332]	@ (8006104 <HAL_DMA_Init+0x1ec>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a51      	ldr	r2, [pc, #324]	@ (8006108 <HAL_DMA_Init+0x1f0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_DMA_Init+0xb8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a50      	ldr	r2, [pc, #320]	@ (800610c <HAL_DMA_Init+0x1f4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d101      	bne.n	8005fd4 <HAL_DMA_Init+0xbc>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <HAL_DMA_Init+0xbe>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 813c 	beq.w	8006254 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a37      	ldr	r2, [pc, #220]	@ (80060d0 <HAL_DMA_Init+0x1b8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d04a      	beq.n	800608c <HAL_DMA_Init+0x174>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a36      	ldr	r2, [pc, #216]	@ (80060d4 <HAL_DMA_Init+0x1bc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d045      	beq.n	800608c <HAL_DMA_Init+0x174>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a34      	ldr	r2, [pc, #208]	@ (80060d8 <HAL_DMA_Init+0x1c0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d040      	beq.n	800608c <HAL_DMA_Init+0x174>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a33      	ldr	r2, [pc, #204]	@ (80060dc <HAL_DMA_Init+0x1c4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d03b      	beq.n	800608c <HAL_DMA_Init+0x174>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a31      	ldr	r2, [pc, #196]	@ (80060e0 <HAL_DMA_Init+0x1c8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d036      	beq.n	800608c <HAL_DMA_Init+0x174>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a30      	ldr	r2, [pc, #192]	@ (80060e4 <HAL_DMA_Init+0x1cc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d031      	beq.n	800608c <HAL_DMA_Init+0x174>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a2e      	ldr	r2, [pc, #184]	@ (80060e8 <HAL_DMA_Init+0x1d0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d02c      	beq.n	800608c <HAL_DMA_Init+0x174>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2d      	ldr	r2, [pc, #180]	@ (80060ec <HAL_DMA_Init+0x1d4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d027      	beq.n	800608c <HAL_DMA_Init+0x174>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a2b      	ldr	r2, [pc, #172]	@ (80060f0 <HAL_DMA_Init+0x1d8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d022      	beq.n	800608c <HAL_DMA_Init+0x174>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2a      	ldr	r2, [pc, #168]	@ (80060f4 <HAL_DMA_Init+0x1dc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d01d      	beq.n	800608c <HAL_DMA_Init+0x174>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a28      	ldr	r2, [pc, #160]	@ (80060f8 <HAL_DMA_Init+0x1e0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_DMA_Init+0x174>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a27      	ldr	r2, [pc, #156]	@ (80060fc <HAL_DMA_Init+0x1e4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <HAL_DMA_Init+0x174>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a25      	ldr	r2, [pc, #148]	@ (8006100 <HAL_DMA_Init+0x1e8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_DMA_Init+0x174>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a24      	ldr	r2, [pc, #144]	@ (8006104 <HAL_DMA_Init+0x1ec>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_DMA_Init+0x174>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a22      	ldr	r2, [pc, #136]	@ (8006108 <HAL_DMA_Init+0x1f0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_DMA_Init+0x174>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a21      	ldr	r2, [pc, #132]	@ (800610c <HAL_DMA_Init+0x1f4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d108      	bne.n	800609e <HAL_DMA_Init+0x186>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0201 	bic.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	e007      	b.n	80060ae <HAL_DMA_Init+0x196>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0201 	bic.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060ae:	e02f      	b.n	8006110 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060b0:	f7fd fd84 	bl	8003bbc <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d928      	bls.n	8006110 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2203      	movs	r2, #3
 80060c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e242      	b.n	8006556 <HAL_DMA_Init+0x63e>
 80060d0:	40020010 	.word	0x40020010
 80060d4:	40020028 	.word	0x40020028
 80060d8:	40020040 	.word	0x40020040
 80060dc:	40020058 	.word	0x40020058
 80060e0:	40020070 	.word	0x40020070
 80060e4:	40020088 	.word	0x40020088
 80060e8:	400200a0 	.word	0x400200a0
 80060ec:	400200b8 	.word	0x400200b8
 80060f0:	40020410 	.word	0x40020410
 80060f4:	40020428 	.word	0x40020428
 80060f8:	40020440 	.word	0x40020440
 80060fc:	40020458 	.word	0x40020458
 8006100:	40020470 	.word	0x40020470
 8006104:	40020488 	.word	0x40020488
 8006108:	400204a0 	.word	0x400204a0
 800610c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1c8      	bne.n	80060b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4b83      	ldr	r3, [pc, #524]	@ (8006338 <HAL_DMA_Init+0x420>)
 800612a:	4013      	ands	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006136:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006142:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800614e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	2b04      	cmp	r3, #4
 8006162:	d107      	bne.n	8006174 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616c:	4313      	orrs	r3, r2
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b28      	cmp	r3, #40	@ 0x28
 800617a:	d903      	bls.n	8006184 <HAL_DMA_Init+0x26c>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b2e      	cmp	r3, #46	@ 0x2e
 8006182:	d91f      	bls.n	80061c4 <HAL_DMA_Init+0x2ac>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b3e      	cmp	r3, #62	@ 0x3e
 800618a:	d903      	bls.n	8006194 <HAL_DMA_Init+0x27c>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b42      	cmp	r3, #66	@ 0x42
 8006192:	d917      	bls.n	80061c4 <HAL_DMA_Init+0x2ac>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b46      	cmp	r3, #70	@ 0x46
 800619a:	d903      	bls.n	80061a4 <HAL_DMA_Init+0x28c>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b48      	cmp	r3, #72	@ 0x48
 80061a2:	d90f      	bls.n	80061c4 <HAL_DMA_Init+0x2ac>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b4e      	cmp	r3, #78	@ 0x4e
 80061aa:	d903      	bls.n	80061b4 <HAL_DMA_Init+0x29c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b52      	cmp	r3, #82	@ 0x52
 80061b2:	d907      	bls.n	80061c4 <HAL_DMA_Init+0x2ac>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b73      	cmp	r3, #115	@ 0x73
 80061ba:	d905      	bls.n	80061c8 <HAL_DMA_Init+0x2b0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b77      	cmp	r3, #119	@ 0x77
 80061c2:	d801      	bhi.n	80061c8 <HAL_DMA_Init+0x2b0>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <HAL_DMA_Init+0x2b2>
 80061c8:	2300      	movs	r3, #0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061d4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 0307 	bic.w	r3, r3, #7
 80061ec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d117      	bne.n	8006230 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00e      	beq.n	8006230 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f002 fb2e 	bl	8008874 <DMA_CheckFifoParam>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d008      	beq.n	8006230 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2240      	movs	r2, #64	@ 0x40
 8006222:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e192      	b.n	8006556 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f002 fa69 	bl	8008710 <DMA_CalcBaseAndBitshift>
 800623e:	4603      	mov	r3, r0
 8006240:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	223f      	movs	r2, #63	@ 0x3f
 800624c:	409a      	lsls	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	609a      	str	r2, [r3, #8]
 8006252:	e0c8      	b.n	80063e6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a38      	ldr	r2, [pc, #224]	@ (800633c <HAL_DMA_Init+0x424>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d022      	beq.n	80062a4 <HAL_DMA_Init+0x38c>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a37      	ldr	r2, [pc, #220]	@ (8006340 <HAL_DMA_Init+0x428>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d01d      	beq.n	80062a4 <HAL_DMA_Init+0x38c>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a35      	ldr	r2, [pc, #212]	@ (8006344 <HAL_DMA_Init+0x42c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d018      	beq.n	80062a4 <HAL_DMA_Init+0x38c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a34      	ldr	r2, [pc, #208]	@ (8006348 <HAL_DMA_Init+0x430>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <HAL_DMA_Init+0x38c>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a32      	ldr	r2, [pc, #200]	@ (800634c <HAL_DMA_Init+0x434>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00e      	beq.n	80062a4 <HAL_DMA_Init+0x38c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a31      	ldr	r2, [pc, #196]	@ (8006350 <HAL_DMA_Init+0x438>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d009      	beq.n	80062a4 <HAL_DMA_Init+0x38c>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2f      	ldr	r2, [pc, #188]	@ (8006354 <HAL_DMA_Init+0x43c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <HAL_DMA_Init+0x38c>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2e      	ldr	r2, [pc, #184]	@ (8006358 <HAL_DMA_Init+0x440>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d101      	bne.n	80062a8 <HAL_DMA_Init+0x390>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <HAL_DMA_Init+0x392>
 80062a8:	2300      	movs	r3, #0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8092 	beq.w	80063d4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a21      	ldr	r2, [pc, #132]	@ (800633c <HAL_DMA_Init+0x424>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d021      	beq.n	80062fe <HAL_DMA_Init+0x3e6>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a20      	ldr	r2, [pc, #128]	@ (8006340 <HAL_DMA_Init+0x428>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d01c      	beq.n	80062fe <HAL_DMA_Init+0x3e6>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006344 <HAL_DMA_Init+0x42c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d017      	beq.n	80062fe <HAL_DMA_Init+0x3e6>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006348 <HAL_DMA_Init+0x430>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d012      	beq.n	80062fe <HAL_DMA_Init+0x3e6>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1b      	ldr	r2, [pc, #108]	@ (800634c <HAL_DMA_Init+0x434>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00d      	beq.n	80062fe <HAL_DMA_Init+0x3e6>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006350 <HAL_DMA_Init+0x438>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d008      	beq.n	80062fe <HAL_DMA_Init+0x3e6>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a18      	ldr	r2, [pc, #96]	@ (8006354 <HAL_DMA_Init+0x43c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d003      	beq.n	80062fe <HAL_DMA_Init+0x3e6>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a17      	ldr	r2, [pc, #92]	@ (8006358 <HAL_DMA_Init+0x440>)
 80062fc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2202      	movs	r2, #2
 8006302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4b10      	ldr	r3, [pc, #64]	@ (800635c <HAL_DMA_Init+0x444>)
 800631a:	4013      	ands	r3, r2
 800631c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b40      	cmp	r3, #64	@ 0x40
 8006324:	d01c      	beq.n	8006360 <HAL_DMA_Init+0x448>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b80      	cmp	r3, #128	@ 0x80
 800632c:	d102      	bne.n	8006334 <HAL_DMA_Init+0x41c>
 800632e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006332:	e016      	b.n	8006362 <HAL_DMA_Init+0x44a>
 8006334:	2300      	movs	r3, #0
 8006336:	e014      	b.n	8006362 <HAL_DMA_Init+0x44a>
 8006338:	fe10803f 	.word	0xfe10803f
 800633c:	58025408 	.word	0x58025408
 8006340:	5802541c 	.word	0x5802541c
 8006344:	58025430 	.word	0x58025430
 8006348:	58025444 	.word	0x58025444
 800634c:	58025458 	.word	0x58025458
 8006350:	5802546c 	.word	0x5802546c
 8006354:	58025480 	.word	0x58025480
 8006358:	58025494 	.word	0x58025494
 800635c:	fffe000f 	.word	0xfffe000f
 8006360:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	68d2      	ldr	r2, [r2, #12]
 8006366:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006380:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006388:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006390:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	4b6e      	ldr	r3, [pc, #440]	@ (8006560 <HAL_DMA_Init+0x648>)
 80063a8:	4413      	add	r3, r2
 80063aa:	4a6e      	ldr	r2, [pc, #440]	@ (8006564 <HAL_DMA_Init+0x64c>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	091b      	lsrs	r3, r3, #4
 80063b2:	009a      	lsls	r2, r3, #2
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f002 f9a9 	bl	8008710 <DMA_CalcBaseAndBitshift>
 80063be:	4603      	mov	r3, r0
 80063c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063c6:	f003 031f 	and.w	r3, r3, #31
 80063ca:	2201      	movs	r2, #1
 80063cc:	409a      	lsls	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e008      	b.n	80063e6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2240      	movs	r2, #64	@ 0x40
 80063d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2203      	movs	r2, #3
 80063de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e0b7      	b.n	8006556 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a5f      	ldr	r2, [pc, #380]	@ (8006568 <HAL_DMA_Init+0x650>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d072      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a5d      	ldr	r2, [pc, #372]	@ (800656c <HAL_DMA_Init+0x654>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d06d      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a5c      	ldr	r2, [pc, #368]	@ (8006570 <HAL_DMA_Init+0x658>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d068      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a5a      	ldr	r2, [pc, #360]	@ (8006574 <HAL_DMA_Init+0x65c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d063      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a59      	ldr	r2, [pc, #356]	@ (8006578 <HAL_DMA_Init+0x660>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d05e      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a57      	ldr	r2, [pc, #348]	@ (800657c <HAL_DMA_Init+0x664>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d059      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a56      	ldr	r2, [pc, #344]	@ (8006580 <HAL_DMA_Init+0x668>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d054      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a54      	ldr	r2, [pc, #336]	@ (8006584 <HAL_DMA_Init+0x66c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d04f      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a53      	ldr	r2, [pc, #332]	@ (8006588 <HAL_DMA_Init+0x670>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d04a      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a51      	ldr	r2, [pc, #324]	@ (800658c <HAL_DMA_Init+0x674>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d045      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a50      	ldr	r2, [pc, #320]	@ (8006590 <HAL_DMA_Init+0x678>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d040      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a4e      	ldr	r2, [pc, #312]	@ (8006594 <HAL_DMA_Init+0x67c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d03b      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a4d      	ldr	r2, [pc, #308]	@ (8006598 <HAL_DMA_Init+0x680>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d036      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a4b      	ldr	r2, [pc, #300]	@ (800659c <HAL_DMA_Init+0x684>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d031      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a4a      	ldr	r2, [pc, #296]	@ (80065a0 <HAL_DMA_Init+0x688>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d02c      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a48      	ldr	r2, [pc, #288]	@ (80065a4 <HAL_DMA_Init+0x68c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d027      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a47      	ldr	r2, [pc, #284]	@ (80065a8 <HAL_DMA_Init+0x690>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d022      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a45      	ldr	r2, [pc, #276]	@ (80065ac <HAL_DMA_Init+0x694>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01d      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a44      	ldr	r2, [pc, #272]	@ (80065b0 <HAL_DMA_Init+0x698>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d018      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a42      	ldr	r2, [pc, #264]	@ (80065b4 <HAL_DMA_Init+0x69c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d013      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a41      	ldr	r2, [pc, #260]	@ (80065b8 <HAL_DMA_Init+0x6a0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00e      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a3f      	ldr	r2, [pc, #252]	@ (80065bc <HAL_DMA_Init+0x6a4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d009      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a3e      	ldr	r2, [pc, #248]	@ (80065c0 <HAL_DMA_Init+0x6a8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d004      	beq.n	80064d6 <HAL_DMA_Init+0x5be>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a3c      	ldr	r2, [pc, #240]	@ (80065c4 <HAL_DMA_Init+0x6ac>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d101      	bne.n	80064da <HAL_DMA_Init+0x5c2>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <HAL_DMA_Init+0x5c4>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d032      	beq.n	8006546 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f002 fa43 	bl	800896c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2b80      	cmp	r3, #128	@ 0x80
 80064ec:	d102      	bne.n	80064f4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006508:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d010      	beq.n	8006534 <HAL_DMA_Init+0x61c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b08      	cmp	r3, #8
 8006518:	d80c      	bhi.n	8006534 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f002 fac0 	bl	8008aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	e008      	b.n	8006546 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	a7fdabf8 	.word	0xa7fdabf8
 8006564:	cccccccd 	.word	0xcccccccd
 8006568:	40020010 	.word	0x40020010
 800656c:	40020028 	.word	0x40020028
 8006570:	40020040 	.word	0x40020040
 8006574:	40020058 	.word	0x40020058
 8006578:	40020070 	.word	0x40020070
 800657c:	40020088 	.word	0x40020088
 8006580:	400200a0 	.word	0x400200a0
 8006584:	400200b8 	.word	0x400200b8
 8006588:	40020410 	.word	0x40020410
 800658c:	40020428 	.word	0x40020428
 8006590:	40020440 	.word	0x40020440
 8006594:	40020458 	.word	0x40020458
 8006598:	40020470 	.word	0x40020470
 800659c:	40020488 	.word	0x40020488
 80065a0:	400204a0 	.word	0x400204a0
 80065a4:	400204b8 	.word	0x400204b8
 80065a8:	58025408 	.word	0x58025408
 80065ac:	5802541c 	.word	0x5802541c
 80065b0:	58025430 	.word	0x58025430
 80065b4:	58025444 	.word	0x58025444
 80065b8:	58025458 	.word	0x58025458
 80065bc:	5802546c 	.word	0x5802546c
 80065c0:	58025480 	.word	0x58025480
 80065c4:	58025494 	.word	0x58025494

080065c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e226      	b.n	8006a32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_DMA_Start_IT+0x2a>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e21f      	b.n	8006a32 <HAL_DMA_Start_IT+0x46a>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b01      	cmp	r3, #1
 8006604:	f040 820a 	bne.w	8006a1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a68      	ldr	r2, [pc, #416]	@ (80067bc <HAL_DMA_Start_IT+0x1f4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d04a      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a66      	ldr	r2, [pc, #408]	@ (80067c0 <HAL_DMA_Start_IT+0x1f8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d045      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a65      	ldr	r2, [pc, #404]	@ (80067c4 <HAL_DMA_Start_IT+0x1fc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d040      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a63      	ldr	r2, [pc, #396]	@ (80067c8 <HAL_DMA_Start_IT+0x200>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d03b      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a62      	ldr	r2, [pc, #392]	@ (80067cc <HAL_DMA_Start_IT+0x204>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d036      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a60      	ldr	r2, [pc, #384]	@ (80067d0 <HAL_DMA_Start_IT+0x208>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d031      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a5f      	ldr	r2, [pc, #380]	@ (80067d4 <HAL_DMA_Start_IT+0x20c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d02c      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5d      	ldr	r2, [pc, #372]	@ (80067d8 <HAL_DMA_Start_IT+0x210>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d027      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5c      	ldr	r2, [pc, #368]	@ (80067dc <HAL_DMA_Start_IT+0x214>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d022      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5a      	ldr	r2, [pc, #360]	@ (80067e0 <HAL_DMA_Start_IT+0x218>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d01d      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a59      	ldr	r2, [pc, #356]	@ (80067e4 <HAL_DMA_Start_IT+0x21c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d018      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a57      	ldr	r2, [pc, #348]	@ (80067e8 <HAL_DMA_Start_IT+0x220>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a56      	ldr	r2, [pc, #344]	@ (80067ec <HAL_DMA_Start_IT+0x224>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00e      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a54      	ldr	r2, [pc, #336]	@ (80067f0 <HAL_DMA_Start_IT+0x228>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a53      	ldr	r2, [pc, #332]	@ (80067f4 <HAL_DMA_Start_IT+0x22c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d004      	beq.n	80066b6 <HAL_DMA_Start_IT+0xee>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a51      	ldr	r2, [pc, #324]	@ (80067f8 <HAL_DMA_Start_IT+0x230>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d108      	bne.n	80066c8 <HAL_DMA_Start_IT+0x100>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0201 	bic.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	e007      	b.n	80066d8 <HAL_DMA_Start_IT+0x110>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0201 	bic.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f001 fe6a 	bl	80083b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a34      	ldr	r2, [pc, #208]	@ (80067bc <HAL_DMA_Start_IT+0x1f4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d04a      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a33      	ldr	r2, [pc, #204]	@ (80067c0 <HAL_DMA_Start_IT+0x1f8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d045      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a31      	ldr	r2, [pc, #196]	@ (80067c4 <HAL_DMA_Start_IT+0x1fc>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d040      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a30      	ldr	r2, [pc, #192]	@ (80067c8 <HAL_DMA_Start_IT+0x200>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d03b      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a2e      	ldr	r2, [pc, #184]	@ (80067cc <HAL_DMA_Start_IT+0x204>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d036      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a2d      	ldr	r2, [pc, #180]	@ (80067d0 <HAL_DMA_Start_IT+0x208>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d031      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a2b      	ldr	r2, [pc, #172]	@ (80067d4 <HAL_DMA_Start_IT+0x20c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d02c      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a2a      	ldr	r2, [pc, #168]	@ (80067d8 <HAL_DMA_Start_IT+0x210>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d027      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a28      	ldr	r2, [pc, #160]	@ (80067dc <HAL_DMA_Start_IT+0x214>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d022      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a27      	ldr	r2, [pc, #156]	@ (80067e0 <HAL_DMA_Start_IT+0x218>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d01d      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a25      	ldr	r2, [pc, #148]	@ (80067e4 <HAL_DMA_Start_IT+0x21c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d018      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a24      	ldr	r2, [pc, #144]	@ (80067e8 <HAL_DMA_Start_IT+0x220>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d013      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a22      	ldr	r2, [pc, #136]	@ (80067ec <HAL_DMA_Start_IT+0x224>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00e      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a21      	ldr	r2, [pc, #132]	@ (80067f0 <HAL_DMA_Start_IT+0x228>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d009      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1f      	ldr	r2, [pc, #124]	@ (80067f4 <HAL_DMA_Start_IT+0x22c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d004      	beq.n	8006784 <HAL_DMA_Start_IT+0x1bc>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1e      	ldr	r2, [pc, #120]	@ (80067f8 <HAL_DMA_Start_IT+0x230>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d101      	bne.n	8006788 <HAL_DMA_Start_IT+0x1c0>
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <HAL_DMA_Start_IT+0x1c2>
 8006788:	2300      	movs	r3, #0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d036      	beq.n	80067fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f023 021e 	bic.w	r2, r3, #30
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0216 	orr.w	r2, r2, #22
 80067a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d03e      	beq.n	8006828 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0208 	orr.w	r2, r2, #8
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	e035      	b.n	8006828 <HAL_DMA_Start_IT+0x260>
 80067bc:	40020010 	.word	0x40020010
 80067c0:	40020028 	.word	0x40020028
 80067c4:	40020040 	.word	0x40020040
 80067c8:	40020058 	.word	0x40020058
 80067cc:	40020070 	.word	0x40020070
 80067d0:	40020088 	.word	0x40020088
 80067d4:	400200a0 	.word	0x400200a0
 80067d8:	400200b8 	.word	0x400200b8
 80067dc:	40020410 	.word	0x40020410
 80067e0:	40020428 	.word	0x40020428
 80067e4:	40020440 	.word	0x40020440
 80067e8:	40020458 	.word	0x40020458
 80067ec:	40020470 	.word	0x40020470
 80067f0:	40020488 	.word	0x40020488
 80067f4:	400204a0 	.word	0x400204a0
 80067f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f023 020e 	bic.w	r2, r3, #14
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 020a 	orr.w	r2, r2, #10
 800680e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0204 	orr.w	r2, r2, #4
 8006826:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a83      	ldr	r2, [pc, #524]	@ (8006a3c <HAL_DMA_Start_IT+0x474>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d072      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a82      	ldr	r2, [pc, #520]	@ (8006a40 <HAL_DMA_Start_IT+0x478>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d06d      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a80      	ldr	r2, [pc, #512]	@ (8006a44 <HAL_DMA_Start_IT+0x47c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d068      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a7f      	ldr	r2, [pc, #508]	@ (8006a48 <HAL_DMA_Start_IT+0x480>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d063      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a7d      	ldr	r2, [pc, #500]	@ (8006a4c <HAL_DMA_Start_IT+0x484>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d05e      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a7c      	ldr	r2, [pc, #496]	@ (8006a50 <HAL_DMA_Start_IT+0x488>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d059      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a7a      	ldr	r2, [pc, #488]	@ (8006a54 <HAL_DMA_Start_IT+0x48c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d054      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a79      	ldr	r2, [pc, #484]	@ (8006a58 <HAL_DMA_Start_IT+0x490>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d04f      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a77      	ldr	r2, [pc, #476]	@ (8006a5c <HAL_DMA_Start_IT+0x494>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d04a      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a76      	ldr	r2, [pc, #472]	@ (8006a60 <HAL_DMA_Start_IT+0x498>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d045      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a74      	ldr	r2, [pc, #464]	@ (8006a64 <HAL_DMA_Start_IT+0x49c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d040      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a73      	ldr	r2, [pc, #460]	@ (8006a68 <HAL_DMA_Start_IT+0x4a0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d03b      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a71      	ldr	r2, [pc, #452]	@ (8006a6c <HAL_DMA_Start_IT+0x4a4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d036      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a70      	ldr	r2, [pc, #448]	@ (8006a70 <HAL_DMA_Start_IT+0x4a8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d031      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a6e      	ldr	r2, [pc, #440]	@ (8006a74 <HAL_DMA_Start_IT+0x4ac>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d02c      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a6d      	ldr	r2, [pc, #436]	@ (8006a78 <HAL_DMA_Start_IT+0x4b0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d027      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a6b      	ldr	r2, [pc, #428]	@ (8006a7c <HAL_DMA_Start_IT+0x4b4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d022      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a6a      	ldr	r2, [pc, #424]	@ (8006a80 <HAL_DMA_Start_IT+0x4b8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d01d      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a68      	ldr	r2, [pc, #416]	@ (8006a84 <HAL_DMA_Start_IT+0x4bc>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d018      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a67      	ldr	r2, [pc, #412]	@ (8006a88 <HAL_DMA_Start_IT+0x4c0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d013      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a65      	ldr	r2, [pc, #404]	@ (8006a8c <HAL_DMA_Start_IT+0x4c4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00e      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a64      	ldr	r2, [pc, #400]	@ (8006a90 <HAL_DMA_Start_IT+0x4c8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d009      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a62      	ldr	r2, [pc, #392]	@ (8006a94 <HAL_DMA_Start_IT+0x4cc>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <HAL_DMA_Start_IT+0x350>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a61      	ldr	r2, [pc, #388]	@ (8006a98 <HAL_DMA_Start_IT+0x4d0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d101      	bne.n	800691c <HAL_DMA_Start_IT+0x354>
 8006918:	2301      	movs	r3, #1
 800691a:	e000      	b.n	800691e <HAL_DMA_Start_IT+0x356>
 800691c:	2300      	movs	r3, #0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01a      	beq.n	8006958 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800693a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800693e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d007      	beq.n	8006958 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006952:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006956:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a37      	ldr	r2, [pc, #220]	@ (8006a3c <HAL_DMA_Start_IT+0x474>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d04a      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a36      	ldr	r2, [pc, #216]	@ (8006a40 <HAL_DMA_Start_IT+0x478>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d045      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a34      	ldr	r2, [pc, #208]	@ (8006a44 <HAL_DMA_Start_IT+0x47c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d040      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a33      	ldr	r2, [pc, #204]	@ (8006a48 <HAL_DMA_Start_IT+0x480>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d03b      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a31      	ldr	r2, [pc, #196]	@ (8006a4c <HAL_DMA_Start_IT+0x484>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d036      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a30      	ldr	r2, [pc, #192]	@ (8006a50 <HAL_DMA_Start_IT+0x488>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d031      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a2e      	ldr	r2, [pc, #184]	@ (8006a54 <HAL_DMA_Start_IT+0x48c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d02c      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a2d      	ldr	r2, [pc, #180]	@ (8006a58 <HAL_DMA_Start_IT+0x490>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d027      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a2b      	ldr	r2, [pc, #172]	@ (8006a5c <HAL_DMA_Start_IT+0x494>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d022      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a60 <HAL_DMA_Start_IT+0x498>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d01d      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a28      	ldr	r2, [pc, #160]	@ (8006a64 <HAL_DMA_Start_IT+0x49c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d018      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a27      	ldr	r2, [pc, #156]	@ (8006a68 <HAL_DMA_Start_IT+0x4a0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d013      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a25      	ldr	r2, [pc, #148]	@ (8006a6c <HAL_DMA_Start_IT+0x4a4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00e      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a24      	ldr	r2, [pc, #144]	@ (8006a70 <HAL_DMA_Start_IT+0x4a8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d009      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a22      	ldr	r2, [pc, #136]	@ (8006a74 <HAL_DMA_Start_IT+0x4ac>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d004      	beq.n	80069f8 <HAL_DMA_Start_IT+0x430>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a21      	ldr	r2, [pc, #132]	@ (8006a78 <HAL_DMA_Start_IT+0x4b0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d108      	bne.n	8006a0a <HAL_DMA_Start_IT+0x442>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0201 	orr.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	e012      	b.n	8006a30 <HAL_DMA_Start_IT+0x468>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f042 0201 	orr.w	r2, r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	e009      	b.n	8006a30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a22:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40020010 	.word	0x40020010
 8006a40:	40020028 	.word	0x40020028
 8006a44:	40020040 	.word	0x40020040
 8006a48:	40020058 	.word	0x40020058
 8006a4c:	40020070 	.word	0x40020070
 8006a50:	40020088 	.word	0x40020088
 8006a54:	400200a0 	.word	0x400200a0
 8006a58:	400200b8 	.word	0x400200b8
 8006a5c:	40020410 	.word	0x40020410
 8006a60:	40020428 	.word	0x40020428
 8006a64:	40020440 	.word	0x40020440
 8006a68:	40020458 	.word	0x40020458
 8006a6c:	40020470 	.word	0x40020470
 8006a70:	40020488 	.word	0x40020488
 8006a74:	400204a0 	.word	0x400204a0
 8006a78:	400204b8 	.word	0x400204b8
 8006a7c:	58025408 	.word	0x58025408
 8006a80:	5802541c 	.word	0x5802541c
 8006a84:	58025430 	.word	0x58025430
 8006a88:	58025444 	.word	0x58025444
 8006a8c:	58025458 	.word	0x58025458
 8006a90:	5802546c 	.word	0x5802546c
 8006a94:	58025480 	.word	0x58025480
 8006a98:	58025494 	.word	0x58025494

08006a9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006aa4:	f7fd f88a 	bl	8003bbc <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e2dc      	b.n	800706e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d008      	beq.n	8006ad2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2280      	movs	r2, #128	@ 0x80
 8006ac4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e2cd      	b.n	800706e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a76      	ldr	r2, [pc, #472]	@ (8006cb0 <HAL_DMA_Abort+0x214>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d04a      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a74      	ldr	r2, [pc, #464]	@ (8006cb4 <HAL_DMA_Abort+0x218>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d045      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a73      	ldr	r2, [pc, #460]	@ (8006cb8 <HAL_DMA_Abort+0x21c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d040      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a71      	ldr	r2, [pc, #452]	@ (8006cbc <HAL_DMA_Abort+0x220>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d03b      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a70      	ldr	r2, [pc, #448]	@ (8006cc0 <HAL_DMA_Abort+0x224>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d036      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a6e      	ldr	r2, [pc, #440]	@ (8006cc4 <HAL_DMA_Abort+0x228>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d031      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a6d      	ldr	r2, [pc, #436]	@ (8006cc8 <HAL_DMA_Abort+0x22c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d02c      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8006ccc <HAL_DMA_Abort+0x230>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d027      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a6a      	ldr	r2, [pc, #424]	@ (8006cd0 <HAL_DMA_Abort+0x234>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d022      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a68      	ldr	r2, [pc, #416]	@ (8006cd4 <HAL_DMA_Abort+0x238>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d01d      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a67      	ldr	r2, [pc, #412]	@ (8006cd8 <HAL_DMA_Abort+0x23c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d018      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a65      	ldr	r2, [pc, #404]	@ (8006cdc <HAL_DMA_Abort+0x240>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d013      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a64      	ldr	r2, [pc, #400]	@ (8006ce0 <HAL_DMA_Abort+0x244>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d00e      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a62      	ldr	r2, [pc, #392]	@ (8006ce4 <HAL_DMA_Abort+0x248>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d009      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a61      	ldr	r2, [pc, #388]	@ (8006ce8 <HAL_DMA_Abort+0x24c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d004      	beq.n	8006b72 <HAL_DMA_Abort+0xd6>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a5f      	ldr	r2, [pc, #380]	@ (8006cec <HAL_DMA_Abort+0x250>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d101      	bne.n	8006b76 <HAL_DMA_Abort+0xda>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <HAL_DMA_Abort+0xdc>
 8006b76:	2300      	movs	r3, #0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d013      	beq.n	8006ba4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 021e 	bic.w	r2, r2, #30
 8006b8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695a      	ldr	r2, [r3, #20]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	e00a      	b.n	8006bba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 020e 	bic.w	r2, r2, #14
 8006bb2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8006cb0 <HAL_DMA_Abort+0x214>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d072      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8006cb4 <HAL_DMA_Abort+0x218>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d06d      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a39      	ldr	r2, [pc, #228]	@ (8006cb8 <HAL_DMA_Abort+0x21c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d068      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a37      	ldr	r2, [pc, #220]	@ (8006cbc <HAL_DMA_Abort+0x220>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d063      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a36      	ldr	r2, [pc, #216]	@ (8006cc0 <HAL_DMA_Abort+0x224>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d05e      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a34      	ldr	r2, [pc, #208]	@ (8006cc4 <HAL_DMA_Abort+0x228>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d059      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a33      	ldr	r2, [pc, #204]	@ (8006cc8 <HAL_DMA_Abort+0x22c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d054      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a31      	ldr	r2, [pc, #196]	@ (8006ccc <HAL_DMA_Abort+0x230>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d04f      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a30      	ldr	r2, [pc, #192]	@ (8006cd0 <HAL_DMA_Abort+0x234>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d04a      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a2e      	ldr	r2, [pc, #184]	@ (8006cd4 <HAL_DMA_Abort+0x238>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d045      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd8 <HAL_DMA_Abort+0x23c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d040      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8006cdc <HAL_DMA_Abort+0x240>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d03b      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce0 <HAL_DMA_Abort+0x244>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d036      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a28      	ldr	r2, [pc, #160]	@ (8006ce4 <HAL_DMA_Abort+0x248>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d031      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a27      	ldr	r2, [pc, #156]	@ (8006ce8 <HAL_DMA_Abort+0x24c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d02c      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a25      	ldr	r2, [pc, #148]	@ (8006cec <HAL_DMA_Abort+0x250>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d027      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a24      	ldr	r2, [pc, #144]	@ (8006cf0 <HAL_DMA_Abort+0x254>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d022      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a22      	ldr	r2, [pc, #136]	@ (8006cf4 <HAL_DMA_Abort+0x258>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01d      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a21      	ldr	r2, [pc, #132]	@ (8006cf8 <HAL_DMA_Abort+0x25c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d018      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cfc <HAL_DMA_Abort+0x260>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d013      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1e      	ldr	r2, [pc, #120]	@ (8006d00 <HAL_DMA_Abort+0x264>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00e      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1c      	ldr	r2, [pc, #112]	@ (8006d04 <HAL_DMA_Abort+0x268>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d009      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d08 <HAL_DMA_Abort+0x26c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d004      	beq.n	8006caa <HAL_DMA_Abort+0x20e>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a19      	ldr	r2, [pc, #100]	@ (8006d0c <HAL_DMA_Abort+0x270>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d132      	bne.n	8006d10 <HAL_DMA_Abort+0x274>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e031      	b.n	8006d12 <HAL_DMA_Abort+0x276>
 8006cae:	bf00      	nop
 8006cb0:	40020010 	.word	0x40020010
 8006cb4:	40020028 	.word	0x40020028
 8006cb8:	40020040 	.word	0x40020040
 8006cbc:	40020058 	.word	0x40020058
 8006cc0:	40020070 	.word	0x40020070
 8006cc4:	40020088 	.word	0x40020088
 8006cc8:	400200a0 	.word	0x400200a0
 8006ccc:	400200b8 	.word	0x400200b8
 8006cd0:	40020410 	.word	0x40020410
 8006cd4:	40020428 	.word	0x40020428
 8006cd8:	40020440 	.word	0x40020440
 8006cdc:	40020458 	.word	0x40020458
 8006ce0:	40020470 	.word	0x40020470
 8006ce4:	40020488 	.word	0x40020488
 8006ce8:	400204a0 	.word	0x400204a0
 8006cec:	400204b8 	.word	0x400204b8
 8006cf0:	58025408 	.word	0x58025408
 8006cf4:	5802541c 	.word	0x5802541c
 8006cf8:	58025430 	.word	0x58025430
 8006cfc:	58025444 	.word	0x58025444
 8006d00:	58025458 	.word	0x58025458
 8006d04:	5802546c 	.word	0x5802546c
 8006d08:	58025480 	.word	0x58025480
 8006d0c:	58025494 	.word	0x58025494
 8006d10:	2300      	movs	r3, #0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d007      	beq.n	8006d26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a6d      	ldr	r2, [pc, #436]	@ (8006ee0 <HAL_DMA_Abort+0x444>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d04a      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a6b      	ldr	r2, [pc, #428]	@ (8006ee4 <HAL_DMA_Abort+0x448>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d045      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a6a      	ldr	r2, [pc, #424]	@ (8006ee8 <HAL_DMA_Abort+0x44c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d040      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a68      	ldr	r2, [pc, #416]	@ (8006eec <HAL_DMA_Abort+0x450>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d03b      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a67      	ldr	r2, [pc, #412]	@ (8006ef0 <HAL_DMA_Abort+0x454>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d036      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a65      	ldr	r2, [pc, #404]	@ (8006ef4 <HAL_DMA_Abort+0x458>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d031      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a64      	ldr	r2, [pc, #400]	@ (8006ef8 <HAL_DMA_Abort+0x45c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d02c      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a62      	ldr	r2, [pc, #392]	@ (8006efc <HAL_DMA_Abort+0x460>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d027      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a61      	ldr	r2, [pc, #388]	@ (8006f00 <HAL_DMA_Abort+0x464>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d022      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a5f      	ldr	r2, [pc, #380]	@ (8006f04 <HAL_DMA_Abort+0x468>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d01d      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a5e      	ldr	r2, [pc, #376]	@ (8006f08 <HAL_DMA_Abort+0x46c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d018      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a5c      	ldr	r2, [pc, #368]	@ (8006f0c <HAL_DMA_Abort+0x470>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d013      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a5b      	ldr	r2, [pc, #364]	@ (8006f10 <HAL_DMA_Abort+0x474>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d00e      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a59      	ldr	r2, [pc, #356]	@ (8006f14 <HAL_DMA_Abort+0x478>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d009      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a58      	ldr	r2, [pc, #352]	@ (8006f18 <HAL_DMA_Abort+0x47c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d004      	beq.n	8006dc6 <HAL_DMA_Abort+0x32a>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a56      	ldr	r2, [pc, #344]	@ (8006f1c <HAL_DMA_Abort+0x480>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d108      	bne.n	8006dd8 <HAL_DMA_Abort+0x33c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0201 	bic.w	r2, r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	e007      	b.n	8006de8 <HAL_DMA_Abort+0x34c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0201 	bic.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006de8:	e013      	b.n	8006e12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006dea:	f7fc fee7 	bl	8003bbc <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b05      	cmp	r3, #5
 8006df6:	d90c      	bls.n	8006e12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2203      	movs	r2, #3
 8006e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e12d      	b.n	800706e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e5      	bne.n	8006dea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2f      	ldr	r2, [pc, #188]	@ (8006ee0 <HAL_DMA_Abort+0x444>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d04a      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ee4 <HAL_DMA_Abort+0x448>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d045      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a2c      	ldr	r2, [pc, #176]	@ (8006ee8 <HAL_DMA_Abort+0x44c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d040      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a2a      	ldr	r2, [pc, #168]	@ (8006eec <HAL_DMA_Abort+0x450>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d03b      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a29      	ldr	r2, [pc, #164]	@ (8006ef0 <HAL_DMA_Abort+0x454>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d036      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a27      	ldr	r2, [pc, #156]	@ (8006ef4 <HAL_DMA_Abort+0x458>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d031      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a26      	ldr	r2, [pc, #152]	@ (8006ef8 <HAL_DMA_Abort+0x45c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d02c      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a24      	ldr	r2, [pc, #144]	@ (8006efc <HAL_DMA_Abort+0x460>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d027      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a23      	ldr	r2, [pc, #140]	@ (8006f00 <HAL_DMA_Abort+0x464>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d022      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a21      	ldr	r2, [pc, #132]	@ (8006f04 <HAL_DMA_Abort+0x468>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01d      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a20      	ldr	r2, [pc, #128]	@ (8006f08 <HAL_DMA_Abort+0x46c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d018      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1e      	ldr	r2, [pc, #120]	@ (8006f0c <HAL_DMA_Abort+0x470>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d013      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8006f10 <HAL_DMA_Abort+0x474>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00e      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8006f14 <HAL_DMA_Abort+0x478>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d009      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a1a      	ldr	r2, [pc, #104]	@ (8006f18 <HAL_DMA_Abort+0x47c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d004      	beq.n	8006ebe <HAL_DMA_Abort+0x422>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	@ (8006f1c <HAL_DMA_Abort+0x480>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d101      	bne.n	8006ec2 <HAL_DMA_Abort+0x426>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <HAL_DMA_Abort+0x428>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d02b      	beq.n	8006f20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ecc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	223f      	movs	r2, #63	@ 0x3f
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	609a      	str	r2, [r3, #8]
 8006ede:	e02a      	b.n	8006f36 <HAL_DMA_Abort+0x49a>
 8006ee0:	40020010 	.word	0x40020010
 8006ee4:	40020028 	.word	0x40020028
 8006ee8:	40020040 	.word	0x40020040
 8006eec:	40020058 	.word	0x40020058
 8006ef0:	40020070 	.word	0x40020070
 8006ef4:	40020088 	.word	0x40020088
 8006ef8:	400200a0 	.word	0x400200a0
 8006efc:	400200b8 	.word	0x400200b8
 8006f00:	40020410 	.word	0x40020410
 8006f04:	40020428 	.word	0x40020428
 8006f08:	40020440 	.word	0x40020440
 8006f0c:	40020458 	.word	0x40020458
 8006f10:	40020470 	.word	0x40020470
 8006f14:	40020488 	.word	0x40020488
 8006f18:	400204a0 	.word	0x400204a0
 8006f1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	2201      	movs	r2, #1
 8006f30:	409a      	lsls	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8007078 <HAL_DMA_Abort+0x5dc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d072      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a4d      	ldr	r2, [pc, #308]	@ (800707c <HAL_DMA_Abort+0x5e0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d06d      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8007080 <HAL_DMA_Abort+0x5e4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d068      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a4a      	ldr	r2, [pc, #296]	@ (8007084 <HAL_DMA_Abort+0x5e8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d063      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a49      	ldr	r2, [pc, #292]	@ (8007088 <HAL_DMA_Abort+0x5ec>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d05e      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a47      	ldr	r2, [pc, #284]	@ (800708c <HAL_DMA_Abort+0x5f0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d059      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a46      	ldr	r2, [pc, #280]	@ (8007090 <HAL_DMA_Abort+0x5f4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d054      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a44      	ldr	r2, [pc, #272]	@ (8007094 <HAL_DMA_Abort+0x5f8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d04f      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a43      	ldr	r2, [pc, #268]	@ (8007098 <HAL_DMA_Abort+0x5fc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d04a      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a41      	ldr	r2, [pc, #260]	@ (800709c <HAL_DMA_Abort+0x600>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d045      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a40      	ldr	r2, [pc, #256]	@ (80070a0 <HAL_DMA_Abort+0x604>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d040      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a3e      	ldr	r2, [pc, #248]	@ (80070a4 <HAL_DMA_Abort+0x608>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d03b      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a3d      	ldr	r2, [pc, #244]	@ (80070a8 <HAL_DMA_Abort+0x60c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d036      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a3b      	ldr	r2, [pc, #236]	@ (80070ac <HAL_DMA_Abort+0x610>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d031      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80070b0 <HAL_DMA_Abort+0x614>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d02c      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a38      	ldr	r2, [pc, #224]	@ (80070b4 <HAL_DMA_Abort+0x618>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d027      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a37      	ldr	r2, [pc, #220]	@ (80070b8 <HAL_DMA_Abort+0x61c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d022      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a35      	ldr	r2, [pc, #212]	@ (80070bc <HAL_DMA_Abort+0x620>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d01d      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a34      	ldr	r2, [pc, #208]	@ (80070c0 <HAL_DMA_Abort+0x624>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d018      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a32      	ldr	r2, [pc, #200]	@ (80070c4 <HAL_DMA_Abort+0x628>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a31      	ldr	r2, [pc, #196]	@ (80070c8 <HAL_DMA_Abort+0x62c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00e      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a2f      	ldr	r2, [pc, #188]	@ (80070cc <HAL_DMA_Abort+0x630>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d009      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a2e      	ldr	r2, [pc, #184]	@ (80070d0 <HAL_DMA_Abort+0x634>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d004      	beq.n	8007026 <HAL_DMA_Abort+0x58a>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a2c      	ldr	r2, [pc, #176]	@ (80070d4 <HAL_DMA_Abort+0x638>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d101      	bne.n	800702a <HAL_DMA_Abort+0x58e>
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <HAL_DMA_Abort+0x590>
 800702a:	2300      	movs	r3, #0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d015      	beq.n	800705c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007038:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00c      	beq.n	800705c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800704c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007050:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800705a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	40020010 	.word	0x40020010
 800707c:	40020028 	.word	0x40020028
 8007080:	40020040 	.word	0x40020040
 8007084:	40020058 	.word	0x40020058
 8007088:	40020070 	.word	0x40020070
 800708c:	40020088 	.word	0x40020088
 8007090:	400200a0 	.word	0x400200a0
 8007094:	400200b8 	.word	0x400200b8
 8007098:	40020410 	.word	0x40020410
 800709c:	40020428 	.word	0x40020428
 80070a0:	40020440 	.word	0x40020440
 80070a4:	40020458 	.word	0x40020458
 80070a8:	40020470 	.word	0x40020470
 80070ac:	40020488 	.word	0x40020488
 80070b0:	400204a0 	.word	0x400204a0
 80070b4:	400204b8 	.word	0x400204b8
 80070b8:	58025408 	.word	0x58025408
 80070bc:	5802541c 	.word	0x5802541c
 80070c0:	58025430 	.word	0x58025430
 80070c4:	58025444 	.word	0x58025444
 80070c8:	58025458 	.word	0x58025458
 80070cc:	5802546c 	.word	0x5802546c
 80070d0:	58025480 	.word	0x58025480
 80070d4:	58025494 	.word	0x58025494

080070d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e237      	b.n	800755a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d004      	beq.n	8007100 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2280      	movs	r2, #128	@ 0x80
 80070fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e22c      	b.n	800755a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a5c      	ldr	r2, [pc, #368]	@ (8007278 <HAL_DMA_Abort_IT+0x1a0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d04a      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a5b      	ldr	r2, [pc, #364]	@ (800727c <HAL_DMA_Abort_IT+0x1a4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d045      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a59      	ldr	r2, [pc, #356]	@ (8007280 <HAL_DMA_Abort_IT+0x1a8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d040      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a58      	ldr	r2, [pc, #352]	@ (8007284 <HAL_DMA_Abort_IT+0x1ac>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d03b      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a56      	ldr	r2, [pc, #344]	@ (8007288 <HAL_DMA_Abort_IT+0x1b0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d036      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a55      	ldr	r2, [pc, #340]	@ (800728c <HAL_DMA_Abort_IT+0x1b4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d031      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a53      	ldr	r2, [pc, #332]	@ (8007290 <HAL_DMA_Abort_IT+0x1b8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d02c      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a52      	ldr	r2, [pc, #328]	@ (8007294 <HAL_DMA_Abort_IT+0x1bc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d027      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a50      	ldr	r2, [pc, #320]	@ (8007298 <HAL_DMA_Abort_IT+0x1c0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d022      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a4f      	ldr	r2, [pc, #316]	@ (800729c <HAL_DMA_Abort_IT+0x1c4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d01d      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a4d      	ldr	r2, [pc, #308]	@ (80072a0 <HAL_DMA_Abort_IT+0x1c8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d018      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a4c      	ldr	r2, [pc, #304]	@ (80072a4 <HAL_DMA_Abort_IT+0x1cc>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d013      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a4a      	ldr	r2, [pc, #296]	@ (80072a8 <HAL_DMA_Abort_IT+0x1d0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00e      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a49      	ldr	r2, [pc, #292]	@ (80072ac <HAL_DMA_Abort_IT+0x1d4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d009      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a47      	ldr	r2, [pc, #284]	@ (80072b0 <HAL_DMA_Abort_IT+0x1d8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d004      	beq.n	80071a0 <HAL_DMA_Abort_IT+0xc8>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a46      	ldr	r2, [pc, #280]	@ (80072b4 <HAL_DMA_Abort_IT+0x1dc>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d101      	bne.n	80071a4 <HAL_DMA_Abort_IT+0xcc>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <HAL_DMA_Abort_IT+0xce>
 80071a4:	2300      	movs	r3, #0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 8086 	beq.w	80072b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2204      	movs	r2, #4
 80071b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a2f      	ldr	r2, [pc, #188]	@ (8007278 <HAL_DMA_Abort_IT+0x1a0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d04a      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a2e      	ldr	r2, [pc, #184]	@ (800727c <HAL_DMA_Abort_IT+0x1a4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d045      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a2c      	ldr	r2, [pc, #176]	@ (8007280 <HAL_DMA_Abort_IT+0x1a8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d040      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a2b      	ldr	r2, [pc, #172]	@ (8007284 <HAL_DMA_Abort_IT+0x1ac>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d03b      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a29      	ldr	r2, [pc, #164]	@ (8007288 <HAL_DMA_Abort_IT+0x1b0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d036      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a28      	ldr	r2, [pc, #160]	@ (800728c <HAL_DMA_Abort_IT+0x1b4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d031      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a26      	ldr	r2, [pc, #152]	@ (8007290 <HAL_DMA_Abort_IT+0x1b8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d02c      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a25      	ldr	r2, [pc, #148]	@ (8007294 <HAL_DMA_Abort_IT+0x1bc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d027      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a23      	ldr	r2, [pc, #140]	@ (8007298 <HAL_DMA_Abort_IT+0x1c0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d022      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a22      	ldr	r2, [pc, #136]	@ (800729c <HAL_DMA_Abort_IT+0x1c4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d01d      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a20      	ldr	r2, [pc, #128]	@ (80072a0 <HAL_DMA_Abort_IT+0x1c8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d018      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1f      	ldr	r2, [pc, #124]	@ (80072a4 <HAL_DMA_Abort_IT+0x1cc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d013      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1d      	ldr	r2, [pc, #116]	@ (80072a8 <HAL_DMA_Abort_IT+0x1d0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00e      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1c      	ldr	r2, [pc, #112]	@ (80072ac <HAL_DMA_Abort_IT+0x1d4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d009      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a1a      	ldr	r2, [pc, #104]	@ (80072b0 <HAL_DMA_Abort_IT+0x1d8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d004      	beq.n	8007254 <HAL_DMA_Abort_IT+0x17c>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a19      	ldr	r2, [pc, #100]	@ (80072b4 <HAL_DMA_Abort_IT+0x1dc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d108      	bne.n	8007266 <HAL_DMA_Abort_IT+0x18e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0201 	bic.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	e178      	b.n	8007558 <HAL_DMA_Abort_IT+0x480>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	e16f      	b.n	8007558 <HAL_DMA_Abort_IT+0x480>
 8007278:	40020010 	.word	0x40020010
 800727c:	40020028 	.word	0x40020028
 8007280:	40020040 	.word	0x40020040
 8007284:	40020058 	.word	0x40020058
 8007288:	40020070 	.word	0x40020070
 800728c:	40020088 	.word	0x40020088
 8007290:	400200a0 	.word	0x400200a0
 8007294:	400200b8 	.word	0x400200b8
 8007298:	40020410 	.word	0x40020410
 800729c:	40020428 	.word	0x40020428
 80072a0:	40020440 	.word	0x40020440
 80072a4:	40020458 	.word	0x40020458
 80072a8:	40020470 	.word	0x40020470
 80072ac:	40020488 	.word	0x40020488
 80072b0:	400204a0 	.word	0x400204a0
 80072b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 020e 	bic.w	r2, r2, #14
 80072c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a6c      	ldr	r2, [pc, #432]	@ (8007480 <HAL_DMA_Abort_IT+0x3a8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d04a      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a6b      	ldr	r2, [pc, #428]	@ (8007484 <HAL_DMA_Abort_IT+0x3ac>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d045      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a69      	ldr	r2, [pc, #420]	@ (8007488 <HAL_DMA_Abort_IT+0x3b0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d040      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a68      	ldr	r2, [pc, #416]	@ (800748c <HAL_DMA_Abort_IT+0x3b4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d03b      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a66      	ldr	r2, [pc, #408]	@ (8007490 <HAL_DMA_Abort_IT+0x3b8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d036      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a65      	ldr	r2, [pc, #404]	@ (8007494 <HAL_DMA_Abort_IT+0x3bc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d031      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a63      	ldr	r2, [pc, #396]	@ (8007498 <HAL_DMA_Abort_IT+0x3c0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d02c      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a62      	ldr	r2, [pc, #392]	@ (800749c <HAL_DMA_Abort_IT+0x3c4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d027      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a60      	ldr	r2, [pc, #384]	@ (80074a0 <HAL_DMA_Abort_IT+0x3c8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d022      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a5f      	ldr	r2, [pc, #380]	@ (80074a4 <HAL_DMA_Abort_IT+0x3cc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d01d      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a5d      	ldr	r2, [pc, #372]	@ (80074a8 <HAL_DMA_Abort_IT+0x3d0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d018      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a5c      	ldr	r2, [pc, #368]	@ (80074ac <HAL_DMA_Abort_IT+0x3d4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d013      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a5a      	ldr	r2, [pc, #360]	@ (80074b0 <HAL_DMA_Abort_IT+0x3d8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00e      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a59      	ldr	r2, [pc, #356]	@ (80074b4 <HAL_DMA_Abort_IT+0x3dc>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d009      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a57      	ldr	r2, [pc, #348]	@ (80074b8 <HAL_DMA_Abort_IT+0x3e0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d004      	beq.n	8007368 <HAL_DMA_Abort_IT+0x290>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a56      	ldr	r2, [pc, #344]	@ (80074bc <HAL_DMA_Abort_IT+0x3e4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d108      	bne.n	800737a <HAL_DMA_Abort_IT+0x2a2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0201 	bic.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e007      	b.n	800738a <HAL_DMA_Abort_IT+0x2b2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0201 	bic.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a3c      	ldr	r2, [pc, #240]	@ (8007480 <HAL_DMA_Abort_IT+0x3a8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d072      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a3a      	ldr	r2, [pc, #232]	@ (8007484 <HAL_DMA_Abort_IT+0x3ac>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d06d      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a39      	ldr	r2, [pc, #228]	@ (8007488 <HAL_DMA_Abort_IT+0x3b0>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d068      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a37      	ldr	r2, [pc, #220]	@ (800748c <HAL_DMA_Abort_IT+0x3b4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d063      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a36      	ldr	r2, [pc, #216]	@ (8007490 <HAL_DMA_Abort_IT+0x3b8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d05e      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a34      	ldr	r2, [pc, #208]	@ (8007494 <HAL_DMA_Abort_IT+0x3bc>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d059      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a33      	ldr	r2, [pc, #204]	@ (8007498 <HAL_DMA_Abort_IT+0x3c0>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d054      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a31      	ldr	r2, [pc, #196]	@ (800749c <HAL_DMA_Abort_IT+0x3c4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d04f      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a30      	ldr	r2, [pc, #192]	@ (80074a0 <HAL_DMA_Abort_IT+0x3c8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d04a      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a2e      	ldr	r2, [pc, #184]	@ (80074a4 <HAL_DMA_Abort_IT+0x3cc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d045      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a2d      	ldr	r2, [pc, #180]	@ (80074a8 <HAL_DMA_Abort_IT+0x3d0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d040      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a2b      	ldr	r2, [pc, #172]	@ (80074ac <HAL_DMA_Abort_IT+0x3d4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d03b      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2a      	ldr	r2, [pc, #168]	@ (80074b0 <HAL_DMA_Abort_IT+0x3d8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d036      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a28      	ldr	r2, [pc, #160]	@ (80074b4 <HAL_DMA_Abort_IT+0x3dc>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d031      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a27      	ldr	r2, [pc, #156]	@ (80074b8 <HAL_DMA_Abort_IT+0x3e0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d02c      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a25      	ldr	r2, [pc, #148]	@ (80074bc <HAL_DMA_Abort_IT+0x3e4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d027      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a24      	ldr	r2, [pc, #144]	@ (80074c0 <HAL_DMA_Abort_IT+0x3e8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d022      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a22      	ldr	r2, [pc, #136]	@ (80074c4 <HAL_DMA_Abort_IT+0x3ec>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d01d      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a21      	ldr	r2, [pc, #132]	@ (80074c8 <HAL_DMA_Abort_IT+0x3f0>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d018      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1f      	ldr	r2, [pc, #124]	@ (80074cc <HAL_DMA_Abort_IT+0x3f4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d013      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1e      	ldr	r2, [pc, #120]	@ (80074d0 <HAL_DMA_Abort_IT+0x3f8>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00e      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a1c      	ldr	r2, [pc, #112]	@ (80074d4 <HAL_DMA_Abort_IT+0x3fc>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d009      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a1b      	ldr	r2, [pc, #108]	@ (80074d8 <HAL_DMA_Abort_IT+0x400>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d004      	beq.n	800747a <HAL_DMA_Abort_IT+0x3a2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a19      	ldr	r2, [pc, #100]	@ (80074dc <HAL_DMA_Abort_IT+0x404>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d132      	bne.n	80074e0 <HAL_DMA_Abort_IT+0x408>
 800747a:	2301      	movs	r3, #1
 800747c:	e031      	b.n	80074e2 <HAL_DMA_Abort_IT+0x40a>
 800747e:	bf00      	nop
 8007480:	40020010 	.word	0x40020010
 8007484:	40020028 	.word	0x40020028
 8007488:	40020040 	.word	0x40020040
 800748c:	40020058 	.word	0x40020058
 8007490:	40020070 	.word	0x40020070
 8007494:	40020088 	.word	0x40020088
 8007498:	400200a0 	.word	0x400200a0
 800749c:	400200b8 	.word	0x400200b8
 80074a0:	40020410 	.word	0x40020410
 80074a4:	40020428 	.word	0x40020428
 80074a8:	40020440 	.word	0x40020440
 80074ac:	40020458 	.word	0x40020458
 80074b0:	40020470 	.word	0x40020470
 80074b4:	40020488 	.word	0x40020488
 80074b8:	400204a0 	.word	0x400204a0
 80074bc:	400204b8 	.word	0x400204b8
 80074c0:	58025408 	.word	0x58025408
 80074c4:	5802541c 	.word	0x5802541c
 80074c8:	58025430 	.word	0x58025430
 80074cc:	58025444 	.word	0x58025444
 80074d0:	58025458 	.word	0x58025458
 80074d4:	5802546c 	.word	0x5802546c
 80074d8:	58025480 	.word	0x58025480
 80074dc:	58025494 	.word	0x58025494
 80074e0:	2300      	movs	r3, #0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d028      	beq.n	8007538 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2201      	movs	r2, #1
 8007506:	409a      	lsls	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007514:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00c      	beq.n	8007538 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800752c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007536:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08a      	sub	sp, #40	@ 0x28
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007570:	4b67      	ldr	r3, [pc, #412]	@ (8007710 <HAL_DMA_IRQHandler+0x1ac>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a67      	ldr	r2, [pc, #412]	@ (8007714 <HAL_DMA_IRQHandler+0x1b0>)
 8007576:	fba2 2303 	umull	r2, r3, r2, r3
 800757a:	0a9b      	lsrs	r3, r3, #10
 800757c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007582:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007588:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a5f      	ldr	r2, [pc, #380]	@ (8007718 <HAL_DMA_IRQHandler+0x1b4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d04a      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a5d      	ldr	r2, [pc, #372]	@ (800771c <HAL_DMA_IRQHandler+0x1b8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d045      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a5c      	ldr	r2, [pc, #368]	@ (8007720 <HAL_DMA_IRQHandler+0x1bc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d040      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a5a      	ldr	r2, [pc, #360]	@ (8007724 <HAL_DMA_IRQHandler+0x1c0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d03b      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a59      	ldr	r2, [pc, #356]	@ (8007728 <HAL_DMA_IRQHandler+0x1c4>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d036      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a57      	ldr	r2, [pc, #348]	@ (800772c <HAL_DMA_IRQHandler+0x1c8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d031      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a56      	ldr	r2, [pc, #344]	@ (8007730 <HAL_DMA_IRQHandler+0x1cc>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d02c      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a54      	ldr	r2, [pc, #336]	@ (8007734 <HAL_DMA_IRQHandler+0x1d0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d027      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a53      	ldr	r2, [pc, #332]	@ (8007738 <HAL_DMA_IRQHandler+0x1d4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d022      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a51      	ldr	r2, [pc, #324]	@ (800773c <HAL_DMA_IRQHandler+0x1d8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d01d      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a50      	ldr	r2, [pc, #320]	@ (8007740 <HAL_DMA_IRQHandler+0x1dc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d018      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a4e      	ldr	r2, [pc, #312]	@ (8007744 <HAL_DMA_IRQHandler+0x1e0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d013      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a4d      	ldr	r2, [pc, #308]	@ (8007748 <HAL_DMA_IRQHandler+0x1e4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00e      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a4b      	ldr	r2, [pc, #300]	@ (800774c <HAL_DMA_IRQHandler+0x1e8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d009      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a4a      	ldr	r2, [pc, #296]	@ (8007750 <HAL_DMA_IRQHandler+0x1ec>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d004      	beq.n	8007636 <HAL_DMA_IRQHandler+0xd2>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a48      	ldr	r2, [pc, #288]	@ (8007754 <HAL_DMA_IRQHandler+0x1f0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d101      	bne.n	800763a <HAL_DMA_IRQHandler+0xd6>
 8007636:	2301      	movs	r3, #1
 8007638:	e000      	b.n	800763c <HAL_DMA_IRQHandler+0xd8>
 800763a:	2300      	movs	r3, #0
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 842b 	beq.w	8007e98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007646:	f003 031f 	and.w	r3, r3, #31
 800764a:	2208      	movs	r2, #8
 800764c:	409a      	lsls	r2, r3
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	4013      	ands	r3, r2
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 80a2 	beq.w	800779c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a2e      	ldr	r2, [pc, #184]	@ (8007718 <HAL_DMA_IRQHandler+0x1b4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d04a      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a2d      	ldr	r2, [pc, #180]	@ (800771c <HAL_DMA_IRQHandler+0x1b8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d045      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a2b      	ldr	r2, [pc, #172]	@ (8007720 <HAL_DMA_IRQHandler+0x1bc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d040      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a2a      	ldr	r2, [pc, #168]	@ (8007724 <HAL_DMA_IRQHandler+0x1c0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d03b      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a28      	ldr	r2, [pc, #160]	@ (8007728 <HAL_DMA_IRQHandler+0x1c4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d036      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a27      	ldr	r2, [pc, #156]	@ (800772c <HAL_DMA_IRQHandler+0x1c8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d031      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a25      	ldr	r2, [pc, #148]	@ (8007730 <HAL_DMA_IRQHandler+0x1cc>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d02c      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a24      	ldr	r2, [pc, #144]	@ (8007734 <HAL_DMA_IRQHandler+0x1d0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d027      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a22      	ldr	r2, [pc, #136]	@ (8007738 <HAL_DMA_IRQHandler+0x1d4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d022      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a21      	ldr	r2, [pc, #132]	@ (800773c <HAL_DMA_IRQHandler+0x1d8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d01d      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007740 <HAL_DMA_IRQHandler+0x1dc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d018      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007744 <HAL_DMA_IRQHandler+0x1e0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d013      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007748 <HAL_DMA_IRQHandler+0x1e4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00e      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1b      	ldr	r2, [pc, #108]	@ (800774c <HAL_DMA_IRQHandler+0x1e8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d009      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a19      	ldr	r2, [pc, #100]	@ (8007750 <HAL_DMA_IRQHandler+0x1ec>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d004      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x194>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a18      	ldr	r2, [pc, #96]	@ (8007754 <HAL_DMA_IRQHandler+0x1f0>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d12f      	bne.n	8007758 <HAL_DMA_IRQHandler+0x1f4>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	bf14      	ite	ne
 8007706:	2301      	movne	r3, #1
 8007708:	2300      	moveq	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	e02e      	b.n	800776c <HAL_DMA_IRQHandler+0x208>
 800770e:	bf00      	nop
 8007710:	24000018 	.word	0x24000018
 8007714:	1b4e81b5 	.word	0x1b4e81b5
 8007718:	40020010 	.word	0x40020010
 800771c:	40020028 	.word	0x40020028
 8007720:	40020040 	.word	0x40020040
 8007724:	40020058 	.word	0x40020058
 8007728:	40020070 	.word	0x40020070
 800772c:	40020088 	.word	0x40020088
 8007730:	400200a0 	.word	0x400200a0
 8007734:	400200b8 	.word	0x400200b8
 8007738:	40020410 	.word	0x40020410
 800773c:	40020428 	.word	0x40020428
 8007740:	40020440 	.word	0x40020440
 8007744:	40020458 	.word	0x40020458
 8007748:	40020470 	.word	0x40020470
 800774c:	40020488 	.word	0x40020488
 8007750:	400204a0 	.word	0x400204a0
 8007754:	400204b8 	.word	0x400204b8
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0308 	and.w	r3, r3, #8
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d015      	beq.n	800779c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0204 	bic.w	r2, r2, #4
 800777e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007784:	f003 031f 	and.w	r3, r3, #31
 8007788:	2208      	movs	r2, #8
 800778a:	409a      	lsls	r2, r3
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007794:	f043 0201 	orr.w	r2, r3, #1
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a0:	f003 031f 	and.w	r3, r3, #31
 80077a4:	69ba      	ldr	r2, [r7, #24]
 80077a6:	fa22 f303 	lsr.w	r3, r2, r3
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d06e      	beq.n	8007890 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a69      	ldr	r2, [pc, #420]	@ (800795c <HAL_DMA_IRQHandler+0x3f8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d04a      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a67      	ldr	r2, [pc, #412]	@ (8007960 <HAL_DMA_IRQHandler+0x3fc>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d045      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a66      	ldr	r2, [pc, #408]	@ (8007964 <HAL_DMA_IRQHandler+0x400>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d040      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a64      	ldr	r2, [pc, #400]	@ (8007968 <HAL_DMA_IRQHandler+0x404>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d03b      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a63      	ldr	r2, [pc, #396]	@ (800796c <HAL_DMA_IRQHandler+0x408>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d036      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a61      	ldr	r2, [pc, #388]	@ (8007970 <HAL_DMA_IRQHandler+0x40c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d031      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a60      	ldr	r2, [pc, #384]	@ (8007974 <HAL_DMA_IRQHandler+0x410>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d02c      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a5e      	ldr	r2, [pc, #376]	@ (8007978 <HAL_DMA_IRQHandler+0x414>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d027      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a5d      	ldr	r2, [pc, #372]	@ (800797c <HAL_DMA_IRQHandler+0x418>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d022      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a5b      	ldr	r2, [pc, #364]	@ (8007980 <HAL_DMA_IRQHandler+0x41c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d01d      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a5a      	ldr	r2, [pc, #360]	@ (8007984 <HAL_DMA_IRQHandler+0x420>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d018      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a58      	ldr	r2, [pc, #352]	@ (8007988 <HAL_DMA_IRQHandler+0x424>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d013      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a57      	ldr	r2, [pc, #348]	@ (800798c <HAL_DMA_IRQHandler+0x428>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00e      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a55      	ldr	r2, [pc, #340]	@ (8007990 <HAL_DMA_IRQHandler+0x42c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d009      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a54      	ldr	r2, [pc, #336]	@ (8007994 <HAL_DMA_IRQHandler+0x430>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d004      	beq.n	8007852 <HAL_DMA_IRQHandler+0x2ee>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a52      	ldr	r2, [pc, #328]	@ (8007998 <HAL_DMA_IRQHandler+0x434>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d10a      	bne.n	8007868 <HAL_DMA_IRQHandler+0x304>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800785c:	2b00      	cmp	r3, #0
 800785e:	bf14      	ite	ne
 8007860:	2301      	movne	r3, #1
 8007862:	2300      	moveq	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	e003      	b.n	8007870 <HAL_DMA_IRQHandler+0x30c>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2300      	movs	r3, #0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00d      	beq.n	8007890 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	2201      	movs	r2, #1
 800787e:	409a      	lsls	r2, r3
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007888:	f043 0202 	orr.w	r2, r3, #2
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007894:	f003 031f 	and.w	r3, r3, #31
 8007898:	2204      	movs	r2, #4
 800789a:	409a      	lsls	r2, r3
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	4013      	ands	r3, r2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 808f 	beq.w	80079c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a2c      	ldr	r2, [pc, #176]	@ (800795c <HAL_DMA_IRQHandler+0x3f8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d04a      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007960 <HAL_DMA_IRQHandler+0x3fc>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d045      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a29      	ldr	r2, [pc, #164]	@ (8007964 <HAL_DMA_IRQHandler+0x400>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d040      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a27      	ldr	r2, [pc, #156]	@ (8007968 <HAL_DMA_IRQHandler+0x404>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d03b      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a26      	ldr	r2, [pc, #152]	@ (800796c <HAL_DMA_IRQHandler+0x408>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d036      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a24      	ldr	r2, [pc, #144]	@ (8007970 <HAL_DMA_IRQHandler+0x40c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d031      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a23      	ldr	r2, [pc, #140]	@ (8007974 <HAL_DMA_IRQHandler+0x410>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d02c      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a21      	ldr	r2, [pc, #132]	@ (8007978 <HAL_DMA_IRQHandler+0x414>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d027      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a20      	ldr	r2, [pc, #128]	@ (800797c <HAL_DMA_IRQHandler+0x418>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d022      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a1e      	ldr	r2, [pc, #120]	@ (8007980 <HAL_DMA_IRQHandler+0x41c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d01d      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a1d      	ldr	r2, [pc, #116]	@ (8007984 <HAL_DMA_IRQHandler+0x420>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d018      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a1b      	ldr	r2, [pc, #108]	@ (8007988 <HAL_DMA_IRQHandler+0x424>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d013      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a1a      	ldr	r2, [pc, #104]	@ (800798c <HAL_DMA_IRQHandler+0x428>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d00e      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a18      	ldr	r2, [pc, #96]	@ (8007990 <HAL_DMA_IRQHandler+0x42c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d009      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a17      	ldr	r2, [pc, #92]	@ (8007994 <HAL_DMA_IRQHandler+0x430>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d004      	beq.n	8007946 <HAL_DMA_IRQHandler+0x3e2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a15      	ldr	r2, [pc, #84]	@ (8007998 <HAL_DMA_IRQHandler+0x434>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d12a      	bne.n	800799c <HAL_DMA_IRQHandler+0x438>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	bf14      	ite	ne
 8007954:	2301      	movne	r3, #1
 8007956:	2300      	moveq	r3, #0
 8007958:	b2db      	uxtb	r3, r3
 800795a:	e023      	b.n	80079a4 <HAL_DMA_IRQHandler+0x440>
 800795c:	40020010 	.word	0x40020010
 8007960:	40020028 	.word	0x40020028
 8007964:	40020040 	.word	0x40020040
 8007968:	40020058 	.word	0x40020058
 800796c:	40020070 	.word	0x40020070
 8007970:	40020088 	.word	0x40020088
 8007974:	400200a0 	.word	0x400200a0
 8007978:	400200b8 	.word	0x400200b8
 800797c:	40020410 	.word	0x40020410
 8007980:	40020428 	.word	0x40020428
 8007984:	40020440 	.word	0x40020440
 8007988:	40020458 	.word	0x40020458
 800798c:	40020470 	.word	0x40020470
 8007990:	40020488 	.word	0x40020488
 8007994:	400204a0 	.word	0x400204a0
 8007998:	400204b8 	.word	0x400204b8
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00d      	beq.n	80079c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ac:	f003 031f 	and.w	r3, r3, #31
 80079b0:	2204      	movs	r2, #4
 80079b2:	409a      	lsls	r2, r3
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079bc:	f043 0204 	orr.w	r2, r3, #4
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079c8:	f003 031f 	and.w	r3, r3, #31
 80079cc:	2210      	movs	r2, #16
 80079ce:	409a      	lsls	r2, r3
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 80a6 	beq.w	8007b26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a85      	ldr	r2, [pc, #532]	@ (8007bf4 <HAL_DMA_IRQHandler+0x690>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d04a      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a83      	ldr	r2, [pc, #524]	@ (8007bf8 <HAL_DMA_IRQHandler+0x694>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d045      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a82      	ldr	r2, [pc, #520]	@ (8007bfc <HAL_DMA_IRQHandler+0x698>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d040      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a80      	ldr	r2, [pc, #512]	@ (8007c00 <HAL_DMA_IRQHandler+0x69c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d03b      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a7f      	ldr	r2, [pc, #508]	@ (8007c04 <HAL_DMA_IRQHandler+0x6a0>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d036      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a7d      	ldr	r2, [pc, #500]	@ (8007c08 <HAL_DMA_IRQHandler+0x6a4>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d031      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a7c      	ldr	r2, [pc, #496]	@ (8007c0c <HAL_DMA_IRQHandler+0x6a8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d02c      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a7a      	ldr	r2, [pc, #488]	@ (8007c10 <HAL_DMA_IRQHandler+0x6ac>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d027      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a79      	ldr	r2, [pc, #484]	@ (8007c14 <HAL_DMA_IRQHandler+0x6b0>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d022      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a77      	ldr	r2, [pc, #476]	@ (8007c18 <HAL_DMA_IRQHandler+0x6b4>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d01d      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a76      	ldr	r2, [pc, #472]	@ (8007c1c <HAL_DMA_IRQHandler+0x6b8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d018      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a74      	ldr	r2, [pc, #464]	@ (8007c20 <HAL_DMA_IRQHandler+0x6bc>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d013      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a73      	ldr	r2, [pc, #460]	@ (8007c24 <HAL_DMA_IRQHandler+0x6c0>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00e      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a71      	ldr	r2, [pc, #452]	@ (8007c28 <HAL_DMA_IRQHandler+0x6c4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d009      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a70      	ldr	r2, [pc, #448]	@ (8007c2c <HAL_DMA_IRQHandler+0x6c8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d004      	beq.n	8007a7a <HAL_DMA_IRQHandler+0x516>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a6e      	ldr	r2, [pc, #440]	@ (8007c30 <HAL_DMA_IRQHandler+0x6cc>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d10a      	bne.n	8007a90 <HAL_DMA_IRQHandler+0x52c>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	bf14      	ite	ne
 8007a88:	2301      	movne	r3, #1
 8007a8a:	2300      	moveq	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	e009      	b.n	8007aa4 <HAL_DMA_IRQHandler+0x540>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	bf14      	ite	ne
 8007a9e:	2301      	movne	r3, #1
 8007aa0:	2300      	moveq	r3, #0
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d03e      	beq.n	8007b26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aac:	f003 031f 	and.w	r3, r3, #31
 8007ab0:	2210      	movs	r2, #16
 8007ab2:	409a      	lsls	r2, r3
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d018      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d108      	bne.n	8007ae6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d024      	beq.n	8007b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	4798      	blx	r3
 8007ae4:	e01f      	b.n	8007b26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d01b      	beq.n	8007b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
 8007af6:	e016      	b.n	8007b26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d107      	bne.n	8007b16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0208 	bic.w	r2, r2, #8
 8007b14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b2a:	f003 031f 	and.w	r3, r3, #31
 8007b2e:	2220      	movs	r2, #32
 8007b30:	409a      	lsls	r2, r3
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	4013      	ands	r3, r2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 8110 	beq.w	8007d5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a2c      	ldr	r2, [pc, #176]	@ (8007bf4 <HAL_DMA_IRQHandler+0x690>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d04a      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8007bf8 <HAL_DMA_IRQHandler+0x694>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d045      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a29      	ldr	r2, [pc, #164]	@ (8007bfc <HAL_DMA_IRQHandler+0x698>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d040      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a28      	ldr	r2, [pc, #160]	@ (8007c00 <HAL_DMA_IRQHandler+0x69c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d03b      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a26      	ldr	r2, [pc, #152]	@ (8007c04 <HAL_DMA_IRQHandler+0x6a0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d036      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a25      	ldr	r2, [pc, #148]	@ (8007c08 <HAL_DMA_IRQHandler+0x6a4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d031      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a23      	ldr	r2, [pc, #140]	@ (8007c0c <HAL_DMA_IRQHandler+0x6a8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d02c      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a22      	ldr	r2, [pc, #136]	@ (8007c10 <HAL_DMA_IRQHandler+0x6ac>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d027      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a20      	ldr	r2, [pc, #128]	@ (8007c14 <HAL_DMA_IRQHandler+0x6b0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d022      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8007c18 <HAL_DMA_IRQHandler+0x6b4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d01d      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c1c <HAL_DMA_IRQHandler+0x6b8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d018      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a1c      	ldr	r2, [pc, #112]	@ (8007c20 <HAL_DMA_IRQHandler+0x6bc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d013      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8007c24 <HAL_DMA_IRQHandler+0x6c0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d00e      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a19      	ldr	r2, [pc, #100]	@ (8007c28 <HAL_DMA_IRQHandler+0x6c4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d009      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a17      	ldr	r2, [pc, #92]	@ (8007c2c <HAL_DMA_IRQHandler+0x6c8>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d004      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x678>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a16      	ldr	r2, [pc, #88]	@ (8007c30 <HAL_DMA_IRQHandler+0x6cc>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d12b      	bne.n	8007c34 <HAL_DMA_IRQHandler+0x6d0>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0310 	and.w	r3, r3, #16
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bf14      	ite	ne
 8007bea:	2301      	movne	r3, #1
 8007bec:	2300      	moveq	r3, #0
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	e02a      	b.n	8007c48 <HAL_DMA_IRQHandler+0x6e4>
 8007bf2:	bf00      	nop
 8007bf4:	40020010 	.word	0x40020010
 8007bf8:	40020028 	.word	0x40020028
 8007bfc:	40020040 	.word	0x40020040
 8007c00:	40020058 	.word	0x40020058
 8007c04:	40020070 	.word	0x40020070
 8007c08:	40020088 	.word	0x40020088
 8007c0c:	400200a0 	.word	0x400200a0
 8007c10:	400200b8 	.word	0x400200b8
 8007c14:	40020410 	.word	0x40020410
 8007c18:	40020428 	.word	0x40020428
 8007c1c:	40020440 	.word	0x40020440
 8007c20:	40020458 	.word	0x40020458
 8007c24:	40020470 	.word	0x40020470
 8007c28:	40020488 	.word	0x40020488
 8007c2c:	400204a0 	.word	0x400204a0
 8007c30:	400204b8 	.word	0x400204b8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bf14      	ite	ne
 8007c42:	2301      	movne	r3, #1
 8007c44:	2300      	moveq	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8087 	beq.w	8007d5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c52:	f003 031f 	and.w	r3, r3, #31
 8007c56:	2220      	movs	r2, #32
 8007c58:	409a      	lsls	r2, r3
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d139      	bne.n	8007cde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0216 	bic.w	r2, r2, #22
 8007c78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	695a      	ldr	r2, [r3, #20]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d103      	bne.n	8007c9a <HAL_DMA_IRQHandler+0x736>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d007      	beq.n	8007caa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0208 	bic.w	r2, r2, #8
 8007ca8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	223f      	movs	r2, #63	@ 0x3f
 8007cb4:	409a      	lsls	r2, r3
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 834a 	beq.w	8008368 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
          }
          return;
 8007cdc:	e344      	b.n	8008368 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d018      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d108      	bne.n	8007d0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d02c      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
 8007d0a:	e027      	b.n	8007d5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d023      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	4798      	blx	r3
 8007d1c:	e01e      	b.n	8007d5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10f      	bne.n	8007d4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0210 	bic.w	r2, r2, #16
 8007d3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 8306 	beq.w	8008372 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 8088 	beq.w	8007e84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2204      	movs	r2, #4
 8007d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a7a      	ldr	r2, [pc, #488]	@ (8007f6c <HAL_DMA_IRQHandler+0xa08>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d04a      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a79      	ldr	r2, [pc, #484]	@ (8007f70 <HAL_DMA_IRQHandler+0xa0c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d045      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a77      	ldr	r2, [pc, #476]	@ (8007f74 <HAL_DMA_IRQHandler+0xa10>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d040      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a76      	ldr	r2, [pc, #472]	@ (8007f78 <HAL_DMA_IRQHandler+0xa14>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d03b      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a74      	ldr	r2, [pc, #464]	@ (8007f7c <HAL_DMA_IRQHandler+0xa18>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d036      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a73      	ldr	r2, [pc, #460]	@ (8007f80 <HAL_DMA_IRQHandler+0xa1c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d031      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a71      	ldr	r2, [pc, #452]	@ (8007f84 <HAL_DMA_IRQHandler+0xa20>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d02c      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a70      	ldr	r2, [pc, #448]	@ (8007f88 <HAL_DMA_IRQHandler+0xa24>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d027      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a6e      	ldr	r2, [pc, #440]	@ (8007f8c <HAL_DMA_IRQHandler+0xa28>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d022      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a6d      	ldr	r2, [pc, #436]	@ (8007f90 <HAL_DMA_IRQHandler+0xa2c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d01d      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a6b      	ldr	r2, [pc, #428]	@ (8007f94 <HAL_DMA_IRQHandler+0xa30>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d018      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a6a      	ldr	r2, [pc, #424]	@ (8007f98 <HAL_DMA_IRQHandler+0xa34>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d013      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a68      	ldr	r2, [pc, #416]	@ (8007f9c <HAL_DMA_IRQHandler+0xa38>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00e      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a67      	ldr	r2, [pc, #412]	@ (8007fa0 <HAL_DMA_IRQHandler+0xa3c>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d009      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a65      	ldr	r2, [pc, #404]	@ (8007fa4 <HAL_DMA_IRQHandler+0xa40>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d004      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x8b8>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a64      	ldr	r2, [pc, #400]	@ (8007fa8 <HAL_DMA_IRQHandler+0xa44>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d108      	bne.n	8007e2e <HAL_DMA_IRQHandler+0x8ca>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e007      	b.n	8007e3e <HAL_DMA_IRQHandler+0x8da>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0201 	bic.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3301      	adds	r3, #1
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d307      	bcc.n	8007e5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f2      	bne.n	8007e3e <HAL_DMA_IRQHandler+0x8da>
 8007e58:	e000      	b.n	8007e5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007e5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d004      	beq.n	8007e74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007e72:	e003      	b.n	8007e7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 8272 	beq.w	8008372 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4798      	blx	r3
 8007e96:	e26c      	b.n	8008372 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a43      	ldr	r2, [pc, #268]	@ (8007fac <HAL_DMA_IRQHandler+0xa48>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d022      	beq.n	8007ee8 <HAL_DMA_IRQHandler+0x984>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a42      	ldr	r2, [pc, #264]	@ (8007fb0 <HAL_DMA_IRQHandler+0xa4c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d01d      	beq.n	8007ee8 <HAL_DMA_IRQHandler+0x984>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a40      	ldr	r2, [pc, #256]	@ (8007fb4 <HAL_DMA_IRQHandler+0xa50>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d018      	beq.n	8007ee8 <HAL_DMA_IRQHandler+0x984>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a3f      	ldr	r2, [pc, #252]	@ (8007fb8 <HAL_DMA_IRQHandler+0xa54>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d013      	beq.n	8007ee8 <HAL_DMA_IRQHandler+0x984>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a3d      	ldr	r2, [pc, #244]	@ (8007fbc <HAL_DMA_IRQHandler+0xa58>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d00e      	beq.n	8007ee8 <HAL_DMA_IRQHandler+0x984>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a3c      	ldr	r2, [pc, #240]	@ (8007fc0 <HAL_DMA_IRQHandler+0xa5c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d009      	beq.n	8007ee8 <HAL_DMA_IRQHandler+0x984>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a3a      	ldr	r2, [pc, #232]	@ (8007fc4 <HAL_DMA_IRQHandler+0xa60>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d004      	beq.n	8007ee8 <HAL_DMA_IRQHandler+0x984>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a39      	ldr	r2, [pc, #228]	@ (8007fc8 <HAL_DMA_IRQHandler+0xa64>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d101      	bne.n	8007eec <HAL_DMA_IRQHandler+0x988>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <HAL_DMA_IRQHandler+0x98a>
 8007eec:	2300      	movs	r3, #0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 823f 	beq.w	8008372 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f00:	f003 031f 	and.w	r3, r3, #31
 8007f04:	2204      	movs	r2, #4
 8007f06:	409a      	lsls	r2, r3
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 80cd 	beq.w	80080ac <HAL_DMA_IRQHandler+0xb48>
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 80c7 	beq.w	80080ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	2204      	movs	r2, #4
 8007f28:	409a      	lsls	r2, r3
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d049      	beq.n	8007fcc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 8210 	beq.w	800836c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f54:	e20a      	b.n	800836c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 8206 	beq.w	800836c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f68:	e200      	b.n	800836c <HAL_DMA_IRQHandler+0xe08>
 8007f6a:	bf00      	nop
 8007f6c:	40020010 	.word	0x40020010
 8007f70:	40020028 	.word	0x40020028
 8007f74:	40020040 	.word	0x40020040
 8007f78:	40020058 	.word	0x40020058
 8007f7c:	40020070 	.word	0x40020070
 8007f80:	40020088 	.word	0x40020088
 8007f84:	400200a0 	.word	0x400200a0
 8007f88:	400200b8 	.word	0x400200b8
 8007f8c:	40020410 	.word	0x40020410
 8007f90:	40020428 	.word	0x40020428
 8007f94:	40020440 	.word	0x40020440
 8007f98:	40020458 	.word	0x40020458
 8007f9c:	40020470 	.word	0x40020470
 8007fa0:	40020488 	.word	0x40020488
 8007fa4:	400204a0 	.word	0x400204a0
 8007fa8:	400204b8 	.word	0x400204b8
 8007fac:	58025408 	.word	0x58025408
 8007fb0:	5802541c 	.word	0x5802541c
 8007fb4:	58025430 	.word	0x58025430
 8007fb8:	58025444 	.word	0x58025444
 8007fbc:	58025458 	.word	0x58025458
 8007fc0:	5802546c 	.word	0x5802546c
 8007fc4:	58025480 	.word	0x58025480
 8007fc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d160      	bne.n	8008098 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a7f      	ldr	r2, [pc, #508]	@ (80081d8 <HAL_DMA_IRQHandler+0xc74>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d04a      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a7d      	ldr	r2, [pc, #500]	@ (80081dc <HAL_DMA_IRQHandler+0xc78>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d045      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a7c      	ldr	r2, [pc, #496]	@ (80081e0 <HAL_DMA_IRQHandler+0xc7c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d040      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a7a      	ldr	r2, [pc, #488]	@ (80081e4 <HAL_DMA_IRQHandler+0xc80>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d03b      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a79      	ldr	r2, [pc, #484]	@ (80081e8 <HAL_DMA_IRQHandler+0xc84>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d036      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a77      	ldr	r2, [pc, #476]	@ (80081ec <HAL_DMA_IRQHandler+0xc88>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d031      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a76      	ldr	r2, [pc, #472]	@ (80081f0 <HAL_DMA_IRQHandler+0xc8c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d02c      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a74      	ldr	r2, [pc, #464]	@ (80081f4 <HAL_DMA_IRQHandler+0xc90>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d027      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a73      	ldr	r2, [pc, #460]	@ (80081f8 <HAL_DMA_IRQHandler+0xc94>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d022      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a71      	ldr	r2, [pc, #452]	@ (80081fc <HAL_DMA_IRQHandler+0xc98>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d01d      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a70      	ldr	r2, [pc, #448]	@ (8008200 <HAL_DMA_IRQHandler+0xc9c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d018      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a6e      	ldr	r2, [pc, #440]	@ (8008204 <HAL_DMA_IRQHandler+0xca0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d013      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a6d      	ldr	r2, [pc, #436]	@ (8008208 <HAL_DMA_IRQHandler+0xca4>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00e      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a6b      	ldr	r2, [pc, #428]	@ (800820c <HAL_DMA_IRQHandler+0xca8>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d009      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a6a      	ldr	r2, [pc, #424]	@ (8008210 <HAL_DMA_IRQHandler+0xcac>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d004      	beq.n	8008076 <HAL_DMA_IRQHandler+0xb12>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a68      	ldr	r2, [pc, #416]	@ (8008214 <HAL_DMA_IRQHandler+0xcb0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d108      	bne.n	8008088 <HAL_DMA_IRQHandler+0xb24>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 0208 	bic.w	r2, r2, #8
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	e007      	b.n	8008098 <HAL_DMA_IRQHandler+0xb34>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0204 	bic.w	r2, r2, #4
 8008096:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 8165 	beq.w	800836c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080aa:	e15f      	b.n	800836c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	2202      	movs	r2, #2
 80080b6:	409a      	lsls	r2, r3
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80c5 	beq.w	800824c <HAL_DMA_IRQHandler+0xce8>
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 80bf 	beq.w	800824c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080d2:	f003 031f 	and.w	r3, r3, #31
 80080d6:	2202      	movs	r2, #2
 80080d8:	409a      	lsls	r2, r3
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d018      	beq.n	800811a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d109      	bne.n	8008106 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 813a 	beq.w	8008370 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008104:	e134      	b.n	8008370 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 8130 	beq.w	8008370 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008118:	e12a      	b.n	8008370 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	f040 8089 	bne.w	8008238 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a2b      	ldr	r2, [pc, #172]	@ (80081d8 <HAL_DMA_IRQHandler+0xc74>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d04a      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a29      	ldr	r2, [pc, #164]	@ (80081dc <HAL_DMA_IRQHandler+0xc78>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d045      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a28      	ldr	r2, [pc, #160]	@ (80081e0 <HAL_DMA_IRQHandler+0xc7c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d040      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a26      	ldr	r2, [pc, #152]	@ (80081e4 <HAL_DMA_IRQHandler+0xc80>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d03b      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a25      	ldr	r2, [pc, #148]	@ (80081e8 <HAL_DMA_IRQHandler+0xc84>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d036      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a23      	ldr	r2, [pc, #140]	@ (80081ec <HAL_DMA_IRQHandler+0xc88>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d031      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a22      	ldr	r2, [pc, #136]	@ (80081f0 <HAL_DMA_IRQHandler+0xc8c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d02c      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a20      	ldr	r2, [pc, #128]	@ (80081f4 <HAL_DMA_IRQHandler+0xc90>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d027      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a1f      	ldr	r2, [pc, #124]	@ (80081f8 <HAL_DMA_IRQHandler+0xc94>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d022      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1d      	ldr	r2, [pc, #116]	@ (80081fc <HAL_DMA_IRQHandler+0xc98>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d01d      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1c      	ldr	r2, [pc, #112]	@ (8008200 <HAL_DMA_IRQHandler+0xc9c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d018      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1a      	ldr	r2, [pc, #104]	@ (8008204 <HAL_DMA_IRQHandler+0xca0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d013      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a19      	ldr	r2, [pc, #100]	@ (8008208 <HAL_DMA_IRQHandler+0xca4>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d00e      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a17      	ldr	r2, [pc, #92]	@ (800820c <HAL_DMA_IRQHandler+0xca8>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d009      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a16      	ldr	r2, [pc, #88]	@ (8008210 <HAL_DMA_IRQHandler+0xcac>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d004      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xc62>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a14      	ldr	r2, [pc, #80]	@ (8008214 <HAL_DMA_IRQHandler+0xcb0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d128      	bne.n	8008218 <HAL_DMA_IRQHandler+0xcb4>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0214 	bic.w	r2, r2, #20
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	e027      	b.n	8008228 <HAL_DMA_IRQHandler+0xcc4>
 80081d8:	40020010 	.word	0x40020010
 80081dc:	40020028 	.word	0x40020028
 80081e0:	40020040 	.word	0x40020040
 80081e4:	40020058 	.word	0x40020058
 80081e8:	40020070 	.word	0x40020070
 80081ec:	40020088 	.word	0x40020088
 80081f0:	400200a0 	.word	0x400200a0
 80081f4:	400200b8 	.word	0x400200b8
 80081f8:	40020410 	.word	0x40020410
 80081fc:	40020428 	.word	0x40020428
 8008200:	40020440 	.word	0x40020440
 8008204:	40020458 	.word	0x40020458
 8008208:	40020470 	.word	0x40020470
 800820c:	40020488 	.word	0x40020488
 8008210:	400204a0 	.word	0x400204a0
 8008214:	400204b8 	.word	0x400204b8
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 020a 	bic.w	r2, r2, #10
 8008226:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8097 	beq.w	8008370 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800824a:	e091      	b.n	8008370 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008250:	f003 031f 	and.w	r3, r3, #31
 8008254:	2208      	movs	r2, #8
 8008256:	409a      	lsls	r2, r3
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	4013      	ands	r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 8088 	beq.w	8008372 <HAL_DMA_IRQHandler+0xe0e>
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f003 0308 	and.w	r3, r3, #8
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 8082 	beq.w	8008372 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a41      	ldr	r2, [pc, #260]	@ (8008378 <HAL_DMA_IRQHandler+0xe14>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d04a      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a3f      	ldr	r2, [pc, #252]	@ (800837c <HAL_DMA_IRQHandler+0xe18>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d045      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a3e      	ldr	r2, [pc, #248]	@ (8008380 <HAL_DMA_IRQHandler+0xe1c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d040      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a3c      	ldr	r2, [pc, #240]	@ (8008384 <HAL_DMA_IRQHandler+0xe20>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d03b      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a3b      	ldr	r2, [pc, #236]	@ (8008388 <HAL_DMA_IRQHandler+0xe24>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d036      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a39      	ldr	r2, [pc, #228]	@ (800838c <HAL_DMA_IRQHandler+0xe28>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d031      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a38      	ldr	r2, [pc, #224]	@ (8008390 <HAL_DMA_IRQHandler+0xe2c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d02c      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a36      	ldr	r2, [pc, #216]	@ (8008394 <HAL_DMA_IRQHandler+0xe30>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d027      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a35      	ldr	r2, [pc, #212]	@ (8008398 <HAL_DMA_IRQHandler+0xe34>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d022      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a33      	ldr	r2, [pc, #204]	@ (800839c <HAL_DMA_IRQHandler+0xe38>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d01d      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a32      	ldr	r2, [pc, #200]	@ (80083a0 <HAL_DMA_IRQHandler+0xe3c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d018      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a30      	ldr	r2, [pc, #192]	@ (80083a4 <HAL_DMA_IRQHandler+0xe40>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d013      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a2f      	ldr	r2, [pc, #188]	@ (80083a8 <HAL_DMA_IRQHandler+0xe44>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00e      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a2d      	ldr	r2, [pc, #180]	@ (80083ac <HAL_DMA_IRQHandler+0xe48>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d009      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a2c      	ldr	r2, [pc, #176]	@ (80083b0 <HAL_DMA_IRQHandler+0xe4c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d004      	beq.n	800830e <HAL_DMA_IRQHandler+0xdaa>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a2a      	ldr	r2, [pc, #168]	@ (80083b4 <HAL_DMA_IRQHandler+0xe50>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d108      	bne.n	8008320 <HAL_DMA_IRQHandler+0xdbc>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 021c 	bic.w	r2, r2, #28
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	e007      	b.n	8008330 <HAL_DMA_IRQHandler+0xdcc>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 020e 	bic.w	r2, r2, #14
 800832e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008334:	f003 031f 	and.w	r3, r3, #31
 8008338:	2201      	movs	r2, #1
 800833a:	409a      	lsls	r2, r3
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d009      	beq.n	8008372 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	4798      	blx	r3
 8008366:	e004      	b.n	8008372 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008368:	bf00      	nop
 800836a:	e002      	b.n	8008372 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800836c:	bf00      	nop
 800836e:	e000      	b.n	8008372 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008370:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008372:	3728      	adds	r7, #40	@ 0x28
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	40020010 	.word	0x40020010
 800837c:	40020028 	.word	0x40020028
 8008380:	40020040 	.word	0x40020040
 8008384:	40020058 	.word	0x40020058
 8008388:	40020070 	.word	0x40020070
 800838c:	40020088 	.word	0x40020088
 8008390:	400200a0 	.word	0x400200a0
 8008394:	400200b8 	.word	0x400200b8
 8008398:	40020410 	.word	0x40020410
 800839c:	40020428 	.word	0x40020428
 80083a0:	40020440 	.word	0x40020440
 80083a4:	40020458 	.word	0x40020458
 80083a8:	40020470 	.word	0x40020470
 80083ac:	40020488 	.word	0x40020488
 80083b0:	400204a0 	.word	0x400204a0
 80083b4:	400204b8 	.word	0x400204b8

080083b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a7f      	ldr	r2, [pc, #508]	@ (80085d4 <DMA_SetConfig+0x21c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d072      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a7d      	ldr	r2, [pc, #500]	@ (80085d8 <DMA_SetConfig+0x220>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d06d      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a7c      	ldr	r2, [pc, #496]	@ (80085dc <DMA_SetConfig+0x224>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d068      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a7a      	ldr	r2, [pc, #488]	@ (80085e0 <DMA_SetConfig+0x228>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d063      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a79      	ldr	r2, [pc, #484]	@ (80085e4 <DMA_SetConfig+0x22c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d05e      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a77      	ldr	r2, [pc, #476]	@ (80085e8 <DMA_SetConfig+0x230>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d059      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a76      	ldr	r2, [pc, #472]	@ (80085ec <DMA_SetConfig+0x234>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d054      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a74      	ldr	r2, [pc, #464]	@ (80085f0 <DMA_SetConfig+0x238>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d04f      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a73      	ldr	r2, [pc, #460]	@ (80085f4 <DMA_SetConfig+0x23c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d04a      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a71      	ldr	r2, [pc, #452]	@ (80085f8 <DMA_SetConfig+0x240>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d045      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a70      	ldr	r2, [pc, #448]	@ (80085fc <DMA_SetConfig+0x244>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d040      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a6e      	ldr	r2, [pc, #440]	@ (8008600 <DMA_SetConfig+0x248>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d03b      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a6d      	ldr	r2, [pc, #436]	@ (8008604 <DMA_SetConfig+0x24c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d036      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a6b      	ldr	r2, [pc, #428]	@ (8008608 <DMA_SetConfig+0x250>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d031      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a6a      	ldr	r2, [pc, #424]	@ (800860c <DMA_SetConfig+0x254>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d02c      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a68      	ldr	r2, [pc, #416]	@ (8008610 <DMA_SetConfig+0x258>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d027      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a67      	ldr	r2, [pc, #412]	@ (8008614 <DMA_SetConfig+0x25c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d022      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a65      	ldr	r2, [pc, #404]	@ (8008618 <DMA_SetConfig+0x260>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d01d      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a64      	ldr	r2, [pc, #400]	@ (800861c <DMA_SetConfig+0x264>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d018      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a62      	ldr	r2, [pc, #392]	@ (8008620 <DMA_SetConfig+0x268>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d013      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a61      	ldr	r2, [pc, #388]	@ (8008624 <DMA_SetConfig+0x26c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00e      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a5f      	ldr	r2, [pc, #380]	@ (8008628 <DMA_SetConfig+0x270>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d009      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a5e      	ldr	r2, [pc, #376]	@ (800862c <DMA_SetConfig+0x274>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d004      	beq.n	80084c2 <DMA_SetConfig+0x10a>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a5c      	ldr	r2, [pc, #368]	@ (8008630 <DMA_SetConfig+0x278>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d101      	bne.n	80084c6 <DMA_SetConfig+0x10e>
 80084c2:	2301      	movs	r3, #1
 80084c4:	e000      	b.n	80084c8 <DMA_SetConfig+0x110>
 80084c6:	2300      	movs	r3, #0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00d      	beq.n	80084e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80084d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d004      	beq.n	80084e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80084e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a39      	ldr	r2, [pc, #228]	@ (80085d4 <DMA_SetConfig+0x21c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d04a      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a38      	ldr	r2, [pc, #224]	@ (80085d8 <DMA_SetConfig+0x220>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d045      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a36      	ldr	r2, [pc, #216]	@ (80085dc <DMA_SetConfig+0x224>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d040      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a35      	ldr	r2, [pc, #212]	@ (80085e0 <DMA_SetConfig+0x228>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d03b      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a33      	ldr	r2, [pc, #204]	@ (80085e4 <DMA_SetConfig+0x22c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d036      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a32      	ldr	r2, [pc, #200]	@ (80085e8 <DMA_SetConfig+0x230>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d031      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a30      	ldr	r2, [pc, #192]	@ (80085ec <DMA_SetConfig+0x234>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d02c      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a2f      	ldr	r2, [pc, #188]	@ (80085f0 <DMA_SetConfig+0x238>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d027      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a2d      	ldr	r2, [pc, #180]	@ (80085f4 <DMA_SetConfig+0x23c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d022      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a2c      	ldr	r2, [pc, #176]	@ (80085f8 <DMA_SetConfig+0x240>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d01d      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a2a      	ldr	r2, [pc, #168]	@ (80085fc <DMA_SetConfig+0x244>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d018      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a29      	ldr	r2, [pc, #164]	@ (8008600 <DMA_SetConfig+0x248>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d013      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a27      	ldr	r2, [pc, #156]	@ (8008604 <DMA_SetConfig+0x24c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d00e      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a26      	ldr	r2, [pc, #152]	@ (8008608 <DMA_SetConfig+0x250>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d009      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a24      	ldr	r2, [pc, #144]	@ (800860c <DMA_SetConfig+0x254>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d004      	beq.n	8008588 <DMA_SetConfig+0x1d0>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a23      	ldr	r2, [pc, #140]	@ (8008610 <DMA_SetConfig+0x258>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d101      	bne.n	800858c <DMA_SetConfig+0x1d4>
 8008588:	2301      	movs	r3, #1
 800858a:	e000      	b.n	800858e <DMA_SetConfig+0x1d6>
 800858c:	2300      	movs	r3, #0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d059      	beq.n	8008646 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008596:	f003 031f 	and.w	r3, r3, #31
 800859a:	223f      	movs	r2, #63	@ 0x3f
 800859c:	409a      	lsls	r2, r3
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80085b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	2b40      	cmp	r3, #64	@ 0x40
 80085c0:	d138      	bne.n	8008634 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80085d2:	e086      	b.n	80086e2 <DMA_SetConfig+0x32a>
 80085d4:	40020010 	.word	0x40020010
 80085d8:	40020028 	.word	0x40020028
 80085dc:	40020040 	.word	0x40020040
 80085e0:	40020058 	.word	0x40020058
 80085e4:	40020070 	.word	0x40020070
 80085e8:	40020088 	.word	0x40020088
 80085ec:	400200a0 	.word	0x400200a0
 80085f0:	400200b8 	.word	0x400200b8
 80085f4:	40020410 	.word	0x40020410
 80085f8:	40020428 	.word	0x40020428
 80085fc:	40020440 	.word	0x40020440
 8008600:	40020458 	.word	0x40020458
 8008604:	40020470 	.word	0x40020470
 8008608:	40020488 	.word	0x40020488
 800860c:	400204a0 	.word	0x400204a0
 8008610:	400204b8 	.word	0x400204b8
 8008614:	58025408 	.word	0x58025408
 8008618:	5802541c 	.word	0x5802541c
 800861c:	58025430 	.word	0x58025430
 8008620:	58025444 	.word	0x58025444
 8008624:	58025458 	.word	0x58025458
 8008628:	5802546c 	.word	0x5802546c
 800862c:	58025480 	.word	0x58025480
 8008630:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	60da      	str	r2, [r3, #12]
}
 8008644:	e04d      	b.n	80086e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a29      	ldr	r2, [pc, #164]	@ (80086f0 <DMA_SetConfig+0x338>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d022      	beq.n	8008696 <DMA_SetConfig+0x2de>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a27      	ldr	r2, [pc, #156]	@ (80086f4 <DMA_SetConfig+0x33c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d01d      	beq.n	8008696 <DMA_SetConfig+0x2de>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a26      	ldr	r2, [pc, #152]	@ (80086f8 <DMA_SetConfig+0x340>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d018      	beq.n	8008696 <DMA_SetConfig+0x2de>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a24      	ldr	r2, [pc, #144]	@ (80086fc <DMA_SetConfig+0x344>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d013      	beq.n	8008696 <DMA_SetConfig+0x2de>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a23      	ldr	r2, [pc, #140]	@ (8008700 <DMA_SetConfig+0x348>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d00e      	beq.n	8008696 <DMA_SetConfig+0x2de>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a21      	ldr	r2, [pc, #132]	@ (8008704 <DMA_SetConfig+0x34c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d009      	beq.n	8008696 <DMA_SetConfig+0x2de>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a20      	ldr	r2, [pc, #128]	@ (8008708 <DMA_SetConfig+0x350>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d004      	beq.n	8008696 <DMA_SetConfig+0x2de>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a1e      	ldr	r2, [pc, #120]	@ (800870c <DMA_SetConfig+0x354>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d101      	bne.n	800869a <DMA_SetConfig+0x2e2>
 8008696:	2301      	movs	r3, #1
 8008698:	e000      	b.n	800869c <DMA_SetConfig+0x2e4>
 800869a:	2300      	movs	r3, #0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d020      	beq.n	80086e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086a4:	f003 031f 	and.w	r3, r3, #31
 80086a8:	2201      	movs	r2, #1
 80086aa:	409a      	lsls	r2, r3
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2b40      	cmp	r3, #64	@ 0x40
 80086be:	d108      	bne.n	80086d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	60da      	str	r2, [r3, #12]
}
 80086d0:	e007      	b.n	80086e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	60da      	str	r2, [r3, #12]
}
 80086e2:	bf00      	nop
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	58025408 	.word	0x58025408
 80086f4:	5802541c 	.word	0x5802541c
 80086f8:	58025430 	.word	0x58025430
 80086fc:	58025444 	.word	0x58025444
 8008700:	58025458 	.word	0x58025458
 8008704:	5802546c 	.word	0x5802546c
 8008708:	58025480 	.word	0x58025480
 800870c:	58025494 	.word	0x58025494

08008710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a42      	ldr	r2, [pc, #264]	@ (8008828 <DMA_CalcBaseAndBitshift+0x118>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d04a      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a41      	ldr	r2, [pc, #260]	@ (800882c <DMA_CalcBaseAndBitshift+0x11c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d045      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a3f      	ldr	r2, [pc, #252]	@ (8008830 <DMA_CalcBaseAndBitshift+0x120>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d040      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a3e      	ldr	r2, [pc, #248]	@ (8008834 <DMA_CalcBaseAndBitshift+0x124>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d03b      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a3c      	ldr	r2, [pc, #240]	@ (8008838 <DMA_CalcBaseAndBitshift+0x128>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d036      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a3b      	ldr	r2, [pc, #236]	@ (800883c <DMA_CalcBaseAndBitshift+0x12c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d031      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a39      	ldr	r2, [pc, #228]	@ (8008840 <DMA_CalcBaseAndBitshift+0x130>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d02c      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a38      	ldr	r2, [pc, #224]	@ (8008844 <DMA_CalcBaseAndBitshift+0x134>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d027      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a36      	ldr	r2, [pc, #216]	@ (8008848 <DMA_CalcBaseAndBitshift+0x138>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d022      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a35      	ldr	r2, [pc, #212]	@ (800884c <DMA_CalcBaseAndBitshift+0x13c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d01d      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a33      	ldr	r2, [pc, #204]	@ (8008850 <DMA_CalcBaseAndBitshift+0x140>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d018      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a32      	ldr	r2, [pc, #200]	@ (8008854 <DMA_CalcBaseAndBitshift+0x144>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d013      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a30      	ldr	r2, [pc, #192]	@ (8008858 <DMA_CalcBaseAndBitshift+0x148>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00e      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a2f      	ldr	r2, [pc, #188]	@ (800885c <DMA_CalcBaseAndBitshift+0x14c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d009      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a2d      	ldr	r2, [pc, #180]	@ (8008860 <DMA_CalcBaseAndBitshift+0x150>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d004      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xa8>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a2c      	ldr	r2, [pc, #176]	@ (8008864 <DMA_CalcBaseAndBitshift+0x154>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d101      	bne.n	80087bc <DMA_CalcBaseAndBitshift+0xac>
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <DMA_CalcBaseAndBitshift+0xae>
 80087bc:	2300      	movs	r3, #0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d024      	beq.n	800880c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	3b10      	subs	r3, #16
 80087ca:	4a27      	ldr	r2, [pc, #156]	@ (8008868 <DMA_CalcBaseAndBitshift+0x158>)
 80087cc:	fba2 2303 	umull	r2, r3, r2, r3
 80087d0:	091b      	lsrs	r3, r3, #4
 80087d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	4a24      	ldr	r2, [pc, #144]	@ (800886c <DMA_CalcBaseAndBitshift+0x15c>)
 80087dc:	5cd3      	ldrb	r3, [r2, r3]
 80087de:	461a      	mov	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d908      	bls.n	80087fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008870 <DMA_CalcBaseAndBitshift+0x160>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	1d1a      	adds	r2, r3, #4
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80087fa:	e00d      	b.n	8008818 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	461a      	mov	r2, r3
 8008802:	4b1b      	ldr	r3, [pc, #108]	@ (8008870 <DMA_CalcBaseAndBitshift+0x160>)
 8008804:	4013      	ands	r3, r2
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	6593      	str	r3, [r2, #88]	@ 0x58
 800880a:	e005      	b.n	8008818 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	40020010 	.word	0x40020010
 800882c:	40020028 	.word	0x40020028
 8008830:	40020040 	.word	0x40020040
 8008834:	40020058 	.word	0x40020058
 8008838:	40020070 	.word	0x40020070
 800883c:	40020088 	.word	0x40020088
 8008840:	400200a0 	.word	0x400200a0
 8008844:	400200b8 	.word	0x400200b8
 8008848:	40020410 	.word	0x40020410
 800884c:	40020428 	.word	0x40020428
 8008850:	40020440 	.word	0x40020440
 8008854:	40020458 	.word	0x40020458
 8008858:	40020470 	.word	0x40020470
 800885c:	40020488 	.word	0x40020488
 8008860:	400204a0 	.word	0x400204a0
 8008864:	400204b8 	.word	0x400204b8
 8008868:	aaaaaaab 	.word	0xaaaaaaab
 800886c:	08013c40 	.word	0x08013c40
 8008870:	fffffc00 	.word	0xfffffc00

08008874 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d120      	bne.n	80088ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888c:	2b03      	cmp	r3, #3
 800888e:	d858      	bhi.n	8008942 <DMA_CheckFifoParam+0xce>
 8008890:	a201      	add	r2, pc, #4	@ (adr r2, 8008898 <DMA_CheckFifoParam+0x24>)
 8008892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008896:	bf00      	nop
 8008898:	080088a9 	.word	0x080088a9
 800889c:	080088bb 	.word	0x080088bb
 80088a0:	080088a9 	.word	0x080088a9
 80088a4:	08008943 	.word	0x08008943
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d048      	beq.n	8008946 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088b8:	e045      	b.n	8008946 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80088c2:	d142      	bne.n	800894a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088c8:	e03f      	b.n	800894a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088d2:	d123      	bne.n	800891c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d838      	bhi.n	800894e <DMA_CheckFifoParam+0xda>
 80088dc:	a201      	add	r2, pc, #4	@ (adr r2, 80088e4 <DMA_CheckFifoParam+0x70>)
 80088de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e2:	bf00      	nop
 80088e4:	080088f5 	.word	0x080088f5
 80088e8:	080088fb 	.word	0x080088fb
 80088ec:	080088f5 	.word	0x080088f5
 80088f0:	0800890d 	.word	0x0800890d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	73fb      	strb	r3, [r7, #15]
        break;
 80088f8:	e030      	b.n	800895c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d025      	beq.n	8008952 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800890a:	e022      	b.n	8008952 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008910:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008914:	d11f      	bne.n	8008956 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800891a:	e01c      	b.n	8008956 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008920:	2b02      	cmp	r3, #2
 8008922:	d902      	bls.n	800892a <DMA_CheckFifoParam+0xb6>
 8008924:	2b03      	cmp	r3, #3
 8008926:	d003      	beq.n	8008930 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008928:	e018      	b.n	800895c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	73fb      	strb	r3, [r7, #15]
        break;
 800892e:	e015      	b.n	800895c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008934:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00e      	beq.n	800895a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
    break;
 8008940:	e00b      	b.n	800895a <DMA_CheckFifoParam+0xe6>
        break;
 8008942:	bf00      	nop
 8008944:	e00a      	b.n	800895c <DMA_CheckFifoParam+0xe8>
        break;
 8008946:	bf00      	nop
 8008948:	e008      	b.n	800895c <DMA_CheckFifoParam+0xe8>
        break;
 800894a:	bf00      	nop
 800894c:	e006      	b.n	800895c <DMA_CheckFifoParam+0xe8>
        break;
 800894e:	bf00      	nop
 8008950:	e004      	b.n	800895c <DMA_CheckFifoParam+0xe8>
        break;
 8008952:	bf00      	nop
 8008954:	e002      	b.n	800895c <DMA_CheckFifoParam+0xe8>
        break;
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <DMA_CheckFifoParam+0xe8>
    break;
 800895a:	bf00      	nop
    }
  }

  return status;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop

0800896c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a38      	ldr	r2, [pc, #224]	@ (8008a60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d022      	beq.n	80089ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a36      	ldr	r2, [pc, #216]	@ (8008a64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d01d      	beq.n	80089ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a35      	ldr	r2, [pc, #212]	@ (8008a68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d018      	beq.n	80089ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a33      	ldr	r2, [pc, #204]	@ (8008a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d013      	beq.n	80089ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a32      	ldr	r2, [pc, #200]	@ (8008a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d00e      	beq.n	80089ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a30      	ldr	r2, [pc, #192]	@ (8008a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d009      	beq.n	80089ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a2f      	ldr	r2, [pc, #188]	@ (8008a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d004      	beq.n	80089ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a2d      	ldr	r2, [pc, #180]	@ (8008a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d101      	bne.n	80089ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80089ce:	2300      	movs	r3, #0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01a      	beq.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	3b08      	subs	r3, #8
 80089dc:	4a28      	ldr	r2, [pc, #160]	@ (8008a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80089de:	fba2 2303 	umull	r2, r3, r2, r3
 80089e2:	091b      	lsrs	r3, r3, #4
 80089e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	4b26      	ldr	r3, [pc, #152]	@ (8008a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	461a      	mov	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a24      	ldr	r2, [pc, #144]	@ (8008a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80089f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f003 031f 	and.w	r3, r3, #31
 8008a00:	2201      	movs	r2, #1
 8008a02:	409a      	lsls	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008a08:	e024      	b.n	8008a54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	3b10      	subs	r3, #16
 8008a12:	4a1e      	ldr	r2, [pc, #120]	@ (8008a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008a14:	fba2 2303 	umull	r2, r3, r2, r3
 8008a18:	091b      	lsrs	r3, r3, #4
 8008a1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8008a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d806      	bhi.n	8008a32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	4a1b      	ldr	r2, [pc, #108]	@ (8008a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d902      	bls.n	8008a32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3308      	adds	r3, #8
 8008a30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	4b18      	ldr	r3, [pc, #96]	@ (8008a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a16      	ldr	r2, [pc, #88]	@ (8008a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008a44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f003 031f 	and.w	r3, r3, #31
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	409a      	lsls	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008a54:	bf00      	nop
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	58025408 	.word	0x58025408
 8008a64:	5802541c 	.word	0x5802541c
 8008a68:	58025430 	.word	0x58025430
 8008a6c:	58025444 	.word	0x58025444
 8008a70:	58025458 	.word	0x58025458
 8008a74:	5802546c 	.word	0x5802546c
 8008a78:	58025480 	.word	0x58025480
 8008a7c:	58025494 	.word	0x58025494
 8008a80:	cccccccd 	.word	0xcccccccd
 8008a84:	16009600 	.word	0x16009600
 8008a88:	58025880 	.word	0x58025880
 8008a8c:	aaaaaaab 	.word	0xaaaaaaab
 8008a90:	400204b8 	.word	0x400204b8
 8008a94:	4002040f 	.word	0x4002040f
 8008a98:	10008200 	.word	0x10008200
 8008a9c:	40020880 	.word	0x40020880

08008aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d04a      	beq.n	8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d847      	bhi.n	8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a25      	ldr	r2, [pc, #148]	@ (8008b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d022      	beq.n	8008b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a24      	ldr	r2, [pc, #144]	@ (8008b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d01d      	beq.n	8008b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a22      	ldr	r2, [pc, #136]	@ (8008b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d018      	beq.n	8008b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a21      	ldr	r2, [pc, #132]	@ (8008b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d013      	beq.n	8008b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8008b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00e      	beq.n	8008b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a1e      	ldr	r2, [pc, #120]	@ (8008b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d009      	beq.n	8008b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a1c      	ldr	r2, [pc, #112]	@ (8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d004      	beq.n	8008b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a1b      	ldr	r2, [pc, #108]	@ (8008b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d101      	bne.n	8008b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e000      	b.n	8008b12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008b10:	2300      	movs	r3, #0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	4b17      	ldr	r3, [pc, #92]	@ (8008b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	461a      	mov	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a15      	ldr	r2, [pc, #84]	@ (8008b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008b28:	671a      	str	r2, [r3, #112]	@ 0x70
 8008b2a:	e009      	b.n	8008b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	4b14      	ldr	r3, [pc, #80]	@ (8008b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	461a      	mov	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a11      	ldr	r2, [pc, #68]	@ (8008b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008b3e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	2201      	movs	r2, #1
 8008b46:	409a      	lsls	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	58025408 	.word	0x58025408
 8008b5c:	5802541c 	.word	0x5802541c
 8008b60:	58025430 	.word	0x58025430
 8008b64:	58025444 	.word	0x58025444
 8008b68:	58025458 	.word	0x58025458
 8008b6c:	5802546c 	.word	0x5802546c
 8008b70:	58025480 	.word	0x58025480
 8008b74:	58025494 	.word	0x58025494
 8008b78:	1600963f 	.word	0x1600963f
 8008b7c:	58025940 	.word	0x58025940
 8008b80:	1000823f 	.word	0x1000823f
 8008b84:	40020940 	.word	0x40020940

08008b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b089      	sub	sp, #36	@ 0x24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b96:	4b86      	ldr	r3, [pc, #536]	@ (8008db0 <HAL_GPIO_Init+0x228>)
 8008b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b9a:	e18c      	b.n	8008eb6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba8:	4013      	ands	r3, r2
 8008baa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 817e 	beq.w	8008eb0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f003 0303 	and.w	r3, r3, #3
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d005      	beq.n	8008bcc <HAL_GPIO_Init+0x44>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d130      	bne.n	8008c2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	2203      	movs	r2, #3
 8008bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bdc:	43db      	mvns	r3, r3
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	4013      	ands	r3, r2
 8008be2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c02:	2201      	movs	r2, #1
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0a:	43db      	mvns	r3, r3
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	091b      	lsrs	r3, r3, #4
 8008c18:	f003 0201 	and.w	r2, r3, #1
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d017      	beq.n	8008c6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	2203      	movs	r2, #3
 8008c46:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4a:	43db      	mvns	r3, r3
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	4013      	ands	r3, r2
 8008c50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f003 0303 	and.w	r3, r3, #3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d123      	bne.n	8008cbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	08da      	lsrs	r2, r3, #3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	3208      	adds	r2, #8
 8008c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	220f      	movs	r2, #15
 8008c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c92:	43db      	mvns	r3, r3
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	4013      	ands	r3, r2
 8008c98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	691a      	ldr	r2, [r3, #16]
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	f003 0307 	and.w	r3, r3, #7
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	08da      	lsrs	r2, r3, #3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3208      	adds	r2, #8
 8008cb8:	69b9      	ldr	r1, [r7, #24]
 8008cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	2203      	movs	r2, #3
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	43db      	mvns	r3, r3
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f003 0203 	and.w	r2, r3, #3
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	69ba      	ldr	r2, [r7, #24]
 8008cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 80d8 	beq.w	8008eb0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d00:	4b2c      	ldr	r3, [pc, #176]	@ (8008db4 <HAL_GPIO_Init+0x22c>)
 8008d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d06:	4a2b      	ldr	r2, [pc, #172]	@ (8008db4 <HAL_GPIO_Init+0x22c>)
 8008d08:	f043 0302 	orr.w	r3, r3, #2
 8008d0c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008d10:	4b28      	ldr	r3, [pc, #160]	@ (8008db4 <HAL_GPIO_Init+0x22c>)
 8008d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d1e:	4a26      	ldr	r2, [pc, #152]	@ (8008db8 <HAL_GPIO_Init+0x230>)
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	089b      	lsrs	r3, r3, #2
 8008d24:	3302      	adds	r3, #2
 8008d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	220f      	movs	r2, #15
 8008d36:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a1d      	ldr	r2, [pc, #116]	@ (8008dbc <HAL_GPIO_Init+0x234>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d04a      	beq.n	8008de0 <HAL_GPIO_Init+0x258>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8008dc0 <HAL_GPIO_Init+0x238>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d02b      	beq.n	8008daa <HAL_GPIO_Init+0x222>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc4 <HAL_GPIO_Init+0x23c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d025      	beq.n	8008da6 <HAL_GPIO_Init+0x21e>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8008dc8 <HAL_GPIO_Init+0x240>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d01f      	beq.n	8008da2 <HAL_GPIO_Init+0x21a>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a19      	ldr	r2, [pc, #100]	@ (8008dcc <HAL_GPIO_Init+0x244>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d019      	beq.n	8008d9e <HAL_GPIO_Init+0x216>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a18      	ldr	r2, [pc, #96]	@ (8008dd0 <HAL_GPIO_Init+0x248>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d013      	beq.n	8008d9a <HAL_GPIO_Init+0x212>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a17      	ldr	r2, [pc, #92]	@ (8008dd4 <HAL_GPIO_Init+0x24c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d00d      	beq.n	8008d96 <HAL_GPIO_Init+0x20e>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a16      	ldr	r2, [pc, #88]	@ (8008dd8 <HAL_GPIO_Init+0x250>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d007      	beq.n	8008d92 <HAL_GPIO_Init+0x20a>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a15      	ldr	r2, [pc, #84]	@ (8008ddc <HAL_GPIO_Init+0x254>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d101      	bne.n	8008d8e <HAL_GPIO_Init+0x206>
 8008d8a:	2309      	movs	r3, #9
 8008d8c:	e029      	b.n	8008de2 <HAL_GPIO_Init+0x25a>
 8008d8e:	230a      	movs	r3, #10
 8008d90:	e027      	b.n	8008de2 <HAL_GPIO_Init+0x25a>
 8008d92:	2307      	movs	r3, #7
 8008d94:	e025      	b.n	8008de2 <HAL_GPIO_Init+0x25a>
 8008d96:	2306      	movs	r3, #6
 8008d98:	e023      	b.n	8008de2 <HAL_GPIO_Init+0x25a>
 8008d9a:	2305      	movs	r3, #5
 8008d9c:	e021      	b.n	8008de2 <HAL_GPIO_Init+0x25a>
 8008d9e:	2304      	movs	r3, #4
 8008da0:	e01f      	b.n	8008de2 <HAL_GPIO_Init+0x25a>
 8008da2:	2303      	movs	r3, #3
 8008da4:	e01d      	b.n	8008de2 <HAL_GPIO_Init+0x25a>
 8008da6:	2302      	movs	r3, #2
 8008da8:	e01b      	b.n	8008de2 <HAL_GPIO_Init+0x25a>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e019      	b.n	8008de2 <HAL_GPIO_Init+0x25a>
 8008dae:	bf00      	nop
 8008db0:	58000080 	.word	0x58000080
 8008db4:	58024400 	.word	0x58024400
 8008db8:	58000400 	.word	0x58000400
 8008dbc:	58020000 	.word	0x58020000
 8008dc0:	58020400 	.word	0x58020400
 8008dc4:	58020800 	.word	0x58020800
 8008dc8:	58020c00 	.word	0x58020c00
 8008dcc:	58021000 	.word	0x58021000
 8008dd0:	58021400 	.word	0x58021400
 8008dd4:	58021800 	.word	0x58021800
 8008dd8:	58021c00 	.word	0x58021c00
 8008ddc:	58022400 	.word	0x58022400
 8008de0:	2300      	movs	r3, #0
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	f002 0203 	and.w	r2, r2, #3
 8008de8:	0092      	lsls	r2, r2, #2
 8008dea:	4093      	lsls	r3, r2
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008df2:	4938      	ldr	r1, [pc, #224]	@ (8008ed4 <HAL_GPIO_Init+0x34c>)
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	089b      	lsrs	r3, r3, #2
 8008df8:	3302      	adds	r3, #2
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	43db      	mvns	r3, r3
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008e1e:	69ba      	ldr	r2, [r7, #24]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	43db      	mvns	r3, r3
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	43db      	mvns	r3, r3
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d003      	beq.n	8008e80 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	43db      	mvns	r3, r3
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	4013      	ands	r3, r2
 8008e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f47f ae6b 	bne.w	8008b9c <HAL_GPIO_Init+0x14>
  }
}
 8008ec6:	bf00      	nop
 8008ec8:	bf00      	nop
 8008eca:	3724      	adds	r7, #36	@ 0x24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	58000400 	.word	0x58000400

08008ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	807b      	strh	r3, [r7, #2]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ee8:	787b      	ldrb	r3, [r7, #1]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008eee:	887a      	ldrh	r2, [r7, #2]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008ef4:	e003      	b.n	8008efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008ef6:	887b      	ldrh	r3, [r7, #2]
 8008ef8:	041a      	lsls	r2, r3, #16
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	619a      	str	r2, [r3, #24]
}
 8008efe:	bf00      	nop
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
	...

08008f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e08b      	b.n	8009036 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d106      	bne.n	8008f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7f9 fe1a 	bl	8002b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2224      	movs	r2, #36	@ 0x24
 8008f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f022 0201 	bic.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008f5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d107      	bne.n	8008f86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689a      	ldr	r2, [r3, #8]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f82:	609a      	str	r2, [r3, #8]
 8008f84:	e006      	b.n	8008f94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	689a      	ldr	r2, [r3, #8]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008f92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d108      	bne.n	8008fae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008faa:	605a      	str	r2, [r3, #4]
 8008fac:	e007      	b.n	8008fbe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6859      	ldr	r1, [r3, #4]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8009040 <HAL_I2C_Init+0x134>)
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68da      	ldr	r2, [r3, #12]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008fdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691a      	ldr	r2, [r3, #16]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	69d9      	ldr	r1, [r3, #28]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a1a      	ldr	r2, [r3, #32]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2220      	movs	r2, #32
 8009022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	02008000 	.word	0x02008000

08009044 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b20      	cmp	r3, #32
 8009058:	d138      	bne.n	80090cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009060:	2b01      	cmp	r3, #1
 8009062:	d101      	bne.n	8009068 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009064:	2302      	movs	r3, #2
 8009066:	e032      	b.n	80090ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2224      	movs	r2, #36	@ 0x24
 8009074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f022 0201 	bic.w	r2, r2, #1
 8009086:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009096:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6819      	ldr	r1, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0201 	orr.w	r2, r2, #1
 80090b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2220      	movs	r2, #32
 80090bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	e000      	b.n	80090ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80090cc:	2302      	movs	r3, #2
  }
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090da:	b480      	push	{r7}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b20      	cmp	r3, #32
 80090ee:	d139      	bne.n	8009164 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d101      	bne.n	80090fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090fa:	2302      	movs	r3, #2
 80090fc:	e033      	b.n	8009166 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2224      	movs	r2, #36	@ 0x24
 800910a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 0201 	bic.w	r2, r2, #1
 800911c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800912c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	021b      	lsls	r3, r3, #8
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	4313      	orrs	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0201 	orr.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	e000      	b.n	8009166 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009164:	2302      	movs	r3, #2
  }
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
	...

08009174 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800917c:	4b19      	ldr	r3, [pc, #100]	@ (80091e4 <HAL_PWREx_ConfigSupply+0x70>)
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b04      	cmp	r3, #4
 8009186:	d00a      	beq.n	800919e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009188:	4b16      	ldr	r3, [pc, #88]	@ (80091e4 <HAL_PWREx_ConfigSupply+0x70>)
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f003 0307 	and.w	r3, r3, #7
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	429a      	cmp	r2, r3
 8009194:	d001      	beq.n	800919a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e01f      	b.n	80091da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	e01d      	b.n	80091da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800919e:	4b11      	ldr	r3, [pc, #68]	@ (80091e4 <HAL_PWREx_ConfigSupply+0x70>)
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f023 0207 	bic.w	r2, r3, #7
 80091a6:	490f      	ldr	r1, [pc, #60]	@ (80091e4 <HAL_PWREx_ConfigSupply+0x70>)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80091ae:	f7fa fd05 	bl	8003bbc <HAL_GetTick>
 80091b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80091b4:	e009      	b.n	80091ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80091b6:	f7fa fd01 	bl	8003bbc <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091c4:	d901      	bls.n	80091ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e007      	b.n	80091da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80091ca:	4b06      	ldr	r3, [pc, #24]	@ (80091e4 <HAL_PWREx_ConfigSupply+0x70>)
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091d6:	d1ee      	bne.n	80091b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	58024800 	.word	0x58024800

080091e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08c      	sub	sp, #48	@ 0x30
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e3c8      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 8087 	beq.w	8009316 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009208:	4b88      	ldr	r3, [pc, #544]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009210:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009212:	4b86      	ldr	r3, [pc, #536]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009216:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921a:	2b10      	cmp	r3, #16
 800921c:	d007      	beq.n	800922e <HAL_RCC_OscConfig+0x46>
 800921e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009220:	2b18      	cmp	r3, #24
 8009222:	d110      	bne.n	8009246 <HAL_RCC_OscConfig+0x5e>
 8009224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	2b02      	cmp	r3, #2
 800922c:	d10b      	bne.n	8009246 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800922e:	4b7f      	ldr	r3, [pc, #508]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d06c      	beq.n	8009314 <HAL_RCC_OscConfig+0x12c>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d168      	bne.n	8009314 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e3a2      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800924e:	d106      	bne.n	800925e <HAL_RCC_OscConfig+0x76>
 8009250:	4b76      	ldr	r3, [pc, #472]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a75      	ldr	r2, [pc, #468]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	e02e      	b.n	80092bc <HAL_RCC_OscConfig+0xd4>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10c      	bne.n	8009280 <HAL_RCC_OscConfig+0x98>
 8009266:	4b71      	ldr	r3, [pc, #452]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a70      	ldr	r2, [pc, #448]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 800926c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	4b6e      	ldr	r3, [pc, #440]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a6d      	ldr	r2, [pc, #436]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	e01d      	b.n	80092bc <HAL_RCC_OscConfig+0xd4>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009288:	d10c      	bne.n	80092a4 <HAL_RCC_OscConfig+0xbc>
 800928a:	4b68      	ldr	r3, [pc, #416]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a67      	ldr	r2, [pc, #412]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	4b65      	ldr	r3, [pc, #404]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a64      	ldr	r2, [pc, #400]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 800929c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e00b      	b.n	80092bc <HAL_RCC_OscConfig+0xd4>
 80092a4:	4b61      	ldr	r3, [pc, #388]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a60      	ldr	r2, [pc, #384]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 80092aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	4b5e      	ldr	r3, [pc, #376]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a5d      	ldr	r2, [pc, #372]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 80092b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d013      	beq.n	80092ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c4:	f7fa fc7a 	bl	8003bbc <HAL_GetTick>
 80092c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092ca:	e008      	b.n	80092de <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092cc:	f7fa fc76 	bl	8003bbc <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b64      	cmp	r3, #100	@ 0x64
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e356      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092de:	4b53      	ldr	r3, [pc, #332]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0f0      	beq.n	80092cc <HAL_RCC_OscConfig+0xe4>
 80092ea:	e014      	b.n	8009316 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ec:	f7fa fc66 	bl	8003bbc <HAL_GetTick>
 80092f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80092f2:	e008      	b.n	8009306 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092f4:	f7fa fc62 	bl	8003bbc <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	2b64      	cmp	r3, #100	@ 0x64
 8009300:	d901      	bls.n	8009306 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e342      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009306:	4b49      	ldr	r3, [pc, #292]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f0      	bne.n	80092f4 <HAL_RCC_OscConfig+0x10c>
 8009312:	e000      	b.n	8009316 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b00      	cmp	r3, #0
 8009320:	f000 808c 	beq.w	800943c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009324:	4b41      	ldr	r3, [pc, #260]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800932c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800932e:	4b3f      	ldr	r3, [pc, #252]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009332:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d007      	beq.n	800934a <HAL_RCC_OscConfig+0x162>
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	2b18      	cmp	r3, #24
 800933e:	d137      	bne.n	80093b0 <HAL_RCC_OscConfig+0x1c8>
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d132      	bne.n	80093b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800934a:	4b38      	ldr	r3, [pc, #224]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <HAL_RCC_OscConfig+0x17a>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e314      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009362:	4b32      	ldr	r3, [pc, #200]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f023 0219 	bic.w	r2, r3, #25
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	492f      	ldr	r1, [pc, #188]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009370:	4313      	orrs	r3, r2
 8009372:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009374:	f7fa fc22 	bl	8003bbc <HAL_GetTick>
 8009378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800937c:	f7fa fc1e 	bl	8003bbc <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e2fe      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800938e:	4b27      	ldr	r3, [pc, #156]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0f0      	beq.n	800937c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800939a:	4b24      	ldr	r3, [pc, #144]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	061b      	lsls	r3, r3, #24
 80093a8:	4920      	ldr	r1, [pc, #128]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093ae:	e045      	b.n	800943c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d026      	beq.n	8009406 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80093b8:	4b1c      	ldr	r3, [pc, #112]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f023 0219 	bic.w	r2, r3, #25
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	4919      	ldr	r1, [pc, #100]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 80093c6:	4313      	orrs	r3, r2
 80093c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ca:	f7fa fbf7 	bl	8003bbc <HAL_GetTick>
 80093ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093d0:	e008      	b.n	80093e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093d2:	f7fa fbf3 	bl	8003bbc <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d901      	bls.n	80093e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e2d3      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093e4:	4b11      	ldr	r3, [pc, #68]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0304 	and.w	r3, r3, #4
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d0f0      	beq.n	80093d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093f0:	4b0e      	ldr	r3, [pc, #56]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	061b      	lsls	r3, r3, #24
 80093fe:	490b      	ldr	r1, [pc, #44]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009400:	4313      	orrs	r3, r2
 8009402:	604b      	str	r3, [r1, #4]
 8009404:	e01a      	b.n	800943c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009406:	4b09      	ldr	r3, [pc, #36]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a08      	ldr	r2, [pc, #32]	@ (800942c <HAL_RCC_OscConfig+0x244>)
 800940c:	f023 0301 	bic.w	r3, r3, #1
 8009410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009412:	f7fa fbd3 	bl	8003bbc <HAL_GetTick>
 8009416:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009418:	e00a      	b.n	8009430 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800941a:	f7fa fbcf 	bl	8003bbc <HAL_GetTick>
 800941e:	4602      	mov	r2, r0
 8009420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	2b02      	cmp	r3, #2
 8009426:	d903      	bls.n	8009430 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e2af      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
 800942c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009430:	4b96      	ldr	r3, [pc, #600]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1ee      	bne.n	800941a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0310 	and.w	r3, r3, #16
 8009444:	2b00      	cmp	r3, #0
 8009446:	d06a      	beq.n	800951e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009448:	4b90      	ldr	r3, [pc, #576]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009450:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009452:	4b8e      	ldr	r3, [pc, #568]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009456:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	2b08      	cmp	r3, #8
 800945c:	d007      	beq.n	800946e <HAL_RCC_OscConfig+0x286>
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	2b18      	cmp	r3, #24
 8009462:	d11b      	bne.n	800949c <HAL_RCC_OscConfig+0x2b4>
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	2b01      	cmp	r3, #1
 800946c:	d116      	bne.n	800949c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800946e:	4b87      	ldr	r3, [pc, #540]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009476:	2b00      	cmp	r3, #0
 8009478:	d005      	beq.n	8009486 <HAL_RCC_OscConfig+0x29e>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	2b80      	cmp	r3, #128	@ 0x80
 8009480:	d001      	beq.n	8009486 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e282      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009486:	4b81      	ldr	r3, [pc, #516]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	061b      	lsls	r3, r3, #24
 8009494:	497d      	ldr	r1, [pc, #500]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009496:	4313      	orrs	r3, r2
 8009498:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800949a:	e040      	b.n	800951e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d023      	beq.n	80094ec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80094a4:	4b79      	ldr	r3, [pc, #484]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a78      	ldr	r2, [pc, #480]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80094aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b0:	f7fa fb84 	bl	8003bbc <HAL_GetTick>
 80094b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094b6:	e008      	b.n	80094ca <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80094b8:	f7fa fb80 	bl	8003bbc <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d901      	bls.n	80094ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e260      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094ca:	4b70      	ldr	r3, [pc, #448]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0f0      	beq.n	80094b8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094d6:	4b6d      	ldr	r3, [pc, #436]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	061b      	lsls	r3, r3, #24
 80094e4:	4969      	ldr	r1, [pc, #420]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60cb      	str	r3, [r1, #12]
 80094ea:	e018      	b.n	800951e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80094ec:	4b67      	ldr	r3, [pc, #412]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a66      	ldr	r2, [pc, #408]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80094f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f8:	f7fa fb60 	bl	8003bbc <HAL_GetTick>
 80094fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80094fe:	e008      	b.n	8009512 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009500:	f7fa fb5c 	bl	8003bbc <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b02      	cmp	r3, #2
 800950c:	d901      	bls.n	8009512 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e23c      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009512:	4b5e      	ldr	r3, [pc, #376]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1f0      	bne.n	8009500 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0308 	and.w	r3, r3, #8
 8009526:	2b00      	cmp	r3, #0
 8009528:	d036      	beq.n	8009598 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d019      	beq.n	8009566 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009532:	4b56      	ldr	r3, [pc, #344]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009536:	4a55      	ldr	r2, [pc, #340]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800953e:	f7fa fb3d 	bl	8003bbc <HAL_GetTick>
 8009542:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009544:	e008      	b.n	8009558 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009546:	f7fa fb39 	bl	8003bbc <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	2b02      	cmp	r3, #2
 8009552:	d901      	bls.n	8009558 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e219      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009558:	4b4c      	ldr	r3, [pc, #304]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 800955a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d0f0      	beq.n	8009546 <HAL_RCC_OscConfig+0x35e>
 8009564:	e018      	b.n	8009598 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009566:	4b49      	ldr	r3, [pc, #292]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800956a:	4a48      	ldr	r2, [pc, #288]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 800956c:	f023 0301 	bic.w	r3, r3, #1
 8009570:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009572:	f7fa fb23 	bl	8003bbc <HAL_GetTick>
 8009576:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009578:	e008      	b.n	800958c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800957a:	f7fa fb1f 	bl	8003bbc <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d901      	bls.n	800958c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e1ff      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800958c:	4b3f      	ldr	r3, [pc, #252]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 800958e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009590:	f003 0302 	and.w	r3, r3, #2
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1f0      	bne.n	800957a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0320 	and.w	r3, r3, #32
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d036      	beq.n	8009612 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d019      	beq.n	80095e0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80095ac:	4b37      	ldr	r3, [pc, #220]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a36      	ldr	r2, [pc, #216]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80095b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80095b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80095b8:	f7fa fb00 	bl	8003bbc <HAL_GetTick>
 80095bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095be:	e008      	b.n	80095d2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095c0:	f7fa fafc 	bl	8003bbc <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e1dc      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095d2:	4b2e      	ldr	r3, [pc, #184]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0f0      	beq.n	80095c0 <HAL_RCC_OscConfig+0x3d8>
 80095de:	e018      	b.n	8009612 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80095e0:	4b2a      	ldr	r3, [pc, #168]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a29      	ldr	r2, [pc, #164]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 80095e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80095ec:	f7fa fae6 	bl	8003bbc <HAL_GetTick>
 80095f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80095f2:	e008      	b.n	8009606 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095f4:	f7fa fae2 	bl	8003bbc <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d901      	bls.n	8009606 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e1c2      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009606:	4b21      	ldr	r3, [pc, #132]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1f0      	bne.n	80095f4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0304 	and.w	r3, r3, #4
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 8086 	beq.w	800972c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009620:	4b1b      	ldr	r3, [pc, #108]	@ (8009690 <HAL_RCC_OscConfig+0x4a8>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a1a      	ldr	r2, [pc, #104]	@ (8009690 <HAL_RCC_OscConfig+0x4a8>)
 8009626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800962a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800962c:	f7fa fac6 	bl	8003bbc <HAL_GetTick>
 8009630:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009632:	e008      	b.n	8009646 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009634:	f7fa fac2 	bl	8003bbc <HAL_GetTick>
 8009638:	4602      	mov	r2, r0
 800963a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	2b64      	cmp	r3, #100	@ 0x64
 8009640:	d901      	bls.n	8009646 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e1a2      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009646:	4b12      	ldr	r3, [pc, #72]	@ (8009690 <HAL_RCC_OscConfig+0x4a8>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0f0      	beq.n	8009634 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d106      	bne.n	8009668 <HAL_RCC_OscConfig+0x480>
 800965a:	4b0c      	ldr	r3, [pc, #48]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 800965c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800965e:	4a0b      	ldr	r2, [pc, #44]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009660:	f043 0301 	orr.w	r3, r3, #1
 8009664:	6713      	str	r3, [r2, #112]	@ 0x70
 8009666:	e032      	b.n	80096ce <HAL_RCC_OscConfig+0x4e6>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d111      	bne.n	8009694 <HAL_RCC_OscConfig+0x4ac>
 8009670:	4b06      	ldr	r3, [pc, #24]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009674:	4a05      	ldr	r2, [pc, #20]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009676:	f023 0301 	bic.w	r3, r3, #1
 800967a:	6713      	str	r3, [r2, #112]	@ 0x70
 800967c:	4b03      	ldr	r3, [pc, #12]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 800967e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009680:	4a02      	ldr	r2, [pc, #8]	@ (800968c <HAL_RCC_OscConfig+0x4a4>)
 8009682:	f023 0304 	bic.w	r3, r3, #4
 8009686:	6713      	str	r3, [r2, #112]	@ 0x70
 8009688:	e021      	b.n	80096ce <HAL_RCC_OscConfig+0x4e6>
 800968a:	bf00      	nop
 800968c:	58024400 	.word	0x58024400
 8009690:	58024800 	.word	0x58024800
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	2b05      	cmp	r3, #5
 800969a:	d10c      	bne.n	80096b6 <HAL_RCC_OscConfig+0x4ce>
 800969c:	4b83      	ldr	r3, [pc, #524]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 800969e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096a0:	4a82      	ldr	r2, [pc, #520]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80096a2:	f043 0304 	orr.w	r3, r3, #4
 80096a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80096a8:	4b80      	ldr	r3, [pc, #512]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80096aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ac:	4a7f      	ldr	r2, [pc, #508]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80096ae:	f043 0301 	orr.w	r3, r3, #1
 80096b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80096b4:	e00b      	b.n	80096ce <HAL_RCC_OscConfig+0x4e6>
 80096b6:	4b7d      	ldr	r3, [pc, #500]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80096b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ba:	4a7c      	ldr	r2, [pc, #496]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80096bc:	f023 0301 	bic.w	r3, r3, #1
 80096c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80096c2:	4b7a      	ldr	r3, [pc, #488]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80096c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096c6:	4a79      	ldr	r2, [pc, #484]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80096c8:	f023 0304 	bic.w	r3, r3, #4
 80096cc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d015      	beq.n	8009702 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096d6:	f7fa fa71 	bl	8003bbc <HAL_GetTick>
 80096da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096dc:	e00a      	b.n	80096f4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096de:	f7fa fa6d 	bl	8003bbc <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d901      	bls.n	80096f4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e14b      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096f4:	4b6d      	ldr	r3, [pc, #436]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80096f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096f8:	f003 0302 	and.w	r3, r3, #2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0ee      	beq.n	80096de <HAL_RCC_OscConfig+0x4f6>
 8009700:	e014      	b.n	800972c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009702:	f7fa fa5b 	bl	8003bbc <HAL_GetTick>
 8009706:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009708:	e00a      	b.n	8009720 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800970a:	f7fa fa57 	bl	8003bbc <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009718:	4293      	cmp	r3, r2
 800971a:	d901      	bls.n	8009720 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e135      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009720:	4b62      	ldr	r3, [pc, #392]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1ee      	bne.n	800970a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 812a 	beq.w	800998a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009736:	4b5d      	ldr	r3, [pc, #372]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800973e:	2b18      	cmp	r3, #24
 8009740:	f000 80ba 	beq.w	80098b8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009748:	2b02      	cmp	r3, #2
 800974a:	f040 8095 	bne.w	8009878 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800974e:	4b57      	ldr	r3, [pc, #348]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a56      	ldr	r2, [pc, #344]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800975a:	f7fa fa2f 	bl	8003bbc <HAL_GetTick>
 800975e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009760:	e008      	b.n	8009774 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009762:	f7fa fa2b 	bl	8003bbc <HAL_GetTick>
 8009766:	4602      	mov	r2, r0
 8009768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	2b02      	cmp	r3, #2
 800976e:	d901      	bls.n	8009774 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009770:	2303      	movs	r3, #3
 8009772:	e10b      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009774:	4b4d      	ldr	r3, [pc, #308]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1f0      	bne.n	8009762 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009780:	4b4a      	ldr	r3, [pc, #296]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009782:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009784:	4b4a      	ldr	r3, [pc, #296]	@ (80098b0 <HAL_RCC_OscConfig+0x6c8>)
 8009786:	4013      	ands	r3, r2
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009790:	0112      	lsls	r2, r2, #4
 8009792:	430a      	orrs	r2, r1
 8009794:	4945      	ldr	r1, [pc, #276]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009796:	4313      	orrs	r3, r2
 8009798:	628b      	str	r3, [r1, #40]	@ 0x28
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800979e:	3b01      	subs	r3, #1
 80097a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097a8:	3b01      	subs	r3, #1
 80097aa:	025b      	lsls	r3, r3, #9
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	431a      	orrs	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b4:	3b01      	subs	r3, #1
 80097b6:	041b      	lsls	r3, r3, #16
 80097b8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097c2:	3b01      	subs	r3, #1
 80097c4:	061b      	lsls	r3, r3, #24
 80097c6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80097ca:	4938      	ldr	r1, [pc, #224]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80097d0:	4b36      	ldr	r3, [pc, #216]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80097d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d4:	4a35      	ldr	r2, [pc, #212]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80097d6:	f023 0301 	bic.w	r3, r3, #1
 80097da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80097dc:	4b33      	ldr	r3, [pc, #204]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80097de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097e0:	4b34      	ldr	r3, [pc, #208]	@ (80098b4 <HAL_RCC_OscConfig+0x6cc>)
 80097e2:	4013      	ands	r3, r2
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80097e8:	00d2      	lsls	r2, r2, #3
 80097ea:	4930      	ldr	r1, [pc, #192]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80097f0:	4b2e      	ldr	r3, [pc, #184]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80097f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f4:	f023 020c 	bic.w	r2, r3, #12
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097fc:	492b      	ldr	r1, [pc, #172]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009802:	4b2a      	ldr	r3, [pc, #168]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009806:	f023 0202 	bic.w	r2, r3, #2
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800980e:	4927      	ldr	r1, [pc, #156]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009810:	4313      	orrs	r3, r2
 8009812:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009814:	4b25      	ldr	r3, [pc, #148]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009818:	4a24      	ldr	r2, [pc, #144]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 800981a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800981e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009820:	4b22      	ldr	r3, [pc, #136]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009824:	4a21      	ldr	r2, [pc, #132]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800982a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800982c:	4b1f      	ldr	r3, [pc, #124]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 800982e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009830:	4a1e      	ldr	r2, [pc, #120]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009832:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009838:	4b1c      	ldr	r3, [pc, #112]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 800983a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983c:	4a1b      	ldr	r2, [pc, #108]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 800983e:	f043 0301 	orr.w	r3, r3, #1
 8009842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009844:	4b19      	ldr	r3, [pc, #100]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a18      	ldr	r2, [pc, #96]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 800984a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800984e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009850:	f7fa f9b4 	bl	8003bbc <HAL_GetTick>
 8009854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009856:	e008      	b.n	800986a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009858:	f7fa f9b0 	bl	8003bbc <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	2b02      	cmp	r3, #2
 8009864:	d901      	bls.n	800986a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e090      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800986a:	4b10      	ldr	r3, [pc, #64]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d0f0      	beq.n	8009858 <HAL_RCC_OscConfig+0x670>
 8009876:	e088      	b.n	800998a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009878:	4b0c      	ldr	r3, [pc, #48]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a0b      	ldr	r2, [pc, #44]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 800987e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009884:	f7fa f99a 	bl	8003bbc <HAL_GetTick>
 8009888:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800988a:	e008      	b.n	800989e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800988c:	f7fa f996 	bl	8003bbc <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	2b02      	cmp	r3, #2
 8009898:	d901      	bls.n	800989e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e076      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800989e:	4b03      	ldr	r3, [pc, #12]	@ (80098ac <HAL_RCC_OscConfig+0x6c4>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1f0      	bne.n	800988c <HAL_RCC_OscConfig+0x6a4>
 80098aa:	e06e      	b.n	800998a <HAL_RCC_OscConfig+0x7a2>
 80098ac:	58024400 	.word	0x58024400
 80098b0:	fffffc0c 	.word	0xfffffc0c
 80098b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80098b8:	4b36      	ldr	r3, [pc, #216]	@ (8009994 <HAL_RCC_OscConfig+0x7ac>)
 80098ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80098be:	4b35      	ldr	r3, [pc, #212]	@ (8009994 <HAL_RCC_OscConfig+0x7ac>)
 80098c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d031      	beq.n	8009930 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	f003 0203 	and.w	r2, r3, #3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d12a      	bne.n	8009930 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	091b      	lsrs	r3, r3, #4
 80098de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d122      	bne.n	8009930 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d11a      	bne.n	8009930 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	0a5b      	lsrs	r3, r3, #9
 80098fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009906:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009908:	429a      	cmp	r2, r3
 800990a:	d111      	bne.n	8009930 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	0c1b      	lsrs	r3, r3, #16
 8009910:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009918:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800991a:	429a      	cmp	r2, r3
 800991c:	d108      	bne.n	8009930 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	0e1b      	lsrs	r3, r3, #24
 8009922:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800992a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800992c:	429a      	cmp	r2, r3
 800992e:	d001      	beq.n	8009934 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e02b      	b.n	800998c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009934:	4b17      	ldr	r3, [pc, #92]	@ (8009994 <HAL_RCC_OscConfig+0x7ac>)
 8009936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009938:	08db      	lsrs	r3, r3, #3
 800993a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800993e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	429a      	cmp	r2, r3
 8009948:	d01f      	beq.n	800998a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800994a:	4b12      	ldr	r3, [pc, #72]	@ (8009994 <HAL_RCC_OscConfig+0x7ac>)
 800994c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994e:	4a11      	ldr	r2, [pc, #68]	@ (8009994 <HAL_RCC_OscConfig+0x7ac>)
 8009950:	f023 0301 	bic.w	r3, r3, #1
 8009954:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009956:	f7fa f931 	bl	8003bbc <HAL_GetTick>
 800995a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800995c:	bf00      	nop
 800995e:	f7fa f92d 	bl	8003bbc <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009966:	4293      	cmp	r3, r2
 8009968:	d0f9      	beq.n	800995e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800996a:	4b0a      	ldr	r3, [pc, #40]	@ (8009994 <HAL_RCC_OscConfig+0x7ac>)
 800996c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800996e:	4b0a      	ldr	r3, [pc, #40]	@ (8009998 <HAL_RCC_OscConfig+0x7b0>)
 8009970:	4013      	ands	r3, r2
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009976:	00d2      	lsls	r2, r2, #3
 8009978:	4906      	ldr	r1, [pc, #24]	@ (8009994 <HAL_RCC_OscConfig+0x7ac>)
 800997a:	4313      	orrs	r3, r2
 800997c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800997e:	4b05      	ldr	r3, [pc, #20]	@ (8009994 <HAL_RCC_OscConfig+0x7ac>)
 8009980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009982:	4a04      	ldr	r2, [pc, #16]	@ (8009994 <HAL_RCC_OscConfig+0x7ac>)
 8009984:	f043 0301 	orr.w	r3, r3, #1
 8009988:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3730      	adds	r7, #48	@ 0x30
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	58024400 	.word	0x58024400
 8009998:	ffff0007 	.word	0xffff0007

0800999c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e19c      	b.n	8009cea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80099b0:	4b8a      	ldr	r3, [pc, #552]	@ (8009bdc <HAL_RCC_ClockConfig+0x240>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 030f 	and.w	r3, r3, #15
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d910      	bls.n	80099e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099be:	4b87      	ldr	r3, [pc, #540]	@ (8009bdc <HAL_RCC_ClockConfig+0x240>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f023 020f 	bic.w	r2, r3, #15
 80099c6:	4985      	ldr	r1, [pc, #532]	@ (8009bdc <HAL_RCC_ClockConfig+0x240>)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099ce:	4b83      	ldr	r3, [pc, #524]	@ (8009bdc <HAL_RCC_ClockConfig+0x240>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 030f 	and.w	r3, r3, #15
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d001      	beq.n	80099e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e184      	b.n	8009cea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0304 	and.w	r3, r3, #4
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d010      	beq.n	8009a0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	691a      	ldr	r2, [r3, #16]
 80099f0:	4b7b      	ldr	r3, [pc, #492]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d908      	bls.n	8009a0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80099fc:	4b78      	ldr	r3, [pc, #480]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	4975      	ldr	r1, [pc, #468]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0308 	and.w	r3, r3, #8
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d010      	beq.n	8009a3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	695a      	ldr	r2, [r3, #20]
 8009a1e:	4b70      	ldr	r3, [pc, #448]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009a20:	69db      	ldr	r3, [r3, #28]
 8009a22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d908      	bls.n	8009a3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	496a      	ldr	r1, [pc, #424]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0310 	and.w	r3, r3, #16
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d010      	beq.n	8009a6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	699a      	ldr	r2, [r3, #24]
 8009a4c:	4b64      	ldr	r3, [pc, #400]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d908      	bls.n	8009a6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a58:	4b61      	ldr	r3, [pc, #388]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	495e      	ldr	r1, [pc, #376]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d010      	beq.n	8009a98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	69da      	ldr	r2, [r3, #28]
 8009a7a:	4b59      	ldr	r3, [pc, #356]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d908      	bls.n	8009a98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009a86:	4b56      	ldr	r3, [pc, #344]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	4953      	ldr	r1, [pc, #332]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d010      	beq.n	8009ac6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68da      	ldr	r2, [r3, #12]
 8009aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	f003 030f 	and.w	r3, r3, #15
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d908      	bls.n	8009ac6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	f023 020f 	bic.w	r2, r3, #15
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	4947      	ldr	r1, [pc, #284]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d055      	beq.n	8009b7e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009ad2:	4b43      	ldr	r3, [pc, #268]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	4940      	ldr	r1, [pc, #256]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d107      	bne.n	8009afc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009aec:	4b3c      	ldr	r3, [pc, #240]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d121      	bne.n	8009b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e0f6      	b.n	8009cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d107      	bne.n	8009b14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b04:	4b36      	ldr	r3, [pc, #216]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d115      	bne.n	8009b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e0ea      	b.n	8009cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d107      	bne.n	8009b2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b1c:	4b30      	ldr	r3, [pc, #192]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d109      	bne.n	8009b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e0de      	b.n	8009cea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0304 	and.w	r3, r3, #4
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d101      	bne.n	8009b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e0d6      	b.n	8009cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b3c:	4b28      	ldr	r3, [pc, #160]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	f023 0207 	bic.w	r2, r3, #7
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	4925      	ldr	r1, [pc, #148]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b4e:	f7fa f835 	bl	8003bbc <HAL_GetTick>
 8009b52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b54:	e00a      	b.n	8009b6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b56:	f7fa f831 	bl	8003bbc <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d901      	bls.n	8009b6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e0be      	b.n	8009cea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d1eb      	bne.n	8009b56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d010      	beq.n	8009bac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68da      	ldr	r2, [r3, #12]
 8009b8e:	4b14      	ldr	r3, [pc, #80]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	f003 030f 	and.w	r3, r3, #15
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d208      	bcs.n	8009bac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b9a:	4b11      	ldr	r3, [pc, #68]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	f023 020f 	bic.w	r2, r3, #15
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	490e      	ldr	r1, [pc, #56]	@ (8009be0 <HAL_RCC_ClockConfig+0x244>)
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009bac:	4b0b      	ldr	r3, [pc, #44]	@ (8009bdc <HAL_RCC_ClockConfig+0x240>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d214      	bcs.n	8009be4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bba:	4b08      	ldr	r3, [pc, #32]	@ (8009bdc <HAL_RCC_ClockConfig+0x240>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f023 020f 	bic.w	r2, r3, #15
 8009bc2:	4906      	ldr	r1, [pc, #24]	@ (8009bdc <HAL_RCC_ClockConfig+0x240>)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bca:	4b04      	ldr	r3, [pc, #16]	@ (8009bdc <HAL_RCC_ClockConfig+0x240>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 030f 	and.w	r3, r3, #15
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d005      	beq.n	8009be4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e086      	b.n	8009cea <HAL_RCC_ClockConfig+0x34e>
 8009bdc:	52002000 	.word	0x52002000
 8009be0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d010      	beq.n	8009c12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691a      	ldr	r2, [r3, #16]
 8009bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d208      	bcs.n	8009c12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c00:	4b3c      	ldr	r3, [pc, #240]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	4939      	ldr	r1, [pc, #228]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 0308 	and.w	r3, r3, #8
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d010      	beq.n	8009c40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	695a      	ldr	r2, [r3, #20]
 8009c22:	4b34      	ldr	r3, [pc, #208]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d208      	bcs.n	8009c40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c2e:	4b31      	ldr	r3, [pc, #196]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009c30:	69db      	ldr	r3, [r3, #28]
 8009c32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	492e      	ldr	r1, [pc, #184]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0310 	and.w	r3, r3, #16
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d010      	beq.n	8009c6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	699a      	ldr	r2, [r3, #24]
 8009c50:	4b28      	ldr	r3, [pc, #160]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d208      	bcs.n	8009c6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c5c:	4b25      	ldr	r3, [pc, #148]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	4922      	ldr	r1, [pc, #136]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d010      	beq.n	8009c9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	69da      	ldr	r2, [r3, #28]
 8009c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d208      	bcs.n	8009c9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	4917      	ldr	r1, [pc, #92]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009c9c:	f000 f834 	bl	8009d08 <HAL_RCC_GetSysClockFreq>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	4b14      	ldr	r3, [pc, #80]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	0a1b      	lsrs	r3, r3, #8
 8009ca8:	f003 030f 	and.w	r3, r3, #15
 8009cac:	4912      	ldr	r1, [pc, #72]	@ (8009cf8 <HAL_RCC_ClockConfig+0x35c>)
 8009cae:	5ccb      	ldrb	r3, [r1, r3]
 8009cb0:	f003 031f 	and.w	r3, r3, #31
 8009cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009cba:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf4 <HAL_RCC_ClockConfig+0x358>)
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	f003 030f 	and.w	r3, r3, #15
 8009cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8009cf8 <HAL_RCC_ClockConfig+0x35c>)
 8009cc4:	5cd3      	ldrb	r3, [r2, r3]
 8009cc6:	f003 031f 	and.w	r3, r3, #31
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8009cfc <HAL_RCC_ClockConfig+0x360>)
 8009cd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8009d00 <HAL_RCC_ClockConfig+0x364>)
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009cda:	4b0a      	ldr	r3, [pc, #40]	@ (8009d04 <HAL_RCC_ClockConfig+0x368>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7f9 ff22 	bl	8003b28 <HAL_InitTick>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	58024400 	.word	0x58024400
 8009cf8:	08013c30 	.word	0x08013c30
 8009cfc:	2400001c 	.word	0x2400001c
 8009d00:	24000018 	.word	0x24000018
 8009d04:	24000020 	.word	0x24000020

08009d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b089      	sub	sp, #36	@ 0x24
 8009d0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d0e:	4bb3      	ldr	r3, [pc, #716]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d16:	2b18      	cmp	r3, #24
 8009d18:	f200 8155 	bhi.w	8009fc6 <HAL_RCC_GetSysClockFreq+0x2be>
 8009d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d22:	bf00      	nop
 8009d24:	08009d89 	.word	0x08009d89
 8009d28:	08009fc7 	.word	0x08009fc7
 8009d2c:	08009fc7 	.word	0x08009fc7
 8009d30:	08009fc7 	.word	0x08009fc7
 8009d34:	08009fc7 	.word	0x08009fc7
 8009d38:	08009fc7 	.word	0x08009fc7
 8009d3c:	08009fc7 	.word	0x08009fc7
 8009d40:	08009fc7 	.word	0x08009fc7
 8009d44:	08009daf 	.word	0x08009daf
 8009d48:	08009fc7 	.word	0x08009fc7
 8009d4c:	08009fc7 	.word	0x08009fc7
 8009d50:	08009fc7 	.word	0x08009fc7
 8009d54:	08009fc7 	.word	0x08009fc7
 8009d58:	08009fc7 	.word	0x08009fc7
 8009d5c:	08009fc7 	.word	0x08009fc7
 8009d60:	08009fc7 	.word	0x08009fc7
 8009d64:	08009db5 	.word	0x08009db5
 8009d68:	08009fc7 	.word	0x08009fc7
 8009d6c:	08009fc7 	.word	0x08009fc7
 8009d70:	08009fc7 	.word	0x08009fc7
 8009d74:	08009fc7 	.word	0x08009fc7
 8009d78:	08009fc7 	.word	0x08009fc7
 8009d7c:	08009fc7 	.word	0x08009fc7
 8009d80:	08009fc7 	.word	0x08009fc7
 8009d84:	08009dbb 	.word	0x08009dbb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d88:	4b94      	ldr	r3, [pc, #592]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0320 	and.w	r3, r3, #32
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d009      	beq.n	8009da8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d94:	4b91      	ldr	r3, [pc, #580]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	08db      	lsrs	r3, r3, #3
 8009d9a:	f003 0303 	and.w	r3, r3, #3
 8009d9e:	4a90      	ldr	r2, [pc, #576]	@ (8009fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009da0:	fa22 f303 	lsr.w	r3, r2, r3
 8009da4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009da6:	e111      	b.n	8009fcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009da8:	4b8d      	ldr	r3, [pc, #564]	@ (8009fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009daa:	61bb      	str	r3, [r7, #24]
      break;
 8009dac:	e10e      	b.n	8009fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009dae:	4b8d      	ldr	r3, [pc, #564]	@ (8009fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009db0:	61bb      	str	r3, [r7, #24]
      break;
 8009db2:	e10b      	b.n	8009fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009db4:	4b8c      	ldr	r3, [pc, #560]	@ (8009fe8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009db6:	61bb      	str	r3, [r7, #24]
      break;
 8009db8:	e108      	b.n	8009fcc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009dba:	4b88      	ldr	r3, [pc, #544]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dbe:	f003 0303 	and.w	r3, r3, #3
 8009dc2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009dc4:	4b85      	ldr	r3, [pc, #532]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc8:	091b      	lsrs	r3, r3, #4
 8009dca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009dd0:	4b82      	ldr	r3, [pc, #520]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009dda:	4b80      	ldr	r3, [pc, #512]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dde:	08db      	lsrs	r3, r3, #3
 8009de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	fb02 f303 	mul.w	r3, r2, r3
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 80e1 	beq.w	8009fc0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	f000 8083 	beq.w	8009f0c <HAL_RCC_GetSysClockFreq+0x204>
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	f200 80a1 	bhi.w	8009f50 <HAL_RCC_GetSysClockFreq+0x248>
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <HAL_RCC_GetSysClockFreq+0x114>
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d056      	beq.n	8009ec8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009e1a:	e099      	b.n	8009f50 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0320 	and.w	r3, r3, #32
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d02d      	beq.n	8009e84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e28:	4b6c      	ldr	r3, [pc, #432]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	08db      	lsrs	r3, r3, #3
 8009e2e:	f003 0303 	and.w	r3, r3, #3
 8009e32:	4a6b      	ldr	r2, [pc, #428]	@ (8009fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009e34:	fa22 f303 	lsr.w	r3, r2, r3
 8009e38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	ee07 3a90 	vmov	s15, r3
 8009e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e52:	4b62      	ldr	r3, [pc, #392]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e66:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009e82:	e087      	b.n	8009f94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	ee07 3a90 	vmov	s15, r3
 8009e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009ff0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e96:	4b51      	ldr	r3, [pc, #324]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009eaa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8009eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009ec6:	e065      	b.n	8009f94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	ee07 3a90 	vmov	s15, r3
 8009ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eda:	4b40      	ldr	r3, [pc, #256]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee2:	ee07 3a90 	vmov	s15, r3
 8009ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8009eee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009f0a:	e043      	b.n	8009f94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	ee07 3a90 	vmov	s15, r3
 8009f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f16:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009ff8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f26:	ee07 3a90 	vmov	s15, r3
 8009f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f32:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009f4e:	e021      	b.n	8009f94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f62:	4b1e      	ldr	r3, [pc, #120]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f6a:	ee07 3a90 	vmov	s15, r3
 8009f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f76:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009f92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009f94:	4b11      	ldr	r3, [pc, #68]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f98:	0a5b      	lsrs	r3, r3, #9
 8009f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	ee07 3a90 	vmov	s15, r3
 8009fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fb8:	ee17 3a90 	vmov	r3, s15
 8009fbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009fbe:	e005      	b.n	8009fcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61bb      	str	r3, [r7, #24]
      break;
 8009fc4:	e002      	b.n	8009fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009fc6:	4b07      	ldr	r3, [pc, #28]	@ (8009fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009fc8:	61bb      	str	r3, [r7, #24]
      break;
 8009fca:	bf00      	nop
  }

  return sysclockfreq;
 8009fcc:	69bb      	ldr	r3, [r7, #24]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3724      	adds	r7, #36	@ 0x24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	58024400 	.word	0x58024400
 8009fe0:	03d09000 	.word	0x03d09000
 8009fe4:	003d0900 	.word	0x003d0900
 8009fe8:	007a1200 	.word	0x007a1200
 8009fec:	46000000 	.word	0x46000000
 8009ff0:	4c742400 	.word	0x4c742400
 8009ff4:	4a742400 	.word	0x4a742400
 8009ff8:	4af42400 	.word	0x4af42400

08009ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a002:	f7ff fe81 	bl	8009d08 <HAL_RCC_GetSysClockFreq>
 800a006:	4602      	mov	r2, r0
 800a008:	4b10      	ldr	r3, [pc, #64]	@ (800a04c <HAL_RCC_GetHCLKFreq+0x50>)
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	0a1b      	lsrs	r3, r3, #8
 800a00e:	f003 030f 	and.w	r3, r3, #15
 800a012:	490f      	ldr	r1, [pc, #60]	@ (800a050 <HAL_RCC_GetHCLKFreq+0x54>)
 800a014:	5ccb      	ldrb	r3, [r1, r3]
 800a016:	f003 031f 	and.w	r3, r3, #31
 800a01a:	fa22 f303 	lsr.w	r3, r2, r3
 800a01e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a020:	4b0a      	ldr	r3, [pc, #40]	@ (800a04c <HAL_RCC_GetHCLKFreq+0x50>)
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	f003 030f 	and.w	r3, r3, #15
 800a028:	4a09      	ldr	r2, [pc, #36]	@ (800a050 <HAL_RCC_GetHCLKFreq+0x54>)
 800a02a:	5cd3      	ldrb	r3, [r2, r3]
 800a02c:	f003 031f 	and.w	r3, r3, #31
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	fa22 f303 	lsr.w	r3, r2, r3
 800a036:	4a07      	ldr	r2, [pc, #28]	@ (800a054 <HAL_RCC_GetHCLKFreq+0x58>)
 800a038:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a03a:	4a07      	ldr	r2, [pc, #28]	@ (800a058 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a040:	4b04      	ldr	r3, [pc, #16]	@ (800a054 <HAL_RCC_GetHCLKFreq+0x58>)
 800a042:	681b      	ldr	r3, [r3, #0]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	58024400 	.word	0x58024400
 800a050:	08013c30 	.word	0x08013c30
 800a054:	2400001c 	.word	0x2400001c
 800a058:	24000018 	.word	0x24000018

0800a05c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a060:	f7ff ffcc 	bl	8009ffc <HAL_RCC_GetHCLKFreq>
 800a064:	4602      	mov	r2, r0
 800a066:	4b06      	ldr	r3, [pc, #24]	@ (800a080 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a068:	69db      	ldr	r3, [r3, #28]
 800a06a:	091b      	lsrs	r3, r3, #4
 800a06c:	f003 0307 	and.w	r3, r3, #7
 800a070:	4904      	ldr	r1, [pc, #16]	@ (800a084 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a072:	5ccb      	ldrb	r3, [r1, r3]
 800a074:	f003 031f 	and.w	r3, r3, #31
 800a078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	58024400 	.word	0x58024400
 800a084:	08013c30 	.word	0x08013c30

0800a088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a08c:	f7ff ffb6 	bl	8009ffc <HAL_RCC_GetHCLKFreq>
 800a090:	4602      	mov	r2, r0
 800a092:	4b06      	ldr	r3, [pc, #24]	@ (800a0ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	0a1b      	lsrs	r3, r3, #8
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	4904      	ldr	r1, [pc, #16]	@ (800a0b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a09e:	5ccb      	ldrb	r3, [r1, r3]
 800a0a0:	f003 031f 	and.w	r3, r3, #31
 800a0a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	58024400 	.word	0x58024400
 800a0b0:	08013c30 	.word	0x08013c30

0800a0b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0b8:	b0c6      	sub	sp, #280	@ 0x118
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a0d8:	2500      	movs	r5, #0
 800a0da:	ea54 0305 	orrs.w	r3, r4, r5
 800a0de:	d049      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a0ea:	d02f      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a0ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a0f0:	d828      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a0f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0f6:	d01a      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a0f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0fc:	d822      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a106:	d007      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a108:	e01c      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a10a:	4bab      	ldr	r3, [pc, #684]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10e:	4aaa      	ldr	r2, [pc, #680]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a114:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a116:	e01a      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11c:	3308      	adds	r3, #8
 800a11e:	2102      	movs	r1, #2
 800a120:	4618      	mov	r0, r3
 800a122:	f002 fa49 	bl	800c5b8 <RCCEx_PLL2_Config>
 800a126:	4603      	mov	r3, r0
 800a128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a12c:	e00f      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a132:	3328      	adds	r3, #40	@ 0x28
 800a134:	2102      	movs	r1, #2
 800a136:	4618      	mov	r0, r3
 800a138:	f002 faf0 	bl	800c71c <RCCEx_PLL3_Config>
 800a13c:	4603      	mov	r3, r0
 800a13e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a142:	e004      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a14a:	e000      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a14c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a14e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10a      	bne.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a156:	4b98      	ldr	r3, [pc, #608]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a15a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a164:	4a94      	ldr	r2, [pc, #592]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a166:	430b      	orrs	r3, r1
 800a168:	6513      	str	r3, [r2, #80]	@ 0x50
 800a16a:	e003      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a16c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a170:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a180:	f04f 0900 	mov.w	r9, #0
 800a184:	ea58 0309 	orrs.w	r3, r8, r9
 800a188:	d047      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a18e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a190:	2b04      	cmp	r3, #4
 800a192:	d82a      	bhi.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a194:	a201      	add	r2, pc, #4	@ (adr r2, 800a19c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19a:	bf00      	nop
 800a19c:	0800a1b1 	.word	0x0800a1b1
 800a1a0:	0800a1bf 	.word	0x0800a1bf
 800a1a4:	0800a1d5 	.word	0x0800a1d5
 800a1a8:	0800a1f3 	.word	0x0800a1f3
 800a1ac:	0800a1f3 	.word	0x0800a1f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1b0:	4b81      	ldr	r3, [pc, #516]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b4:	4a80      	ldr	r2, [pc, #512]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1bc:	e01a      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1c2:	3308      	adds	r3, #8
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f002 f9f6 	bl	800c5b8 <RCCEx_PLL2_Config>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1d2:	e00f      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d8:	3328      	adds	r3, #40	@ 0x28
 800a1da:	2100      	movs	r1, #0
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f002 fa9d 	bl	800c71c <RCCEx_PLL3_Config>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1e8:	e004      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1f0:	e000      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a1f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10a      	bne.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1fc:	4b6e      	ldr	r3, [pc, #440]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a200:	f023 0107 	bic.w	r1, r3, #7
 800a204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a20a:	4a6b      	ldr	r2, [pc, #428]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a20c:	430b      	orrs	r3, r1
 800a20e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a210:	e003      	b.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a212:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a216:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800a226:	f04f 0b00 	mov.w	fp, #0
 800a22a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a22e:	d05b      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a234:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a238:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a23c:	d03b      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a23e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a242:	d834      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a244:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a248:	d037      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a24a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a24e:	d82e      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a250:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a254:	d033      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a256:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a25a:	d828      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a25c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a260:	d01a      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a266:	d822      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a26c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a270:	d007      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a272:	e01c      	b.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a274:	4b50      	ldr	r3, [pc, #320]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a278:	4a4f      	ldr	r2, [pc, #316]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a27a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a27e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a280:	e01e      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a286:	3308      	adds	r3, #8
 800a288:	2100      	movs	r1, #0
 800a28a:	4618      	mov	r0, r3
 800a28c:	f002 f994 	bl	800c5b8 <RCCEx_PLL2_Config>
 800a290:	4603      	mov	r3, r0
 800a292:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a296:	e013      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29c:	3328      	adds	r3, #40	@ 0x28
 800a29e:	2100      	movs	r1, #0
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f002 fa3b 	bl	800c71c <RCCEx_PLL3_Config>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a2ac:	e008      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a2b4:	e004      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a2b6:	bf00      	nop
 800a2b8:	e002      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a2ba:	bf00      	nop
 800a2bc:	e000      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a2be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10b      	bne.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a2c8:	4b3b      	ldr	r3, [pc, #236]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2cc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a2d8:	4a37      	ldr	r2, [pc, #220]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2de:	e003      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a2f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a2fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a302:	460b      	mov	r3, r1
 800a304:	4313      	orrs	r3, r2
 800a306:	d05d      	beq.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a30c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a310:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a314:	d03b      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a316:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a31a:	d834      	bhi.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a31c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a320:	d037      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a322:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a326:	d82e      	bhi.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a328:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a32c:	d033      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a32e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a332:	d828      	bhi.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a338:	d01a      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a33a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a33e:	d822      	bhi.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a348:	d007      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a34a:	e01c      	b.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a34c:	4b1a      	ldr	r3, [pc, #104]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a350:	4a19      	ldr	r2, [pc, #100]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a358:	e01e      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a35e:	3308      	adds	r3, #8
 800a360:	2100      	movs	r1, #0
 800a362:	4618      	mov	r0, r3
 800a364:	f002 f928 	bl	800c5b8 <RCCEx_PLL2_Config>
 800a368:	4603      	mov	r3, r0
 800a36a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a36e:	e013      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a374:	3328      	adds	r3, #40	@ 0x28
 800a376:	2100      	movs	r1, #0
 800a378:	4618      	mov	r0, r3
 800a37a:	f002 f9cf 	bl	800c71c <RCCEx_PLL3_Config>
 800a37e:	4603      	mov	r3, r0
 800a380:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a384:	e008      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a38c:	e004      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a38e:	bf00      	nop
 800a390:	e002      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a392:	bf00      	nop
 800a394:	e000      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a396:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10d      	bne.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a3a0:	4b05      	ldr	r3, [pc, #20]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a3a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a3b0:	4a01      	ldr	r2, [pc, #4]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a3b2:	430b      	orrs	r3, r1
 800a3b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a3b6:	e005      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a3b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a3d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a3da:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	d03a      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ea:	2b30      	cmp	r3, #48	@ 0x30
 800a3ec:	d01f      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a3ee:	2b30      	cmp	r3, #48	@ 0x30
 800a3f0:	d819      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a3f2:	2b20      	cmp	r3, #32
 800a3f4:	d00c      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a3f6:	2b20      	cmp	r3, #32
 800a3f8:	d815      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d019      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a3fe:	2b10      	cmp	r3, #16
 800a400:	d111      	bne.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a402:	4baa      	ldr	r3, [pc, #680]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a406:	4aa9      	ldr	r2, [pc, #676]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a40c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a40e:	e011      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a414:	3308      	adds	r3, #8
 800a416:	2102      	movs	r1, #2
 800a418:	4618      	mov	r0, r3
 800a41a:	f002 f8cd 	bl	800c5b8 <RCCEx_PLL2_Config>
 800a41e:	4603      	mov	r3, r0
 800a420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a424:	e006      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a42c:	e002      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a42e:	bf00      	nop
 800a430:	e000      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a432:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10a      	bne.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a43c:	4b9b      	ldr	r3, [pc, #620]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a43e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a440:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a44a:	4a98      	ldr	r2, [pc, #608]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a44c:	430b      	orrs	r3, r1
 800a44e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a450:	e003      	b.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a452:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a456:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a46a:	2300      	movs	r3, #0
 800a46c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a470:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a474:	460b      	mov	r3, r1
 800a476:	4313      	orrs	r3, r2
 800a478:	d051      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a47e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a480:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a484:	d035      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a486:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a48a:	d82e      	bhi.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a48c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a490:	d031      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a492:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a496:	d828      	bhi.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a49c:	d01a      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a49e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4a2:	d822      	bhi.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d003      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a4a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4ac:	d007      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a4ae:	e01c      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4b0:	4b7e      	ldr	r3, [pc, #504]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b4:	4a7d      	ldr	r2, [pc, #500]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a4bc:	e01c      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f002 f876 	bl	800c5b8 <RCCEx_PLL2_Config>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a4d2:	e011      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4d8:	3328      	adds	r3, #40	@ 0x28
 800a4da:	2100      	movs	r1, #0
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f002 f91d 	bl	800c71c <RCCEx_PLL3_Config>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a4e8:	e006      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4f0:	e002      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a4f2:	bf00      	nop
 800a4f4:	e000      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a4f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10a      	bne.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a500:	4b6a      	ldr	r3, [pc, #424]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a504:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a50c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a50e:	4a67      	ldr	r2, [pc, #412]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a510:	430b      	orrs	r3, r1
 800a512:	6513      	str	r3, [r2, #80]	@ 0x50
 800a514:	e003      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a51a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a51e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a52a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a52e:	2300      	movs	r3, #0
 800a530:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a534:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a538:	460b      	mov	r3, r1
 800a53a:	4313      	orrs	r3, r2
 800a53c:	d053      	beq.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a548:	d033      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a54a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a54e:	d82c      	bhi.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a550:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a554:	d02f      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a556:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a55a:	d826      	bhi.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a55c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a560:	d02b      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a562:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a566:	d820      	bhi.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a56c:	d012      	beq.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a56e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a572:	d81a      	bhi.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a574:	2b00      	cmp	r3, #0
 800a576:	d022      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a57c:	d115      	bne.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a582:	3308      	adds	r3, #8
 800a584:	2101      	movs	r1, #1
 800a586:	4618      	mov	r0, r3
 800a588:	f002 f816 	bl	800c5b8 <RCCEx_PLL2_Config>
 800a58c:	4603      	mov	r3, r0
 800a58e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a592:	e015      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a598:	3328      	adds	r3, #40	@ 0x28
 800a59a:	2101      	movs	r1, #1
 800a59c:	4618      	mov	r0, r3
 800a59e:	f002 f8bd 	bl	800c71c <RCCEx_PLL3_Config>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a5a8:	e00a      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5b0:	e006      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a5b2:	bf00      	nop
 800a5b4:	e004      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a5b6:	bf00      	nop
 800a5b8:	e002      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a5ba:	bf00      	nop
 800a5bc:	e000      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a5be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a5c8:	4b38      	ldr	r3, [pc, #224]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5d6:	4a35      	ldr	r2, [pc, #212]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5d8:	430b      	orrs	r3, r1
 800a5da:	6513      	str	r3, [r2, #80]	@ 0x50
 800a5dc:	e003      	b.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a5f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a5fc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a600:	460b      	mov	r3, r1
 800a602:	4313      	orrs	r3, r2
 800a604:	d058      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a60a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a60e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a612:	d033      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a614:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a618:	d82c      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a61a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a61e:	d02f      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a624:	d826      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a62a:	d02b      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a62c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a630:	d820      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a636:	d012      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a63c:	d81a      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d022      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a646:	d115      	bne.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a64c:	3308      	adds	r3, #8
 800a64e:	2101      	movs	r1, #1
 800a650:	4618      	mov	r0, r3
 800a652:	f001 ffb1 	bl	800c5b8 <RCCEx_PLL2_Config>
 800a656:	4603      	mov	r3, r0
 800a658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a65c:	e015      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a662:	3328      	adds	r3, #40	@ 0x28
 800a664:	2101      	movs	r1, #1
 800a666:	4618      	mov	r0, r3
 800a668:	f002 f858 	bl	800c71c <RCCEx_PLL3_Config>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a672:	e00a      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a67a:	e006      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a67c:	bf00      	nop
 800a67e:	e004      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a680:	bf00      	nop
 800a682:	e002      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a684:	bf00      	nop
 800a686:	e000      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a68a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10e      	bne.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a692:	4b06      	ldr	r3, [pc, #24]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a696:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a69e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a6a2:	4a02      	ldr	r2, [pc, #8]	@ (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6a4:	430b      	orrs	r3, r1
 800a6a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a6a8:	e006      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a6aa:	bf00      	nop
 800a6ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a6c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a6ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	d037      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6e2:	d00e      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a6e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6e8:	d816      	bhi.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d018      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a6ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6f2:	d111      	bne.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6f4:	4bc4      	ldr	r3, [pc, #784]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f8:	4ac3      	ldr	r2, [pc, #780]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a700:	e00f      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a706:	3308      	adds	r3, #8
 800a708:	2101      	movs	r1, #1
 800a70a:	4618      	mov	r0, r3
 800a70c:	f001 ff54 	bl	800c5b8 <RCCEx_PLL2_Config>
 800a710:	4603      	mov	r3, r0
 800a712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a716:	e004      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a71e:	e000      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a720:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a722:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10a      	bne.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a72a:	4bb7      	ldr	r3, [pc, #732]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a72c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a72e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a738:	4ab3      	ldr	r2, [pc, #716]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a73a:	430b      	orrs	r3, r1
 800a73c:	6513      	str	r3, [r2, #80]	@ 0x50
 800a73e:	e003      	b.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a740:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a744:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a758:	2300      	movs	r3, #0
 800a75a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a75e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a762:	460b      	mov	r3, r1
 800a764:	4313      	orrs	r3, r2
 800a766:	d039      	beq.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a76c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a76e:	2b03      	cmp	r3, #3
 800a770:	d81c      	bhi.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a772:	a201      	add	r2, pc, #4	@ (adr r2, 800a778 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a778:	0800a7b5 	.word	0x0800a7b5
 800a77c:	0800a789 	.word	0x0800a789
 800a780:	0800a797 	.word	0x0800a797
 800a784:	0800a7b5 	.word	0x0800a7b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a788:	4b9f      	ldr	r3, [pc, #636]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a78c:	4a9e      	ldr	r2, [pc, #632]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a78e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a794:	e00f      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a79a:	3308      	adds	r3, #8
 800a79c:	2102      	movs	r1, #2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f001 ff0a 	bl	800c5b8 <RCCEx_PLL2_Config>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a7aa:	e004      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a7b2:	e000      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a7b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10a      	bne.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a7be:	4b92      	ldr	r3, [pc, #584]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a7c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7c2:	f023 0103 	bic.w	r1, r3, #3
 800a7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7cc:	4a8e      	ldr	r2, [pc, #568]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a7ce:	430b      	orrs	r3, r1
 800a7d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a7d2:	e003      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a7e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a7f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	f000 8099 	beq.w	800a930 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7fe:	4b83      	ldr	r3, [pc, #524]	@ (800aa0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a82      	ldr	r2, [pc, #520]	@ (800aa0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a808:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a80a:	f7f9 f9d7 	bl	8003bbc <HAL_GetTick>
 800a80e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a812:	e00b      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a814:	f7f9 f9d2 	bl	8003bbc <HAL_GetTick>
 800a818:	4602      	mov	r2, r0
 800a81a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	2b64      	cmp	r3, #100	@ 0x64
 800a822:	d903      	bls.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a82a:	e005      	b.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a82c:	4b77      	ldr	r3, [pc, #476]	@ (800aa0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a834:	2b00      	cmp	r3, #0
 800a836:	d0ed      	beq.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d173      	bne.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a840:	4b71      	ldr	r3, [pc, #452]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a842:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a848:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a84c:	4053      	eors	r3, r2
 800a84e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a852:	2b00      	cmp	r3, #0
 800a854:	d015      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a856:	4b6c      	ldr	r3, [pc, #432]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a85a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a85e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a862:	4b69      	ldr	r3, [pc, #420]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a866:	4a68      	ldr	r2, [pc, #416]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a86c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a86e:	4b66      	ldr	r3, [pc, #408]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a872:	4a65      	ldr	r2, [pc, #404]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a878:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a87a:	4a63      	ldr	r2, [pc, #396]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a87c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a880:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a886:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a88a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a88e:	d118      	bne.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a890:	f7f9 f994 	bl	8003bbc <HAL_GetTick>
 800a894:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a898:	e00d      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a89a:	f7f9 f98f 	bl	8003bbc <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a8a4:	1ad2      	subs	r2, r2, r3
 800a8a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d903      	bls.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a8b4:	e005      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8b6:	4b54      	ldr	r3, [pc, #336]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8ba:	f003 0302 	and.w	r3, r3, #2
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0eb      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a8c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d129      	bne.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8da:	d10e      	bne.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a8dc:	4b4a      	ldr	r3, [pc, #296]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8ec:	091a      	lsrs	r2, r3, #4
 800a8ee:	4b48      	ldr	r3, [pc, #288]	@ (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	4a45      	ldr	r2, [pc, #276]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8f4:	430b      	orrs	r3, r1
 800a8f6:	6113      	str	r3, [r2, #16]
 800a8f8:	e005      	b.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a8fa:	4b43      	ldr	r3, [pc, #268]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	4a42      	ldr	r2, [pc, #264]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a900:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a904:	6113      	str	r3, [r2, #16]
 800a906:	4b40      	ldr	r3, [pc, #256]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a908:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a916:	4a3c      	ldr	r2, [pc, #240]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a918:	430b      	orrs	r3, r1
 800a91a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a91c:	e008      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a91e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a922:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a926:	e003      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a92c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a938:	f002 0301 	and.w	r3, r2, #1
 800a93c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a940:	2300      	movs	r3, #0
 800a942:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a946:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a94a:	460b      	mov	r3, r1
 800a94c:	4313      	orrs	r3, r2
 800a94e:	f000 808f 	beq.w	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a956:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a958:	2b28      	cmp	r3, #40	@ 0x28
 800a95a:	d871      	bhi.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a95c:	a201      	add	r2, pc, #4	@ (adr r2, 800a964 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a962:	bf00      	nop
 800a964:	0800aa49 	.word	0x0800aa49
 800a968:	0800aa41 	.word	0x0800aa41
 800a96c:	0800aa41 	.word	0x0800aa41
 800a970:	0800aa41 	.word	0x0800aa41
 800a974:	0800aa41 	.word	0x0800aa41
 800a978:	0800aa41 	.word	0x0800aa41
 800a97c:	0800aa41 	.word	0x0800aa41
 800a980:	0800aa41 	.word	0x0800aa41
 800a984:	0800aa15 	.word	0x0800aa15
 800a988:	0800aa41 	.word	0x0800aa41
 800a98c:	0800aa41 	.word	0x0800aa41
 800a990:	0800aa41 	.word	0x0800aa41
 800a994:	0800aa41 	.word	0x0800aa41
 800a998:	0800aa41 	.word	0x0800aa41
 800a99c:	0800aa41 	.word	0x0800aa41
 800a9a0:	0800aa41 	.word	0x0800aa41
 800a9a4:	0800aa2b 	.word	0x0800aa2b
 800a9a8:	0800aa41 	.word	0x0800aa41
 800a9ac:	0800aa41 	.word	0x0800aa41
 800a9b0:	0800aa41 	.word	0x0800aa41
 800a9b4:	0800aa41 	.word	0x0800aa41
 800a9b8:	0800aa41 	.word	0x0800aa41
 800a9bc:	0800aa41 	.word	0x0800aa41
 800a9c0:	0800aa41 	.word	0x0800aa41
 800a9c4:	0800aa49 	.word	0x0800aa49
 800a9c8:	0800aa41 	.word	0x0800aa41
 800a9cc:	0800aa41 	.word	0x0800aa41
 800a9d0:	0800aa41 	.word	0x0800aa41
 800a9d4:	0800aa41 	.word	0x0800aa41
 800a9d8:	0800aa41 	.word	0x0800aa41
 800a9dc:	0800aa41 	.word	0x0800aa41
 800a9e0:	0800aa41 	.word	0x0800aa41
 800a9e4:	0800aa49 	.word	0x0800aa49
 800a9e8:	0800aa41 	.word	0x0800aa41
 800a9ec:	0800aa41 	.word	0x0800aa41
 800a9f0:	0800aa41 	.word	0x0800aa41
 800a9f4:	0800aa41 	.word	0x0800aa41
 800a9f8:	0800aa41 	.word	0x0800aa41
 800a9fc:	0800aa41 	.word	0x0800aa41
 800aa00:	0800aa41 	.word	0x0800aa41
 800aa04:	0800aa49 	.word	0x0800aa49
 800aa08:	58024400 	.word	0x58024400
 800aa0c:	58024800 	.word	0x58024800
 800aa10:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa18:	3308      	adds	r3, #8
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f001 fdcb 	bl	800c5b8 <RCCEx_PLL2_Config>
 800aa22:	4603      	mov	r3, r0
 800aa24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aa28:	e00f      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa2e:	3328      	adds	r3, #40	@ 0x28
 800aa30:	2101      	movs	r1, #1
 800aa32:	4618      	mov	r0, r3
 800aa34:	f001 fe72 	bl	800c71c <RCCEx_PLL3_Config>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aa3e:	e004      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa46:	e000      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800aa48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10a      	bne.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aa52:	4bbf      	ldr	r3, [pc, #764]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800aa5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa60:	4abb      	ldr	r2, [pc, #748]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa62:	430b      	orrs	r3, r1
 800aa64:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa66:	e003      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aa70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	f002 0302 	and.w	r3, r2, #2
 800aa7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa80:	2300      	movs	r3, #0
 800aa82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	d041      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800aa90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa96:	2b05      	cmp	r3, #5
 800aa98:	d824      	bhi.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800aa9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800aa9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa0:	0800aaed 	.word	0x0800aaed
 800aaa4:	0800aab9 	.word	0x0800aab9
 800aaa8:	0800aacf 	.word	0x0800aacf
 800aaac:	0800aaed 	.word	0x0800aaed
 800aab0:	0800aaed 	.word	0x0800aaed
 800aab4:	0800aaed 	.word	0x0800aaed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aabc:	3308      	adds	r3, #8
 800aabe:	2101      	movs	r1, #1
 800aac0:	4618      	mov	r0, r3
 800aac2:	f001 fd79 	bl	800c5b8 <RCCEx_PLL2_Config>
 800aac6:	4603      	mov	r3, r0
 800aac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aacc:	e00f      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aad2:	3328      	adds	r3, #40	@ 0x28
 800aad4:	2101      	movs	r1, #1
 800aad6:	4618      	mov	r0, r3
 800aad8:	f001 fe20 	bl	800c71c <RCCEx_PLL3_Config>
 800aadc:	4603      	mov	r3, r0
 800aade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aae2:	e004      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aaea:	e000      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800aaec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10a      	bne.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aaf6:	4b96      	ldr	r3, [pc, #600]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aaf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aafa:	f023 0107 	bic.w	r1, r3, #7
 800aafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab04:	4a92      	ldr	r2, [pc, #584]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab06:	430b      	orrs	r3, r1
 800ab08:	6553      	str	r3, [r2, #84]	@ 0x54
 800ab0a:	e003      	b.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ab14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1c:	f002 0304 	and.w	r3, r2, #4
 800ab20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ab24:	2300      	movs	r3, #0
 800ab26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ab2a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4313      	orrs	r3, r2
 800ab32:	d044      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ab34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab3c:	2b05      	cmp	r3, #5
 800ab3e:	d825      	bhi.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800ab40:	a201      	add	r2, pc, #4	@ (adr r2, 800ab48 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800ab42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab46:	bf00      	nop
 800ab48:	0800ab95 	.word	0x0800ab95
 800ab4c:	0800ab61 	.word	0x0800ab61
 800ab50:	0800ab77 	.word	0x0800ab77
 800ab54:	0800ab95 	.word	0x0800ab95
 800ab58:	0800ab95 	.word	0x0800ab95
 800ab5c:	0800ab95 	.word	0x0800ab95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab64:	3308      	adds	r3, #8
 800ab66:	2101      	movs	r1, #1
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f001 fd25 	bl	800c5b8 <RCCEx_PLL2_Config>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ab74:	e00f      	b.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab7a:	3328      	adds	r3, #40	@ 0x28
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f001 fdcc 	bl	800c71c <RCCEx_PLL3_Config>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ab8a:	e004      	b.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab92:	e000      	b.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800ab94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10b      	bne.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ab9e:	4b6c      	ldr	r3, [pc, #432]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aba2:	f023 0107 	bic.w	r1, r3, #7
 800aba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abae:	4a68      	ldr	r2, [pc, #416]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800abb0:	430b      	orrs	r3, r1
 800abb2:	6593      	str	r3, [r2, #88]	@ 0x58
 800abb4:	e003      	b.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800abbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	f002 0320 	and.w	r3, r2, #32
 800abca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800abce:	2300      	movs	r3, #0
 800abd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800abd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800abd8:	460b      	mov	r3, r1
 800abda:	4313      	orrs	r3, r2
 800abdc:	d055      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800abde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abea:	d033      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800abec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abf0:	d82c      	bhi.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800abf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abf6:	d02f      	beq.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800abf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abfc:	d826      	bhi.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800abfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac02:	d02b      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ac04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac08:	d820      	bhi.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ac0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac0e:	d012      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800ac10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac14:	d81a      	bhi.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d022      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ac1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac1e:	d115      	bne.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac24:	3308      	adds	r3, #8
 800ac26:	2100      	movs	r1, #0
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f001 fcc5 	bl	800c5b8 <RCCEx_PLL2_Config>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ac34:	e015      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac3a:	3328      	adds	r3, #40	@ 0x28
 800ac3c:	2102      	movs	r1, #2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f001 fd6c 	bl	800c71c <RCCEx_PLL3_Config>
 800ac44:	4603      	mov	r3, r0
 800ac46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ac4a:	e00a      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac52:	e006      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac54:	bf00      	nop
 800ac56:	e004      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac58:	bf00      	nop
 800ac5a:	e002      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac5c:	bf00      	nop
 800ac5e:	e000      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10b      	bne.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac6a:	4b39      	ldr	r3, [pc, #228]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac6e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ac72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac7a:	4a35      	ldr	r2, [pc, #212]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac7c:	430b      	orrs	r3, r1
 800ac7e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac80:	e003      	b.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ac8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ac96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aca0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800aca4:	460b      	mov	r3, r1
 800aca6:	4313      	orrs	r3, r2
 800aca8:	d058      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800acaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800acb2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800acb6:	d033      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800acb8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800acbc:	d82c      	bhi.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800acbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acc2:	d02f      	beq.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800acc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acc8:	d826      	bhi.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800acca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acce:	d02b      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800acd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acd4:	d820      	bhi.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800acd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acda:	d012      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800acdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ace0:	d81a      	bhi.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d022      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ace6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acea:	d115      	bne.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf0:	3308      	adds	r3, #8
 800acf2:	2100      	movs	r1, #0
 800acf4:	4618      	mov	r0, r3
 800acf6:	f001 fc5f 	bl	800c5b8 <RCCEx_PLL2_Config>
 800acfa:	4603      	mov	r3, r0
 800acfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ad00:	e015      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad06:	3328      	adds	r3, #40	@ 0x28
 800ad08:	2102      	movs	r1, #2
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f001 fd06 	bl	800c71c <RCCEx_PLL3_Config>
 800ad10:	4603      	mov	r3, r0
 800ad12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ad16:	e00a      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad1e:	e006      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad20:	bf00      	nop
 800ad22:	e004      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad24:	bf00      	nop
 800ad26:	e002      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad28:	bf00      	nop
 800ad2a:	e000      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10e      	bne.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ad36:	4b06      	ldr	r3, [pc, #24]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ad3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad46:	4a02      	ldr	r2, [pc, #8]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad48:	430b      	orrs	r3, r1
 800ad4a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad4c:	e006      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ad4e:	bf00      	nop
 800ad50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ad5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ad68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ad76:	460b      	mov	r3, r1
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	d055      	beq.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ad7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ad88:	d033      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ad8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ad8e:	d82c      	bhi.n	800adea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ad90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad94:	d02f      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ad96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad9a:	d826      	bhi.n	800adea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ad9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ada0:	d02b      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ada2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ada6:	d820      	bhi.n	800adea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ada8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adac:	d012      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800adae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adb2:	d81a      	bhi.n	800adea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d022      	beq.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800adb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adbc:	d115      	bne.n	800adea <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800adbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc2:	3308      	adds	r3, #8
 800adc4:	2100      	movs	r1, #0
 800adc6:	4618      	mov	r0, r3
 800adc8:	f001 fbf6 	bl	800c5b8 <RCCEx_PLL2_Config>
 800adcc:	4603      	mov	r3, r0
 800adce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800add2:	e015      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800add4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800add8:	3328      	adds	r3, #40	@ 0x28
 800adda:	2102      	movs	r1, #2
 800addc:	4618      	mov	r0, r3
 800adde:	f001 fc9d 	bl	800c71c <RCCEx_PLL3_Config>
 800ade2:	4603      	mov	r3, r0
 800ade4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ade8:	e00a      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800adf0:	e006      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800adf2:	bf00      	nop
 800adf4:	e004      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800adf6:	bf00      	nop
 800adf8:	e002      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800adfa:	bf00      	nop
 800adfc:	e000      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800adfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10b      	bne.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ae08:	4ba0      	ldr	r3, [pc, #640]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae0c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ae10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ae18:	4a9c      	ldr	r2, [pc, #624]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae1a:	430b      	orrs	r3, r1
 800ae1c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ae1e:	e003      	b.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ae28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	f002 0308 	and.w	r3, r2, #8
 800ae34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ae3e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ae42:	460b      	mov	r3, r1
 800ae44:	4313      	orrs	r3, r2
 800ae46:	d01e      	beq.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ae48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae54:	d10c      	bne.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae5a:	3328      	adds	r3, #40	@ 0x28
 800ae5c:	2102      	movs	r1, #2
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f001 fc5c 	bl	800c71c <RCCEx_PLL3_Config>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ae70:	4b86      	ldr	r3, [pc, #536]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae80:	4a82      	ldr	r2, [pc, #520]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae82:	430b      	orrs	r3, r1
 800ae84:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ae86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f002 0310 	and.w	r3, r2, #16
 800ae92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae96:	2300      	movs	r3, #0
 800ae98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae9c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800aea0:	460b      	mov	r3, r1
 800aea2:	4313      	orrs	r3, r2
 800aea4:	d01e      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aeae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aeb2:	d10c      	bne.n	800aece <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aeb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeb8:	3328      	adds	r3, #40	@ 0x28
 800aeba:	2102      	movs	r1, #2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 fc2d 	bl	800c71c <RCCEx_PLL3_Config>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aece:	4b6f      	ldr	r3, [pc, #444]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aed2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aede:	4a6b      	ldr	r2, [pc, #428]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aee0:	430b      	orrs	r3, r1
 800aee2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800aef0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aef2:	2300      	movs	r3, #0
 800aef4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aef6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800aefa:	460b      	mov	r3, r1
 800aefc:	4313      	orrs	r3, r2
 800aefe:	d03e      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800af00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800af08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af0c:	d022      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800af0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af12:	d81b      	bhi.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800af14:	2b00      	cmp	r3, #0
 800af16:	d003      	beq.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800af18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af1c:	d00b      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800af1e:	e015      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af24:	3308      	adds	r3, #8
 800af26:	2100      	movs	r1, #0
 800af28:	4618      	mov	r0, r3
 800af2a:	f001 fb45 	bl	800c5b8 <RCCEx_PLL2_Config>
 800af2e:	4603      	mov	r3, r0
 800af30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800af34:	e00f      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af3a:	3328      	adds	r3, #40	@ 0x28
 800af3c:	2102      	movs	r1, #2
 800af3e:	4618      	mov	r0, r3
 800af40:	f001 fbec 	bl	800c71c <RCCEx_PLL3_Config>
 800af44:	4603      	mov	r3, r0
 800af46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800af4a:	e004      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800af52:	e000      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800af54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10b      	bne.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af5e:	4b4b      	ldr	r3, [pc, #300]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800af66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800af6e:	4a47      	ldr	r2, [pc, #284]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af70:	430b      	orrs	r3, r1
 800af72:	6593      	str	r3, [r2, #88]	@ 0x58
 800af74:	e003      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800af7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800af8a:	673b      	str	r3, [r7, #112]	@ 0x70
 800af8c:	2300      	movs	r3, #0
 800af8e:	677b      	str	r3, [r7, #116]	@ 0x74
 800af90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800af94:	460b      	mov	r3, r1
 800af96:	4313      	orrs	r3, r2
 800af98:	d03b      	beq.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800af9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afa2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800afa6:	d01f      	beq.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800afa8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800afac:	d818      	bhi.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800afae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afb2:	d003      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800afb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800afb8:	d007      	beq.n	800afca <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800afba:	e011      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afbc:	4b33      	ldr	r3, [pc, #204]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc0:	4a32      	ldr	r2, [pc, #200]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800afc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800afc8:	e00f      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afce:	3328      	adds	r3, #40	@ 0x28
 800afd0:	2101      	movs	r1, #1
 800afd2:	4618      	mov	r0, r3
 800afd4:	f001 fba2 	bl	800c71c <RCCEx_PLL3_Config>
 800afd8:	4603      	mov	r3, r0
 800afda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800afde:	e004      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800afe6:	e000      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800afe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10b      	bne.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aff2:	4b26      	ldr	r3, [pc, #152]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aff6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800affa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800affe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b002:	4a22      	ldr	r2, [pc, #136]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b004:	430b      	orrs	r3, r1
 800b006:	6553      	str	r3, [r2, #84]	@ 0x54
 800b008:	e003      	b.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b00a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b00e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b01e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b020:	2300      	movs	r3, #0
 800b022:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b024:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b028:	460b      	mov	r3, r1
 800b02a:	4313      	orrs	r3, r2
 800b02c:	d034      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b034:	2b00      	cmp	r3, #0
 800b036:	d003      	beq.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b03c:	d007      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b03e:	e011      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b040:	4b12      	ldr	r3, [pc, #72]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b044:	4a11      	ldr	r2, [pc, #68]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b04a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b04c:	e00e      	b.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b052:	3308      	adds	r3, #8
 800b054:	2102      	movs	r1, #2
 800b056:	4618      	mov	r0, r3
 800b058:	f001 faae 	bl	800c5b8 <RCCEx_PLL2_Config>
 800b05c:	4603      	mov	r3, r0
 800b05e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b062:	e003      	b.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b06a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b06c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10d      	bne.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b074:	4b05      	ldr	r3, [pc, #20]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b078:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b082:	4a02      	ldr	r2, [pc, #8]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b084:	430b      	orrs	r3, r1
 800b086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b088:	e006      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b08a:	bf00      	nop
 800b08c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b094:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b0a4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0aa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	d00c      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0b8:	3328      	adds	r3, #40	@ 0x28
 800b0ba:	2102      	movs	r1, #2
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f001 fb2d 	bl	800c71c <RCCEx_PLL3_Config>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b0da:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0dc:	2300      	movs	r3, #0
 800b0de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0e0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	d036      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0f4:	d018      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b0f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0fa:	d811      	bhi.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b0fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b100:	d014      	beq.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b106:	d80b      	bhi.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d011      	beq.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b10c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b110:	d106      	bne.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b112:	4bb7      	ldr	r3, [pc, #732]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b116:	4ab6      	ldr	r2, [pc, #728]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b11c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b11e:	e008      	b.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b126:	e004      	b.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b128:	bf00      	nop
 800b12a:	e002      	b.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b12c:	bf00      	nop
 800b12e:	e000      	b.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b130:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10a      	bne.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b13a:	4bad      	ldr	r3, [pc, #692]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b13c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b13e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b148:	4aa9      	ldr	r2, [pc, #676]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b14a:	430b      	orrs	r3, r1
 800b14c:	6553      	str	r3, [r2, #84]	@ 0x54
 800b14e:	e003      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b154:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b164:	653b      	str	r3, [r7, #80]	@ 0x50
 800b166:	2300      	movs	r3, #0
 800b168:	657b      	str	r3, [r7, #84]	@ 0x54
 800b16a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b16e:	460b      	mov	r3, r1
 800b170:	4313      	orrs	r3, r2
 800b172:	d009      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b174:	4b9e      	ldr	r3, [pc, #632]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b178:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b182:	4a9b      	ldr	r2, [pc, #620]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b184:	430b      	orrs	r3, r1
 800b186:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b194:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b196:	2300      	movs	r3, #0
 800b198:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b19a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	d009      	beq.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b1a4:	4b92      	ldr	r3, [pc, #584]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1a8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b1b2:	4a8f      	ldr	r2, [pc, #572]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1b4:	430b      	orrs	r3, r1
 800b1b6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b1c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	d00e      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b1d4:	4b86      	ldr	r3, [pc, #536]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	4a85      	ldr	r2, [pc, #532]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b1de:	6113      	str	r3, [r2, #16]
 800b1e0:	4b83      	ldr	r3, [pc, #524]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1e2:	6919      	ldr	r1, [r3, #16]
 800b1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b1ec:	4a80      	ldr	r2, [pc, #512]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1ee:	430b      	orrs	r3, r1
 800b1f0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b1fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b200:	2300      	movs	r3, #0
 800b202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b204:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b208:	460b      	mov	r3, r1
 800b20a:	4313      	orrs	r3, r2
 800b20c:	d009      	beq.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b20e:	4b78      	ldr	r3, [pc, #480]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b212:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b21a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b21c:	4a74      	ldr	r2, [pc, #464]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b21e:	430b      	orrs	r3, r1
 800b220:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b22e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b230:	2300      	movs	r3, #0
 800b232:	637b      	str	r3, [r7, #52]	@ 0x34
 800b234:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b238:	460b      	mov	r3, r1
 800b23a:	4313      	orrs	r3, r2
 800b23c:	d00a      	beq.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b23e:	4b6c      	ldr	r3, [pc, #432]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b242:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b24e:	4a68      	ldr	r2, [pc, #416]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b250:	430b      	orrs	r3, r1
 800b252:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25c:	2100      	movs	r1, #0
 800b25e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b266:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b26a:	460b      	mov	r3, r1
 800b26c:	4313      	orrs	r3, r2
 800b26e:	d011      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b274:	3308      	adds	r3, #8
 800b276:	2100      	movs	r1, #0
 800b278:	4618      	mov	r0, r3
 800b27a:	f001 f99d 	bl	800c5b8 <RCCEx_PLL2_Config>
 800b27e:	4603      	mov	r3, r0
 800b280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d003      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b28c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b290:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	2100      	movs	r1, #0
 800b29e:	6239      	str	r1, [r7, #32]
 800b2a0:	f003 0302 	and.w	r3, r3, #2
 800b2a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2a6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	d011      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f001 f97d 	bl	800c5b8 <RCCEx_PLL2_Config>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b2c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d003      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	2100      	movs	r1, #0
 800b2de:	61b9      	str	r1, [r7, #24]
 800b2e0:	f003 0304 	and.w	r3, r3, #4
 800b2e4:	61fb      	str	r3, [r7, #28]
 800b2e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	d011      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	2102      	movs	r1, #2
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f001 f95d 	bl	800c5b8 <RCCEx_PLL2_Config>
 800b2fe:	4603      	mov	r3, r0
 800b300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d003      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b310:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31c:	2100      	movs	r1, #0
 800b31e:	6139      	str	r1, [r7, #16]
 800b320:	f003 0308 	and.w	r3, r3, #8
 800b324:	617b      	str	r3, [r7, #20]
 800b326:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b32a:	460b      	mov	r3, r1
 800b32c:	4313      	orrs	r3, r2
 800b32e:	d011      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b334:	3328      	adds	r3, #40	@ 0x28
 800b336:	2100      	movs	r1, #0
 800b338:	4618      	mov	r0, r3
 800b33a:	f001 f9ef 	bl	800c71c <RCCEx_PLL3_Config>
 800b33e:	4603      	mov	r3, r0
 800b340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800b344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d003      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b34c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b350:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	2100      	movs	r1, #0
 800b35e:	60b9      	str	r1, [r7, #8]
 800b360:	f003 0310 	and.w	r3, r3, #16
 800b364:	60fb      	str	r3, [r7, #12]
 800b366:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b36a:	460b      	mov	r3, r1
 800b36c:	4313      	orrs	r3, r2
 800b36e:	d011      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b374:	3328      	adds	r3, #40	@ 0x28
 800b376:	2101      	movs	r1, #1
 800b378:	4618      	mov	r0, r3
 800b37a:	f001 f9cf 	bl	800c71c <RCCEx_PLL3_Config>
 800b37e:	4603      	mov	r3, r0
 800b380:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d003      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b38c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	2100      	movs	r1, #0
 800b39e:	6039      	str	r1, [r7, #0]
 800b3a0:	f003 0320 	and.w	r3, r3, #32
 800b3a4:	607b      	str	r3, [r7, #4]
 800b3a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	d011      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3b4:	3328      	adds	r3, #40	@ 0x28
 800b3b6:	2102      	movs	r1, #2
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f001 f9af 	bl	800c71c <RCCEx_PLL3_Config>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b3c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b3d4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d101      	bne.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e000      	b.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3ee:	bf00      	nop
 800b3f0:	58024400 	.word	0x58024400

0800b3f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b090      	sub	sp, #64	@ 0x40
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b402:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b406:	430b      	orrs	r3, r1
 800b408:	f040 8094 	bne.w	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b40c:	4b9b      	ldr	r3, [pc, #620]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b40e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b410:	f003 0307 	and.w	r3, r3, #7
 800b414:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b418:	2b04      	cmp	r3, #4
 800b41a:	f200 8087 	bhi.w	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b41e:	a201      	add	r2, pc, #4	@ (adr r2, 800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b424:	0800b439 	.word	0x0800b439
 800b428:	0800b461 	.word	0x0800b461
 800b42c:	0800b489 	.word	0x0800b489
 800b430:	0800b525 	.word	0x0800b525
 800b434:	0800b4b1 	.word	0x0800b4b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b438:	4b90      	ldr	r3, [pc, #576]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b444:	d108      	bne.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 ff62 	bl	800c314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b454:	f000 bc93 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b458:	2300      	movs	r3, #0
 800b45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b45c:	f000 bc8f 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b460:	4b86      	ldr	r3, [pc, #536]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b46c:	d108      	bne.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b46e:	f107 0318 	add.w	r3, r7, #24
 800b472:	4618      	mov	r0, r3
 800b474:	f000 fca6 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b47c:	f000 bc7f 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b484:	f000 bc7b 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b488:	4b7c      	ldr	r3, [pc, #496]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b494:	d108      	bne.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b496:	f107 030c 	add.w	r3, r7, #12
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 fde6 	bl	800c06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4a4:	f000 bc6b 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ac:	f000 bc67 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4b0:	4b72      	ldr	r3, [pc, #456]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b4b8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4ba:	4b70      	ldr	r3, [pc, #448]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f003 0304 	and.w	r3, r3, #4
 800b4c2:	2b04      	cmp	r3, #4
 800b4c4:	d10c      	bne.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b4c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d109      	bne.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4cc:	4b6b      	ldr	r3, [pc, #428]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	08db      	lsrs	r3, r3, #3
 800b4d2:	f003 0303 	and.w	r3, r3, #3
 800b4d6:	4a6a      	ldr	r2, [pc, #424]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b4d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4de:	e01f      	b.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4e0:	4b66      	ldr	r3, [pc, #408]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4ec:	d106      	bne.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4f4:	d102      	bne.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4f6:	4b63      	ldr	r3, [pc, #396]	@ (800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4fa:	e011      	b.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4fc:	4b5f      	ldr	r3, [pc, #380]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b504:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b508:	d106      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b50a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b50c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b510:	d102      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b512:	4b5d      	ldr	r3, [pc, #372]	@ (800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b516:	e003      	b.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b51c:	f000 bc2f 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b520:	f000 bc2d 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b524:	4b59      	ldr	r3, [pc, #356]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b528:	f000 bc29 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b530:	f000 bc25 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b534:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b538:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b53c:	430b      	orrs	r3, r1
 800b53e:	f040 80a7 	bne.w	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b542:	4b4e      	ldr	r3, [pc, #312]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b546:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b54a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b552:	d054      	beq.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b556:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b55a:	f200 808b 	bhi.w	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b560:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b564:	f000 8083 	beq.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b56e:	f200 8081 	bhi.w	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b574:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b578:	d02f      	beq.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b580:	d878      	bhi.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b584:	2b00      	cmp	r3, #0
 800b586:	d004      	beq.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b58e:	d012      	beq.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b590:	e070      	b.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b592:	4b3a      	ldr	r3, [pc, #232]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b59a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b59e:	d107      	bne.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 feb5 	bl	800c314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5ae:	e3e6      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5b4:	e3e3      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5b6:	4b31      	ldr	r3, [pc, #196]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5c2:	d107      	bne.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5c4:	f107 0318 	add.w	r3, r7, #24
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 fbfb 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5d2:	e3d4      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5d8:	e3d1      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5da:	4b28      	ldr	r3, [pc, #160]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5e6:	d107      	bne.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5e8:	f107 030c 	add.w	r3, r7, #12
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 fd3d 	bl	800c06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5f6:	e3c2      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5fc:	e3bf      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5fe:	4b1f      	ldr	r3, [pc, #124]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b602:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b606:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b608:	4b1c      	ldr	r3, [pc, #112]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0304 	and.w	r3, r3, #4
 800b610:	2b04      	cmp	r3, #4
 800b612:	d10c      	bne.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b616:	2b00      	cmp	r3, #0
 800b618:	d109      	bne.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b61a:	4b18      	ldr	r3, [pc, #96]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	08db      	lsrs	r3, r3, #3
 800b620:	f003 0303 	and.w	r3, r3, #3
 800b624:	4a16      	ldr	r2, [pc, #88]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b626:	fa22 f303 	lsr.w	r3, r2, r3
 800b62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b62c:	e01e      	b.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b62e:	4b13      	ldr	r3, [pc, #76]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b63a:	d106      	bne.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b63e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b642:	d102      	bne.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b644:	4b0f      	ldr	r3, [pc, #60]	@ (800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b648:	e010      	b.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b64a:	4b0c      	ldr	r3, [pc, #48]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b652:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b656:	d106      	bne.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b65a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b65e:	d102      	bne.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b660:	4b09      	ldr	r3, [pc, #36]	@ (800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b664:	e002      	b.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b666:	2300      	movs	r3, #0
 800b668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b66a:	e388      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b66c:	e387      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b66e:	4b07      	ldr	r3, [pc, #28]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b672:	e384      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b678:	e381      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b67a:	bf00      	nop
 800b67c:	58024400 	.word	0x58024400
 800b680:	03d09000 	.word	0x03d09000
 800b684:	003d0900 	.word	0x003d0900
 800b688:	007a1200 	.word	0x007a1200
 800b68c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b690:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b694:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b698:	430b      	orrs	r3, r1
 800b69a:	f040 809c 	bne.w	800b7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b69e:	4b9e      	ldr	r3, [pc, #632]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6a2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b6a6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b6ae:	d054      	beq.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b6b6:	f200 808b 	bhi.w	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b6c0:	f000 8083 	beq.w	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b6ca:	f200 8081 	bhi.w	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6d4:	d02f      	beq.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6dc:	d878      	bhi.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d004      	beq.n	800b6ee <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6ea:	d012      	beq.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b6ec:	e070      	b.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6ee:	4b8a      	ldr	r3, [pc, #552]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6fa:	d107      	bne.n	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b700:	4618      	mov	r0, r3
 800b702:	f000 fe07 	bl	800c314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b70a:	e338      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b710:	e335      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b712:	4b81      	ldr	r3, [pc, #516]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b71a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b71e:	d107      	bne.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b720:	f107 0318 	add.w	r3, r7, #24
 800b724:	4618      	mov	r0, r3
 800b726:	f000 fb4d 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b72e:	e326      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b730:	2300      	movs	r3, #0
 800b732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b734:	e323      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b736:	4b78      	ldr	r3, [pc, #480]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b73e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b742:	d107      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b744:	f107 030c 	add.w	r3, r7, #12
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 fc8f 	bl	800c06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b752:	e314      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b754:	2300      	movs	r3, #0
 800b756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b758:	e311      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b75a:	4b6f      	ldr	r3, [pc, #444]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b75c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b75e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b762:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b764:	4b6c      	ldr	r3, [pc, #432]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 0304 	and.w	r3, r3, #4
 800b76c:	2b04      	cmp	r3, #4
 800b76e:	d10c      	bne.n	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b772:	2b00      	cmp	r3, #0
 800b774:	d109      	bne.n	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b776:	4b68      	ldr	r3, [pc, #416]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	08db      	lsrs	r3, r3, #3
 800b77c:	f003 0303 	and.w	r3, r3, #3
 800b780:	4a66      	ldr	r2, [pc, #408]	@ (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b782:	fa22 f303 	lsr.w	r3, r2, r3
 800b786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b788:	e01e      	b.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b78a:	4b63      	ldr	r3, [pc, #396]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b796:	d106      	bne.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b79a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b79e:	d102      	bne.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b7a0:	4b5f      	ldr	r3, [pc, #380]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7a4:	e010      	b.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7a6:	4b5c      	ldr	r3, [pc, #368]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7b2:	d106      	bne.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7ba:	d102      	bne.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7bc:	4b59      	ldr	r3, [pc, #356]	@ (800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7c0:	e002      	b.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b7c6:	e2da      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7c8:	e2d9      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b7ca:	4b57      	ldr	r3, [pc, #348]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7ce:	e2d6      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7d4:	e2d3      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b7d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7da:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b7de:	430b      	orrs	r3, r1
 800b7e0:	f040 80a7 	bne.w	800b932 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b7e4:	4b4c      	ldr	r3, [pc, #304]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b7e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7e8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b7ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7f4:	d055      	beq.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7fc:	f200 8096 	bhi.w	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b802:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b806:	f000 8084 	beq.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b810:	f200 808c 	bhi.w	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b81a:	d030      	beq.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b822:	f200 8083 	bhi.w	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d004      	beq.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b832:	d012      	beq.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b834:	e07a      	b.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b836:	4b38      	ldr	r3, [pc, #224]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b83e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b842:	d107      	bne.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 fd63 	bl	800c314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b852:	e294      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b858:	e291      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b85a:	4b2f      	ldr	r3, [pc, #188]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b862:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b866:	d107      	bne.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b868:	f107 0318 	add.w	r3, r7, #24
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 faa9 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b876:	e282      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b87c:	e27f      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b87e:	4b26      	ldr	r3, [pc, #152]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b88a:	d107      	bne.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b88c:	f107 030c 	add.w	r3, r7, #12
 800b890:	4618      	mov	r0, r3
 800b892:	f000 fbeb 	bl	800c06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b89a:	e270      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a0:	e26d      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b8a2:	4b1d      	ldr	r3, [pc, #116]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b8aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8ac:	4b1a      	ldr	r3, [pc, #104]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	2b04      	cmp	r3, #4
 800b8b6:	d10c      	bne.n	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d109      	bne.n	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8be:	4b16      	ldr	r3, [pc, #88]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	08db      	lsrs	r3, r3, #3
 800b8c4:	f003 0303 	and.w	r3, r3, #3
 800b8c8:	4a14      	ldr	r2, [pc, #80]	@ (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b8ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8d0:	e01e      	b.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8d2:	4b11      	ldr	r3, [pc, #68]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8de:	d106      	bne.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8e6:	d102      	bne.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8e8:	4b0d      	ldr	r3, [pc, #52]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8ec:	e010      	b.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8fa:	d106      	bne.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b902:	d102      	bne.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b904:	4b07      	ldr	r3, [pc, #28]	@ (800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b908:	e002      	b.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b90e:	e236      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b910:	e235      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b912:	4b05      	ldr	r3, [pc, #20]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b916:	e232      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b918:	58024400 	.word	0x58024400
 800b91c:	03d09000 	.word	0x03d09000
 800b920:	003d0900 	.word	0x003d0900
 800b924:	007a1200 	.word	0x007a1200
 800b928:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b930:	e225      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b932:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b936:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b93a:	430b      	orrs	r3, r1
 800b93c:	f040 8085 	bne.w	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b940:	4b9c      	ldr	r3, [pc, #624]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b944:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b948:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b950:	d06b      	beq.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b954:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b958:	d874      	bhi.n	800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b960:	d056      	beq.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b964:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b968:	d86c      	bhi.n	800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b970:	d03b      	beq.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b974:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b978:	d864      	bhi.n	800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b980:	d021      	beq.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b984:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b988:	d85c      	bhi.n	800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d004      	beq.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b996:	d004      	beq.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b998:	e054      	b.n	800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b99a:	f7fe fb5f 	bl	800a05c <HAL_RCC_GetPCLK1Freq>
 800b99e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b9a0:	e1ed      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9a2:	4b84      	ldr	r3, [pc, #528]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9ae:	d107      	bne.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9b0:	f107 0318 	add.w	r3, r7, #24
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 fa05 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9be:	e1de      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9c4:	e1db      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9c6:	4b7b      	ldr	r3, [pc, #492]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9d2:	d107      	bne.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9d4:	f107 030c 	add.w	r3, r7, #12
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 fb47 	bl	800c06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9e2:	e1cc      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9e8:	e1c9      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9ea:	4b72      	ldr	r3, [pc, #456]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 0304 	and.w	r3, r3, #4
 800b9f2:	2b04      	cmp	r3, #4
 800b9f4:	d109      	bne.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9f6:	4b6f      	ldr	r3, [pc, #444]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	08db      	lsrs	r3, r3, #3
 800b9fc:	f003 0303 	and.w	r3, r3, #3
 800ba00:	4a6d      	ldr	r2, [pc, #436]	@ (800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ba02:	fa22 f303 	lsr.w	r3, r2, r3
 800ba06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba08:	e1b9      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba0e:	e1b6      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ba10:	4b68      	ldr	r3, [pc, #416]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba1c:	d102      	bne.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800ba1e:	4b67      	ldr	r3, [pc, #412]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ba20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba22:	e1ac      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba24:	2300      	movs	r3, #0
 800ba26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba28:	e1a9      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba2a:	4b62      	ldr	r3, [pc, #392]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba36:	d102      	bne.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ba38:	4b61      	ldr	r3, [pc, #388]	@ (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ba3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba3c:	e19f      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba42:	e19c      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ba44:	2300      	movs	r3, #0
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba48:	e199      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ba4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba4e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ba52:	430b      	orrs	r3, r1
 800ba54:	d173      	bne.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ba56:	4b57      	ldr	r3, [pc, #348]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ba5e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ba60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba66:	d02f      	beq.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ba68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba6e:	d863      	bhi.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ba70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d004      	beq.n	800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ba76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba7c:	d012      	beq.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ba7e:	e05b      	b.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba80:	4b4c      	ldr	r3, [pc, #304]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba8c:	d107      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba8e:	f107 0318 	add.w	r3, r7, #24
 800ba92:	4618      	mov	r0, r3
 800ba94:	f000 f996 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba9c:	e16f      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa2:	e16c      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800baa4:	4b43      	ldr	r3, [pc, #268]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800baac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bab0:	d107      	bne.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bab2:	f107 030c 	add.w	r3, r7, #12
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 fad8 	bl	800c06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bac0:	e15d      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bac2:	2300      	movs	r3, #0
 800bac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bac6:	e15a      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bac8:	4b3a      	ldr	r3, [pc, #232]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bacc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bad0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bad2:	4b38      	ldr	r3, [pc, #224]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f003 0304 	and.w	r3, r3, #4
 800bada:	2b04      	cmp	r3, #4
 800badc:	d10c      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800bade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d109      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bae4:	4b33      	ldr	r3, [pc, #204]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	08db      	lsrs	r3, r3, #3
 800baea:	f003 0303 	and.w	r3, r3, #3
 800baee:	4a32      	ldr	r2, [pc, #200]	@ (800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800baf0:	fa22 f303 	lsr.w	r3, r2, r3
 800baf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baf6:	e01e      	b.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800baf8:	4b2e      	ldr	r3, [pc, #184]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb04:	d106      	bne.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800bb06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb0c:	d102      	bne.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb0e:	4b2b      	ldr	r3, [pc, #172]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bb10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb12:	e010      	b.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb14:	4b27      	ldr	r3, [pc, #156]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb20:	d106      	bne.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800bb22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb28:	d102      	bne.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb2a:	4b25      	ldr	r3, [pc, #148]	@ (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb2e:	e002      	b.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bb34:	e123      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb36:	e122      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb3c:	e11f      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bb3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb42:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800bb46:	430b      	orrs	r3, r1
 800bb48:	d13c      	bne.n	800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bb4a:	4b1a      	ldr	r3, [pc, #104]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb52:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d004      	beq.n	800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb60:	d012      	beq.n	800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800bb62:	e023      	b.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb64:	4b13      	ldr	r3, [pc, #76]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb70:	d107      	bne.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 fbcc 	bl	800c314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb80:	e0fd      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb86:	e0fa      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb88:	4b0a      	ldr	r3, [pc, #40]	@ (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb94:	d107      	bne.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb96:	f107 0318 	add.w	r3, r7, #24
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 f912 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bba4:	e0eb      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbaa:	e0e8      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbb0:	e0e5      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bbb2:	bf00      	nop
 800bbb4:	58024400 	.word	0x58024400
 800bbb8:	03d09000 	.word	0x03d09000
 800bbbc:	003d0900 	.word	0x003d0900
 800bbc0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bbc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbc8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bbcc:	430b      	orrs	r3, r1
 800bbce:	f040 8085 	bne.w	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bbd2:	4b6d      	ldr	r3, [pc, #436]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bbd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbd6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800bbda:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbe2:	d06b      	beq.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbea:	d874      	bhi.n	800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbf2:	d056      	beq.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbfa:	d86c      	bhi.n	800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bc02:	d03b      	beq.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800bc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bc0a:	d864      	bhi.n	800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc12:	d021      	beq.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800bc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc1a:	d85c      	bhi.n	800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d004      	beq.n	800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800bc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc28:	d004      	beq.n	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800bc2a:	e054      	b.n	800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bc2c:	f000 f8b4 	bl	800bd98 <HAL_RCCEx_GetD3PCLK1Freq>
 800bc30:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc32:	e0a4      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc34:	4b54      	ldr	r3, [pc, #336]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc40:	d107      	bne.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc42:	f107 0318 	add.w	r3, r7, #24
 800bc46:	4618      	mov	r0, r3
 800bc48:	f000 f8bc 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc50:	e095      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc52:	2300      	movs	r3, #0
 800bc54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc56:	e092      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc58:	4b4b      	ldr	r3, [pc, #300]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc64:	d107      	bne.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc66:	f107 030c 	add.w	r3, r7, #12
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f000 f9fe 	bl	800c06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc74:	e083      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc7a:	e080      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc7c:	4b42      	ldr	r3, [pc, #264]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f003 0304 	and.w	r3, r3, #4
 800bc84:	2b04      	cmp	r3, #4
 800bc86:	d109      	bne.n	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc88:	4b3f      	ldr	r3, [pc, #252]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	08db      	lsrs	r3, r3, #3
 800bc8e:	f003 0303 	and.w	r3, r3, #3
 800bc92:	4a3e      	ldr	r2, [pc, #248]	@ (800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bc94:	fa22 f303 	lsr.w	r3, r2, r3
 800bc98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc9a:	e070      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bca0:	e06d      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bca2:	4b39      	ldr	r3, [pc, #228]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcae:	d102      	bne.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800bcb0:	4b37      	ldr	r3, [pc, #220]	@ (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bcb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcb4:	e063      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcba:	e060      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bcbc:	4b32      	ldr	r3, [pc, #200]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bcc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bcc8:	d102      	bne.n	800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800bcca:	4b32      	ldr	r3, [pc, #200]	@ (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcce:	e056      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcd4:	e053      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcda:	e050      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bcdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bce0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800bce4:	430b      	orrs	r3, r1
 800bce6:	d148      	bne.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bce8:	4b27      	ldr	r3, [pc, #156]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bcf0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcf8:	d02a      	beq.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd00:	d838      	bhi.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800bd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd0e:	d00d      	beq.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bd10:	e030      	b.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bd12:	4b1d      	ldr	r3, [pc, #116]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd1e:	d102      	bne.n	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800bd20:	4b1c      	ldr	r3, [pc, #112]	@ (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bd22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd24:	e02b      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd26:	2300      	movs	r3, #0
 800bd28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd2a:	e028      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd2c:	4b16      	ldr	r3, [pc, #88]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd38:	d107      	bne.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 fae8 	bl	800c314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd48:	e019      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd4e:	e016      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd50:	4b0d      	ldr	r3, [pc, #52]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd5c:	d107      	bne.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd5e:	f107 0318 	add.w	r3, r7, #24
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 f82e 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd6c:	e007      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd72:	e004      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd78:	e001      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bd7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3740      	adds	r7, #64	@ 0x40
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	58024400 	.word	0x58024400
 800bd8c:	03d09000 	.word	0x03d09000
 800bd90:	003d0900 	.word	0x003d0900
 800bd94:	007a1200 	.word	0x007a1200

0800bd98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bd9c:	f7fe f92e 	bl	8009ffc <HAL_RCC_GetHCLKFreq>
 800bda0:	4602      	mov	r2, r0
 800bda2:	4b06      	ldr	r3, [pc, #24]	@ (800bdbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	091b      	lsrs	r3, r3, #4
 800bda8:	f003 0307 	and.w	r3, r3, #7
 800bdac:	4904      	ldr	r1, [pc, #16]	@ (800bdc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bdae:	5ccb      	ldrb	r3, [r1, r3]
 800bdb0:	f003 031f 	and.w	r3, r3, #31
 800bdb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	58024400 	.word	0x58024400
 800bdc0:	08013c30 	.word	0x08013c30

0800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b089      	sub	sp, #36	@ 0x24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdcc:	4ba1      	ldr	r3, [pc, #644]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd0:	f003 0303 	and.w	r3, r3, #3
 800bdd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bdd6:	4b9f      	ldr	r3, [pc, #636]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdda:	0b1b      	lsrs	r3, r3, #12
 800bddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bde0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bde2:	4b9c      	ldr	r3, [pc, #624]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bde4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde6:	091b      	lsrs	r3, r3, #4
 800bde8:	f003 0301 	and.w	r3, r3, #1
 800bdec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bdee:	4b99      	ldr	r3, [pc, #612]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdf2:	08db      	lsrs	r3, r3, #3
 800bdf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdf8:	693a      	ldr	r2, [r7, #16]
 800bdfa:	fb02 f303 	mul.w	r3, r2, r3
 800bdfe:	ee07 3a90 	vmov	s15, r3
 800be02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 8111 	beq.w	800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	2b02      	cmp	r3, #2
 800be16:	f000 8083 	beq.w	800bf20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	f200 80a1 	bhi.w	800bf64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d003      	beq.n	800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d056      	beq.n	800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800be2e:	e099      	b.n	800bf64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be30:	4b88      	ldr	r3, [pc, #544]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f003 0320 	and.w	r3, r3, #32
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d02d      	beq.n	800be98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be3c:	4b85      	ldr	r3, [pc, #532]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	08db      	lsrs	r3, r3, #3
 800be42:	f003 0303 	and.w	r3, r3, #3
 800be46:	4a84      	ldr	r2, [pc, #528]	@ (800c058 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800be48:	fa22 f303 	lsr.w	r3, r2, r3
 800be4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	ee07 3a90 	vmov	s15, r3
 800be54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	ee07 3a90 	vmov	s15, r3
 800be5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be66:	4b7b      	ldr	r3, [pc, #492]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be6e:	ee07 3a90 	vmov	s15, r3
 800be72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be76:	ed97 6a03 	vldr	s12, [r7, #12]
 800be7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c05c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be96:	e087      	b.n	800bfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	ee07 3a90 	vmov	s15, r3
 800be9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c060 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beaa:	4b6a      	ldr	r3, [pc, #424]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800beac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beb2:	ee07 3a90 	vmov	s15, r3
 800beb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beba:	ed97 6a03 	vldr	s12, [r7, #12]
 800bebe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c05c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beda:	e065      	b.n	800bfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	ee07 3a90 	vmov	s15, r3
 800bee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bee6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800beea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beee:	4b59      	ldr	r3, [pc, #356]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef6:	ee07 3a90 	vmov	s15, r3
 800befa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800befe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c05c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf1e:	e043      	b.n	800bfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	ee07 3a90 	vmov	s15, r3
 800bf26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bf2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf32:	4b48      	ldr	r3, [pc, #288]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf42:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c05c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf62:	e021      	b.n	800bfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	ee07 3a90 	vmov	s15, r3
 800bf6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf76:	4b37      	ldr	r3, [pc, #220]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf86:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c05c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfa6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bfa8:	4b2a      	ldr	r3, [pc, #168]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfac:	0a5b      	lsrs	r3, r3, #9
 800bfae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfb2:	ee07 3a90 	vmov	s15, r3
 800bfb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfce:	ee17 2a90 	vmov	r2, s15
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bfd6:	4b1f      	ldr	r3, [pc, #124]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfda:	0c1b      	lsrs	r3, r3, #16
 800bfdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfe0:	ee07 3a90 	vmov	s15, r3
 800bfe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bff0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bffc:	ee17 2a90 	vmov	r2, s15
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c004:	4b13      	ldr	r3, [pc, #76]	@ (800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c008:	0e1b      	lsrs	r3, r3, #24
 800c00a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c00e:	ee07 3a90 	vmov	s15, r3
 800c012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c016:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c01a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c01e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c02a:	ee17 2a90 	vmov	r2, s15
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c032:	e008      	b.n	800c046 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	609a      	str	r2, [r3, #8]
}
 800c046:	bf00      	nop
 800c048:	3724      	adds	r7, #36	@ 0x24
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	58024400 	.word	0x58024400
 800c058:	03d09000 	.word	0x03d09000
 800c05c:	46000000 	.word	0x46000000
 800c060:	4c742400 	.word	0x4c742400
 800c064:	4a742400 	.word	0x4a742400
 800c068:	4af42400 	.word	0x4af42400

0800c06c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b089      	sub	sp, #36	@ 0x24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c074:	4ba1      	ldr	r3, [pc, #644]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c078:	f003 0303 	and.w	r3, r3, #3
 800c07c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c07e:	4b9f      	ldr	r3, [pc, #636]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c082:	0d1b      	lsrs	r3, r3, #20
 800c084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c088:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c08a:	4b9c      	ldr	r3, [pc, #624]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c08e:	0a1b      	lsrs	r3, r3, #8
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c096:	4b99      	ldr	r3, [pc, #612]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c09a:	08db      	lsrs	r3, r3, #3
 800c09c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	fb02 f303 	mul.w	r3, r2, r3
 800c0a6:	ee07 3a90 	vmov	s15, r3
 800c0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f000 8111 	beq.w	800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	f000 8083 	beq.w	800c1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	f200 80a1 	bhi.w	800c20c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d003      	beq.n	800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d056      	beq.n	800c184 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c0d6:	e099      	b.n	800c20c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0d8:	4b88      	ldr	r3, [pc, #544]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 0320 	and.w	r3, r3, #32
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d02d      	beq.n	800c140 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0e4:	4b85      	ldr	r3, [pc, #532]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	08db      	lsrs	r3, r3, #3
 800c0ea:	f003 0303 	and.w	r3, r3, #3
 800c0ee:	4a84      	ldr	r2, [pc, #528]	@ (800c300 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c0f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	ee07 3a90 	vmov	s15, r3
 800c0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	ee07 3a90 	vmov	s15, r3
 800c106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c10e:	4b7b      	ldr	r3, [pc, #492]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c116:	ee07 3a90 	vmov	s15, r3
 800c11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c122:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c12e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c13a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c13e:	e087      	b.n	800c250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	ee07 3a90 	vmov	s15, r3
 800c146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c308 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c152:	4b6a      	ldr	r3, [pc, #424]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c15a:	ee07 3a90 	vmov	s15, r3
 800c15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c162:	ed97 6a03 	vldr	s12, [r7, #12]
 800c166:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c17e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c182:	e065      	b.n	800c250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	ee07 3a90 	vmov	s15, r3
 800c18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c18e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c30c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c196:	4b59      	ldr	r3, [pc, #356]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1c6:	e043      	b.n	800c250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	ee07 3a90 	vmov	s15, r3
 800c1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1da:	4b48      	ldr	r3, [pc, #288]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1e2:	ee07 3a90 	vmov	s15, r3
 800c1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c20a:	e021      	b.n	800c250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	ee07 3a90 	vmov	s15, r3
 800c212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c216:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c30c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c21e:	4b37      	ldr	r3, [pc, #220]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c226:	ee07 3a90 	vmov	s15, r3
 800c22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c22e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c232:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c23e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c24a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c24e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c250:	4b2a      	ldr	r3, [pc, #168]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c254:	0a5b      	lsrs	r3, r3, #9
 800c256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c25a:	ee07 3a90 	vmov	s15, r3
 800c25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c26a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c26e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c276:	ee17 2a90 	vmov	r2, s15
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c27e:	4b1f      	ldr	r3, [pc, #124]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c282:	0c1b      	lsrs	r3, r3, #16
 800c284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c288:	ee07 3a90 	vmov	s15, r3
 800c28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c294:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c298:	edd7 6a07 	vldr	s13, [r7, #28]
 800c29c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2a4:	ee17 2a90 	vmov	r2, s15
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c2ac:	4b13      	ldr	r3, [pc, #76]	@ (800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2b0:	0e1b      	lsrs	r3, r3, #24
 800c2b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2b6:	ee07 3a90 	vmov	s15, r3
 800c2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2d2:	ee17 2a90 	vmov	r2, s15
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c2da:	e008      	b.n	800c2ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	609a      	str	r2, [r3, #8]
}
 800c2ee:	bf00      	nop
 800c2f0:	3724      	adds	r7, #36	@ 0x24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	58024400 	.word	0x58024400
 800c300:	03d09000 	.word	0x03d09000
 800c304:	46000000 	.word	0x46000000
 800c308:	4c742400 	.word	0x4c742400
 800c30c:	4a742400 	.word	0x4a742400
 800c310:	4af42400 	.word	0x4af42400

0800c314 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c314:	b480      	push	{r7}
 800c316:	b089      	sub	sp, #36	@ 0x24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c31c:	4ba0      	ldr	r3, [pc, #640]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c320:	f003 0303 	and.w	r3, r3, #3
 800c324:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c326:	4b9e      	ldr	r3, [pc, #632]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c32a:	091b      	lsrs	r3, r3, #4
 800c32c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c330:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c332:	4b9b      	ldr	r3, [pc, #620]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c336:	f003 0301 	and.w	r3, r3, #1
 800c33a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c33c:	4b98      	ldr	r3, [pc, #608]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c33e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c340:	08db      	lsrs	r3, r3, #3
 800c342:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c346:	693a      	ldr	r2, [r7, #16]
 800c348:	fb02 f303 	mul.w	r3, r2, r3
 800c34c:	ee07 3a90 	vmov	s15, r3
 800c350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c354:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f000 8111 	beq.w	800c582 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	2b02      	cmp	r3, #2
 800c364:	f000 8083 	beq.w	800c46e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	f200 80a1 	bhi.w	800c4b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d003      	beq.n	800c37e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d056      	beq.n	800c42a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c37c:	e099      	b.n	800c4b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c37e:	4b88      	ldr	r3, [pc, #544]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f003 0320 	and.w	r3, r3, #32
 800c386:	2b00      	cmp	r3, #0
 800c388:	d02d      	beq.n	800c3e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c38a:	4b85      	ldr	r3, [pc, #532]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	08db      	lsrs	r3, r3, #3
 800c390:	f003 0303 	and.w	r3, r3, #3
 800c394:	4a83      	ldr	r2, [pc, #524]	@ (800c5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c396:	fa22 f303 	lsr.w	r3, r2, r3
 800c39a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	ee07 3a90 	vmov	s15, r3
 800c3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	ee07 3a90 	vmov	s15, r3
 800c3ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3b4:	4b7a      	ldr	r3, [pc, #488]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3bc:	ee07 3a90 	vmov	s15, r3
 800c3c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3c8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c3e4:	e087      	b.n	800c4f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	ee07 3a90 	vmov	s15, r3
 800c3ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c5ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3f8:	4b69      	ldr	r3, [pc, #420]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c400:	ee07 3a90 	vmov	s15, r3
 800c404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c408:	ed97 6a03 	vldr	s12, [r7, #12]
 800c40c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c418:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c41c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c420:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c424:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c428:	e065      	b.n	800c4f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	ee07 3a90 	vmov	s15, r3
 800c430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c434:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c5b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c43c:	4b58      	ldr	r3, [pc, #352]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c444:	ee07 3a90 	vmov	s15, r3
 800c448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c44c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c450:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c45c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c464:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c468:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c46c:	e043      	b.n	800c4f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	ee07 3a90 	vmov	s15, r3
 800c474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c478:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c5b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c47c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c480:	4b47      	ldr	r3, [pc, #284]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c488:	ee07 3a90 	vmov	s15, r3
 800c48c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c490:	ed97 6a03 	vldr	s12, [r7, #12]
 800c494:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c49c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4b0:	e021      	b.n	800c4f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	ee07 3a90 	vmov	s15, r3
 800c4b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c5ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c4c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4c4:	4b36      	ldr	r3, [pc, #216]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4cc:	ee07 3a90 	vmov	s15, r3
 800c4d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c4dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c4f6:	4b2a      	ldr	r3, [pc, #168]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4fa:	0a5b      	lsrs	r3, r3, #9
 800c4fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c500:	ee07 3a90 	vmov	s15, r3
 800c504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c508:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c50c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c510:	edd7 6a07 	vldr	s13, [r7, #28]
 800c514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c51c:	ee17 2a90 	vmov	r2, s15
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c524:	4b1e      	ldr	r3, [pc, #120]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c528:	0c1b      	lsrs	r3, r3, #16
 800c52a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c52e:	ee07 3a90 	vmov	s15, r3
 800c532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c536:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c53a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c53e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c54a:	ee17 2a90 	vmov	r2, s15
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c552:	4b13      	ldr	r3, [pc, #76]	@ (800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c556:	0e1b      	lsrs	r3, r3, #24
 800c558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c55c:	ee07 3a90 	vmov	s15, r3
 800c560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c564:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c568:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c56c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c578:	ee17 2a90 	vmov	r2, s15
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c580:	e008      	b.n	800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	609a      	str	r2, [r3, #8]
}
 800c594:	bf00      	nop
 800c596:	3724      	adds	r7, #36	@ 0x24
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr
 800c5a0:	58024400 	.word	0x58024400
 800c5a4:	03d09000 	.word	0x03d09000
 800c5a8:	46000000 	.word	0x46000000
 800c5ac:	4c742400 	.word	0x4c742400
 800c5b0:	4a742400 	.word	0x4a742400
 800c5b4:	4af42400 	.word	0x4af42400

0800c5b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c5c6:	4b53      	ldr	r3, [pc, #332]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ca:	f003 0303 	and.w	r3, r3, #3
 800c5ce:	2b03      	cmp	r3, #3
 800c5d0:	d101      	bne.n	800c5d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e099      	b.n	800c70a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c5d6:	4b4f      	ldr	r3, [pc, #316]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a4e      	ldr	r2, [pc, #312]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c5dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c5e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5e2:	f7f7 faeb 	bl	8003bbc <HAL_GetTick>
 800c5e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5e8:	e008      	b.n	800c5fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c5ea:	f7f7 fae7 	bl	8003bbc <HAL_GetTick>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d901      	bls.n	800c5fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e086      	b.n	800c70a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5fc:	4b45      	ldr	r3, [pc, #276]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1f0      	bne.n	800c5ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c608:	4b42      	ldr	r3, [pc, #264]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c60c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	031b      	lsls	r3, r3, #12
 800c616:	493f      	ldr	r1, [pc, #252]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c618:	4313      	orrs	r3, r2
 800c61a:	628b      	str	r3, [r1, #40]	@ 0x28
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	3b01      	subs	r3, #1
 800c622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	025b      	lsls	r3, r3, #9
 800c62e:	b29b      	uxth	r3, r3
 800c630:	431a      	orrs	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	3b01      	subs	r3, #1
 800c638:	041b      	lsls	r3, r3, #16
 800c63a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c63e:	431a      	orrs	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	3b01      	subs	r3, #1
 800c646:	061b      	lsls	r3, r3, #24
 800c648:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c64c:	4931      	ldr	r1, [pc, #196]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c64e:	4313      	orrs	r3, r2
 800c650:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c652:	4b30      	ldr	r3, [pc, #192]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c656:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	695b      	ldr	r3, [r3, #20]
 800c65e:	492d      	ldr	r1, [pc, #180]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c660:	4313      	orrs	r3, r2
 800c662:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c664:	4b2b      	ldr	r3, [pc, #172]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c668:	f023 0220 	bic.w	r2, r3, #32
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	699b      	ldr	r3, [r3, #24]
 800c670:	4928      	ldr	r1, [pc, #160]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c672:	4313      	orrs	r3, r2
 800c674:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c676:	4b27      	ldr	r3, [pc, #156]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c67a:	4a26      	ldr	r2, [pc, #152]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c67c:	f023 0310 	bic.w	r3, r3, #16
 800c680:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c682:	4b24      	ldr	r3, [pc, #144]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c686:	4b24      	ldr	r3, [pc, #144]	@ (800c718 <RCCEx_PLL2_Config+0x160>)
 800c688:	4013      	ands	r3, r2
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	69d2      	ldr	r2, [r2, #28]
 800c68e:	00d2      	lsls	r2, r2, #3
 800c690:	4920      	ldr	r1, [pc, #128]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c692:	4313      	orrs	r3, r2
 800c694:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c696:	4b1f      	ldr	r3, [pc, #124]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c69a:	4a1e      	ldr	r2, [pc, #120]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c69c:	f043 0310 	orr.w	r3, r3, #16
 800c6a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d106      	bne.n	800c6b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c6a8:	4b1a      	ldr	r3, [pc, #104]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ac:	4a19      	ldr	r2, [pc, #100]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c6ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c6b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c6b4:	e00f      	b.n	800c6d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d106      	bne.n	800c6ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c6bc:	4b15      	ldr	r3, [pc, #84]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c0:	4a14      	ldr	r2, [pc, #80]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c6c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c6c8:	e005      	b.n	800c6d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6ca:	4b12      	ldr	r3, [pc, #72]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ce:	4a11      	ldr	r2, [pc, #68]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c6d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c6d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c6d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a0e      	ldr	r2, [pc, #56]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c6dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c6e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6e2:	f7f7 fa6b 	bl	8003bbc <HAL_GetTick>
 800c6e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6e8:	e008      	b.n	800c6fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c6ea:	f7f7 fa67 	bl	8003bbc <HAL_GetTick>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d901      	bls.n	800c6fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e006      	b.n	800c70a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6fc:	4b05      	ldr	r3, [pc, #20]	@ (800c714 <RCCEx_PLL2_Config+0x15c>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c704:	2b00      	cmp	r3, #0
 800c706:	d0f0      	beq.n	800c6ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c708:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	58024400 	.word	0x58024400
 800c718:	ffff0007 	.word	0xffff0007

0800c71c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c726:	2300      	movs	r3, #0
 800c728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c72a:	4b53      	ldr	r3, [pc, #332]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c72c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c72e:	f003 0303 	and.w	r3, r3, #3
 800c732:	2b03      	cmp	r3, #3
 800c734:	d101      	bne.n	800c73a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c736:	2301      	movs	r3, #1
 800c738:	e099      	b.n	800c86e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c73a:	4b4f      	ldr	r3, [pc, #316]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a4e      	ldr	r2, [pc, #312]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c740:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c746:	f7f7 fa39 	bl	8003bbc <HAL_GetTick>
 800c74a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c74c:	e008      	b.n	800c760 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c74e:	f7f7 fa35 	bl	8003bbc <HAL_GetTick>
 800c752:	4602      	mov	r2, r0
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d901      	bls.n	800c760 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c75c:	2303      	movs	r3, #3
 800c75e:	e086      	b.n	800c86e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c760:	4b45      	ldr	r3, [pc, #276]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d1f0      	bne.n	800c74e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c76c:	4b42      	ldr	r3, [pc, #264]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c770:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	051b      	lsls	r3, r3, #20
 800c77a:	493f      	ldr	r1, [pc, #252]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c77c:	4313      	orrs	r3, r2
 800c77e:	628b      	str	r3, [r1, #40]	@ 0x28
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	3b01      	subs	r3, #1
 800c786:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	3b01      	subs	r3, #1
 800c790:	025b      	lsls	r3, r3, #9
 800c792:	b29b      	uxth	r3, r3
 800c794:	431a      	orrs	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	041b      	lsls	r3, r3, #16
 800c79e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	061b      	lsls	r3, r3, #24
 800c7ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c7b0:	4931      	ldr	r1, [pc, #196]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c7b6:	4b30      	ldr	r3, [pc, #192]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	492d      	ldr	r1, [pc, #180]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c7c8:	4b2b      	ldr	r3, [pc, #172]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	699b      	ldr	r3, [r3, #24]
 800c7d4:	4928      	ldr	r1, [pc, #160]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c7da:	4b27      	ldr	r3, [pc, #156]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7de:	4a26      	ldr	r2, [pc, #152]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c7e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7e6:	4b24      	ldr	r3, [pc, #144]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c7e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7ea:	4b24      	ldr	r3, [pc, #144]	@ (800c87c <RCCEx_PLL3_Config+0x160>)
 800c7ec:	4013      	ands	r3, r2
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	69d2      	ldr	r2, [r2, #28]
 800c7f2:	00d2      	lsls	r2, r2, #3
 800c7f4:	4920      	ldr	r1, [pc, #128]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c7fa:	4b1f      	ldr	r3, [pc, #124]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c804:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d106      	bne.n	800c81a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c80c:	4b1a      	ldr	r3, [pc, #104]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c810:	4a19      	ldr	r2, [pc, #100]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c812:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c816:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c818:	e00f      	b.n	800c83a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d106      	bne.n	800c82e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c820:	4b15      	ldr	r3, [pc, #84]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c824:	4a14      	ldr	r2, [pc, #80]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c826:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c82a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c82c:	e005      	b.n	800c83a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c82e:	4b12      	ldr	r3, [pc, #72]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c832:	4a11      	ldr	r2, [pc, #68]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c834:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c838:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c83a:	4b0f      	ldr	r3, [pc, #60]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a0e      	ldr	r2, [pc, #56]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c846:	f7f7 f9b9 	bl	8003bbc <HAL_GetTick>
 800c84a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c84c:	e008      	b.n	800c860 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c84e:	f7f7 f9b5 	bl	8003bbc <HAL_GetTick>
 800c852:	4602      	mov	r2, r0
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d901      	bls.n	800c860 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c85c:	2303      	movs	r3, #3
 800c85e:	e006      	b.n	800c86e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c860:	4b05      	ldr	r3, [pc, #20]	@ (800c878 <RCCEx_PLL3_Config+0x15c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d0f0      	beq.n	800c84e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	58024400 	.word	0x58024400
 800c87c:	ffff0007 	.word	0xffff0007

0800c880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e049      	b.n	800c926 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d106      	bne.n	800c8ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7f6 fc2c 	bl	8003104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	4619      	mov	r1, r3
 800c8be:	4610      	mov	r0, r2
 800c8c0:	f000 fdf4 	bl	800d4ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
	...

0800c930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b01      	cmp	r3, #1
 800c942:	d001      	beq.n	800c948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c944:	2301      	movs	r3, #1
 800c946:	e05e      	b.n	800ca06 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2202      	movs	r2, #2
 800c94c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	68da      	ldr	r2, [r3, #12]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f042 0201 	orr.w	r2, r2, #1
 800c95e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a2b      	ldr	r2, [pc, #172]	@ (800ca14 <HAL_TIM_Base_Start_IT+0xe4>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d02c      	beq.n	800c9c4 <HAL_TIM_Base_Start_IT+0x94>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c972:	d027      	beq.n	800c9c4 <HAL_TIM_Base_Start_IT+0x94>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a27      	ldr	r2, [pc, #156]	@ (800ca18 <HAL_TIM_Base_Start_IT+0xe8>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d022      	beq.n	800c9c4 <HAL_TIM_Base_Start_IT+0x94>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a26      	ldr	r2, [pc, #152]	@ (800ca1c <HAL_TIM_Base_Start_IT+0xec>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d01d      	beq.n	800c9c4 <HAL_TIM_Base_Start_IT+0x94>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a24      	ldr	r2, [pc, #144]	@ (800ca20 <HAL_TIM_Base_Start_IT+0xf0>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d018      	beq.n	800c9c4 <HAL_TIM_Base_Start_IT+0x94>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a23      	ldr	r2, [pc, #140]	@ (800ca24 <HAL_TIM_Base_Start_IT+0xf4>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d013      	beq.n	800c9c4 <HAL_TIM_Base_Start_IT+0x94>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a21      	ldr	r2, [pc, #132]	@ (800ca28 <HAL_TIM_Base_Start_IT+0xf8>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d00e      	beq.n	800c9c4 <HAL_TIM_Base_Start_IT+0x94>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a20      	ldr	r2, [pc, #128]	@ (800ca2c <HAL_TIM_Base_Start_IT+0xfc>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d009      	beq.n	800c9c4 <HAL_TIM_Base_Start_IT+0x94>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a1e      	ldr	r2, [pc, #120]	@ (800ca30 <HAL_TIM_Base_Start_IT+0x100>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d004      	beq.n	800c9c4 <HAL_TIM_Base_Start_IT+0x94>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a1d      	ldr	r2, [pc, #116]	@ (800ca34 <HAL_TIM_Base_Start_IT+0x104>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d115      	bne.n	800c9f0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	689a      	ldr	r2, [r3, #8]
 800c9ca:	4b1b      	ldr	r3, [pc, #108]	@ (800ca38 <HAL_TIM_Base_Start_IT+0x108>)
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2b06      	cmp	r3, #6
 800c9d4:	d015      	beq.n	800ca02 <HAL_TIM_Base_Start_IT+0xd2>
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9dc:	d011      	beq.n	800ca02 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f042 0201 	orr.w	r2, r2, #1
 800c9ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9ee:	e008      	b.n	800ca02 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f042 0201 	orr.w	r2, r2, #1
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	e000      	b.n	800ca04 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	40010000 	.word	0x40010000
 800ca18:	40000400 	.word	0x40000400
 800ca1c:	40000800 	.word	0x40000800
 800ca20:	40000c00 	.word	0x40000c00
 800ca24:	40010400 	.word	0x40010400
 800ca28:	40001800 	.word	0x40001800
 800ca2c:	40014000 	.word	0x40014000
 800ca30:	4000e000 	.word	0x4000e000
 800ca34:	4000e400 	.word	0x4000e400
 800ca38:	00010007 	.word	0x00010007

0800ca3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d101      	bne.n	800ca4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e049      	b.n	800cae2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d106      	bne.n	800ca68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f7f6 fafe 	bl	8003064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2202      	movs	r2, #2
 800ca6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	3304      	adds	r3, #4
 800ca78:	4619      	mov	r1, r3
 800ca7a:	4610      	mov	r0, r2
 800ca7c:	f000 fd16 	bl	800d4ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
	...

0800caec <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800caf6:	2300      	movs	r3, #0
 800caf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d109      	bne.n	800cb14 <HAL_TIM_PWM_Start_IT+0x28>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	bf14      	ite	ne
 800cb0c:	2301      	movne	r3, #1
 800cb0e:	2300      	moveq	r3, #0
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	e03c      	b.n	800cb8e <HAL_TIM_PWM_Start_IT+0xa2>
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	2b04      	cmp	r3, #4
 800cb18:	d109      	bne.n	800cb2e <HAL_TIM_PWM_Start_IT+0x42>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	bf14      	ite	ne
 800cb26:	2301      	movne	r3, #1
 800cb28:	2300      	moveq	r3, #0
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	e02f      	b.n	800cb8e <HAL_TIM_PWM_Start_IT+0xa2>
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	2b08      	cmp	r3, #8
 800cb32:	d109      	bne.n	800cb48 <HAL_TIM_PWM_Start_IT+0x5c>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	bf14      	ite	ne
 800cb40:	2301      	movne	r3, #1
 800cb42:	2300      	moveq	r3, #0
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	e022      	b.n	800cb8e <HAL_TIM_PWM_Start_IT+0xa2>
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	2b0c      	cmp	r3, #12
 800cb4c:	d109      	bne.n	800cb62 <HAL_TIM_PWM_Start_IT+0x76>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	bf14      	ite	ne
 800cb5a:	2301      	movne	r3, #1
 800cb5c:	2300      	moveq	r3, #0
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	e015      	b.n	800cb8e <HAL_TIM_PWM_Start_IT+0xa2>
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2b10      	cmp	r3, #16
 800cb66:	d109      	bne.n	800cb7c <HAL_TIM_PWM_Start_IT+0x90>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	bf14      	ite	ne
 800cb74:	2301      	movne	r3, #1
 800cb76:	2300      	moveq	r3, #0
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	e008      	b.n	800cb8e <HAL_TIM_PWM_Start_IT+0xa2>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	bf14      	ite	ne
 800cb88:	2301      	movne	r3, #1
 800cb8a:	2300      	moveq	r3, #0
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d001      	beq.n	800cb96 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e0f6      	b.n	800cd84 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d104      	bne.n	800cba6 <HAL_TIM_PWM_Start_IT+0xba>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2202      	movs	r2, #2
 800cba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cba4:	e023      	b.n	800cbee <HAL_TIM_PWM_Start_IT+0x102>
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	2b04      	cmp	r3, #4
 800cbaa:	d104      	bne.n	800cbb6 <HAL_TIM_PWM_Start_IT+0xca>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2202      	movs	r2, #2
 800cbb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cbb4:	e01b      	b.n	800cbee <HAL_TIM_PWM_Start_IT+0x102>
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	2b08      	cmp	r3, #8
 800cbba:	d104      	bne.n	800cbc6 <HAL_TIM_PWM_Start_IT+0xda>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2202      	movs	r2, #2
 800cbc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cbc4:	e013      	b.n	800cbee <HAL_TIM_PWM_Start_IT+0x102>
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	2b0c      	cmp	r3, #12
 800cbca:	d104      	bne.n	800cbd6 <HAL_TIM_PWM_Start_IT+0xea>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2202      	movs	r2, #2
 800cbd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cbd4:	e00b      	b.n	800cbee <HAL_TIM_PWM_Start_IT+0x102>
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	2b10      	cmp	r3, #16
 800cbda:	d104      	bne.n	800cbe6 <HAL_TIM_PWM_Start_IT+0xfa>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2202      	movs	r2, #2
 800cbe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cbe4:	e003      	b.n	800cbee <HAL_TIM_PWM_Start_IT+0x102>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2202      	movs	r2, #2
 800cbea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2b0c      	cmp	r3, #12
 800cbf2:	d841      	bhi.n	800cc78 <HAL_TIM_PWM_Start_IT+0x18c>
 800cbf4:	a201      	add	r2, pc, #4	@ (adr r2, 800cbfc <HAL_TIM_PWM_Start_IT+0x110>)
 800cbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbfa:	bf00      	nop
 800cbfc:	0800cc31 	.word	0x0800cc31
 800cc00:	0800cc79 	.word	0x0800cc79
 800cc04:	0800cc79 	.word	0x0800cc79
 800cc08:	0800cc79 	.word	0x0800cc79
 800cc0c:	0800cc43 	.word	0x0800cc43
 800cc10:	0800cc79 	.word	0x0800cc79
 800cc14:	0800cc79 	.word	0x0800cc79
 800cc18:	0800cc79 	.word	0x0800cc79
 800cc1c:	0800cc55 	.word	0x0800cc55
 800cc20:	0800cc79 	.word	0x0800cc79
 800cc24:	0800cc79 	.word	0x0800cc79
 800cc28:	0800cc79 	.word	0x0800cc79
 800cc2c:	0800cc67 	.word	0x0800cc67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68da      	ldr	r2, [r3, #12]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f042 0202 	orr.w	r2, r2, #2
 800cc3e:	60da      	str	r2, [r3, #12]
      break;
 800cc40:	e01d      	b.n	800cc7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68da      	ldr	r2, [r3, #12]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f042 0204 	orr.w	r2, r2, #4
 800cc50:	60da      	str	r2, [r3, #12]
      break;
 800cc52:	e014      	b.n	800cc7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	68da      	ldr	r2, [r3, #12]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f042 0208 	orr.w	r2, r2, #8
 800cc62:	60da      	str	r2, [r3, #12]
      break;
 800cc64:	e00b      	b.n	800cc7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68da      	ldr	r2, [r3, #12]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f042 0210 	orr.w	r2, r2, #16
 800cc74:	60da      	str	r2, [r3, #12]
      break;
 800cc76:	e002      	b.n	800cc7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	73fb      	strb	r3, [r7, #15]
      break;
 800cc7c:	bf00      	nop
  }

  if (status == HAL_OK)
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d17e      	bne.n	800cd82 <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f000 ff8f 	bl	800dbb0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a3d      	ldr	r2, [pc, #244]	@ (800cd8c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d013      	beq.n	800ccc4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a3b      	ldr	r2, [pc, #236]	@ (800cd90 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d00e      	beq.n	800ccc4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a3a      	ldr	r2, [pc, #232]	@ (800cd94 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d009      	beq.n	800ccc4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a38      	ldr	r2, [pc, #224]	@ (800cd98 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d004      	beq.n	800ccc4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a37      	ldr	r2, [pc, #220]	@ (800cd9c <HAL_TIM_PWM_Start_IT+0x2b0>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d101      	bne.n	800ccc8 <HAL_TIM_PWM_Start_IT+0x1dc>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e000      	b.n	800ccca <HAL_TIM_PWM_Start_IT+0x1de>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d007      	beq.n	800ccde <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ccdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a2a      	ldr	r2, [pc, #168]	@ (800cd8c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d02c      	beq.n	800cd42 <HAL_TIM_PWM_Start_IT+0x256>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccf0:	d027      	beq.n	800cd42 <HAL_TIM_PWM_Start_IT+0x256>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a2a      	ldr	r2, [pc, #168]	@ (800cda0 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d022      	beq.n	800cd42 <HAL_TIM_PWM_Start_IT+0x256>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a28      	ldr	r2, [pc, #160]	@ (800cda4 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d01d      	beq.n	800cd42 <HAL_TIM_PWM_Start_IT+0x256>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a27      	ldr	r2, [pc, #156]	@ (800cda8 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d018      	beq.n	800cd42 <HAL_TIM_PWM_Start_IT+0x256>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a1e      	ldr	r2, [pc, #120]	@ (800cd90 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d013      	beq.n	800cd42 <HAL_TIM_PWM_Start_IT+0x256>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a23      	ldr	r2, [pc, #140]	@ (800cdac <HAL_TIM_PWM_Start_IT+0x2c0>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d00e      	beq.n	800cd42 <HAL_TIM_PWM_Start_IT+0x256>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a1a      	ldr	r2, [pc, #104]	@ (800cd94 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d009      	beq.n	800cd42 <HAL_TIM_PWM_Start_IT+0x256>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a1f      	ldr	r2, [pc, #124]	@ (800cdb0 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d004      	beq.n	800cd42 <HAL_TIM_PWM_Start_IT+0x256>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a1d      	ldr	r2, [pc, #116]	@ (800cdb4 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d115      	bne.n	800cd6e <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	689a      	ldr	r2, [r3, #8]
 800cd48:	4b1b      	ldr	r3, [pc, #108]	@ (800cdb8 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2b06      	cmp	r3, #6
 800cd52:	d015      	beq.n	800cd80 <HAL_TIM_PWM_Start_IT+0x294>
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd5a:	d011      	beq.n	800cd80 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f042 0201 	orr.w	r2, r2, #1
 800cd6a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd6c:	e008      	b.n	800cd80 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f042 0201 	orr.w	r2, r2, #1
 800cd7c:	601a      	str	r2, [r3, #0]
 800cd7e:	e000      	b.n	800cd82 <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd80:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3710      	adds	r7, #16
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	40010000 	.word	0x40010000
 800cd90:	40010400 	.word	0x40010400
 800cd94:	40014000 	.word	0x40014000
 800cd98:	40014400 	.word	0x40014400
 800cd9c:	40014800 	.word	0x40014800
 800cda0:	40000400 	.word	0x40000400
 800cda4:	40000800 	.word	0x40000800
 800cda8:	40000c00 	.word	0x40000c00
 800cdac:	40001800 	.word	0x40001800
 800cdb0:	4000e000 	.word	0x4000e000
 800cdb4:	4000e400 	.word	0x4000e400
 800cdb8:	00010007 	.word	0x00010007

0800cdbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e08f      	b.n	800cef0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d106      	bne.n	800cdea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7f5 ff79 	bl	8002cdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2202      	movs	r2, #2
 800cdee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	6899      	ldr	r1, [r3, #8]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	4b3e      	ldr	r3, [pc, #248]	@ (800cef8 <HAL_TIM_Encoder_Init+0x13c>)
 800cdfe:	400b      	ands	r3, r1
 800ce00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	f000 fb4d 	bl	800d4ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	699b      	ldr	r3, [r3, #24]
 800ce20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	6a1b      	ldr	r3, [r3, #32]
 800ce28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	697a      	ldr	r2, [r7, #20]
 800ce30:	4313      	orrs	r3, r2
 800ce32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ce34:	693a      	ldr	r2, [r7, #16]
 800ce36:	4b31      	ldr	r3, [pc, #196]	@ (800cefc <HAL_TIM_Encoder_Init+0x140>)
 800ce38:	4013      	ands	r3, r2
 800ce3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	689a      	ldr	r2, [r3, #8]
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	021b      	lsls	r3, r3, #8
 800ce46:	4313      	orrs	r3, r2
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ce4e:	693a      	ldr	r2, [r7, #16]
 800ce50:	4b2b      	ldr	r3, [pc, #172]	@ (800cf00 <HAL_TIM_Encoder_Init+0x144>)
 800ce52:	4013      	ands	r3, r2
 800ce54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ce56:	693a      	ldr	r2, [r7, #16]
 800ce58:	4b2a      	ldr	r3, [pc, #168]	@ (800cf04 <HAL_TIM_Encoder_Init+0x148>)
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	68da      	ldr	r2, [r3, #12]
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	69db      	ldr	r3, [r3, #28]
 800ce66:	021b      	lsls	r3, r3, #8
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	011a      	lsls	r2, r3, #4
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	6a1b      	ldr	r3, [r3, #32]
 800ce7a:	031b      	lsls	r3, r3, #12
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	693a      	ldr	r2, [r7, #16]
 800ce80:	4313      	orrs	r3, r2
 800ce82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800ce8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800ce92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	685a      	ldr	r2, [r3, #4]
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	695b      	ldr	r3, [r3, #20]
 800ce9c:	011b      	lsls	r3, r3, #4
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	68fa      	ldr	r2, [r7, #12]
 800cebc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2201      	movs	r2, #1
 800ceca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2201      	movs	r2, #1
 800cee2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2201      	movs	r2, #1
 800ceea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3718      	adds	r7, #24
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	fffebff8 	.word	0xfffebff8
 800cefc:	fffffcfc 	.word	0xfffffcfc
 800cf00:	fffff3f3 	.word	0xfffff3f3
 800cf04:	ffff0f0f 	.word	0xffff0f0f

0800cf08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cf18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cf20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d110      	bne.n	800cf5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf38:	7bfb      	ldrb	r3, [r7, #15]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d102      	bne.n	800cf44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800cf3e:	7b7b      	ldrb	r3, [r7, #13]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d001      	beq.n	800cf48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	e069      	b.n	800d01c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2202      	movs	r2, #2
 800cf54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf58:	e031      	b.n	800cfbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2b04      	cmp	r3, #4
 800cf5e:	d110      	bne.n	800cf82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf60:	7bbb      	ldrb	r3, [r7, #14]
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d102      	bne.n	800cf6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cf66:	7b3b      	ldrb	r3, [r7, #12]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d001      	beq.n	800cf70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e055      	b.n	800d01c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2202      	movs	r2, #2
 800cf74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf80:	e01d      	b.n	800cfbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf82:	7bfb      	ldrb	r3, [r7, #15]
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d108      	bne.n	800cf9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf88:	7bbb      	ldrb	r3, [r7, #14]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d105      	bne.n	800cf9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf8e:	7b7b      	ldrb	r3, [r7, #13]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d102      	bne.n	800cf9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cf94:	7b3b      	ldrb	r3, [r7, #12]
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d001      	beq.n	800cf9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e03e      	b.n	800d01c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2202      	movs	r2, #2
 800cfa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2202      	movs	r2, #2
 800cfba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d003      	beq.n	800cfcc <HAL_TIM_Encoder_Start+0xc4>
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	2b04      	cmp	r3, #4
 800cfc8:	d008      	beq.n	800cfdc <HAL_TIM_Encoder_Start+0xd4>
 800cfca:	e00f      	b.n	800cfec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f000 fdeb 	bl	800dbb0 <TIM_CCxChannelCmd>
      break;
 800cfda:	e016      	b.n	800d00a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	2104      	movs	r1, #4
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f000 fde3 	bl	800dbb0 <TIM_CCxChannelCmd>
      break;
 800cfea:	e00e      	b.n	800d00a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2201      	movs	r2, #1
 800cff2:	2100      	movs	r1, #0
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 fddb 	bl	800dbb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2201      	movs	r2, #1
 800d000:	2104      	movs	r1, #4
 800d002:	4618      	mov	r0, r3
 800d004:	f000 fdd4 	bl	800dbb0 <TIM_CCxChannelCmd>
      break;
 800d008:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f042 0201 	orr.w	r2, r2, #1
 800d018:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d01a:	2300      	movs	r3, #0
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	691b      	ldr	r3, [r3, #16]
 800d03a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	f003 0302 	and.w	r3, r3, #2
 800d042:	2b00      	cmp	r3, #0
 800d044:	d020      	beq.n	800d088 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f003 0302 	and.w	r3, r3, #2
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d01b      	beq.n	800d088 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f06f 0202 	mvn.w	r2, #2
 800d058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2201      	movs	r2, #1
 800d05e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	699b      	ldr	r3, [r3, #24]
 800d066:	f003 0303 	and.w	r3, r3, #3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d003      	beq.n	800d076 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 f9fe 	bl	800d470 <HAL_TIM_IC_CaptureCallback>
 800d074:	e005      	b.n	800d082 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f9f0 	bl	800d45c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 fa01 	bl	800d484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	f003 0304 	and.w	r3, r3, #4
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d020      	beq.n	800d0d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f003 0304 	and.w	r3, r3, #4
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d01b      	beq.n	800d0d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f06f 0204 	mvn.w	r2, #4
 800d0a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2202      	movs	r2, #2
 800d0aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d003      	beq.n	800d0c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 f9d8 	bl	800d470 <HAL_TIM_IC_CaptureCallback>
 800d0c0:	e005      	b.n	800d0ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f9ca 	bl	800d45c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f9db 	bl	800d484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	f003 0308 	and.w	r3, r3, #8
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d020      	beq.n	800d120 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f003 0308 	and.w	r3, r3, #8
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d01b      	beq.n	800d120 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f06f 0208 	mvn.w	r2, #8
 800d0f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2204      	movs	r2, #4
 800d0f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	69db      	ldr	r3, [r3, #28]
 800d0fe:	f003 0303 	and.w	r3, r3, #3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d003      	beq.n	800d10e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f9b2 	bl	800d470 <HAL_TIM_IC_CaptureCallback>
 800d10c:	e005      	b.n	800d11a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f9a4 	bl	800d45c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f9b5 	bl	800d484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	f003 0310 	and.w	r3, r3, #16
 800d126:	2b00      	cmp	r3, #0
 800d128:	d020      	beq.n	800d16c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f003 0310 	and.w	r3, r3, #16
 800d130:	2b00      	cmp	r3, #0
 800d132:	d01b      	beq.n	800d16c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f06f 0210 	mvn.w	r2, #16
 800d13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2208      	movs	r2, #8
 800d142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	69db      	ldr	r3, [r3, #28]
 800d14a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d003      	beq.n	800d15a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 f98c 	bl	800d470 <HAL_TIM_IC_CaptureCallback>
 800d158:	e005      	b.n	800d166 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f97e 	bl	800d45c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 f98f 	bl	800d484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	f003 0301 	and.w	r3, r3, #1
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00c      	beq.n	800d190 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f003 0301 	and.w	r3, r3, #1
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d007      	beq.n	800d190 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f06f 0201 	mvn.w	r2, #1
 800d188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f7f5 fae0 	bl	8002750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d196:	2b00      	cmp	r3, #0
 800d198:	d104      	bne.n	800d1a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d00c      	beq.n	800d1be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d007      	beq.n	800d1be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d1b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 fe51 	bl	800de60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00c      	beq.n	800d1e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d007      	beq.n	800d1e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d1da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fe49 	bl	800de74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00c      	beq.n	800d206 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d007      	beq.n	800d206 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 f949 	bl	800d498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	f003 0320 	and.w	r3, r3, #32
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00c      	beq.n	800d22a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f003 0320 	and.w	r3, r3, #32
 800d216:	2b00      	cmp	r3, #0
 800d218:	d007      	beq.n	800d22a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f06f 0220 	mvn.w	r2, #32
 800d222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 fe11 	bl	800de4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d22a:	bf00      	nop
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
	...

0800d234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b086      	sub	sp, #24
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d101      	bne.n	800d252 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d24e:	2302      	movs	r3, #2
 800d250:	e0ff      	b.n	800d452 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2201      	movs	r2, #1
 800d256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2b14      	cmp	r3, #20
 800d25e:	f200 80f0 	bhi.w	800d442 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d262:	a201      	add	r2, pc, #4	@ (adr r2, 800d268 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d268:	0800d2bd 	.word	0x0800d2bd
 800d26c:	0800d443 	.word	0x0800d443
 800d270:	0800d443 	.word	0x0800d443
 800d274:	0800d443 	.word	0x0800d443
 800d278:	0800d2fd 	.word	0x0800d2fd
 800d27c:	0800d443 	.word	0x0800d443
 800d280:	0800d443 	.word	0x0800d443
 800d284:	0800d443 	.word	0x0800d443
 800d288:	0800d33f 	.word	0x0800d33f
 800d28c:	0800d443 	.word	0x0800d443
 800d290:	0800d443 	.word	0x0800d443
 800d294:	0800d443 	.word	0x0800d443
 800d298:	0800d37f 	.word	0x0800d37f
 800d29c:	0800d443 	.word	0x0800d443
 800d2a0:	0800d443 	.word	0x0800d443
 800d2a4:	0800d443 	.word	0x0800d443
 800d2a8:	0800d3c1 	.word	0x0800d3c1
 800d2ac:	0800d443 	.word	0x0800d443
 800d2b0:	0800d443 	.word	0x0800d443
 800d2b4:	0800d443 	.word	0x0800d443
 800d2b8:	0800d401 	.word	0x0800d401
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	68b9      	ldr	r1, [r7, #8]
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f000 f99e 	bl	800d604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	699a      	ldr	r2, [r3, #24]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f042 0208 	orr.w	r2, r2, #8
 800d2d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	699a      	ldr	r2, [r3, #24]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f022 0204 	bic.w	r2, r2, #4
 800d2e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	6999      	ldr	r1, [r3, #24]
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	691a      	ldr	r2, [r3, #16]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	430a      	orrs	r2, r1
 800d2f8:	619a      	str	r2, [r3, #24]
      break;
 800d2fa:	e0a5      	b.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68b9      	ldr	r1, [r7, #8]
 800d302:	4618      	mov	r0, r3
 800d304:	f000 fa0e 	bl	800d724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	699a      	ldr	r2, [r3, #24]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	699a      	ldr	r2, [r3, #24]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6999      	ldr	r1, [r3, #24]
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	021a      	lsls	r2, r3, #8
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	430a      	orrs	r2, r1
 800d33a:	619a      	str	r2, [r3, #24]
      break;
 800d33c:	e084      	b.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68b9      	ldr	r1, [r7, #8]
 800d344:	4618      	mov	r0, r3
 800d346:	f000 fa77 	bl	800d838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	69da      	ldr	r2, [r3, #28]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f042 0208 	orr.w	r2, r2, #8
 800d358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	69da      	ldr	r2, [r3, #28]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f022 0204 	bic.w	r2, r2, #4
 800d368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	69d9      	ldr	r1, [r3, #28]
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	691a      	ldr	r2, [r3, #16]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	430a      	orrs	r2, r1
 800d37a:	61da      	str	r2, [r3, #28]
      break;
 800d37c:	e064      	b.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	68b9      	ldr	r1, [r7, #8]
 800d384:	4618      	mov	r0, r3
 800d386:	f000 fadf 	bl	800d948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	69da      	ldr	r2, [r3, #28]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	69da      	ldr	r2, [r3, #28]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d3a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	69d9      	ldr	r1, [r3, #28]
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	021a      	lsls	r2, r3, #8
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	430a      	orrs	r2, r1
 800d3bc:	61da      	str	r2, [r3, #28]
      break;
 800d3be:	e043      	b.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	68b9      	ldr	r1, [r7, #8]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f000 fb28 	bl	800da1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f042 0208 	orr.w	r2, r2, #8
 800d3da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f022 0204 	bic.w	r2, r2, #4
 800d3ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	691a      	ldr	r2, [r3, #16]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	430a      	orrs	r2, r1
 800d3fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d3fe:	e023      	b.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	68b9      	ldr	r1, [r7, #8]
 800d406:	4618      	mov	r0, r3
 800d408:	f000 fb6c 	bl	800dae4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d41a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d42a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	021a      	lsls	r2, r3, #8
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	430a      	orrs	r2, r1
 800d43e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d440:	e002      	b.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	75fb      	strb	r3, [r7, #23]
      break;
 800d446:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d450:	7dfb      	ldrb	r3, [r7, #23]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop

0800d45c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	4a47      	ldr	r2, [pc, #284]	@ (800d5dc <TIM_Base_SetConfig+0x130>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d013      	beq.n	800d4ec <TIM_Base_SetConfig+0x40>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4ca:	d00f      	beq.n	800d4ec <TIM_Base_SetConfig+0x40>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	4a44      	ldr	r2, [pc, #272]	@ (800d5e0 <TIM_Base_SetConfig+0x134>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d00b      	beq.n	800d4ec <TIM_Base_SetConfig+0x40>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	4a43      	ldr	r2, [pc, #268]	@ (800d5e4 <TIM_Base_SetConfig+0x138>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d007      	beq.n	800d4ec <TIM_Base_SetConfig+0x40>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4a42      	ldr	r2, [pc, #264]	@ (800d5e8 <TIM_Base_SetConfig+0x13c>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d003      	beq.n	800d4ec <TIM_Base_SetConfig+0x40>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4a41      	ldr	r2, [pc, #260]	@ (800d5ec <TIM_Base_SetConfig+0x140>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d108      	bne.n	800d4fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	68fa      	ldr	r2, [r7, #12]
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	4a36      	ldr	r2, [pc, #216]	@ (800d5dc <TIM_Base_SetConfig+0x130>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d027      	beq.n	800d556 <TIM_Base_SetConfig+0xaa>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d50c:	d023      	beq.n	800d556 <TIM_Base_SetConfig+0xaa>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4a33      	ldr	r2, [pc, #204]	@ (800d5e0 <TIM_Base_SetConfig+0x134>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d01f      	beq.n	800d556 <TIM_Base_SetConfig+0xaa>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	4a32      	ldr	r2, [pc, #200]	@ (800d5e4 <TIM_Base_SetConfig+0x138>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d01b      	beq.n	800d556 <TIM_Base_SetConfig+0xaa>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4a31      	ldr	r2, [pc, #196]	@ (800d5e8 <TIM_Base_SetConfig+0x13c>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d017      	beq.n	800d556 <TIM_Base_SetConfig+0xaa>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a30      	ldr	r2, [pc, #192]	@ (800d5ec <TIM_Base_SetConfig+0x140>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d013      	beq.n	800d556 <TIM_Base_SetConfig+0xaa>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4a2f      	ldr	r2, [pc, #188]	@ (800d5f0 <TIM_Base_SetConfig+0x144>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d00f      	beq.n	800d556 <TIM_Base_SetConfig+0xaa>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4a2e      	ldr	r2, [pc, #184]	@ (800d5f4 <TIM_Base_SetConfig+0x148>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d00b      	beq.n	800d556 <TIM_Base_SetConfig+0xaa>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a2d      	ldr	r2, [pc, #180]	@ (800d5f8 <TIM_Base_SetConfig+0x14c>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d007      	beq.n	800d556 <TIM_Base_SetConfig+0xaa>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4a2c      	ldr	r2, [pc, #176]	@ (800d5fc <TIM_Base_SetConfig+0x150>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d003      	beq.n	800d556 <TIM_Base_SetConfig+0xaa>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4a2b      	ldr	r2, [pc, #172]	@ (800d600 <TIM_Base_SetConfig+0x154>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d108      	bne.n	800d568 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d55c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	4313      	orrs	r3, r2
 800d566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	4313      	orrs	r3, r2
 800d574:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	689a      	ldr	r2, [r3, #8]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4a14      	ldr	r2, [pc, #80]	@ (800d5dc <TIM_Base_SetConfig+0x130>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d00f      	beq.n	800d5ae <TIM_Base_SetConfig+0x102>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4a16      	ldr	r2, [pc, #88]	@ (800d5ec <TIM_Base_SetConfig+0x140>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d00b      	beq.n	800d5ae <TIM_Base_SetConfig+0x102>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	4a15      	ldr	r2, [pc, #84]	@ (800d5f0 <TIM_Base_SetConfig+0x144>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d007      	beq.n	800d5ae <TIM_Base_SetConfig+0x102>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4a14      	ldr	r2, [pc, #80]	@ (800d5f4 <TIM_Base_SetConfig+0x148>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d003      	beq.n	800d5ae <TIM_Base_SetConfig+0x102>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4a13      	ldr	r2, [pc, #76]	@ (800d5f8 <TIM_Base_SetConfig+0x14c>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d103      	bne.n	800d5b6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	691a      	ldr	r2, [r3, #16]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f043 0204 	orr.w	r2, r3, #4
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	601a      	str	r2, [r3, #0]
}
 800d5ce:	bf00      	nop
 800d5d0:	3714      	adds	r7, #20
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	40010000 	.word	0x40010000
 800d5e0:	40000400 	.word	0x40000400
 800d5e4:	40000800 	.word	0x40000800
 800d5e8:	40000c00 	.word	0x40000c00
 800d5ec:	40010400 	.word	0x40010400
 800d5f0:	40014000 	.word	0x40014000
 800d5f4:	40014400 	.word	0x40014400
 800d5f8:	40014800 	.word	0x40014800
 800d5fc:	4000e000 	.word	0x4000e000
 800d600:	4000e400 	.word	0x4000e400

0800d604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d604:	b480      	push	{r7}
 800d606:	b087      	sub	sp, #28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6a1b      	ldr	r3, [r3, #32]
 800d618:	f023 0201 	bic.w	r2, r3, #1
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	699b      	ldr	r3, [r3, #24]
 800d62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	4b37      	ldr	r3, [pc, #220]	@ (800d70c <TIM_OC1_SetConfig+0x108>)
 800d630:	4013      	ands	r3, r2
 800d632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f023 0303 	bic.w	r3, r3, #3
 800d63a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68fa      	ldr	r2, [r7, #12]
 800d642:	4313      	orrs	r3, r2
 800d644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	f023 0302 	bic.w	r3, r3, #2
 800d64c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	697a      	ldr	r2, [r7, #20]
 800d654:	4313      	orrs	r3, r2
 800d656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	4a2d      	ldr	r2, [pc, #180]	@ (800d710 <TIM_OC1_SetConfig+0x10c>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d00f      	beq.n	800d680 <TIM_OC1_SetConfig+0x7c>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4a2c      	ldr	r2, [pc, #176]	@ (800d714 <TIM_OC1_SetConfig+0x110>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d00b      	beq.n	800d680 <TIM_OC1_SetConfig+0x7c>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4a2b      	ldr	r2, [pc, #172]	@ (800d718 <TIM_OC1_SetConfig+0x114>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d007      	beq.n	800d680 <TIM_OC1_SetConfig+0x7c>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4a2a      	ldr	r2, [pc, #168]	@ (800d71c <TIM_OC1_SetConfig+0x118>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d003      	beq.n	800d680 <TIM_OC1_SetConfig+0x7c>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a29      	ldr	r2, [pc, #164]	@ (800d720 <TIM_OC1_SetConfig+0x11c>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d10c      	bne.n	800d69a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	f023 0308 	bic.w	r3, r3, #8
 800d686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	697a      	ldr	r2, [r7, #20]
 800d68e:	4313      	orrs	r3, r2
 800d690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	f023 0304 	bic.w	r3, r3, #4
 800d698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4a1c      	ldr	r2, [pc, #112]	@ (800d710 <TIM_OC1_SetConfig+0x10c>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d00f      	beq.n	800d6c2 <TIM_OC1_SetConfig+0xbe>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	4a1b      	ldr	r2, [pc, #108]	@ (800d714 <TIM_OC1_SetConfig+0x110>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d00b      	beq.n	800d6c2 <TIM_OC1_SetConfig+0xbe>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4a1a      	ldr	r2, [pc, #104]	@ (800d718 <TIM_OC1_SetConfig+0x114>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d007      	beq.n	800d6c2 <TIM_OC1_SetConfig+0xbe>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4a19      	ldr	r2, [pc, #100]	@ (800d71c <TIM_OC1_SetConfig+0x118>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d003      	beq.n	800d6c2 <TIM_OC1_SetConfig+0xbe>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a18      	ldr	r2, [pc, #96]	@ (800d720 <TIM_OC1_SetConfig+0x11c>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d111      	bne.n	800d6e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d6c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d6d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	695b      	ldr	r3, [r3, #20]
 800d6d6:	693a      	ldr	r2, [r7, #16]
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	699b      	ldr	r3, [r3, #24]
 800d6e0:	693a      	ldr	r2, [r7, #16]
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	693a      	ldr	r2, [r7, #16]
 800d6ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	685a      	ldr	r2, [r3, #4]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	697a      	ldr	r2, [r7, #20]
 800d6fe:	621a      	str	r2, [r3, #32]
}
 800d700:	bf00      	nop
 800d702:	371c      	adds	r7, #28
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	fffeff8f 	.word	0xfffeff8f
 800d710:	40010000 	.word	0x40010000
 800d714:	40010400 	.word	0x40010400
 800d718:	40014000 	.word	0x40014000
 800d71c:	40014400 	.word	0x40014400
 800d720:	40014800 	.word	0x40014800

0800d724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d724:	b480      	push	{r7}
 800d726:	b087      	sub	sp, #28
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6a1b      	ldr	r3, [r3, #32]
 800d732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6a1b      	ldr	r3, [r3, #32]
 800d738:	f023 0210 	bic.w	r2, r3, #16
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	699b      	ldr	r3, [r3, #24]
 800d74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	4b34      	ldr	r3, [pc, #208]	@ (800d820 <TIM_OC2_SetConfig+0xfc>)
 800d750:	4013      	ands	r3, r2
 800d752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d75a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	021b      	lsls	r3, r3, #8
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	4313      	orrs	r3, r2
 800d766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	f023 0320 	bic.w	r3, r3, #32
 800d76e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	011b      	lsls	r3, r3, #4
 800d776:	697a      	ldr	r2, [r7, #20]
 800d778:	4313      	orrs	r3, r2
 800d77a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	4a29      	ldr	r2, [pc, #164]	@ (800d824 <TIM_OC2_SetConfig+0x100>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d003      	beq.n	800d78c <TIM_OC2_SetConfig+0x68>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	4a28      	ldr	r2, [pc, #160]	@ (800d828 <TIM_OC2_SetConfig+0x104>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d10d      	bne.n	800d7a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	011b      	lsls	r3, r3, #4
 800d79a:	697a      	ldr	r2, [r7, #20]
 800d79c:	4313      	orrs	r3, r2
 800d79e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	4a1e      	ldr	r2, [pc, #120]	@ (800d824 <TIM_OC2_SetConfig+0x100>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d00f      	beq.n	800d7d0 <TIM_OC2_SetConfig+0xac>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	4a1d      	ldr	r2, [pc, #116]	@ (800d828 <TIM_OC2_SetConfig+0x104>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d00b      	beq.n	800d7d0 <TIM_OC2_SetConfig+0xac>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	4a1c      	ldr	r2, [pc, #112]	@ (800d82c <TIM_OC2_SetConfig+0x108>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d007      	beq.n	800d7d0 <TIM_OC2_SetConfig+0xac>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	4a1b      	ldr	r2, [pc, #108]	@ (800d830 <TIM_OC2_SetConfig+0x10c>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d003      	beq.n	800d7d0 <TIM_OC2_SetConfig+0xac>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a1a      	ldr	r2, [pc, #104]	@ (800d834 <TIM_OC2_SetConfig+0x110>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d113      	bne.n	800d7f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d7d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d7de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	695b      	ldr	r3, [r3, #20]
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	693a      	ldr	r2, [r7, #16]
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	699b      	ldr	r3, [r3, #24]
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	693a      	ldr	r2, [r7, #16]
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	693a      	ldr	r2, [r7, #16]
 800d7fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	685a      	ldr	r2, [r3, #4]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	697a      	ldr	r2, [r7, #20]
 800d810:	621a      	str	r2, [r3, #32]
}
 800d812:	bf00      	nop
 800d814:	371c      	adds	r7, #28
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop
 800d820:	feff8fff 	.word	0xfeff8fff
 800d824:	40010000 	.word	0x40010000
 800d828:	40010400 	.word	0x40010400
 800d82c:	40014000 	.word	0x40014000
 800d830:	40014400 	.word	0x40014400
 800d834:	40014800 	.word	0x40014800

0800d838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d838:	b480      	push	{r7}
 800d83a:	b087      	sub	sp, #28
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6a1b      	ldr	r3, [r3, #32]
 800d846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a1b      	ldr	r3, [r3, #32]
 800d84c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	69db      	ldr	r3, [r3, #28]
 800d85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	4b33      	ldr	r3, [pc, #204]	@ (800d930 <TIM_OC3_SetConfig+0xf8>)
 800d864:	4013      	ands	r3, r2
 800d866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f023 0303 	bic.w	r3, r3, #3
 800d86e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	4313      	orrs	r3, r2
 800d878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	021b      	lsls	r3, r3, #8
 800d888:	697a      	ldr	r2, [r7, #20]
 800d88a:	4313      	orrs	r3, r2
 800d88c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4a28      	ldr	r2, [pc, #160]	@ (800d934 <TIM_OC3_SetConfig+0xfc>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d003      	beq.n	800d89e <TIM_OC3_SetConfig+0x66>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4a27      	ldr	r2, [pc, #156]	@ (800d938 <TIM_OC3_SetConfig+0x100>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d10d      	bne.n	800d8ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d8a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	021b      	lsls	r3, r3, #8
 800d8ac:	697a      	ldr	r2, [r7, #20]
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d8b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a1d      	ldr	r2, [pc, #116]	@ (800d934 <TIM_OC3_SetConfig+0xfc>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d00f      	beq.n	800d8e2 <TIM_OC3_SetConfig+0xaa>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4a1c      	ldr	r2, [pc, #112]	@ (800d938 <TIM_OC3_SetConfig+0x100>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d00b      	beq.n	800d8e2 <TIM_OC3_SetConfig+0xaa>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4a1b      	ldr	r2, [pc, #108]	@ (800d93c <TIM_OC3_SetConfig+0x104>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d007      	beq.n	800d8e2 <TIM_OC3_SetConfig+0xaa>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4a1a      	ldr	r2, [pc, #104]	@ (800d940 <TIM_OC3_SetConfig+0x108>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d003      	beq.n	800d8e2 <TIM_OC3_SetConfig+0xaa>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4a19      	ldr	r2, [pc, #100]	@ (800d944 <TIM_OC3_SetConfig+0x10c>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d113      	bne.n	800d90a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d8e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d8f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	695b      	ldr	r3, [r3, #20]
 800d8f6:	011b      	lsls	r3, r3, #4
 800d8f8:	693a      	ldr	r2, [r7, #16]
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	011b      	lsls	r3, r3, #4
 800d904:	693a      	ldr	r2, [r7, #16]
 800d906:	4313      	orrs	r3, r2
 800d908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	685a      	ldr	r2, [r3, #4]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	621a      	str	r2, [r3, #32]
}
 800d924:	bf00      	nop
 800d926:	371c      	adds	r7, #28
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr
 800d930:	fffeff8f 	.word	0xfffeff8f
 800d934:	40010000 	.word	0x40010000
 800d938:	40010400 	.word	0x40010400
 800d93c:	40014000 	.word	0x40014000
 800d940:	40014400 	.word	0x40014400
 800d944:	40014800 	.word	0x40014800

0800d948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d948:	b480      	push	{r7}
 800d94a:	b087      	sub	sp, #28
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6a1b      	ldr	r3, [r3, #32]
 800d956:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6a1b      	ldr	r3, [r3, #32]
 800d95c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	69db      	ldr	r3, [r3, #28]
 800d96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d970:	68fa      	ldr	r2, [r7, #12]
 800d972:	4b24      	ldr	r3, [pc, #144]	@ (800da04 <TIM_OC4_SetConfig+0xbc>)
 800d974:	4013      	ands	r3, r2
 800d976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d97e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	021b      	lsls	r3, r3, #8
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	4313      	orrs	r3, r2
 800d98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	031b      	lsls	r3, r3, #12
 800d99a:	693a      	ldr	r2, [r7, #16]
 800d99c:	4313      	orrs	r3, r2
 800d99e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	4a19      	ldr	r2, [pc, #100]	@ (800da08 <TIM_OC4_SetConfig+0xc0>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d00f      	beq.n	800d9c8 <TIM_OC4_SetConfig+0x80>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a18      	ldr	r2, [pc, #96]	@ (800da0c <TIM_OC4_SetConfig+0xc4>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d00b      	beq.n	800d9c8 <TIM_OC4_SetConfig+0x80>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a17      	ldr	r2, [pc, #92]	@ (800da10 <TIM_OC4_SetConfig+0xc8>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d007      	beq.n	800d9c8 <TIM_OC4_SetConfig+0x80>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a16      	ldr	r2, [pc, #88]	@ (800da14 <TIM_OC4_SetConfig+0xcc>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d003      	beq.n	800d9c8 <TIM_OC4_SetConfig+0x80>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a15      	ldr	r2, [pc, #84]	@ (800da18 <TIM_OC4_SetConfig+0xd0>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d109      	bne.n	800d9dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d9ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	695b      	ldr	r3, [r3, #20]
 800d9d4:	019b      	lsls	r3, r3, #6
 800d9d6:	697a      	ldr	r2, [r7, #20]
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	68fa      	ldr	r2, [r7, #12]
 800d9e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	685a      	ldr	r2, [r3, #4]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	693a      	ldr	r2, [r7, #16]
 800d9f4:	621a      	str	r2, [r3, #32]
}
 800d9f6:	bf00      	nop
 800d9f8:	371c      	adds	r7, #28
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	feff8fff 	.word	0xfeff8fff
 800da08:	40010000 	.word	0x40010000
 800da0c:	40010400 	.word	0x40010400
 800da10:	40014000 	.word	0x40014000
 800da14:	40014400 	.word	0x40014400
 800da18:	40014800 	.word	0x40014800

0800da1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b087      	sub	sp, #28
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a1b      	ldr	r3, [r3, #32]
 800da2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6a1b      	ldr	r3, [r3, #32]
 800da30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	4b21      	ldr	r3, [pc, #132]	@ (800dacc <TIM_OC5_SetConfig+0xb0>)
 800da48:	4013      	ands	r3, r2
 800da4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	4313      	orrs	r3, r2
 800da54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800da5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	041b      	lsls	r3, r3, #16
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	4313      	orrs	r3, r2
 800da68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4a18      	ldr	r2, [pc, #96]	@ (800dad0 <TIM_OC5_SetConfig+0xb4>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d00f      	beq.n	800da92 <TIM_OC5_SetConfig+0x76>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4a17      	ldr	r2, [pc, #92]	@ (800dad4 <TIM_OC5_SetConfig+0xb8>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d00b      	beq.n	800da92 <TIM_OC5_SetConfig+0x76>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4a16      	ldr	r2, [pc, #88]	@ (800dad8 <TIM_OC5_SetConfig+0xbc>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d007      	beq.n	800da92 <TIM_OC5_SetConfig+0x76>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4a15      	ldr	r2, [pc, #84]	@ (800dadc <TIM_OC5_SetConfig+0xc0>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d003      	beq.n	800da92 <TIM_OC5_SetConfig+0x76>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4a14      	ldr	r2, [pc, #80]	@ (800dae0 <TIM_OC5_SetConfig+0xc4>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d109      	bne.n	800daa6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800da98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	021b      	lsls	r3, r3, #8
 800daa0:	697a      	ldr	r2, [r7, #20]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	697a      	ldr	r2, [r7, #20]
 800daaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	68fa      	ldr	r2, [r7, #12]
 800dab0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	685a      	ldr	r2, [r3, #4]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	693a      	ldr	r2, [r7, #16]
 800dabe:	621a      	str	r2, [r3, #32]
}
 800dac0:	bf00      	nop
 800dac2:	371c      	adds	r7, #28
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr
 800dacc:	fffeff8f 	.word	0xfffeff8f
 800dad0:	40010000 	.word	0x40010000
 800dad4:	40010400 	.word	0x40010400
 800dad8:	40014000 	.word	0x40014000
 800dadc:	40014400 	.word	0x40014400
 800dae0:	40014800 	.word	0x40014800

0800dae4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b087      	sub	sp, #28
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6a1b      	ldr	r3, [r3, #32]
 800daf2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6a1b      	ldr	r3, [r3, #32]
 800daf8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	4b22      	ldr	r3, [pc, #136]	@ (800db98 <TIM_OC6_SetConfig+0xb4>)
 800db10:	4013      	ands	r3, r2
 800db12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	021b      	lsls	r3, r3, #8
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	4313      	orrs	r3, r2
 800db1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800db26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	051b      	lsls	r3, r3, #20
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	4313      	orrs	r3, r2
 800db32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	4a19      	ldr	r2, [pc, #100]	@ (800db9c <TIM_OC6_SetConfig+0xb8>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d00f      	beq.n	800db5c <TIM_OC6_SetConfig+0x78>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4a18      	ldr	r2, [pc, #96]	@ (800dba0 <TIM_OC6_SetConfig+0xbc>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d00b      	beq.n	800db5c <TIM_OC6_SetConfig+0x78>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4a17      	ldr	r2, [pc, #92]	@ (800dba4 <TIM_OC6_SetConfig+0xc0>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d007      	beq.n	800db5c <TIM_OC6_SetConfig+0x78>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a16      	ldr	r2, [pc, #88]	@ (800dba8 <TIM_OC6_SetConfig+0xc4>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d003      	beq.n	800db5c <TIM_OC6_SetConfig+0x78>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a15      	ldr	r2, [pc, #84]	@ (800dbac <TIM_OC6_SetConfig+0xc8>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d109      	bne.n	800db70 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800db62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	695b      	ldr	r3, [r3, #20]
 800db68:	029b      	lsls	r3, r3, #10
 800db6a:	697a      	ldr	r2, [r7, #20]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	697a      	ldr	r2, [r7, #20]
 800db74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	685a      	ldr	r2, [r3, #4]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	693a      	ldr	r2, [r7, #16]
 800db88:	621a      	str	r2, [r3, #32]
}
 800db8a:	bf00      	nop
 800db8c:	371c      	adds	r7, #28
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	feff8fff 	.word	0xfeff8fff
 800db9c:	40010000 	.word	0x40010000
 800dba0:	40010400 	.word	0x40010400
 800dba4:	40014000 	.word	0x40014000
 800dba8:	40014400 	.word	0x40014400
 800dbac:	40014800 	.word	0x40014800

0800dbb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b087      	sub	sp, #28
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	f003 031f 	and.w	r3, r3, #31
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6a1a      	ldr	r2, [r3, #32]
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	43db      	mvns	r3, r3
 800dbd2:	401a      	ands	r2, r3
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6a1a      	ldr	r2, [r3, #32]
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	f003 031f 	and.w	r3, r3, #31
 800dbe2:	6879      	ldr	r1, [r7, #4]
 800dbe4:	fa01 f303 	lsl.w	r3, r1, r3
 800dbe8:	431a      	orrs	r2, r3
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	621a      	str	r2, [r3, #32]
}
 800dbee:	bf00      	nop
 800dbf0:	371c      	adds	r7, #28
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
	...

0800dbfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d101      	bne.n	800dc14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc10:	2302      	movs	r3, #2
 800dc12:	e077      	b.n	800dd04 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2202      	movs	r2, #2
 800dc20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4a35      	ldr	r2, [pc, #212]	@ (800dd10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d004      	beq.n	800dc48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4a34      	ldr	r2, [pc, #208]	@ (800dd14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d108      	bne.n	800dc5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dc4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	68fa      	ldr	r2, [r7, #12]
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a25      	ldr	r2, [pc, #148]	@ (800dd10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d02c      	beq.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc86:	d027      	beq.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a22      	ldr	r2, [pc, #136]	@ (800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d022      	beq.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4a21      	ldr	r2, [pc, #132]	@ (800dd1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d01d      	beq.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a1f      	ldr	r2, [pc, #124]	@ (800dd20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d018      	beq.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a1a      	ldr	r2, [pc, #104]	@ (800dd14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d013      	beq.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a1b      	ldr	r2, [pc, #108]	@ (800dd24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d00e      	beq.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a1a      	ldr	r2, [pc, #104]	@ (800dd28 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d009      	beq.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a18      	ldr	r2, [pc, #96]	@ (800dd2c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d004      	beq.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a17      	ldr	r2, [pc, #92]	@ (800dd30 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d10c      	bne.n	800dcf2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dcde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	40010000 	.word	0x40010000
 800dd14:	40010400 	.word	0x40010400
 800dd18:	40000400 	.word	0x40000400
 800dd1c:	40000800 	.word	0x40000800
 800dd20:	40000c00 	.word	0x40000c00
 800dd24:	40001800 	.word	0x40001800
 800dd28:	40014000 	.word	0x40014000
 800dd2c:	4000e000 	.word	0x4000e000
 800dd30:	4000e400 	.word	0x4000e400

0800dd34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b085      	sub	sp, #20
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d101      	bne.n	800dd50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dd4c:	2302      	movs	r3, #2
 800dd4e:	e073      	b.n	800de38 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	4313      	orrs	r3, r2
 800dd72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	691b      	ldr	r3, [r3, #16]
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	695b      	ldr	r3, [r3, #20]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	699b      	ldr	r3, [r3, #24]
 800ddc4:	041b      	lsls	r3, r3, #16
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	69db      	ldr	r3, [r3, #28]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a19      	ldr	r2, [pc, #100]	@ (800de44 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d004      	beq.n	800ddec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4a18      	ldr	r2, [pc, #96]	@ (800de48 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d11c      	bne.n	800de26 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddf6:	051b      	lsls	r3, r3, #20
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	4313      	orrs	r3, r2
 800de08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de14:	4313      	orrs	r3, r2
 800de16:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de22:	4313      	orrs	r3, r2
 800de24:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	68fa      	ldr	r2, [r7, #12]
 800de2c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2200      	movs	r2, #0
 800de32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800de36:	2300      	movs	r3, #0
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr
 800de44:	40010000 	.word	0x40010000
 800de48:	40010400 	.word	0x40010400

0800de4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de54:	bf00      	nop
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de68:	bf00      	nop
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d101      	bne.n	800de9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de96:	2301      	movs	r3, #1
 800de98:	e042      	b.n	800df20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d106      	bne.n	800deb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2200      	movs	r2, #0
 800dea8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f7f5 fa9b 	bl	80033e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2224      	movs	r2, #36	@ 0x24
 800deb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f022 0201 	bic.w	r2, r2, #1
 800dec8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d002      	beq.n	800ded8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f001 fb14 	bl	800f500 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 fca5 	bl	800e828 <UART_SetConfig>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d101      	bne.n	800dee8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800dee4:	2301      	movs	r3, #1
 800dee6:	e01b      	b.n	800df20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	685a      	ldr	r2, [r3, #4]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800def6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	689a      	ldr	r2, [r3, #8]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800df06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f042 0201 	orr.w	r2, r2, #1
 800df16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f001 fb93 	bl	800f644 <UART_CheckIdleState>
 800df1e:	4603      	mov	r3, r0
}
 800df20:	4618      	mov	r0, r3
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b08a      	sub	sp, #40	@ 0x28
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	4613      	mov	r3, r2
 800df34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df3c:	2b20      	cmp	r3, #32
 800df3e:	d167      	bne.n	800e010 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <HAL_UART_Transmit_DMA+0x24>
 800df46:	88fb      	ldrh	r3, [r7, #6]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d101      	bne.n	800df50 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	e060      	b.n	800e012 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	68ba      	ldr	r2, [r7, #8]
 800df54:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	88fa      	ldrh	r2, [r7, #6]
 800df5a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	88fa      	ldrh	r2, [r7, #6]
 800df62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2200      	movs	r2, #0
 800df6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2221      	movs	r2, #33	@ 0x21
 800df72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d028      	beq.n	800dfd0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df82:	4a26      	ldr	r2, [pc, #152]	@ (800e01c <HAL_UART_Transmit_DMA+0xf4>)
 800df84:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df8a:	4a25      	ldr	r2, [pc, #148]	@ (800e020 <HAL_UART_Transmit_DMA+0xf8>)
 800df8c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df92:	4a24      	ldr	r2, [pc, #144]	@ (800e024 <HAL_UART_Transmit_DMA+0xfc>)
 800df94:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df9a:	2200      	movs	r2, #0
 800df9c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	3328      	adds	r3, #40	@ 0x28
 800dfae:	461a      	mov	r2, r3
 800dfb0:	88fb      	ldrh	r3, [r7, #6]
 800dfb2:	f7f8 fb09 	bl	80065c8 <HAL_DMA_Start_IT>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d009      	beq.n	800dfd0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2210      	movs	r2, #16
 800dfc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2220      	movs	r2, #32
 800dfc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e020      	b.n	800e012 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2240      	movs	r2, #64	@ 0x40
 800dfd6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	3308      	adds	r3, #8
 800dfde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	e853 3f00 	ldrex	r3, [r3]
 800dfe6:	613b      	str	r3, [r7, #16]
   return(result);
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfee:	627b      	str	r3, [r7, #36]	@ 0x24
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3308      	adds	r3, #8
 800dff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dff8:	623a      	str	r2, [r7, #32]
 800dffa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffc:	69f9      	ldr	r1, [r7, #28]
 800dffe:	6a3a      	ldr	r2, [r7, #32]
 800e000:	e841 2300 	strex	r3, r2, [r1]
 800e004:	61bb      	str	r3, [r7, #24]
   return(result);
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1e5      	bne.n	800dfd8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800e00c:	2300      	movs	r3, #0
 800e00e:	e000      	b.n	800e012 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800e010:	2302      	movs	r3, #2
  }
}
 800e012:	4618      	mov	r0, r3
 800e014:	3728      	adds	r7, #40	@ 0x28
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	0800f9c1 	.word	0x0800f9c1
 800e020:	0800fa57 	.word	0x0800fa57
 800e024:	0800fa73 	.word	0x0800fa73

0800e028 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b0ba      	sub	sp, #232	@ 0xe8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	69db      	ldr	r3, [r3, #28]
 800e036:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e04e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e052:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e056:	4013      	ands	r3, r2
 800e058:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e05c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e060:	2b00      	cmp	r3, #0
 800e062:	d11b      	bne.n	800e09c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e068:	f003 0320 	and.w	r3, r3, #32
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d015      	beq.n	800e09c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e074:	f003 0320 	and.w	r3, r3, #32
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d105      	bne.n	800e088 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e07c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e084:	2b00      	cmp	r3, #0
 800e086:	d009      	beq.n	800e09c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f000 8393 	beq.w	800e7b8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	4798      	blx	r3
      }
      return;
 800e09a:	e38d      	b.n	800e7b8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e09c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f000 8123 	beq.w	800e2ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e0a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e0aa:	4b8d      	ldr	r3, [pc, #564]	@ (800e2e0 <HAL_UART_IRQHandler+0x2b8>)
 800e0ac:	4013      	ands	r3, r2
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d106      	bne.n	800e0c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e0b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e0b6:	4b8b      	ldr	r3, [pc, #556]	@ (800e2e4 <HAL_UART_IRQHandler+0x2bc>)
 800e0b8:	4013      	ands	r3, r2
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f000 8116 	beq.w	800e2ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e0c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0c4:	f003 0301 	and.w	r3, r3, #1
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d011      	beq.n	800e0f0 <HAL_UART_IRQHandler+0xc8>
 800e0cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00b      	beq.n	800e0f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0e6:	f043 0201 	orr.w	r2, r3, #1
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0f4:	f003 0302 	and.w	r3, r3, #2
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d011      	beq.n	800e120 <HAL_UART_IRQHandler+0xf8>
 800e0fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e100:	f003 0301 	and.w	r3, r3, #1
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00b      	beq.n	800e120 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2202      	movs	r2, #2
 800e10e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e116:	f043 0204 	orr.w	r2, r3, #4
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e124:	f003 0304 	and.w	r3, r3, #4
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d011      	beq.n	800e150 <HAL_UART_IRQHandler+0x128>
 800e12c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e130:	f003 0301 	and.w	r3, r3, #1
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00b      	beq.n	800e150 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2204      	movs	r2, #4
 800e13e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e146:	f043 0202 	orr.w	r2, r3, #2
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e154:	f003 0308 	and.w	r3, r3, #8
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d017      	beq.n	800e18c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e160:	f003 0320 	and.w	r3, r3, #32
 800e164:	2b00      	cmp	r3, #0
 800e166:	d105      	bne.n	800e174 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e168:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e16c:	4b5c      	ldr	r3, [pc, #368]	@ (800e2e0 <HAL_UART_IRQHandler+0x2b8>)
 800e16e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e170:	2b00      	cmp	r3, #0
 800e172:	d00b      	beq.n	800e18c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2208      	movs	r2, #8
 800e17a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e182:	f043 0208 	orr.w	r2, r3, #8
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e194:	2b00      	cmp	r3, #0
 800e196:	d012      	beq.n	800e1be <HAL_UART_IRQHandler+0x196>
 800e198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e19c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00c      	beq.n	800e1be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e1ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1b4:	f043 0220 	orr.w	r2, r3, #32
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f000 82f9 	beq.w	800e7bc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1ce:	f003 0320 	and.w	r3, r3, #32
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d013      	beq.n	800e1fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e1d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1da:	f003 0320 	and.w	r3, r3, #32
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d105      	bne.n	800e1ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e1e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d007      	beq.n	800e1fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d003      	beq.n	800e1fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e204:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e212:	2b40      	cmp	r3, #64	@ 0x40
 800e214:	d005      	beq.n	800e222 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e21a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d054      	beq.n	800e2cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f001 fb66 	bl	800f8f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e232:	2b40      	cmp	r3, #64	@ 0x40
 800e234:	d146      	bne.n	800e2c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	3308      	adds	r3, #8
 800e23c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e240:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e244:	e853 3f00 	ldrex	r3, [r3]
 800e248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e24c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e254:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	3308      	adds	r3, #8
 800e25e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e262:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e266:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e26e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e272:	e841 2300 	strex	r3, r2, [r1]
 800e276:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e27a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d1d9      	bne.n	800e236 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d017      	beq.n	800e2bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e292:	4a15      	ldr	r2, [pc, #84]	@ (800e2e8 <HAL_UART_IRQHandler+0x2c0>)
 800e294:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7f8 ff1b 	bl	80070d8 <HAL_DMA_Abort_IT>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d019      	beq.n	800e2dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e2b6:	4610      	mov	r0, r2
 800e2b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2ba:	e00f      	b.n	800e2dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fa9d 	bl	800e7fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2c2:	e00b      	b.n	800e2dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 fa99 	bl	800e7fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2ca:	e007      	b.n	800e2dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 fa95 	bl	800e7fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e2da:	e26f      	b.n	800e7bc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2dc:	bf00      	nop
    return;
 800e2de:	e26d      	b.n	800e7bc <HAL_UART_IRQHandler+0x794>
 800e2e0:	10000001 	.word	0x10000001
 800e2e4:	04000120 	.word	0x04000120
 800e2e8:	0800faf3 	.word	0x0800faf3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	f040 8203 	bne.w	800e6fc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2fa:	f003 0310 	and.w	r3, r3, #16
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f000 81fc 	beq.w	800e6fc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e308:	f003 0310 	and.w	r3, r3, #16
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f000 81f5 	beq.w	800e6fc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2210      	movs	r2, #16
 800e318:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e324:	2b40      	cmp	r3, #64	@ 0x40
 800e326:	f040 816d 	bne.w	800e604 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4aa4      	ldr	r2, [pc, #656]	@ (800e5c4 <HAL_UART_IRQHandler+0x59c>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d068      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4aa1      	ldr	r2, [pc, #644]	@ (800e5c8 <HAL_UART_IRQHandler+0x5a0>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d061      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a9f      	ldr	r2, [pc, #636]	@ (800e5cc <HAL_UART_IRQHandler+0x5a4>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d05a      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a9c      	ldr	r2, [pc, #624]	@ (800e5d0 <HAL_UART_IRQHandler+0x5a8>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d053      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4a9a      	ldr	r2, [pc, #616]	@ (800e5d4 <HAL_UART_IRQHandler+0x5ac>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d04c      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a97      	ldr	r2, [pc, #604]	@ (800e5d8 <HAL_UART_IRQHandler+0x5b0>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d045      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a95      	ldr	r2, [pc, #596]	@ (800e5dc <HAL_UART_IRQHandler+0x5b4>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d03e      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	4a92      	ldr	r2, [pc, #584]	@ (800e5e0 <HAL_UART_IRQHandler+0x5b8>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d037      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a90      	ldr	r2, [pc, #576]	@ (800e5e4 <HAL_UART_IRQHandler+0x5bc>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d030      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a8d      	ldr	r2, [pc, #564]	@ (800e5e8 <HAL_UART_IRQHandler+0x5c0>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d029      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a8b      	ldr	r2, [pc, #556]	@ (800e5ec <HAL_UART_IRQHandler+0x5c4>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d022      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a88      	ldr	r2, [pc, #544]	@ (800e5f0 <HAL_UART_IRQHandler+0x5c8>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d01b      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a86      	ldr	r2, [pc, #536]	@ (800e5f4 <HAL_UART_IRQHandler+0x5cc>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d014      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a83      	ldr	r2, [pc, #524]	@ (800e5f8 <HAL_UART_IRQHandler+0x5d0>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d00d      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a81      	ldr	r2, [pc, #516]	@ (800e5fc <HAL_UART_IRQHandler+0x5d4>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d006      	beq.n	800e40a <HAL_UART_IRQHandler+0x3e2>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a7e      	ldr	r2, [pc, #504]	@ (800e600 <HAL_UART_IRQHandler+0x5d8>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d106      	bne.n	800e418 <HAL_UART_IRQHandler+0x3f0>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	b29b      	uxth	r3, r3
 800e416:	e005      	b.n	800e424 <HAL_UART_IRQHandler+0x3fc>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	b29b      	uxth	r3, r3
 800e424:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e428:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f000 80ad 	beq.w	800e58c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e438:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e43c:	429a      	cmp	r2, r3
 800e43e:	f080 80a5 	bcs.w	800e58c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e448:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e452:	69db      	ldr	r3, [r3, #28]
 800e454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e458:	f000 8087 	beq.w	800e56a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e464:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e468:	e853 3f00 	ldrex	r3, [r3]
 800e46c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e470:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e478:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	461a      	mov	r2, r3
 800e482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e486:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e48a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e492:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e496:	e841 2300 	strex	r3, r2, [r1]
 800e49a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e49e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1da      	bne.n	800e45c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	3308      	adds	r3, #8
 800e4ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e4b0:	e853 3f00 	ldrex	r3, [r3]
 800e4b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e4b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e4b8:	f023 0301 	bic.w	r3, r3, #1
 800e4bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e4ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e4ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e4d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e4d6:	e841 2300 	strex	r3, r2, [r1]
 800e4da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e4dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1e1      	bne.n	800e4a6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	3308      	adds	r3, #8
 800e4e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e4ec:	e853 3f00 	ldrex	r3, [r3]
 800e4f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e4f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	3308      	adds	r3, #8
 800e502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e506:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e508:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e50c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e50e:	e841 2300 	strex	r3, r2, [r1]
 800e512:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e514:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e516:	2b00      	cmp	r3, #0
 800e518:	d1e3      	bne.n	800e4e2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2220      	movs	r2, #32
 800e51e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e530:	e853 3f00 	ldrex	r3, [r3]
 800e534:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e538:	f023 0310 	bic.w	r3, r3, #16
 800e53c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	461a      	mov	r2, r3
 800e546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e54a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e54c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e550:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e552:	e841 2300 	strex	r3, r2, [r1]
 800e556:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d1e4      	bne.n	800e528 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e564:	4618      	mov	r0, r3
 800e566:	f7f8 fa99 	bl	8006a9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2202      	movs	r2, #2
 800e56e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	b29b      	uxth	r3, r3
 800e582:	4619      	mov	r1, r3
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 f943 	bl	800e810 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e58a:	e119      	b.n	800e7c0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e596:	429a      	cmp	r2, r3
 800e598:	f040 8112 	bne.w	800e7c0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5a2:	69db      	ldr	r3, [r3, #28]
 800e5a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5a8:	f040 810a 	bne.w	800e7c0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2202      	movs	r2, #2
 800e5b0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 f928 	bl	800e810 <HAL_UARTEx_RxEventCallback>
      return;
 800e5c0:	e0fe      	b.n	800e7c0 <HAL_UART_IRQHandler+0x798>
 800e5c2:	bf00      	nop
 800e5c4:	40020010 	.word	0x40020010
 800e5c8:	40020028 	.word	0x40020028
 800e5cc:	40020040 	.word	0x40020040
 800e5d0:	40020058 	.word	0x40020058
 800e5d4:	40020070 	.word	0x40020070
 800e5d8:	40020088 	.word	0x40020088
 800e5dc:	400200a0 	.word	0x400200a0
 800e5e0:	400200b8 	.word	0x400200b8
 800e5e4:	40020410 	.word	0x40020410
 800e5e8:	40020428 	.word	0x40020428
 800e5ec:	40020440 	.word	0x40020440
 800e5f0:	40020458 	.word	0x40020458
 800e5f4:	40020470 	.word	0x40020470
 800e5f8:	40020488 	.word	0x40020488
 800e5fc:	400204a0 	.word	0x400204a0
 800e600:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e610:	b29b      	uxth	r3, r3
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e61e:	b29b      	uxth	r3, r3
 800e620:	2b00      	cmp	r3, #0
 800e622:	f000 80cf 	beq.w	800e7c4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800e626:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f000 80ca 	beq.w	800e7c4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e638:	e853 3f00 	ldrex	r3, [r3]
 800e63c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e63e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e644:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	461a      	mov	r2, r3
 800e64e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e652:	647b      	str	r3, [r7, #68]	@ 0x44
 800e654:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e656:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e65a:	e841 2300 	strex	r3, r2, [r1]
 800e65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1e4      	bne.n	800e630 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	3308      	adds	r3, #8
 800e66c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e670:	e853 3f00 	ldrex	r3, [r3]
 800e674:	623b      	str	r3, [r7, #32]
   return(result);
 800e676:	6a3a      	ldr	r2, [r7, #32]
 800e678:	4b55      	ldr	r3, [pc, #340]	@ (800e7d0 <HAL_UART_IRQHandler+0x7a8>)
 800e67a:	4013      	ands	r3, r2
 800e67c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	3308      	adds	r3, #8
 800e686:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e68a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e68c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e68e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e692:	e841 2300 	strex	r3, r2, [r1]
 800e696:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1e3      	bne.n	800e666 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2220      	movs	r2, #32
 800e6a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	e853 3f00 	ldrex	r3, [r3]
 800e6be:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f023 0310 	bic.w	r3, r3, #16
 800e6c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e6d4:	61fb      	str	r3, [r7, #28]
 800e6d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d8:	69b9      	ldr	r1, [r7, #24]
 800e6da:	69fa      	ldr	r2, [r7, #28]
 800e6dc:	e841 2300 	strex	r3, r2, [r1]
 800e6e0:	617b      	str	r3, [r7, #20]
   return(result);
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d1e4      	bne.n	800e6b2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2202      	movs	r2, #2
 800e6ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 f88b 	bl	800e810 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6fa:	e063      	b.n	800e7c4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e700:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00e      	beq.n	800e726 <HAL_UART_IRQHandler+0x6fe>
 800e708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e70c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e710:	2b00      	cmp	r3, #0
 800e712:	d008      	beq.n	800e726 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e71c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f001 fa24 	bl	800fb6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e724:	e051      	b.n	800e7ca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e72a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d014      	beq.n	800e75c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d105      	bne.n	800e74a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e73e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e746:	2b00      	cmp	r3, #0
 800e748:	d008      	beq.n	800e75c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d03a      	beq.n	800e7c8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	4798      	blx	r3
    }
    return;
 800e75a:	e035      	b.n	800e7c8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e764:	2b00      	cmp	r3, #0
 800e766:	d009      	beq.n	800e77c <HAL_UART_IRQHandler+0x754>
 800e768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e76c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e770:	2b00      	cmp	r3, #0
 800e772:	d003      	beq.n	800e77c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f001 f9ce 	bl	800fb16 <UART_EndTransmit_IT>
    return;
 800e77a:	e026      	b.n	800e7ca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e780:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e784:	2b00      	cmp	r3, #0
 800e786:	d009      	beq.n	800e79c <HAL_UART_IRQHandler+0x774>
 800e788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e78c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e790:	2b00      	cmp	r3, #0
 800e792:	d003      	beq.n	800e79c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f001 f9fd 	bl	800fb94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e79a:	e016      	b.n	800e7ca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d010      	beq.n	800e7ca <HAL_UART_IRQHandler+0x7a2>
 800e7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	da0c      	bge.n	800e7ca <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f001 f9e5 	bl	800fb80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7b6:	e008      	b.n	800e7ca <HAL_UART_IRQHandler+0x7a2>
      return;
 800e7b8:	bf00      	nop
 800e7ba:	e006      	b.n	800e7ca <HAL_UART_IRQHandler+0x7a2>
    return;
 800e7bc:	bf00      	nop
 800e7be:	e004      	b.n	800e7ca <HAL_UART_IRQHandler+0x7a2>
      return;
 800e7c0:	bf00      	nop
 800e7c2:	e002      	b.n	800e7ca <HAL_UART_IRQHandler+0x7a2>
      return;
 800e7c4:	bf00      	nop
 800e7c6:	e000      	b.n	800e7ca <HAL_UART_IRQHandler+0x7a2>
    return;
 800e7c8:	bf00      	nop
  }
}
 800e7ca:	37e8      	adds	r7, #232	@ 0xe8
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	effffffe 	.word	0xeffffffe

0800e7d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b083      	sub	sp, #12
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e7dc:	bf00      	nop
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e804:	bf00      	nop
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	460b      	mov	r3, r1
 800e81a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e81c:	bf00      	nop
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e82c:	b092      	sub	sp, #72	@ 0x48
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e832:	2300      	movs	r3, #0
 800e834:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	689a      	ldr	r2, [r3, #8]
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	431a      	orrs	r2, r3
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	695b      	ldr	r3, [r3, #20]
 800e846:	431a      	orrs	r2, r3
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	69db      	ldr	r3, [r3, #28]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	4bbe      	ldr	r3, [pc, #760]	@ (800eb50 <UART_SetConfig+0x328>)
 800e858:	4013      	ands	r3, r2
 800e85a:	697a      	ldr	r2, [r7, #20]
 800e85c:	6812      	ldr	r2, [r2, #0]
 800e85e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e860:	430b      	orrs	r3, r1
 800e862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	68da      	ldr	r2, [r3, #12]
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	430a      	orrs	r2, r1
 800e878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4ab3      	ldr	r2, [pc, #716]	@ (800eb54 <UART_SetConfig+0x32c>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d004      	beq.n	800e894 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	6a1b      	ldr	r3, [r3, #32]
 800e88e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e890:	4313      	orrs	r3, r2
 800e892:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	689a      	ldr	r2, [r3, #8]
 800e89a:	4baf      	ldr	r3, [pc, #700]	@ (800eb58 <UART_SetConfig+0x330>)
 800e89c:	4013      	ands	r3, r2
 800e89e:	697a      	ldr	r2, [r7, #20]
 800e8a0:	6812      	ldr	r2, [r2, #0]
 800e8a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e8a4:	430b      	orrs	r3, r1
 800e8a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ae:	f023 010f 	bic.w	r1, r3, #15
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	430a      	orrs	r2, r1
 800e8bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4aa6      	ldr	r2, [pc, #664]	@ (800eb5c <UART_SetConfig+0x334>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d177      	bne.n	800e9b8 <UART_SetConfig+0x190>
 800e8c8:	4ba5      	ldr	r3, [pc, #660]	@ (800eb60 <UART_SetConfig+0x338>)
 800e8ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e8d0:	2b28      	cmp	r3, #40	@ 0x28
 800e8d2:	d86d      	bhi.n	800e9b0 <UART_SetConfig+0x188>
 800e8d4:	a201      	add	r2, pc, #4	@ (adr r2, 800e8dc <UART_SetConfig+0xb4>)
 800e8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8da:	bf00      	nop
 800e8dc:	0800e981 	.word	0x0800e981
 800e8e0:	0800e9b1 	.word	0x0800e9b1
 800e8e4:	0800e9b1 	.word	0x0800e9b1
 800e8e8:	0800e9b1 	.word	0x0800e9b1
 800e8ec:	0800e9b1 	.word	0x0800e9b1
 800e8f0:	0800e9b1 	.word	0x0800e9b1
 800e8f4:	0800e9b1 	.word	0x0800e9b1
 800e8f8:	0800e9b1 	.word	0x0800e9b1
 800e8fc:	0800e989 	.word	0x0800e989
 800e900:	0800e9b1 	.word	0x0800e9b1
 800e904:	0800e9b1 	.word	0x0800e9b1
 800e908:	0800e9b1 	.word	0x0800e9b1
 800e90c:	0800e9b1 	.word	0x0800e9b1
 800e910:	0800e9b1 	.word	0x0800e9b1
 800e914:	0800e9b1 	.word	0x0800e9b1
 800e918:	0800e9b1 	.word	0x0800e9b1
 800e91c:	0800e991 	.word	0x0800e991
 800e920:	0800e9b1 	.word	0x0800e9b1
 800e924:	0800e9b1 	.word	0x0800e9b1
 800e928:	0800e9b1 	.word	0x0800e9b1
 800e92c:	0800e9b1 	.word	0x0800e9b1
 800e930:	0800e9b1 	.word	0x0800e9b1
 800e934:	0800e9b1 	.word	0x0800e9b1
 800e938:	0800e9b1 	.word	0x0800e9b1
 800e93c:	0800e999 	.word	0x0800e999
 800e940:	0800e9b1 	.word	0x0800e9b1
 800e944:	0800e9b1 	.word	0x0800e9b1
 800e948:	0800e9b1 	.word	0x0800e9b1
 800e94c:	0800e9b1 	.word	0x0800e9b1
 800e950:	0800e9b1 	.word	0x0800e9b1
 800e954:	0800e9b1 	.word	0x0800e9b1
 800e958:	0800e9b1 	.word	0x0800e9b1
 800e95c:	0800e9a1 	.word	0x0800e9a1
 800e960:	0800e9b1 	.word	0x0800e9b1
 800e964:	0800e9b1 	.word	0x0800e9b1
 800e968:	0800e9b1 	.word	0x0800e9b1
 800e96c:	0800e9b1 	.word	0x0800e9b1
 800e970:	0800e9b1 	.word	0x0800e9b1
 800e974:	0800e9b1 	.word	0x0800e9b1
 800e978:	0800e9b1 	.word	0x0800e9b1
 800e97c:	0800e9a9 	.word	0x0800e9a9
 800e980:	2301      	movs	r3, #1
 800e982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e986:	e326      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800e988:	2304      	movs	r3, #4
 800e98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e98e:	e322      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800e990:	2308      	movs	r3, #8
 800e992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e996:	e31e      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800e998:	2310      	movs	r3, #16
 800e99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e99e:	e31a      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800e9a0:	2320      	movs	r3, #32
 800e9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9a6:	e316      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800e9a8:	2340      	movs	r3, #64	@ 0x40
 800e9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ae:	e312      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800e9b0:	2380      	movs	r3, #128	@ 0x80
 800e9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9b6:	e30e      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a69      	ldr	r2, [pc, #420]	@ (800eb64 <UART_SetConfig+0x33c>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d130      	bne.n	800ea24 <UART_SetConfig+0x1fc>
 800e9c2:	4b67      	ldr	r3, [pc, #412]	@ (800eb60 <UART_SetConfig+0x338>)
 800e9c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9c6:	f003 0307 	and.w	r3, r3, #7
 800e9ca:	2b05      	cmp	r3, #5
 800e9cc:	d826      	bhi.n	800ea1c <UART_SetConfig+0x1f4>
 800e9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800e9d4 <UART_SetConfig+0x1ac>)
 800e9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d4:	0800e9ed 	.word	0x0800e9ed
 800e9d8:	0800e9f5 	.word	0x0800e9f5
 800e9dc:	0800e9fd 	.word	0x0800e9fd
 800e9e0:	0800ea05 	.word	0x0800ea05
 800e9e4:	0800ea0d 	.word	0x0800ea0d
 800e9e8:	0800ea15 	.word	0x0800ea15
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9f2:	e2f0      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800e9f4:	2304      	movs	r3, #4
 800e9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9fa:	e2ec      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800e9fc:	2308      	movs	r3, #8
 800e9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea02:	e2e8      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea04:	2310      	movs	r3, #16
 800ea06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea0a:	e2e4      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea0c:	2320      	movs	r3, #32
 800ea0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea12:	e2e0      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea14:	2340      	movs	r3, #64	@ 0x40
 800ea16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea1a:	e2dc      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea1c:	2380      	movs	r3, #128	@ 0x80
 800ea1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea22:	e2d8      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a4f      	ldr	r2, [pc, #316]	@ (800eb68 <UART_SetConfig+0x340>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d130      	bne.n	800ea90 <UART_SetConfig+0x268>
 800ea2e:	4b4c      	ldr	r3, [pc, #304]	@ (800eb60 <UART_SetConfig+0x338>)
 800ea30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea32:	f003 0307 	and.w	r3, r3, #7
 800ea36:	2b05      	cmp	r3, #5
 800ea38:	d826      	bhi.n	800ea88 <UART_SetConfig+0x260>
 800ea3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea40 <UART_SetConfig+0x218>)
 800ea3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea40:	0800ea59 	.word	0x0800ea59
 800ea44:	0800ea61 	.word	0x0800ea61
 800ea48:	0800ea69 	.word	0x0800ea69
 800ea4c:	0800ea71 	.word	0x0800ea71
 800ea50:	0800ea79 	.word	0x0800ea79
 800ea54:	0800ea81 	.word	0x0800ea81
 800ea58:	2300      	movs	r3, #0
 800ea5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea5e:	e2ba      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea60:	2304      	movs	r3, #4
 800ea62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea66:	e2b6      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea68:	2308      	movs	r3, #8
 800ea6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea6e:	e2b2      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea70:	2310      	movs	r3, #16
 800ea72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea76:	e2ae      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea78:	2320      	movs	r3, #32
 800ea7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea7e:	e2aa      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea80:	2340      	movs	r3, #64	@ 0x40
 800ea82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea86:	e2a6      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea88:	2380      	movs	r3, #128	@ 0x80
 800ea8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea8e:	e2a2      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a35      	ldr	r2, [pc, #212]	@ (800eb6c <UART_SetConfig+0x344>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d130      	bne.n	800eafc <UART_SetConfig+0x2d4>
 800ea9a:	4b31      	ldr	r3, [pc, #196]	@ (800eb60 <UART_SetConfig+0x338>)
 800ea9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea9e:	f003 0307 	and.w	r3, r3, #7
 800eaa2:	2b05      	cmp	r3, #5
 800eaa4:	d826      	bhi.n	800eaf4 <UART_SetConfig+0x2cc>
 800eaa6:	a201      	add	r2, pc, #4	@ (adr r2, 800eaac <UART_SetConfig+0x284>)
 800eaa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaac:	0800eac5 	.word	0x0800eac5
 800eab0:	0800eacd 	.word	0x0800eacd
 800eab4:	0800ead5 	.word	0x0800ead5
 800eab8:	0800eadd 	.word	0x0800eadd
 800eabc:	0800eae5 	.word	0x0800eae5
 800eac0:	0800eaed 	.word	0x0800eaed
 800eac4:	2300      	movs	r3, #0
 800eac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaca:	e284      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eacc:	2304      	movs	r3, #4
 800eace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ead2:	e280      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ead4:	2308      	movs	r3, #8
 800ead6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eada:	e27c      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eadc:	2310      	movs	r3, #16
 800eade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eae2:	e278      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eae4:	2320      	movs	r3, #32
 800eae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaea:	e274      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eaec:	2340      	movs	r3, #64	@ 0x40
 800eaee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaf2:	e270      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eaf4:	2380      	movs	r3, #128	@ 0x80
 800eaf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eafa:	e26c      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a1b      	ldr	r2, [pc, #108]	@ (800eb70 <UART_SetConfig+0x348>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d142      	bne.n	800eb8c <UART_SetConfig+0x364>
 800eb06:	4b16      	ldr	r3, [pc, #88]	@ (800eb60 <UART_SetConfig+0x338>)
 800eb08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb0a:	f003 0307 	and.w	r3, r3, #7
 800eb0e:	2b05      	cmp	r3, #5
 800eb10:	d838      	bhi.n	800eb84 <UART_SetConfig+0x35c>
 800eb12:	a201      	add	r2, pc, #4	@ (adr r2, 800eb18 <UART_SetConfig+0x2f0>)
 800eb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb18:	0800eb31 	.word	0x0800eb31
 800eb1c:	0800eb39 	.word	0x0800eb39
 800eb20:	0800eb41 	.word	0x0800eb41
 800eb24:	0800eb49 	.word	0x0800eb49
 800eb28:	0800eb75 	.word	0x0800eb75
 800eb2c:	0800eb7d 	.word	0x0800eb7d
 800eb30:	2300      	movs	r3, #0
 800eb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb36:	e24e      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eb38:	2304      	movs	r3, #4
 800eb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb3e:	e24a      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eb40:	2308      	movs	r3, #8
 800eb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb46:	e246      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eb48:	2310      	movs	r3, #16
 800eb4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb4e:	e242      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eb50:	cfff69f3 	.word	0xcfff69f3
 800eb54:	58000c00 	.word	0x58000c00
 800eb58:	11fff4ff 	.word	0x11fff4ff
 800eb5c:	40011000 	.word	0x40011000
 800eb60:	58024400 	.word	0x58024400
 800eb64:	40004400 	.word	0x40004400
 800eb68:	40004800 	.word	0x40004800
 800eb6c:	40004c00 	.word	0x40004c00
 800eb70:	40005000 	.word	0x40005000
 800eb74:	2320      	movs	r3, #32
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb7a:	e22c      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eb7c:	2340      	movs	r3, #64	@ 0x40
 800eb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb82:	e228      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eb84:	2380      	movs	r3, #128	@ 0x80
 800eb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb8a:	e224      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4ab1      	ldr	r2, [pc, #708]	@ (800ee58 <UART_SetConfig+0x630>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d176      	bne.n	800ec84 <UART_SetConfig+0x45c>
 800eb96:	4bb1      	ldr	r3, [pc, #708]	@ (800ee5c <UART_SetConfig+0x634>)
 800eb98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eb9e:	2b28      	cmp	r3, #40	@ 0x28
 800eba0:	d86c      	bhi.n	800ec7c <UART_SetConfig+0x454>
 800eba2:	a201      	add	r2, pc, #4	@ (adr r2, 800eba8 <UART_SetConfig+0x380>)
 800eba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba8:	0800ec4d 	.word	0x0800ec4d
 800ebac:	0800ec7d 	.word	0x0800ec7d
 800ebb0:	0800ec7d 	.word	0x0800ec7d
 800ebb4:	0800ec7d 	.word	0x0800ec7d
 800ebb8:	0800ec7d 	.word	0x0800ec7d
 800ebbc:	0800ec7d 	.word	0x0800ec7d
 800ebc0:	0800ec7d 	.word	0x0800ec7d
 800ebc4:	0800ec7d 	.word	0x0800ec7d
 800ebc8:	0800ec55 	.word	0x0800ec55
 800ebcc:	0800ec7d 	.word	0x0800ec7d
 800ebd0:	0800ec7d 	.word	0x0800ec7d
 800ebd4:	0800ec7d 	.word	0x0800ec7d
 800ebd8:	0800ec7d 	.word	0x0800ec7d
 800ebdc:	0800ec7d 	.word	0x0800ec7d
 800ebe0:	0800ec7d 	.word	0x0800ec7d
 800ebe4:	0800ec7d 	.word	0x0800ec7d
 800ebe8:	0800ec5d 	.word	0x0800ec5d
 800ebec:	0800ec7d 	.word	0x0800ec7d
 800ebf0:	0800ec7d 	.word	0x0800ec7d
 800ebf4:	0800ec7d 	.word	0x0800ec7d
 800ebf8:	0800ec7d 	.word	0x0800ec7d
 800ebfc:	0800ec7d 	.word	0x0800ec7d
 800ec00:	0800ec7d 	.word	0x0800ec7d
 800ec04:	0800ec7d 	.word	0x0800ec7d
 800ec08:	0800ec65 	.word	0x0800ec65
 800ec0c:	0800ec7d 	.word	0x0800ec7d
 800ec10:	0800ec7d 	.word	0x0800ec7d
 800ec14:	0800ec7d 	.word	0x0800ec7d
 800ec18:	0800ec7d 	.word	0x0800ec7d
 800ec1c:	0800ec7d 	.word	0x0800ec7d
 800ec20:	0800ec7d 	.word	0x0800ec7d
 800ec24:	0800ec7d 	.word	0x0800ec7d
 800ec28:	0800ec6d 	.word	0x0800ec6d
 800ec2c:	0800ec7d 	.word	0x0800ec7d
 800ec30:	0800ec7d 	.word	0x0800ec7d
 800ec34:	0800ec7d 	.word	0x0800ec7d
 800ec38:	0800ec7d 	.word	0x0800ec7d
 800ec3c:	0800ec7d 	.word	0x0800ec7d
 800ec40:	0800ec7d 	.word	0x0800ec7d
 800ec44:	0800ec7d 	.word	0x0800ec7d
 800ec48:	0800ec75 	.word	0x0800ec75
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec52:	e1c0      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ec54:	2304      	movs	r3, #4
 800ec56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec5a:	e1bc      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ec5c:	2308      	movs	r3, #8
 800ec5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec62:	e1b8      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ec64:	2310      	movs	r3, #16
 800ec66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec6a:	e1b4      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ec6c:	2320      	movs	r3, #32
 800ec6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec72:	e1b0      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ec74:	2340      	movs	r3, #64	@ 0x40
 800ec76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec7a:	e1ac      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ec7c:	2380      	movs	r3, #128	@ 0x80
 800ec7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec82:	e1a8      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a75      	ldr	r2, [pc, #468]	@ (800ee60 <UART_SetConfig+0x638>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d130      	bne.n	800ecf0 <UART_SetConfig+0x4c8>
 800ec8e:	4b73      	ldr	r3, [pc, #460]	@ (800ee5c <UART_SetConfig+0x634>)
 800ec90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec92:	f003 0307 	and.w	r3, r3, #7
 800ec96:	2b05      	cmp	r3, #5
 800ec98:	d826      	bhi.n	800ece8 <UART_SetConfig+0x4c0>
 800ec9a:	a201      	add	r2, pc, #4	@ (adr r2, 800eca0 <UART_SetConfig+0x478>)
 800ec9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca0:	0800ecb9 	.word	0x0800ecb9
 800eca4:	0800ecc1 	.word	0x0800ecc1
 800eca8:	0800ecc9 	.word	0x0800ecc9
 800ecac:	0800ecd1 	.word	0x0800ecd1
 800ecb0:	0800ecd9 	.word	0x0800ecd9
 800ecb4:	0800ece1 	.word	0x0800ece1
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecbe:	e18a      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ecc0:	2304      	movs	r3, #4
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecc6:	e186      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ecc8:	2308      	movs	r3, #8
 800ecca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecce:	e182      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ecd0:	2310      	movs	r3, #16
 800ecd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecd6:	e17e      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ecd8:	2320      	movs	r3, #32
 800ecda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecde:	e17a      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ece0:	2340      	movs	r3, #64	@ 0x40
 800ece2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ece6:	e176      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ece8:	2380      	movs	r3, #128	@ 0x80
 800ecea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecee:	e172      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4a5b      	ldr	r2, [pc, #364]	@ (800ee64 <UART_SetConfig+0x63c>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d130      	bne.n	800ed5c <UART_SetConfig+0x534>
 800ecfa:	4b58      	ldr	r3, [pc, #352]	@ (800ee5c <UART_SetConfig+0x634>)
 800ecfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecfe:	f003 0307 	and.w	r3, r3, #7
 800ed02:	2b05      	cmp	r3, #5
 800ed04:	d826      	bhi.n	800ed54 <UART_SetConfig+0x52c>
 800ed06:	a201      	add	r2, pc, #4	@ (adr r2, 800ed0c <UART_SetConfig+0x4e4>)
 800ed08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed0c:	0800ed25 	.word	0x0800ed25
 800ed10:	0800ed2d 	.word	0x0800ed2d
 800ed14:	0800ed35 	.word	0x0800ed35
 800ed18:	0800ed3d 	.word	0x0800ed3d
 800ed1c:	0800ed45 	.word	0x0800ed45
 800ed20:	0800ed4d 	.word	0x0800ed4d
 800ed24:	2300      	movs	r3, #0
 800ed26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed2a:	e154      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ed2c:	2304      	movs	r3, #4
 800ed2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed32:	e150      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ed34:	2308      	movs	r3, #8
 800ed36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed3a:	e14c      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ed3c:	2310      	movs	r3, #16
 800ed3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed42:	e148      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ed44:	2320      	movs	r3, #32
 800ed46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed4a:	e144      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ed4c:	2340      	movs	r3, #64	@ 0x40
 800ed4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed52:	e140      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ed54:	2380      	movs	r3, #128	@ 0x80
 800ed56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed5a:	e13c      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a41      	ldr	r2, [pc, #260]	@ (800ee68 <UART_SetConfig+0x640>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	f040 8082 	bne.w	800ee6c <UART_SetConfig+0x644>
 800ed68:	4b3c      	ldr	r3, [pc, #240]	@ (800ee5c <UART_SetConfig+0x634>)
 800ed6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed70:	2b28      	cmp	r3, #40	@ 0x28
 800ed72:	d86d      	bhi.n	800ee50 <UART_SetConfig+0x628>
 800ed74:	a201      	add	r2, pc, #4	@ (adr r2, 800ed7c <UART_SetConfig+0x554>)
 800ed76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7a:	bf00      	nop
 800ed7c:	0800ee21 	.word	0x0800ee21
 800ed80:	0800ee51 	.word	0x0800ee51
 800ed84:	0800ee51 	.word	0x0800ee51
 800ed88:	0800ee51 	.word	0x0800ee51
 800ed8c:	0800ee51 	.word	0x0800ee51
 800ed90:	0800ee51 	.word	0x0800ee51
 800ed94:	0800ee51 	.word	0x0800ee51
 800ed98:	0800ee51 	.word	0x0800ee51
 800ed9c:	0800ee29 	.word	0x0800ee29
 800eda0:	0800ee51 	.word	0x0800ee51
 800eda4:	0800ee51 	.word	0x0800ee51
 800eda8:	0800ee51 	.word	0x0800ee51
 800edac:	0800ee51 	.word	0x0800ee51
 800edb0:	0800ee51 	.word	0x0800ee51
 800edb4:	0800ee51 	.word	0x0800ee51
 800edb8:	0800ee51 	.word	0x0800ee51
 800edbc:	0800ee31 	.word	0x0800ee31
 800edc0:	0800ee51 	.word	0x0800ee51
 800edc4:	0800ee51 	.word	0x0800ee51
 800edc8:	0800ee51 	.word	0x0800ee51
 800edcc:	0800ee51 	.word	0x0800ee51
 800edd0:	0800ee51 	.word	0x0800ee51
 800edd4:	0800ee51 	.word	0x0800ee51
 800edd8:	0800ee51 	.word	0x0800ee51
 800eddc:	0800ee39 	.word	0x0800ee39
 800ede0:	0800ee51 	.word	0x0800ee51
 800ede4:	0800ee51 	.word	0x0800ee51
 800ede8:	0800ee51 	.word	0x0800ee51
 800edec:	0800ee51 	.word	0x0800ee51
 800edf0:	0800ee51 	.word	0x0800ee51
 800edf4:	0800ee51 	.word	0x0800ee51
 800edf8:	0800ee51 	.word	0x0800ee51
 800edfc:	0800ee41 	.word	0x0800ee41
 800ee00:	0800ee51 	.word	0x0800ee51
 800ee04:	0800ee51 	.word	0x0800ee51
 800ee08:	0800ee51 	.word	0x0800ee51
 800ee0c:	0800ee51 	.word	0x0800ee51
 800ee10:	0800ee51 	.word	0x0800ee51
 800ee14:	0800ee51 	.word	0x0800ee51
 800ee18:	0800ee51 	.word	0x0800ee51
 800ee1c:	0800ee49 	.word	0x0800ee49
 800ee20:	2301      	movs	r3, #1
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee26:	e0d6      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ee28:	2304      	movs	r3, #4
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee2e:	e0d2      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ee30:	2308      	movs	r3, #8
 800ee32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee36:	e0ce      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ee38:	2310      	movs	r3, #16
 800ee3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee3e:	e0ca      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ee40:	2320      	movs	r3, #32
 800ee42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee46:	e0c6      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ee48:	2340      	movs	r3, #64	@ 0x40
 800ee4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee4e:	e0c2      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ee50:	2380      	movs	r3, #128	@ 0x80
 800ee52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee56:	e0be      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ee58:	40011400 	.word	0x40011400
 800ee5c:	58024400 	.word	0x58024400
 800ee60:	40007800 	.word	0x40007800
 800ee64:	40007c00 	.word	0x40007c00
 800ee68:	40011800 	.word	0x40011800
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4aad      	ldr	r2, [pc, #692]	@ (800f128 <UART_SetConfig+0x900>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d176      	bne.n	800ef64 <UART_SetConfig+0x73c>
 800ee76:	4bad      	ldr	r3, [pc, #692]	@ (800f12c <UART_SetConfig+0x904>)
 800ee78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ee7e:	2b28      	cmp	r3, #40	@ 0x28
 800ee80:	d86c      	bhi.n	800ef5c <UART_SetConfig+0x734>
 800ee82:	a201      	add	r2, pc, #4	@ (adr r2, 800ee88 <UART_SetConfig+0x660>)
 800ee84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee88:	0800ef2d 	.word	0x0800ef2d
 800ee8c:	0800ef5d 	.word	0x0800ef5d
 800ee90:	0800ef5d 	.word	0x0800ef5d
 800ee94:	0800ef5d 	.word	0x0800ef5d
 800ee98:	0800ef5d 	.word	0x0800ef5d
 800ee9c:	0800ef5d 	.word	0x0800ef5d
 800eea0:	0800ef5d 	.word	0x0800ef5d
 800eea4:	0800ef5d 	.word	0x0800ef5d
 800eea8:	0800ef35 	.word	0x0800ef35
 800eeac:	0800ef5d 	.word	0x0800ef5d
 800eeb0:	0800ef5d 	.word	0x0800ef5d
 800eeb4:	0800ef5d 	.word	0x0800ef5d
 800eeb8:	0800ef5d 	.word	0x0800ef5d
 800eebc:	0800ef5d 	.word	0x0800ef5d
 800eec0:	0800ef5d 	.word	0x0800ef5d
 800eec4:	0800ef5d 	.word	0x0800ef5d
 800eec8:	0800ef3d 	.word	0x0800ef3d
 800eecc:	0800ef5d 	.word	0x0800ef5d
 800eed0:	0800ef5d 	.word	0x0800ef5d
 800eed4:	0800ef5d 	.word	0x0800ef5d
 800eed8:	0800ef5d 	.word	0x0800ef5d
 800eedc:	0800ef5d 	.word	0x0800ef5d
 800eee0:	0800ef5d 	.word	0x0800ef5d
 800eee4:	0800ef5d 	.word	0x0800ef5d
 800eee8:	0800ef45 	.word	0x0800ef45
 800eeec:	0800ef5d 	.word	0x0800ef5d
 800eef0:	0800ef5d 	.word	0x0800ef5d
 800eef4:	0800ef5d 	.word	0x0800ef5d
 800eef8:	0800ef5d 	.word	0x0800ef5d
 800eefc:	0800ef5d 	.word	0x0800ef5d
 800ef00:	0800ef5d 	.word	0x0800ef5d
 800ef04:	0800ef5d 	.word	0x0800ef5d
 800ef08:	0800ef4d 	.word	0x0800ef4d
 800ef0c:	0800ef5d 	.word	0x0800ef5d
 800ef10:	0800ef5d 	.word	0x0800ef5d
 800ef14:	0800ef5d 	.word	0x0800ef5d
 800ef18:	0800ef5d 	.word	0x0800ef5d
 800ef1c:	0800ef5d 	.word	0x0800ef5d
 800ef20:	0800ef5d 	.word	0x0800ef5d
 800ef24:	0800ef5d 	.word	0x0800ef5d
 800ef28:	0800ef55 	.word	0x0800ef55
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef32:	e050      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ef34:	2304      	movs	r3, #4
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3a:	e04c      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ef3c:	2308      	movs	r3, #8
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef42:	e048      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ef44:	2310      	movs	r3, #16
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4a:	e044      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ef4c:	2320      	movs	r3, #32
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef52:	e040      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ef54:	2340      	movs	r3, #64	@ 0x40
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5a:	e03c      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ef5c:	2380      	movs	r3, #128	@ 0x80
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef62:	e038      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a71      	ldr	r2, [pc, #452]	@ (800f130 <UART_SetConfig+0x908>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d130      	bne.n	800efd0 <UART_SetConfig+0x7a8>
 800ef6e:	4b6f      	ldr	r3, [pc, #444]	@ (800f12c <UART_SetConfig+0x904>)
 800ef70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef72:	f003 0307 	and.w	r3, r3, #7
 800ef76:	2b05      	cmp	r3, #5
 800ef78:	d826      	bhi.n	800efc8 <UART_SetConfig+0x7a0>
 800ef7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef80 <UART_SetConfig+0x758>)
 800ef7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef80:	0800ef99 	.word	0x0800ef99
 800ef84:	0800efa1 	.word	0x0800efa1
 800ef88:	0800efa9 	.word	0x0800efa9
 800ef8c:	0800efb1 	.word	0x0800efb1
 800ef90:	0800efb9 	.word	0x0800efb9
 800ef94:	0800efc1 	.word	0x0800efc1
 800ef98:	2302      	movs	r3, #2
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef9e:	e01a      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800efa0:	2304      	movs	r3, #4
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efa6:	e016      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800efa8:	2308      	movs	r3, #8
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efae:	e012      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800efb0:	2310      	movs	r3, #16
 800efb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efb6:	e00e      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800efb8:	2320      	movs	r3, #32
 800efba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efbe:	e00a      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800efc0:	2340      	movs	r3, #64	@ 0x40
 800efc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efc6:	e006      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800efc8:	2380      	movs	r3, #128	@ 0x80
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efce:	e002      	b.n	800efd6 <UART_SetConfig+0x7ae>
 800efd0:	2380      	movs	r3, #128	@ 0x80
 800efd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	4a55      	ldr	r2, [pc, #340]	@ (800f130 <UART_SetConfig+0x908>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	f040 80f8 	bne.w	800f1d2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800efe2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800efe6:	2b20      	cmp	r3, #32
 800efe8:	dc46      	bgt.n	800f078 <UART_SetConfig+0x850>
 800efea:	2b02      	cmp	r3, #2
 800efec:	db75      	blt.n	800f0da <UART_SetConfig+0x8b2>
 800efee:	3b02      	subs	r3, #2
 800eff0:	2b1e      	cmp	r3, #30
 800eff2:	d872      	bhi.n	800f0da <UART_SetConfig+0x8b2>
 800eff4:	a201      	add	r2, pc, #4	@ (adr r2, 800effc <UART_SetConfig+0x7d4>)
 800eff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800effa:	bf00      	nop
 800effc:	0800f07f 	.word	0x0800f07f
 800f000:	0800f0db 	.word	0x0800f0db
 800f004:	0800f087 	.word	0x0800f087
 800f008:	0800f0db 	.word	0x0800f0db
 800f00c:	0800f0db 	.word	0x0800f0db
 800f010:	0800f0db 	.word	0x0800f0db
 800f014:	0800f097 	.word	0x0800f097
 800f018:	0800f0db 	.word	0x0800f0db
 800f01c:	0800f0db 	.word	0x0800f0db
 800f020:	0800f0db 	.word	0x0800f0db
 800f024:	0800f0db 	.word	0x0800f0db
 800f028:	0800f0db 	.word	0x0800f0db
 800f02c:	0800f0db 	.word	0x0800f0db
 800f030:	0800f0db 	.word	0x0800f0db
 800f034:	0800f0a7 	.word	0x0800f0a7
 800f038:	0800f0db 	.word	0x0800f0db
 800f03c:	0800f0db 	.word	0x0800f0db
 800f040:	0800f0db 	.word	0x0800f0db
 800f044:	0800f0db 	.word	0x0800f0db
 800f048:	0800f0db 	.word	0x0800f0db
 800f04c:	0800f0db 	.word	0x0800f0db
 800f050:	0800f0db 	.word	0x0800f0db
 800f054:	0800f0db 	.word	0x0800f0db
 800f058:	0800f0db 	.word	0x0800f0db
 800f05c:	0800f0db 	.word	0x0800f0db
 800f060:	0800f0db 	.word	0x0800f0db
 800f064:	0800f0db 	.word	0x0800f0db
 800f068:	0800f0db 	.word	0x0800f0db
 800f06c:	0800f0db 	.word	0x0800f0db
 800f070:	0800f0db 	.word	0x0800f0db
 800f074:	0800f0cd 	.word	0x0800f0cd
 800f078:	2b40      	cmp	r3, #64	@ 0x40
 800f07a:	d02a      	beq.n	800f0d2 <UART_SetConfig+0x8aa>
 800f07c:	e02d      	b.n	800f0da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f07e:	f7fc fe8b 	bl	800bd98 <HAL_RCCEx_GetD3PCLK1Freq>
 800f082:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f084:	e02f      	b.n	800f0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fc fe9a 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f094:	e027      	b.n	800f0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f096:	f107 0318 	add.w	r3, r7, #24
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fc ffe6 	bl	800c06c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0a4:	e01f      	b.n	800f0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0a6:	4b21      	ldr	r3, [pc, #132]	@ (800f12c <UART_SetConfig+0x904>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f003 0320 	and.w	r3, r3, #32
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d009      	beq.n	800f0c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f0b2:	4b1e      	ldr	r3, [pc, #120]	@ (800f12c <UART_SetConfig+0x904>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	08db      	lsrs	r3, r3, #3
 800f0b8:	f003 0303 	and.w	r3, r3, #3
 800f0bc:	4a1d      	ldr	r2, [pc, #116]	@ (800f134 <UART_SetConfig+0x90c>)
 800f0be:	fa22 f303 	lsr.w	r3, r2, r3
 800f0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0c4:	e00f      	b.n	800f0e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f0c6:	4b1b      	ldr	r3, [pc, #108]	@ (800f134 <UART_SetConfig+0x90c>)
 800f0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0ca:	e00c      	b.n	800f0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0cc:	4b1a      	ldr	r3, [pc, #104]	@ (800f138 <UART_SetConfig+0x910>)
 800f0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0d0:	e009      	b.n	800f0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0d8:	e005      	b.n	800f0e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f0e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	f000 81ee 	beq.w	800f4ca <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0f2:	4a12      	ldr	r2, [pc, #72]	@ (800f13c <UART_SetConfig+0x914>)
 800f0f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f100:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	685a      	ldr	r2, [r3, #4]
 800f106:	4613      	mov	r3, r2
 800f108:	005b      	lsls	r3, r3, #1
 800f10a:	4413      	add	r3, r2
 800f10c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f10e:	429a      	cmp	r2, r3
 800f110:	d305      	bcc.n	800f11e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d910      	bls.n	800f140 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f11e:	2301      	movs	r3, #1
 800f120:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f124:	e1d1      	b.n	800f4ca <UART_SetConfig+0xca2>
 800f126:	bf00      	nop
 800f128:	40011c00 	.word	0x40011c00
 800f12c:	58024400 	.word	0x58024400
 800f130:	58000c00 	.word	0x58000c00
 800f134:	03d09000 	.word	0x03d09000
 800f138:	003d0900 	.word	0x003d0900
 800f13c:	08013c48 	.word	0x08013c48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f142:	2200      	movs	r2, #0
 800f144:	60bb      	str	r3, [r7, #8]
 800f146:	60fa      	str	r2, [r7, #12]
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f14c:	4ac0      	ldr	r2, [pc, #768]	@ (800f450 <UART_SetConfig+0xc28>)
 800f14e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f152:	b29b      	uxth	r3, r3
 800f154:	2200      	movs	r2, #0
 800f156:	603b      	str	r3, [r7, #0]
 800f158:	607a      	str	r2, [r7, #4]
 800f15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f15e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f162:	f7f1 fa99 	bl	8000698 <__aeabi_uldivmod>
 800f166:	4602      	mov	r2, r0
 800f168:	460b      	mov	r3, r1
 800f16a:	4610      	mov	r0, r2
 800f16c:	4619      	mov	r1, r3
 800f16e:	f04f 0200 	mov.w	r2, #0
 800f172:	f04f 0300 	mov.w	r3, #0
 800f176:	020b      	lsls	r3, r1, #8
 800f178:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f17c:	0202      	lsls	r2, r0, #8
 800f17e:	6979      	ldr	r1, [r7, #20]
 800f180:	6849      	ldr	r1, [r1, #4]
 800f182:	0849      	lsrs	r1, r1, #1
 800f184:	2000      	movs	r0, #0
 800f186:	460c      	mov	r4, r1
 800f188:	4605      	mov	r5, r0
 800f18a:	eb12 0804 	adds.w	r8, r2, r4
 800f18e:	eb43 0905 	adc.w	r9, r3, r5
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	469a      	mov	sl, r3
 800f19a:	4693      	mov	fp, r2
 800f19c:	4652      	mov	r2, sl
 800f19e:	465b      	mov	r3, fp
 800f1a0:	4640      	mov	r0, r8
 800f1a2:	4649      	mov	r1, r9
 800f1a4:	f7f1 fa78 	bl	8000698 <__aeabi_uldivmod>
 800f1a8:	4602      	mov	r2, r0
 800f1aa:	460b      	mov	r3, r1
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1b6:	d308      	bcc.n	800f1ca <UART_SetConfig+0x9a2>
 800f1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1be:	d204      	bcs.n	800f1ca <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1c6:	60da      	str	r2, [r3, #12]
 800f1c8:	e17f      	b.n	800f4ca <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f1d0:	e17b      	b.n	800f4ca <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	69db      	ldr	r3, [r3, #28]
 800f1d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1da:	f040 80bd 	bne.w	800f358 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f1de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f1e2:	2b20      	cmp	r3, #32
 800f1e4:	dc48      	bgt.n	800f278 <UART_SetConfig+0xa50>
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	db7b      	blt.n	800f2e2 <UART_SetConfig+0xaba>
 800f1ea:	2b20      	cmp	r3, #32
 800f1ec:	d879      	bhi.n	800f2e2 <UART_SetConfig+0xaba>
 800f1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f1f4 <UART_SetConfig+0x9cc>)
 800f1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1f4:	0800f27f 	.word	0x0800f27f
 800f1f8:	0800f287 	.word	0x0800f287
 800f1fc:	0800f2e3 	.word	0x0800f2e3
 800f200:	0800f2e3 	.word	0x0800f2e3
 800f204:	0800f28f 	.word	0x0800f28f
 800f208:	0800f2e3 	.word	0x0800f2e3
 800f20c:	0800f2e3 	.word	0x0800f2e3
 800f210:	0800f2e3 	.word	0x0800f2e3
 800f214:	0800f29f 	.word	0x0800f29f
 800f218:	0800f2e3 	.word	0x0800f2e3
 800f21c:	0800f2e3 	.word	0x0800f2e3
 800f220:	0800f2e3 	.word	0x0800f2e3
 800f224:	0800f2e3 	.word	0x0800f2e3
 800f228:	0800f2e3 	.word	0x0800f2e3
 800f22c:	0800f2e3 	.word	0x0800f2e3
 800f230:	0800f2e3 	.word	0x0800f2e3
 800f234:	0800f2af 	.word	0x0800f2af
 800f238:	0800f2e3 	.word	0x0800f2e3
 800f23c:	0800f2e3 	.word	0x0800f2e3
 800f240:	0800f2e3 	.word	0x0800f2e3
 800f244:	0800f2e3 	.word	0x0800f2e3
 800f248:	0800f2e3 	.word	0x0800f2e3
 800f24c:	0800f2e3 	.word	0x0800f2e3
 800f250:	0800f2e3 	.word	0x0800f2e3
 800f254:	0800f2e3 	.word	0x0800f2e3
 800f258:	0800f2e3 	.word	0x0800f2e3
 800f25c:	0800f2e3 	.word	0x0800f2e3
 800f260:	0800f2e3 	.word	0x0800f2e3
 800f264:	0800f2e3 	.word	0x0800f2e3
 800f268:	0800f2e3 	.word	0x0800f2e3
 800f26c:	0800f2e3 	.word	0x0800f2e3
 800f270:	0800f2e3 	.word	0x0800f2e3
 800f274:	0800f2d5 	.word	0x0800f2d5
 800f278:	2b40      	cmp	r3, #64	@ 0x40
 800f27a:	d02e      	beq.n	800f2da <UART_SetConfig+0xab2>
 800f27c:	e031      	b.n	800f2e2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f27e:	f7fa feed 	bl	800a05c <HAL_RCC_GetPCLK1Freq>
 800f282:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f284:	e033      	b.n	800f2ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f286:	f7fa feff 	bl	800a088 <HAL_RCC_GetPCLK2Freq>
 800f28a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f28c:	e02f      	b.n	800f2ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f28e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f292:	4618      	mov	r0, r3
 800f294:	f7fc fd96 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f29c:	e027      	b.n	800f2ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f29e:	f107 0318 	add.w	r3, r7, #24
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7fc fee2 	bl	800c06c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2ac:	e01f      	b.n	800f2ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2ae:	4b69      	ldr	r3, [pc, #420]	@ (800f454 <UART_SetConfig+0xc2c>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f003 0320 	and.w	r3, r3, #32
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d009      	beq.n	800f2ce <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f2ba:	4b66      	ldr	r3, [pc, #408]	@ (800f454 <UART_SetConfig+0xc2c>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	08db      	lsrs	r3, r3, #3
 800f2c0:	f003 0303 	and.w	r3, r3, #3
 800f2c4:	4a64      	ldr	r2, [pc, #400]	@ (800f458 <UART_SetConfig+0xc30>)
 800f2c6:	fa22 f303 	lsr.w	r3, r2, r3
 800f2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2cc:	e00f      	b.n	800f2ee <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f2ce:	4b62      	ldr	r3, [pc, #392]	@ (800f458 <UART_SetConfig+0xc30>)
 800f2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2d2:	e00c      	b.n	800f2ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2d4:	4b61      	ldr	r3, [pc, #388]	@ (800f45c <UART_SetConfig+0xc34>)
 800f2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2d8:	e009      	b.n	800f2ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2e0:	e005      	b.n	800f2ee <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f2ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f2ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f000 80ea 	beq.w	800f4ca <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2fa:	4a55      	ldr	r2, [pc, #340]	@ (800f450 <UART_SetConfig+0xc28>)
 800f2fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f300:	461a      	mov	r2, r3
 800f302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f304:	fbb3 f3f2 	udiv	r3, r3, r2
 800f308:	005a      	lsls	r2, r3, #1
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	085b      	lsrs	r3, r3, #1
 800f310:	441a      	add	r2, r3
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	fbb2 f3f3 	udiv	r3, r2, r3
 800f31a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f31e:	2b0f      	cmp	r3, #15
 800f320:	d916      	bls.n	800f350 <UART_SetConfig+0xb28>
 800f322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f328:	d212      	bcs.n	800f350 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	f023 030f 	bic.w	r3, r3, #15
 800f332:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f336:	085b      	lsrs	r3, r3, #1
 800f338:	b29b      	uxth	r3, r3
 800f33a:	f003 0307 	and.w	r3, r3, #7
 800f33e:	b29a      	uxth	r2, r3
 800f340:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f342:	4313      	orrs	r3, r2
 800f344:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f34c:	60da      	str	r2, [r3, #12]
 800f34e:	e0bc      	b.n	800f4ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f350:	2301      	movs	r3, #1
 800f352:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f356:	e0b8      	b.n	800f4ca <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f358:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f35c:	2b20      	cmp	r3, #32
 800f35e:	dc4b      	bgt.n	800f3f8 <UART_SetConfig+0xbd0>
 800f360:	2b00      	cmp	r3, #0
 800f362:	f2c0 8087 	blt.w	800f474 <UART_SetConfig+0xc4c>
 800f366:	2b20      	cmp	r3, #32
 800f368:	f200 8084 	bhi.w	800f474 <UART_SetConfig+0xc4c>
 800f36c:	a201      	add	r2, pc, #4	@ (adr r2, 800f374 <UART_SetConfig+0xb4c>)
 800f36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f372:	bf00      	nop
 800f374:	0800f3ff 	.word	0x0800f3ff
 800f378:	0800f407 	.word	0x0800f407
 800f37c:	0800f475 	.word	0x0800f475
 800f380:	0800f475 	.word	0x0800f475
 800f384:	0800f40f 	.word	0x0800f40f
 800f388:	0800f475 	.word	0x0800f475
 800f38c:	0800f475 	.word	0x0800f475
 800f390:	0800f475 	.word	0x0800f475
 800f394:	0800f41f 	.word	0x0800f41f
 800f398:	0800f475 	.word	0x0800f475
 800f39c:	0800f475 	.word	0x0800f475
 800f3a0:	0800f475 	.word	0x0800f475
 800f3a4:	0800f475 	.word	0x0800f475
 800f3a8:	0800f475 	.word	0x0800f475
 800f3ac:	0800f475 	.word	0x0800f475
 800f3b0:	0800f475 	.word	0x0800f475
 800f3b4:	0800f42f 	.word	0x0800f42f
 800f3b8:	0800f475 	.word	0x0800f475
 800f3bc:	0800f475 	.word	0x0800f475
 800f3c0:	0800f475 	.word	0x0800f475
 800f3c4:	0800f475 	.word	0x0800f475
 800f3c8:	0800f475 	.word	0x0800f475
 800f3cc:	0800f475 	.word	0x0800f475
 800f3d0:	0800f475 	.word	0x0800f475
 800f3d4:	0800f475 	.word	0x0800f475
 800f3d8:	0800f475 	.word	0x0800f475
 800f3dc:	0800f475 	.word	0x0800f475
 800f3e0:	0800f475 	.word	0x0800f475
 800f3e4:	0800f475 	.word	0x0800f475
 800f3e8:	0800f475 	.word	0x0800f475
 800f3ec:	0800f475 	.word	0x0800f475
 800f3f0:	0800f475 	.word	0x0800f475
 800f3f4:	0800f467 	.word	0x0800f467
 800f3f8:	2b40      	cmp	r3, #64	@ 0x40
 800f3fa:	d037      	beq.n	800f46c <UART_SetConfig+0xc44>
 800f3fc:	e03a      	b.n	800f474 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3fe:	f7fa fe2d 	bl	800a05c <HAL_RCC_GetPCLK1Freq>
 800f402:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f404:	e03c      	b.n	800f480 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f406:	f7fa fe3f 	bl	800a088 <HAL_RCC_GetPCLK2Freq>
 800f40a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f40c:	e038      	b.n	800f480 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f40e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f412:	4618      	mov	r0, r3
 800f414:	f7fc fcd6 	bl	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f41c:	e030      	b.n	800f480 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f41e:	f107 0318 	add.w	r3, r7, #24
 800f422:	4618      	mov	r0, r3
 800f424:	f7fc fe22 	bl	800c06c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f42c:	e028      	b.n	800f480 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f42e:	4b09      	ldr	r3, [pc, #36]	@ (800f454 <UART_SetConfig+0xc2c>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f003 0320 	and.w	r3, r3, #32
 800f436:	2b00      	cmp	r3, #0
 800f438:	d012      	beq.n	800f460 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f43a:	4b06      	ldr	r3, [pc, #24]	@ (800f454 <UART_SetConfig+0xc2c>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	08db      	lsrs	r3, r3, #3
 800f440:	f003 0303 	and.w	r3, r3, #3
 800f444:	4a04      	ldr	r2, [pc, #16]	@ (800f458 <UART_SetConfig+0xc30>)
 800f446:	fa22 f303 	lsr.w	r3, r2, r3
 800f44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f44c:	e018      	b.n	800f480 <UART_SetConfig+0xc58>
 800f44e:	bf00      	nop
 800f450:	08013c48 	.word	0x08013c48
 800f454:	58024400 	.word	0x58024400
 800f458:	03d09000 	.word	0x03d09000
 800f45c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f460:	4b24      	ldr	r3, [pc, #144]	@ (800f4f4 <UART_SetConfig+0xccc>)
 800f462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f464:	e00c      	b.n	800f480 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f466:	4b24      	ldr	r3, [pc, #144]	@ (800f4f8 <UART_SetConfig+0xcd0>)
 800f468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f46a:	e009      	b.n	800f480 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f46c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f472:	e005      	b.n	800f480 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f474:	2300      	movs	r3, #0
 800f476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f478:	2301      	movs	r3, #1
 800f47a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f47e:	bf00      	nop
    }

    if (pclk != 0U)
 800f480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f482:	2b00      	cmp	r3, #0
 800f484:	d021      	beq.n	800f4ca <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f48a:	4a1c      	ldr	r2, [pc, #112]	@ (800f4fc <UART_SetConfig+0xcd4>)
 800f48c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f490:	461a      	mov	r2, r3
 800f492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f494:	fbb3 f2f2 	udiv	r2, r3, r2
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	085b      	lsrs	r3, r3, #1
 800f49e:	441a      	add	r2, r3
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ac:	2b0f      	cmp	r3, #15
 800f4ae:	d909      	bls.n	800f4c4 <UART_SetConfig+0xc9c>
 800f4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4b6:	d205      	bcs.n	800f4c4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	60da      	str	r2, [r3, #12]
 800f4c2:	e002      	b.n	800f4ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f4e6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3748      	adds	r7, #72	@ 0x48
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f4f4:	03d09000 	.word	0x03d09000
 800f4f8:	003d0900 	.word	0x003d0900
 800f4fc:	08013c48 	.word	0x08013c48

0800f500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f50c:	f003 0308 	and.w	r3, r3, #8
 800f510:	2b00      	cmp	r3, #0
 800f512:	d00a      	beq.n	800f52a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	430a      	orrs	r2, r1
 800f528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f52e:	f003 0301 	and.w	r3, r3, #1
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00a      	beq.n	800f54c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	430a      	orrs	r2, r1
 800f54a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f550:	f003 0302 	and.w	r3, r3, #2
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00a      	beq.n	800f56e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	430a      	orrs	r2, r1
 800f56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f572:	f003 0304 	and.w	r3, r3, #4
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00a      	beq.n	800f590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	430a      	orrs	r2, r1
 800f58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f594:	f003 0310 	and.w	r3, r3, #16
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00a      	beq.n	800f5b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	430a      	orrs	r2, r1
 800f5b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5b6:	f003 0320 	and.w	r3, r3, #32
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d00a      	beq.n	800f5d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	430a      	orrs	r2, r1
 800f5d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d01a      	beq.n	800f616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	430a      	orrs	r2, r1
 800f5f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5fe:	d10a      	bne.n	800f616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	430a      	orrs	r2, r1
 800f614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f61a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00a      	beq.n	800f638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	430a      	orrs	r2, r1
 800f636:	605a      	str	r2, [r3, #4]
  }
}
 800f638:	bf00      	nop
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b098      	sub	sp, #96	@ 0x60
 800f648:	af02      	add	r7, sp, #8
 800f64a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f654:	f7f4 fab2 	bl	8003bbc <HAL_GetTick>
 800f658:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f003 0308 	and.w	r3, r3, #8
 800f664:	2b08      	cmp	r3, #8
 800f666:	d12f      	bne.n	800f6c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f668:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f66c:	9300      	str	r3, [sp, #0]
 800f66e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f670:	2200      	movs	r2, #0
 800f672:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f000 f88e 	bl	800f798 <UART_WaitOnFlagUntilTimeout>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d022      	beq.n	800f6c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68a:	e853 3f00 	ldrex	r3, [r3]
 800f68e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f696:	653b      	str	r3, [r7, #80]	@ 0x50
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	461a      	mov	r2, r3
 800f69e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f6a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6a8:	e841 2300 	strex	r3, r2, [r1]
 800f6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1e6      	bne.n	800f682 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2220      	movs	r2, #32
 800f6b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f6c4:	2303      	movs	r3, #3
 800f6c6:	e063      	b.n	800f790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f003 0304 	and.w	r3, r3, #4
 800f6d2:	2b04      	cmp	r3, #4
 800f6d4:	d149      	bne.n	800f76a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f6d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f6da:	9300      	str	r3, [sp, #0]
 800f6dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 f857 	bl	800f798 <UART_WaitOnFlagUntilTimeout>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d03c      	beq.n	800f76a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f8:	e853 3f00 	ldrex	r3, [r3]
 800f6fc:	623b      	str	r3, [r7, #32]
   return(result);
 800f6fe:	6a3b      	ldr	r3, [r7, #32]
 800f700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	461a      	mov	r2, r3
 800f70c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f70e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f710:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f716:	e841 2300 	strex	r3, r2, [r1]
 800f71a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d1e6      	bne.n	800f6f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	3308      	adds	r3, #8
 800f728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	e853 3f00 	ldrex	r3, [r3]
 800f730:	60fb      	str	r3, [r7, #12]
   return(result);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f023 0301 	bic.w	r3, r3, #1
 800f738:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3308      	adds	r3, #8
 800f740:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f742:	61fa      	str	r2, [r7, #28]
 800f744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f746:	69b9      	ldr	r1, [r7, #24]
 800f748:	69fa      	ldr	r2, [r7, #28]
 800f74a:	e841 2300 	strex	r3, r2, [r1]
 800f74e:	617b      	str	r3, [r7, #20]
   return(result);
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d1e5      	bne.n	800f722 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2220      	movs	r2, #32
 800f75a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f766:	2303      	movs	r3, #3
 800f768:	e012      	b.n	800f790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2220      	movs	r2, #32
 800f76e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2220      	movs	r2, #32
 800f776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2200      	movs	r2, #0
 800f77e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2200      	movs	r2, #0
 800f78a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f78e:	2300      	movs	r3, #0
}
 800f790:	4618      	mov	r0, r3
 800f792:	3758      	adds	r7, #88	@ 0x58
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	60f8      	str	r0, [r7, #12]
 800f7a0:	60b9      	str	r1, [r7, #8]
 800f7a2:	603b      	str	r3, [r7, #0]
 800f7a4:	4613      	mov	r3, r2
 800f7a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7a8:	e04f      	b.n	800f84a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7aa:	69bb      	ldr	r3, [r7, #24]
 800f7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7b0:	d04b      	beq.n	800f84a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7b2:	f7f4 fa03 	bl	8003bbc <HAL_GetTick>
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	1ad3      	subs	r3, r2, r3
 800f7bc:	69ba      	ldr	r2, [r7, #24]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d302      	bcc.n	800f7c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d101      	bne.n	800f7cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	e04e      	b.n	800f86a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f003 0304 	and.w	r3, r3, #4
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d037      	beq.n	800f84a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	2b80      	cmp	r3, #128	@ 0x80
 800f7de:	d034      	beq.n	800f84a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	2b40      	cmp	r3, #64	@ 0x40
 800f7e4:	d031      	beq.n	800f84a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	69db      	ldr	r3, [r3, #28]
 800f7ec:	f003 0308 	and.w	r3, r3, #8
 800f7f0:	2b08      	cmp	r3, #8
 800f7f2:	d110      	bne.n	800f816 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	2208      	movs	r2, #8
 800f7fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f7fc:	68f8      	ldr	r0, [r7, #12]
 800f7fe:	f000 f879 	bl	800f8f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2208      	movs	r2, #8
 800f806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2200      	movs	r2, #0
 800f80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f812:	2301      	movs	r3, #1
 800f814:	e029      	b.n	800f86a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	69db      	ldr	r3, [r3, #28]
 800f81c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f824:	d111      	bne.n	800f84a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f82e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f000 f85f 	bl	800f8f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2220      	movs	r2, #32
 800f83a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2200      	movs	r2, #0
 800f842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f846:	2303      	movs	r3, #3
 800f848:	e00f      	b.n	800f86a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	69da      	ldr	r2, [r3, #28]
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	4013      	ands	r3, r2
 800f854:	68ba      	ldr	r2, [r7, #8]
 800f856:	429a      	cmp	r2, r3
 800f858:	bf0c      	ite	eq
 800f85a:	2301      	moveq	r3, #1
 800f85c:	2300      	movne	r3, #0
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	461a      	mov	r2, r3
 800f862:	79fb      	ldrb	r3, [r7, #7]
 800f864:	429a      	cmp	r2, r3
 800f866:	d0a0      	beq.n	800f7aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f868:	2300      	movs	r3, #0
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3710      	adds	r7, #16
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f872:	b480      	push	{r7}
 800f874:	b08f      	sub	sp, #60	@ 0x3c
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f880:	6a3b      	ldr	r3, [r7, #32]
 800f882:	e853 3f00 	ldrex	r3, [r3]
 800f886:	61fb      	str	r3, [r7, #28]
   return(result);
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f88e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	461a      	mov	r2, r3
 800f896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f89a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f89c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f89e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8a0:	e841 2300 	strex	r3, r2, [r1]
 800f8a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d1e6      	bne.n	800f87a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	3308      	adds	r3, #8
 800f8b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	e853 3f00 	ldrex	r3, [r3]
 800f8ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f8c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	3308      	adds	r3, #8
 800f8ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8cc:	61ba      	str	r2, [r7, #24]
 800f8ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8d0:	6979      	ldr	r1, [r7, #20]
 800f8d2:	69ba      	ldr	r2, [r7, #24]
 800f8d4:	e841 2300 	strex	r3, r2, [r1]
 800f8d8:	613b      	str	r3, [r7, #16]
   return(result);
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d1e5      	bne.n	800f8ac <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2220      	movs	r2, #32
 800f8e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800f8e8:	bf00      	nop
 800f8ea:	373c      	adds	r7, #60	@ 0x3c
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b095      	sub	sp, #84	@ 0x54
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f904:	e853 3f00 	ldrex	r3, [r3]
 800f908:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f910:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	461a      	mov	r2, r3
 800f918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f91a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f91c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f91e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f920:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f922:	e841 2300 	strex	r3, r2, [r1]
 800f926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1e6      	bne.n	800f8fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	3308      	adds	r3, #8
 800f934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f936:	6a3b      	ldr	r3, [r7, #32]
 800f938:	e853 3f00 	ldrex	r3, [r3]
 800f93c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f93e:	69fa      	ldr	r2, [r7, #28]
 800f940:	4b1e      	ldr	r3, [pc, #120]	@ (800f9bc <UART_EndRxTransfer+0xc8>)
 800f942:	4013      	ands	r3, r2
 800f944:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	3308      	adds	r3, #8
 800f94c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f94e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f950:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f956:	e841 2300 	strex	r3, r2, [r1]
 800f95a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d1e5      	bne.n	800f92e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f966:	2b01      	cmp	r3, #1
 800f968:	d118      	bne.n	800f99c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	e853 3f00 	ldrex	r3, [r3]
 800f976:	60bb      	str	r3, [r7, #8]
   return(result);
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	f023 0310 	bic.w	r3, r3, #16
 800f97e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	461a      	mov	r2, r3
 800f986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f988:	61bb      	str	r3, [r7, #24]
 800f98a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f98c:	6979      	ldr	r1, [r7, #20]
 800f98e:	69ba      	ldr	r2, [r7, #24]
 800f990:	e841 2300 	strex	r3, r2, [r1]
 800f994:	613b      	str	r3, [r7, #16]
   return(result);
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d1e6      	bne.n	800f96a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2220      	movs	r2, #32
 800f9a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f9b0:	bf00      	nop
 800f9b2:	3754      	adds	r7, #84	@ 0x54
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr
 800f9bc:	effffffe 	.word	0xeffffffe

0800f9c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b090      	sub	sp, #64	@ 0x40
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	69db      	ldr	r3, [r3, #28]
 800f9d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f9d6:	d037      	beq.n	800fa48 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800f9d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9da:	2200      	movs	r2, #0
 800f9dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f9e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	3308      	adds	r3, #8
 800f9e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ea:	e853 3f00 	ldrex	r3, [r3]
 800f9ee:	623b      	str	r3, [r7, #32]
   return(result);
 800f9f0:	6a3b      	ldr	r3, [r7, #32]
 800f9f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f9f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	3308      	adds	r3, #8
 800f9fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa00:	633a      	str	r2, [r7, #48]	@ 0x30
 800fa02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa08:	e841 2300 	strex	r3, r2, [r1]
 800fa0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fa0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d1e5      	bne.n	800f9e0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	e853 3f00 	ldrex	r3, [r3]
 800fa20:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa28:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa32:	61fb      	str	r3, [r7, #28]
 800fa34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa36:	69b9      	ldr	r1, [r7, #24]
 800fa38:	69fa      	ldr	r2, [r7, #28]
 800fa3a:	e841 2300 	strex	r3, r2, [r1]
 800fa3e:	617b      	str	r3, [r7, #20]
   return(result);
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d1e6      	bne.n	800fa14 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa46:	e002      	b.n	800fa4e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fa48:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fa4a:	f7fe fec3 	bl	800e7d4 <HAL_UART_TxCpltCallback>
}
 800fa4e:	bf00      	nop
 800fa50:	3740      	adds	r7, #64	@ 0x40
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b084      	sub	sp, #16
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f7fe febf 	bl	800e7e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa6a:	bf00      	nop
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b086      	sub	sp, #24
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa7e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa86:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fa8e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa9a:	2b80      	cmp	r3, #128	@ 0x80
 800fa9c:	d109      	bne.n	800fab2 <UART_DMAError+0x40>
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	2b21      	cmp	r3, #33	@ 0x21
 800faa2:	d106      	bne.n	800fab2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	2200      	movs	r2, #0
 800faa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800faac:	6978      	ldr	r0, [r7, #20]
 800faae:	f7ff fee0 	bl	800f872 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	689b      	ldr	r3, [r3, #8]
 800fab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fabc:	2b40      	cmp	r3, #64	@ 0x40
 800fabe:	d109      	bne.n	800fad4 <UART_DMAError+0x62>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2b22      	cmp	r3, #34	@ 0x22
 800fac4:	d106      	bne.n	800fad4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	2200      	movs	r2, #0
 800faca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800face:	6978      	ldr	r0, [r7, #20]
 800fad0:	f7ff ff10 	bl	800f8f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fada:	f043 0210 	orr.w	r2, r3, #16
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fae4:	6978      	ldr	r0, [r7, #20]
 800fae6:	f7fe fe89 	bl	800e7fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800faea:	bf00      	nop
 800faec:	3718      	adds	r7, #24
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b084      	sub	sp, #16
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fafe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2200      	movs	r2, #0
 800fb04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	f7fe fe77 	bl	800e7fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb0e:	bf00      	nop
 800fb10:	3710      	adds	r7, #16
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}

0800fb16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fb16:	b580      	push	{r7, lr}
 800fb18:	b088      	sub	sp, #32
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	e853 3f00 	ldrex	r3, [r3]
 800fb2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb32:	61fb      	str	r3, [r7, #28]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	461a      	mov	r2, r3
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	61bb      	str	r3, [r7, #24]
 800fb3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb40:	6979      	ldr	r1, [r7, #20]
 800fb42:	69ba      	ldr	r2, [r7, #24]
 800fb44:	e841 2300 	strex	r3, r2, [r1]
 800fb48:	613b      	str	r3, [r7, #16]
   return(result);
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d1e6      	bne.n	800fb1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2220      	movs	r2, #32
 800fb54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f7fe fe38 	bl	800e7d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb64:	bf00      	nop
 800fb66:	3720      	adds	r7, #32
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb74:	bf00      	nop
 800fb76:	370c      	adds	r7, #12
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b083      	sub	sp, #12
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb88:	bf00      	nop
 800fb8a:	370c      	adds	r7, #12
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b083      	sub	sp, #12
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb9c:	bf00      	nop
 800fb9e:	370c      	adds	r7, #12
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b085      	sub	sp, #20
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d101      	bne.n	800fbbe <HAL_UARTEx_DisableFifoMode+0x16>
 800fbba:	2302      	movs	r3, #2
 800fbbc:	e027      	b.n	800fc0e <HAL_UARTEx_DisableFifoMode+0x66>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2224      	movs	r2, #36	@ 0x24
 800fbca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f022 0201 	bic.w	r2, r2, #1
 800fbe4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fbec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	68fa      	ldr	r2, [r7, #12]
 800fbfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2220      	movs	r2, #32
 800fc00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc0c:	2300      	movs	r3, #0
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3714      	adds	r7, #20
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr

0800fc1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b084      	sub	sp, #16
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d101      	bne.n	800fc32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc2e:	2302      	movs	r3, #2
 800fc30:	e02d      	b.n	800fc8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2201      	movs	r2, #1
 800fc36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2224      	movs	r2, #36	@ 0x24
 800fc3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f022 0201 	bic.w	r2, r2, #1
 800fc58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	683a      	ldr	r2, [r7, #0]
 800fc6a:	430a      	orrs	r2, r1
 800fc6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 f850 	bl	800fd14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2220      	movs	r2, #32
 800fc80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc8c:	2300      	movs	r3, #0
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc96:	b580      	push	{r7, lr}
 800fc98:	b084      	sub	sp, #16
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
 800fc9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	d101      	bne.n	800fcae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fcaa:	2302      	movs	r3, #2
 800fcac:	e02d      	b.n	800fd0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2224      	movs	r2, #36	@ 0x24
 800fcba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f022 0201 	bic.w	r2, r2, #1
 800fcd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	689b      	ldr	r3, [r3, #8]
 800fcdc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	683a      	ldr	r2, [r7, #0]
 800fce6:	430a      	orrs	r2, r1
 800fce8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 f812 	bl	800fd14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	68fa      	ldr	r2, [r7, #12]
 800fcf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2220      	movs	r2, #32
 800fcfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
	...

0800fd14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d108      	bne.n	800fd36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2201      	movs	r2, #1
 800fd28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd34:	e031      	b.n	800fd9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd36:	2310      	movs	r3, #16
 800fd38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd3a:	2310      	movs	r3, #16
 800fd3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	689b      	ldr	r3, [r3, #8]
 800fd44:	0e5b      	lsrs	r3, r3, #25
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	f003 0307 	and.w	r3, r3, #7
 800fd4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	0f5b      	lsrs	r3, r3, #29
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	f003 0307 	and.w	r3, r3, #7
 800fd5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd5e:	7bbb      	ldrb	r3, [r7, #14]
 800fd60:	7b3a      	ldrb	r2, [r7, #12]
 800fd62:	4911      	ldr	r1, [pc, #68]	@ (800fda8 <UARTEx_SetNbDataToProcess+0x94>)
 800fd64:	5c8a      	ldrb	r2, [r1, r2]
 800fd66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd6a:	7b3a      	ldrb	r2, [r7, #12]
 800fd6c:	490f      	ldr	r1, [pc, #60]	@ (800fdac <UARTEx_SetNbDataToProcess+0x98>)
 800fd6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd70:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd74:	b29a      	uxth	r2, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd7c:	7bfb      	ldrb	r3, [r7, #15]
 800fd7e:	7b7a      	ldrb	r2, [r7, #13]
 800fd80:	4909      	ldr	r1, [pc, #36]	@ (800fda8 <UARTEx_SetNbDataToProcess+0x94>)
 800fd82:	5c8a      	ldrb	r2, [r1, r2]
 800fd84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd88:	7b7a      	ldrb	r2, [r7, #13]
 800fd8a:	4908      	ldr	r1, [pc, #32]	@ (800fdac <UARTEx_SetNbDataToProcess+0x98>)
 800fd8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fd9a:	bf00      	nop
 800fd9c:	3714      	adds	r7, #20
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
 800fda6:	bf00      	nop
 800fda8:	08013c60 	.word	0x08013c60
 800fdac:	08013c68 	.word	0x08013c68

0800fdb0 <_ZN7VL53L0XC1EP12GPIO_TypeDefti>:

#include "vl53l0x_api.h" // Make sure to include the API header

class VL53L0X {
public:
    VL53L0X(GPIO_TypeDef *TOF_XSHUT_PORT,
 800fdb0:	b480      	push	{r7}
 800fdb2:	b085      	sub	sp, #20
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	60f8      	str	r0, [r7, #12]
 800fdb8:	60b9      	str	r1, [r7, #8]
 800fdba:	603b      	str	r3, [r7, #0]
 800fdbc:	4613      	mov	r3, r2
 800fdbe:	80fb      	strh	r3, [r7, #6]
            uint16_t TOF_XSHUT_PIN,
            int VL53_ADDRESS) {
        this->TOF_XSHUT_PORT = TOF_XSHUT_PORT;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	68ba      	ldr	r2, [r7, #8]
 800fdc4:	601a      	str	r2, [r3, #0]
        this->TOF_XSHUT_PIN = TOF_XSHUT_PIN;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	88fa      	ldrh	r2, [r7, #6]
 800fdca:	809a      	strh	r2, [r3, #4]
        this->VL53_ADDRESS = VL53_ADDRESS;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	683a      	ldr	r2, [r7, #0]
 800fdd0:	609a      	str	r2, [r3, #8]
    }
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3714      	adds	r7, #20
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <_Z41__static_initialization_and_destruction_0v>:
}

void lifter_measuredistance() {
    front_sensor.Update();
    back_sensor.Update();
} // Closing brace for the function}
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af04      	add	r7, sp, #16
DC_motor lifter_right_wheel = {&htim8, GPIOD, GPIO_PIN_14, &htim15, TIM_CHANNEL_1, 4, 20, 1};
 800fde6:	2301      	movs	r3, #1
 800fde8:	9302      	str	r3, [sp, #8]
 800fdea:	2300      	movs	r3, #0
 800fdec:	9301      	str	r3, [sp, #4]
 800fdee:	4b27      	ldr	r3, [pc, #156]	@ (800fe8c <_Z41__static_initialization_and_destruction_0v+0xac>)
 800fdf0:	9300      	str	r3, [sp, #0]
 800fdf2:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800fdf6:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800fdfa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fdfe:	4a24      	ldr	r2, [pc, #144]	@ (800fe90 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 800fe00:	4924      	ldr	r1, [pc, #144]	@ (800fe94 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 800fe02:	4825      	ldr	r0, [pc, #148]	@ (800fe98 <_Z41__static_initialization_and_destruction_0v+0xb8>)
 800fe04:	f7f0 fe0e 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor lifter_left_wheel  = {&htim23, GPIOD, GPIO_PIN_11, &htim15, TIM_CHANNEL_2, 4, 20, 1};
 800fe08:	2301      	movs	r3, #1
 800fe0a:	9302      	str	r3, [sp, #8]
 800fe0c:	2304      	movs	r3, #4
 800fe0e:	9301      	str	r3, [sp, #4]
 800fe10:	4b1e      	ldr	r3, [pc, #120]	@ (800fe8c <_Z41__static_initialization_and_destruction_0v+0xac>)
 800fe12:	9300      	str	r3, [sp, #0]
 800fe14:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800fe18:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800fe1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fe20:	4a1b      	ldr	r2, [pc, #108]	@ (800fe90 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 800fe22:	491e      	ldr	r1, [pc, #120]	@ (800fe9c <_Z41__static_initialization_and_destruction_0v+0xbc>)
 800fe24:	481e      	ldr	r0, [pc, #120]	@ (800fea0 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 800fe26:	f7f0 fdfd 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor front_lifter       = {&htim8, GPIOD, GPIO_PIN_9, &htim24, TIM_CHANNEL_1, 4, 20, 1};
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	9302      	str	r3, [sp, #8]
 800fe2e:	2300      	movs	r3, #0
 800fe30:	9301      	str	r3, [sp, #4]
 800fe32:	4b1c      	ldr	r3, [pc, #112]	@ (800fea4 <_Z41__static_initialization_and_destruction_0v+0xc4>)
 800fe34:	9300      	str	r3, [sp, #0]
 800fe36:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800fe3a:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800fe3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe42:	4a13      	ldr	r2, [pc, #76]	@ (800fe90 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 800fe44:	4913      	ldr	r1, [pc, #76]	@ (800fe94 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 800fe46:	4818      	ldr	r0, [pc, #96]	@ (800fea8 <_Z41__static_initialization_and_destruction_0v+0xc8>)
 800fe48:	f7f0 fdec 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor back_lifter        = {&htim8, GPIOD, GPIO_PIN_10, &htim24, TIM_CHANNEL_2, 4, 20, 1};
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	9302      	str	r3, [sp, #8]
 800fe50:	2304      	movs	r3, #4
 800fe52:	9301      	str	r3, [sp, #4]
 800fe54:	4b13      	ldr	r3, [pc, #76]	@ (800fea4 <_Z41__static_initialization_and_destruction_0v+0xc4>)
 800fe56:	9300      	str	r3, [sp, #0]
 800fe58:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800fe5c:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800fe60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe64:	4a0a      	ldr	r2, [pc, #40]	@ (800fe90 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 800fe66:	490b      	ldr	r1, [pc, #44]	@ (800fe94 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 800fe68:	4810      	ldr	r0, [pc, #64]	@ (800feac <_Z41__static_initialization_and_destruction_0v+0xcc>)
 800fe6a:	f7f0 fddb 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
VL53L0X front_sensor = {GPIOG, GPIO_PIN_1, 0};
 800fe6e:	2300      	movs	r3, #0
 800fe70:	2202      	movs	r2, #2
 800fe72:	490f      	ldr	r1, [pc, #60]	@ (800feb0 <_Z41__static_initialization_and_destruction_0v+0xd0>)
 800fe74:	480f      	ldr	r0, [pc, #60]	@ (800feb4 <_Z41__static_initialization_and_destruction_0v+0xd4>)
 800fe76:	f7ff ff9b 	bl	800fdb0 <_ZN7VL53L0XC1EP12GPIO_TypeDefti>
VL53L0X back_sensor = {GPIOG, GPIO_PIN_2, 1};
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	2204      	movs	r2, #4
 800fe7e:	490c      	ldr	r1, [pc, #48]	@ (800feb0 <_Z41__static_initialization_and_destruction_0v+0xd0>)
 800fe80:	480d      	ldr	r0, [pc, #52]	@ (800feb8 <_Z41__static_initialization_and_destruction_0v+0xd8>)
 800fe82:	f7ff ff95 	bl	800fdb0 <_ZN7VL53L0XC1EP12GPIO_TypeDefti>
} // Closing brace for the function}
 800fe86:	bf00      	nop
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	240007f4 	.word	0x240007f4
 800fe90:	58020c00 	.word	0x58020c00
 800fe94:	24000710 	.word	0x24000710
 800fe98:	24000c90 	.word	0x24000c90
 800fe9c:	240008d8 	.word	0x240008d8
 800fea0:	24000ce8 	.word	0x24000ce8
 800fea4:	24000924 	.word	0x24000924
 800fea8:	24000d40 	.word	0x24000d40
 800feac:	24000d98 	.word	0x24000d98
 800feb0:	58021800 	.word	0x58021800
 800feb4:	24000df0 	.word	0x24000df0
 800feb8:	24000fb8 	.word	0x24000fb8

0800febc <_GLOBAL__sub_I_lifter_right_wheel>:
 800febc:	b580      	push	{r7, lr}
 800febe:	af00      	add	r7, sp, #0
 800fec0:	f7ff ff8e 	bl	800fde0 <_Z41__static_initialization_and_destruction_0v>
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 800fec6:	b480      	push	{r7}
 800fec8:	b083      	sub	sp, #12
 800feca:	af00      	add	r7, sp, #0
 800fecc:	ed87 0a01 	vstr	s0, [r7, #4]
 800fed0:	edd7 7a01 	vldr	s15, [r7, #4]
 800fed4:	eef0 7ae7 	vabs.f32	s15, s15
 800fed8:	eeb0 0a67 	vmov.f32	s0, s15
 800fedc:	370c      	adds	r7, #12
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr
	...

0800fee8 <_ZN8DC_motor6PI_runEv>:
#include <cmath>




void DC_motor::PI_run(){
 800fee8:	b580      	push	{r7, lr}
 800feea:	b086      	sub	sp, #24
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
    float u = 0;
 800fef0:	f04f 0300 	mov.w	r3, #0
 800fef4:	617b      	str	r3, [r7, #20]
    int pul = 0;
 800fef6:	2300      	movs	r3, #0
 800fef8:	613b      	str	r3, [r7, #16]
    float bound = 1/ki;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	ed93 7a01 	vldr	s14, [r3, #4]
 800ff00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff08:	edc7 7a03 	vstr	s15, [r7, #12]
    error = sp - speed;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	ed93 7a08 	vldr	s14, [r3, #32]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	edd3 7a07 	vldr	s15, [r3, #28]
 800ff18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	edc3 7a03 	vstr	s15, [r3, #12]
    integral += error*span;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	ed93 7a05 	vldr	s14, [r3, #20]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	edd3 6a03 	vldr	s13, [r3, #12]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ff34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	edc3 7a05 	vstr	s15, [r3, #20]
    differential = error - pre_error;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	ed93 7a03 	vldr	s14, [r3, #12]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	edd3 7a04 	vldr	s15, [r3, #16]
 800ff4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	edc3 7a06 	vstr	s15, [r3, #24]

    if (integral > bound)integral = bound;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	edd3 7a05 	vldr	s15, [r3, #20]
 800ff5e:	ed97 7a03 	vldr	s14, [r7, #12]
 800ff62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff6a:	d503      	bpl.n	800ff74 <_ZN8DC_motor6PI_runEv+0x8c>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	68fa      	ldr	r2, [r7, #12]
 800ff70:	615a      	str	r2, [r3, #20]
 800ff72:	e012      	b.n	800ff9a <_ZN8DC_motor6PI_runEv+0xb2>
    else if (integral < -bound)integral = -bound;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	ed93 7a05 	vldr	s14, [r3, #20]
 800ff7a:	edd7 7a03 	vldr	s15, [r7, #12]
 800ff7e:	eef1 7a67 	vneg.f32	s15, s15
 800ff82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff8a:	d506      	bpl.n	800ff9a <_ZN8DC_motor6PI_runEv+0xb2>
 800ff8c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ff90:	eef1 7a67 	vneg.f32	s15, s15
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	edc3 7a05 	vstr	s15, [r3, #20]
    u = kp*error + ki*integral + kd*differential;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	ed93 7a00 	vldr	s14, [r3]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	edd3 7a03 	vldr	s15, [r3, #12]
 800ffa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	edd3 6a01 	vldr	s13, [r3, #4]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	edd3 7a05 	vldr	s15, [r3, #20]
 800ffb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ffba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	edd3 6a02 	vldr	s13, [r3, #8]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	edd3 7a06 	vldr	s15, [r3, #24]
 800ffca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ffce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffd2:	edc7 7a05 	vstr	s15, [r7, #20]
    pre_error = error;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	68da      	ldr	r2, [r3, #12]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	611a      	str	r2, [r3, #16]
    
    if (u > 1) u = 1;
 800ffde:	edd7 7a05 	vldr	s15, [r7, #20]
 800ffe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ffe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ffea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffee:	dd03      	ble.n	800fff8 <_ZN8DC_motor6PI_runEv+0x110>
 800fff0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800fff4:	617b      	str	r3, [r7, #20]
 800fff6:	e00a      	b.n	801000e <_ZN8DC_motor6PI_runEv+0x126>
    else if (u < -1) u = -1;
 800fff8:	edd7 7a05 	vldr	s15, [r7, #20]
 800fffc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010008:	d501      	bpl.n	801000e <_ZN8DC_motor6PI_runEv+0x126>
 801000a:	4b51      	ldr	r3, [pc, #324]	@ (8010150 <_ZN8DC_motor6PI_runEv+0x268>)
 801000c:	617b      	str	r3, [r7, #20]
    pul = (int)(fabs(u)*arr);
 801000e:	ed97 0a05 	vldr	s0, [r7, #20]
 8010012:	f7ff ff58 	bl	800fec6 <_ZSt4fabsf>
 8010016:	eeb0 7a40 	vmov.f32	s14, s0
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801001e:	ee07 3a90 	vmov	s15, r3
 8010022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010026:	ee67 7a27 	vmul.f32	s15, s14, s15
 801002a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801002e:	ee17 3a90 	vmov	r3, s15
 8010032:	613b      	str	r3, [r7, #16]
    if(dir_pin == true){
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801003a:	2b01      	cmp	r3, #1
 801003c:	d124      	bne.n	8010088 <_ZN8DC_motor6PI_runEv+0x1a0>
       	if(u>0){
 801003e:	edd7 7a05 	vldr	s15, [r7, #20]
 8010042:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801004a:	dd09      	ble.n	8010060 <_ZN8DC_motor6PI_runEv+0x178>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8010056:	2200      	movs	r2, #0
 8010058:	4619      	mov	r1, r3
 801005a:	f7f8 ff3d 	bl	8008ed8 <HAL_GPIO_WritePin>
 801005e:	e03c      	b.n	80100da <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else if (u<0){
 8010060:	edd7 7a05 	vldr	s15, [r7, #20]
 8010064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801006c:	d509      	bpl.n	8010082 <_ZN8DC_motor6PI_runEv+0x19a>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8010078:	2201      	movs	r2, #1
 801007a:	4619      	mov	r1, r3
 801007c:	f7f8 ff2c 	bl	8008ed8 <HAL_GPIO_WritePin>
 8010080:	e02b      	b.n	80100da <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else{
       	        pul = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	613b      	str	r3, [r7, #16]
 8010086:	e028      	b.n	80100da <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }
       }else if(dir_pin == false){
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801008e:	2b00      	cmp	r3, #0
 8010090:	d123      	bne.n	80100da <_ZN8DC_motor6PI_runEv+0x1f2>
       	if(u>0){
 8010092:	edd7 7a05 	vldr	s15, [r7, #20]
 8010096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801009a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801009e:	dd09      	ble.n	80100b4 <_ZN8DC_motor6PI_runEv+0x1cc>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80100aa:	2201      	movs	r2, #1
 80100ac:	4619      	mov	r1, r3
 80100ae:	f7f8 ff13 	bl	8008ed8 <HAL_GPIO_WritePin>
 80100b2:	e012      	b.n	80100da <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else if (u<0){
 80100b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80100b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80100bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c0:	d509      	bpl.n	80100d6 <_ZN8DC_motor6PI_runEv+0x1ee>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80100cc:	2200      	movs	r2, #0
 80100ce:	4619      	mov	r1, r3
 80100d0:	f7f8 ff02 	bl	8008ed8 <HAL_GPIO_WritePin>
 80100d4:	e001      	b.n	80100da <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else{
       	        pul = 0;
 80100d6:	2300      	movs	r3, #0
 80100d8:	613b      	str	r3, [r7, #16]
       	    }
       }
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d105      	bne.n	80100ee <_ZN8DC_motor6PI_runEv+0x206>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	693a      	ldr	r2, [r7, #16]
 80100ea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80100ec:	e02c      	b.n	8010148 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100f2:	2b04      	cmp	r3, #4
 80100f4:	d105      	bne.n	8010102 <_ZN8DC_motor6PI_runEv+0x21a>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	693a      	ldr	r2, [r7, #16]
 80100fe:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8010100:	e022      	b.n	8010148 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010106:	2b08      	cmp	r3, #8
 8010108:	d105      	bne.n	8010116 <_ZN8DC_motor6PI_runEv+0x22e>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	693a      	ldr	r2, [r7, #16]
 8010112:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8010114:	e018      	b.n	8010148 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801011a:	2b0c      	cmp	r3, #12
 801011c:	d105      	bne.n	801012a <_ZN8DC_motor6PI_runEv+0x242>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	693a      	ldr	r2, [r7, #16]
 8010126:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8010128:	e00e      	b.n	8010148 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801012e:	2b10      	cmp	r3, #16
 8010130:	d105      	bne.n	801013e <_ZN8DC_motor6PI_runEv+0x256>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	693a      	ldr	r2, [r7, #16]
 801013a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 801013c:	e004      	b.n	8010148 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	693a      	ldr	r2, [r7, #16]
 8010146:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8010148:	bf00      	nop
 801014a:	3718      	adds	r7, #24
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	bf800000 	.word	0xbf800000

08010154 <_ZN8DC_motor8setspeedEf>:


void DC_motor::setspeed(float target_speed){
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	ed87 0a00 	vstr	s0, [r7]
    sp = target_speed;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	683a      	ldr	r2, [r7, #0]
 8010164:	621a      	str	r2, [r3, #32]
}
 8010166:	bf00      	nop
 8010168:	370c      	adds	r7, #12
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr

08010172 <_ZN8DC_motor12update_speedEi>:
void DC_motor::update_speed(int sign){
 8010172:	b480      	push	{r7}
 8010174:	b085      	sub	sp, #20
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	6039      	str	r1, [r7, #0]
    int16_t enc ;
	enc = __HAL_TIM_GetCounter(enc_htim);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010184:	81fb      	strh	r3, [r7, #14]
	speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	ee07 3a90 	vmov	s15, r3
 801018c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010190:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010194:	ee07 3a90 	vmov	s15, r3
 8010198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801019c:	ee67 6a27 	vmul.f32	s13, s14, s15
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	ee07 3a90 	vmov	s15, r3
 80101aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80101b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80101be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80101c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	edc3 7a07 	vstr	s15, [r3, #28]
    __HAL_TIM_SetCounter(enc_htim,0);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	2200      	movs	r2, #0
 80101d4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80101d6:	bf00      	nop
 80101d8:	3714      	adds	r7, #20
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr

080101e2 <_ZN8DC_motor5setupEv>:
void DC_motor::setup(){
 80101e2:	b580      	push	{r7, lr}
 80101e4:	b082      	sub	sp, #8
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101f2:	4619      	mov	r1, r3
 80101f4:	4610      	mov	r0, r2
 80101f6:	f7fc fc79 	bl	800caec <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101fe:	2100      	movs	r1, #0
 8010200:	4618      	mov	r0, r3
 8010202:	f7fc fe81 	bl	800cf08 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801020a:	2104      	movs	r1, #4
 801020c:	4618      	mov	r0, r3
 801020e:	f7fc fe7b 	bl	800cf08 <HAL_TIM_Encoder_Start>
}    
 8010212:	bf00      	nop
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}

0801021a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 801021a:	b480      	push	{r7}
 801021c:	b083      	sub	sp, #12
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2200      	movs	r2, #0
 8010226:	601a      	str	r2, [r3, #0]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	605a      	str	r2, [r3, #4]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	4618      	mov	r0, r3
 8010232:	370c      	adds	r7, #12
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr

0801023c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	4a04      	ldr	r2, [pc, #16]	@ (8010258 <_ZN3ros3MsgC1Ev+0x1c>)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	601a      	str	r2, [r3, #0]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4618      	mov	r0, r3
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr
 8010258:	08013ddc 	.word	0x08013ddc

0801025c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
      data()
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	4618      	mov	r0, r3
 8010268:	f7ff ffe8 	bl	801023c <_ZN3ros3MsgC1Ev>
 801026c:	4a06      	ldr	r2, [pc, #24]	@ (8010288 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	601a      	str	r2, [r3, #0]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	3304      	adds	r3, #4
 8010276:	4618      	mov	r0, r3
 8010278:	f7ff ffcf 	bl	801021a <_ZN3ros4TimeC1Ev>
    {
    }
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	4618      	mov	r0, r3
 8010280:	3708      	adds	r7, #8
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	08013dc4 	.word	0x08013dc4

0801028c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 801028c:	b480      	push	{r7}
 801028e:	b085      	sub	sp, #20
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8010296:	2300      	movs	r3, #0
 8010298:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6859      	ldr	r1, [r3, #4]
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	683a      	ldr	r2, [r7, #0]
 80102a2:	4413      	add	r3, r2
 80102a4:	b2ca      	uxtb	r2, r1
 80102a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	0a19      	lsrs	r1, r3, #8
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	3301      	adds	r3, #1
 80102b2:	683a      	ldr	r2, [r7, #0]
 80102b4:	4413      	add	r3, r2
 80102b6:	b2ca      	uxtb	r2, r1
 80102b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	0c19      	lsrs	r1, r3, #16
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	3302      	adds	r3, #2
 80102c4:	683a      	ldr	r2, [r7, #0]
 80102c6:	4413      	add	r3, r2
 80102c8:	b2ca      	uxtb	r2, r1
 80102ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	0e19      	lsrs	r1, r3, #24
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	3303      	adds	r3, #3
 80102d6:	683a      	ldr	r2, [r7, #0]
 80102d8:	4413      	add	r3, r2
 80102da:	b2ca      	uxtb	r2, r1
 80102dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	3304      	adds	r3, #4
 80102e2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6899      	ldr	r1, [r3, #8]
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	683a      	ldr	r2, [r7, #0]
 80102ec:	4413      	add	r3, r2
 80102ee:	b2ca      	uxtb	r2, r1
 80102f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	0a19      	lsrs	r1, r3, #8
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	3301      	adds	r3, #1
 80102fc:	683a      	ldr	r2, [r7, #0]
 80102fe:	4413      	add	r3, r2
 8010300:	b2ca      	uxtb	r2, r1
 8010302:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	0c19      	lsrs	r1, r3, #16
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	3302      	adds	r3, #2
 801030e:	683a      	ldr	r2, [r7, #0]
 8010310:	4413      	add	r3, r2
 8010312:	b2ca      	uxtb	r2, r1
 8010314:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	689b      	ldr	r3, [r3, #8]
 801031a:	0e19      	lsrs	r1, r3, #24
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	3303      	adds	r3, #3
 8010320:	683a      	ldr	r2, [r7, #0]
 8010322:	4413      	add	r3, r2
 8010324:	b2ca      	uxtb	r2, r1
 8010326:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	3304      	adds	r3, #4
 801032c:	60fb      	str	r3, [r7, #12]
      return offset;
 801032e:	68fb      	ldr	r3, [r7, #12]
    }
 8010330:	4618      	mov	r0, r3
 8010332:	3714      	adds	r7, #20
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 801033c:	b480      	push	{r7}
 801033e:	b085      	sub	sp, #20
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8010346:	2300      	movs	r3, #0
 8010348:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	683a      	ldr	r2, [r7, #0]
 801034e:	4413      	add	r3, r2
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	461a      	mov	r2, r3
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	685a      	ldr	r2, [r3, #4]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	3301      	adds	r3, #1
 8010360:	6839      	ldr	r1, [r7, #0]
 8010362:	440b      	add	r3, r1
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	021b      	lsls	r3, r3, #8
 8010368:	431a      	orrs	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	685a      	ldr	r2, [r3, #4]
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	3302      	adds	r3, #2
 8010376:	6839      	ldr	r1, [r7, #0]
 8010378:	440b      	add	r3, r1
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	041b      	lsls	r3, r3, #16
 801037e:	431a      	orrs	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	685a      	ldr	r2, [r3, #4]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	3303      	adds	r3, #3
 801038c:	6839      	ldr	r1, [r7, #0]
 801038e:	440b      	add	r3, r1
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	061b      	lsls	r3, r3, #24
 8010394:	431a      	orrs	r2, r3
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	3304      	adds	r3, #4
 801039e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	683a      	ldr	r2, [r7, #0]
 80103a4:	4413      	add	r3, r2
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	461a      	mov	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	689a      	ldr	r2, [r3, #8]
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	3301      	adds	r3, #1
 80103b6:	6839      	ldr	r1, [r7, #0]
 80103b8:	440b      	add	r3, r1
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	021b      	lsls	r3, r3, #8
 80103be:	431a      	orrs	r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	689a      	ldr	r2, [r3, #8]
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	3302      	adds	r3, #2
 80103cc:	6839      	ldr	r1, [r7, #0]
 80103ce:	440b      	add	r3, r1
 80103d0:	781b      	ldrb	r3, [r3, #0]
 80103d2:	041b      	lsls	r3, r3, #16
 80103d4:	431a      	orrs	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	689a      	ldr	r2, [r3, #8]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	3303      	adds	r3, #3
 80103e2:	6839      	ldr	r1, [r7, #0]
 80103e4:	440b      	add	r3, r1
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	061b      	lsls	r3, r3, #24
 80103ea:	431a      	orrs	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	3304      	adds	r3, #4
 80103f4:	60fb      	str	r3, [r7, #12]
     return offset;
 80103f6:	68fb      	ldr	r3, [r7, #12]
    }
 80103f8:	4618      	mov	r0, r3
 80103fa:	3714      	adds	r7, #20
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr

08010404 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	4b03      	ldr	r3, [pc, #12]	@ (801041c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 801040e:	4618      	mov	r0, r3
 8010410:	370c      	adds	r7, #12
 8010412:	46bd      	mov	sp, r7
 8010414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop
 801041c:	080139d8 	.word	0x080139d8

08010420 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8010420:	b480      	push	{r7}
 8010422:	b083      	sub	sp, #12
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	4b03      	ldr	r3, [pc, #12]	@ (8010438 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 801042a:	4618      	mov	r0, r3
 801042c:	370c      	adds	r7, #12
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop
 8010438:	080139e8 	.word	0x080139e8

0801043c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	4618      	mov	r0, r3
 8010448:	f7ff fef8 	bl	801023c <_ZN3ros3MsgC1Ev>
 801044c:	4a0b      	ldr	r2, [pc, #44]	@ (801047c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2200      	movs	r2, #0
 8010456:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	4a09      	ldr	r2, [pc, #36]	@ (8010480 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 801045c:	609a      	str	r2, [r3, #8]
      message_type(""),
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4a07      	ldr	r2, [pc, #28]	@ (8010480 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8010462:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	4a06      	ldr	r2, [pc, #24]	@ (8010480 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8010468:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2200      	movs	r2, #0
 801046e:	615a      	str	r2, [r3, #20]
    {
    }
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	4618      	mov	r0, r3
 8010474:	3708      	adds	r7, #8
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	08013dac 	.word	0x08013dac
 8010480:	08013a0c 	.word	0x08013a0c

08010484 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8010484:	b580      	push	{r7, lr}
 8010486:	b088      	sub	sp, #32
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801048e:	2300      	movs	r3, #0
 8010490:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	8899      	ldrh	r1, [r3, #4]
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	683a      	ldr	r2, [r7, #0]
 801049a:	4413      	add	r3, r2
 801049c:	b2ca      	uxtb	r2, r1
 801049e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	889b      	ldrh	r3, [r3, #4]
 80104a4:	0a1b      	lsrs	r3, r3, #8
 80104a6:	b299      	uxth	r1, r3
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	3301      	adds	r3, #1
 80104ac:	683a      	ldr	r2, [r7, #0]
 80104ae:	4413      	add	r3, r2
 80104b0:	b2ca      	uxtb	r2, r1
 80104b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	3302      	adds	r3, #2
 80104b8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	689b      	ldr	r3, [r3, #8]
 80104be:	4618      	mov	r0, r3
 80104c0:	f7ef ff26 	bl	8000310 <strlen>
 80104c4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	683a      	ldr	r2, [r7, #0]
 80104ca:	4413      	add	r3, r2
 80104cc:	69b9      	ldr	r1, [r7, #24]
 80104ce:	4618      	mov	r0, r3
 80104d0:	f001 fddc 	bl	801208c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	3304      	adds	r3, #4
 80104d8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	683a      	ldr	r2, [r7, #0]
 80104de:	18d0      	adds	r0, r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	689b      	ldr	r3, [r3, #8]
 80104e4:	69ba      	ldr	r2, [r7, #24]
 80104e6:	4619      	mov	r1, r3
 80104e8:	f003 f94a 	bl	8013780 <memcpy>
      offset += length_topic_name;
 80104ec:	69fa      	ldr	r2, [r7, #28]
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	4413      	add	r3, r2
 80104f2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	68db      	ldr	r3, [r3, #12]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7ef ff09 	bl	8000310 <strlen>
 80104fe:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	683a      	ldr	r2, [r7, #0]
 8010504:	4413      	add	r3, r2
 8010506:	6979      	ldr	r1, [r7, #20]
 8010508:	4618      	mov	r0, r3
 801050a:	f001 fdbf 	bl	801208c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 801050e:	69fb      	ldr	r3, [r7, #28]
 8010510:	3304      	adds	r3, #4
 8010512:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8010514:	69fb      	ldr	r3, [r7, #28]
 8010516:	683a      	ldr	r2, [r7, #0]
 8010518:	18d0      	adds	r0, r2, r3
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	697a      	ldr	r2, [r7, #20]
 8010520:	4619      	mov	r1, r3
 8010522:	f003 f92d 	bl	8013780 <memcpy>
      offset += length_message_type;
 8010526:	69fa      	ldr	r2, [r7, #28]
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	4413      	add	r3, r2
 801052c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	691b      	ldr	r3, [r3, #16]
 8010532:	4618      	mov	r0, r3
 8010534:	f7ef feec 	bl	8000310 <strlen>
 8010538:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 801053a:	69fb      	ldr	r3, [r7, #28]
 801053c:	683a      	ldr	r2, [r7, #0]
 801053e:	4413      	add	r3, r2
 8010540:	6939      	ldr	r1, [r7, #16]
 8010542:	4618      	mov	r0, r3
 8010544:	f001 fda2 	bl	801208c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	3304      	adds	r3, #4
 801054c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	683a      	ldr	r2, [r7, #0]
 8010552:	18d0      	adds	r0, r2, r3
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	691b      	ldr	r3, [r3, #16]
 8010558:	693a      	ldr	r2, [r7, #16]
 801055a:	4619      	mov	r1, r3
 801055c:	f003 f910 	bl	8013780 <memcpy>
      offset += length_md5sum;
 8010560:	69fa      	ldr	r2, [r7, #28]
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	4413      	add	r3, r2
 8010566:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	695b      	ldr	r3, [r3, #20]
 801056c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 801056e:	68f9      	ldr	r1, [r7, #12]
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	683a      	ldr	r2, [r7, #0]
 8010574:	4413      	add	r3, r2
 8010576:	b2ca      	uxtb	r2, r1
 8010578:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	0a19      	lsrs	r1, r3, #8
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	3301      	adds	r3, #1
 8010582:	683a      	ldr	r2, [r7, #0]
 8010584:	4413      	add	r3, r2
 8010586:	b2ca      	uxtb	r2, r1
 8010588:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	0c19      	lsrs	r1, r3, #16
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	3302      	adds	r3, #2
 8010592:	683a      	ldr	r2, [r7, #0]
 8010594:	4413      	add	r3, r2
 8010596:	b2ca      	uxtb	r2, r1
 8010598:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	0e19      	lsrs	r1, r3, #24
 801059e:	69fb      	ldr	r3, [r7, #28]
 80105a0:	3303      	adds	r3, #3
 80105a2:	683a      	ldr	r2, [r7, #0]
 80105a4:	4413      	add	r3, r2
 80105a6:	b2ca      	uxtb	r2, r1
 80105a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80105aa:	69fb      	ldr	r3, [r7, #28]
 80105ac:	3304      	adds	r3, #4
 80105ae:	61fb      	str	r3, [r7, #28]
      return offset;
 80105b0:	69fb      	ldr	r3, [r7, #28]
    }
 80105b2:	4618      	mov	r0, r3
 80105b4:	3720      	adds	r7, #32
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b08a      	sub	sp, #40	@ 0x28
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
 80105c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80105c4:	2300      	movs	r3, #0
 80105c6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	683a      	ldr	r2, [r7, #0]
 80105cc:	4413      	add	r3, r2
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	461a      	mov	r2, r3
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	889b      	ldrh	r3, [r3, #4]
 80105da:	b21a      	sxth	r2, r3
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	3301      	adds	r3, #1
 80105e0:	6839      	ldr	r1, [r7, #0]
 80105e2:	440b      	add	r3, r1
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	b21b      	sxth	r3, r3
 80105e8:	021b      	lsls	r3, r3, #8
 80105ea:	b21b      	sxth	r3, r3
 80105ec:	4313      	orrs	r3, r2
 80105ee:	b21b      	sxth	r3, r3
 80105f0:	b29a      	uxth	r2, r3
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80105f6:	69bb      	ldr	r3, [r7, #24]
 80105f8:	3302      	adds	r3, #2
 80105fa:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80105fc:	69bb      	ldr	r3, [r7, #24]
 80105fe:	683a      	ldr	r2, [r7, #0]
 8010600:	441a      	add	r2, r3
 8010602:	f107 0314 	add.w	r3, r7, #20
 8010606:	4611      	mov	r1, r2
 8010608:	4618      	mov	r0, r3
 801060a:	f001 fd5e 	bl	80120ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 801060e:	69bb      	ldr	r3, [r7, #24]
 8010610:	3304      	adds	r3, #4
 8010612:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8010614:	69bb      	ldr	r3, [r7, #24]
 8010616:	627b      	str	r3, [r7, #36]	@ 0x24
 8010618:	e00b      	b.n	8010632 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x78>
          inbuffer[k-1]=inbuffer[k];
 801061a:	683a      	ldr	r2, [r7, #0]
 801061c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801061e:	441a      	add	r2, r3
 8010620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010622:	3b01      	subs	r3, #1
 8010624:	6839      	ldr	r1, [r7, #0]
 8010626:	440b      	add	r3, r1
 8010628:	7812      	ldrb	r2, [r2, #0]
 801062a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 801062c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801062e:	3301      	adds	r3, #1
 8010630:	627b      	str	r3, [r7, #36]	@ 0x24
 8010632:	69ba      	ldr	r2, [r7, #24]
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	4413      	add	r3, r2
 8010638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801063a:	429a      	cmp	r2, r3
 801063c:	d3ed      	bcc.n	801061a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x60>
      }
      inbuffer[offset+length_topic_name-1]=0;
 801063e:	69ba      	ldr	r2, [r7, #24]
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	4413      	add	r3, r2
 8010644:	3b01      	subs	r3, #1
 8010646:	683a      	ldr	r2, [r7, #0]
 8010648:	4413      	add	r3, r2
 801064a:	2200      	movs	r2, #0
 801064c:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	3b01      	subs	r3, #1
 8010652:	683a      	ldr	r2, [r7, #0]
 8010654:	441a      	add	r2, r3
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 801065a:	69ba      	ldr	r2, [r7, #24]
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	4413      	add	r3, r2
 8010660:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	683a      	ldr	r2, [r7, #0]
 8010666:	441a      	add	r2, r3
 8010668:	f107 0310 	add.w	r3, r7, #16
 801066c:	4611      	mov	r1, r2
 801066e:	4618      	mov	r0, r3
 8010670:	f001 fd2b 	bl	80120ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	3304      	adds	r3, #4
 8010678:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	623b      	str	r3, [r7, #32]
 801067e:	e00b      	b.n	8010698 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xde>
          inbuffer[k-1]=inbuffer[k];
 8010680:	683a      	ldr	r2, [r7, #0]
 8010682:	6a3b      	ldr	r3, [r7, #32]
 8010684:	441a      	add	r2, r3
 8010686:	6a3b      	ldr	r3, [r7, #32]
 8010688:	3b01      	subs	r3, #1
 801068a:	6839      	ldr	r1, [r7, #0]
 801068c:	440b      	add	r3, r1
 801068e:	7812      	ldrb	r2, [r2, #0]
 8010690:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8010692:	6a3b      	ldr	r3, [r7, #32]
 8010694:	3301      	adds	r3, #1
 8010696:	623b      	str	r3, [r7, #32]
 8010698:	69ba      	ldr	r2, [r7, #24]
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	4413      	add	r3, r2
 801069e:	6a3a      	ldr	r2, [r7, #32]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d3ed      	bcc.n	8010680 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc6>
      }
      inbuffer[offset+length_message_type-1]=0;
 80106a4:	69ba      	ldr	r2, [r7, #24]
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	4413      	add	r3, r2
 80106aa:	3b01      	subs	r3, #1
 80106ac:	683a      	ldr	r2, [r7, #0]
 80106ae:	4413      	add	r3, r2
 80106b0:	2200      	movs	r2, #0
 80106b2:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80106b4:	69bb      	ldr	r3, [r7, #24]
 80106b6:	3b01      	subs	r3, #1
 80106b8:	683a      	ldr	r2, [r7, #0]
 80106ba:	441a      	add	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80106c0:	69ba      	ldr	r2, [r7, #24]
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	4413      	add	r3, r2
 80106c6:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	683a      	ldr	r2, [r7, #0]
 80106cc:	441a      	add	r2, r3
 80106ce:	f107 030c 	add.w	r3, r7, #12
 80106d2:	4611      	mov	r1, r2
 80106d4:	4618      	mov	r0, r3
 80106d6:	f001 fcf8 	bl	80120ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80106da:	69bb      	ldr	r3, [r7, #24]
 80106dc:	3304      	adds	r3, #4
 80106de:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80106e0:	69bb      	ldr	r3, [r7, #24]
 80106e2:	61fb      	str	r3, [r7, #28]
 80106e4:	e00b      	b.n	80106fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x144>
          inbuffer[k-1]=inbuffer[k];
 80106e6:	683a      	ldr	r2, [r7, #0]
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	441a      	add	r2, r3
 80106ec:	69fb      	ldr	r3, [r7, #28]
 80106ee:	3b01      	subs	r3, #1
 80106f0:	6839      	ldr	r1, [r7, #0]
 80106f2:	440b      	add	r3, r1
 80106f4:	7812      	ldrb	r2, [r2, #0]
 80106f6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	3301      	adds	r3, #1
 80106fc:	61fb      	str	r3, [r7, #28]
 80106fe:	69ba      	ldr	r2, [r7, #24]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	4413      	add	r3, r2
 8010704:	69fa      	ldr	r2, [r7, #28]
 8010706:	429a      	cmp	r2, r3
 8010708:	d3ed      	bcc.n	80106e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_md5sum-1]=0;
 801070a:	69ba      	ldr	r2, [r7, #24]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	4413      	add	r3, r2
 8010710:	3b01      	subs	r3, #1
 8010712:	683a      	ldr	r2, [r7, #0]
 8010714:	4413      	add	r3, r2
 8010716:	2200      	movs	r2, #0
 8010718:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	3b01      	subs	r3, #1
 801071e:	683a      	ldr	r2, [r7, #0]
 8010720:	441a      	add	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8010726:	69ba      	ldr	r2, [r7, #24]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	4413      	add	r3, r2
 801072c:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 801072e:	2300      	movs	r3, #0
 8010730:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	69ba      	ldr	r2, [r7, #24]
 8010736:	6839      	ldr	r1, [r7, #0]
 8010738:	440a      	add	r2, r1
 801073a:	7812      	ldrb	r2, [r2, #0]
 801073c:	4313      	orrs	r3, r2
 801073e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010740:	68ba      	ldr	r2, [r7, #8]
 8010742:	69bb      	ldr	r3, [r7, #24]
 8010744:	3301      	adds	r3, #1
 8010746:	6839      	ldr	r1, [r7, #0]
 8010748:	440b      	add	r3, r1
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	021b      	lsls	r3, r3, #8
 801074e:	4313      	orrs	r3, r2
 8010750:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8010752:	68ba      	ldr	r2, [r7, #8]
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	3302      	adds	r3, #2
 8010758:	6839      	ldr	r1, [r7, #0]
 801075a:	440b      	add	r3, r1
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	041b      	lsls	r3, r3, #16
 8010760:	4313      	orrs	r3, r2
 8010762:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010764:	68ba      	ldr	r2, [r7, #8]
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	3303      	adds	r3, #3
 801076a:	6839      	ldr	r1, [r7, #0]
 801076c:	440b      	add	r3, r1
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	061b      	lsls	r3, r3, #24
 8010772:	4313      	orrs	r3, r2
 8010774:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8010776:	68ba      	ldr	r2, [r7, #8]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	3304      	adds	r3, #4
 8010780:	61bb      	str	r3, [r7, #24]
     return offset;
 8010782:	69bb      	ldr	r3, [r7, #24]
    }
 8010784:	4618      	mov	r0, r3
 8010786:	3728      	adds	r7, #40	@ 0x28
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	4b03      	ldr	r3, [pc, #12]	@ (80107a4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8010796:	4618      	mov	r0, r3
 8010798:	370c      	adds	r7, #12
 801079a:	46bd      	mov	sp, r7
 801079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop
 80107a4:	08013a10 	.word	0x08013a10

080107a8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80107a8:	b480      	push	{r7}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	4b03      	ldr	r3, [pc, #12]	@ (80107c0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80107b2:	4618      	mov	r0, r3
 80107b4:	370c      	adds	r7, #12
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	08013a2c 	.word	0x08013a2c

080107c4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7ff fd34 	bl	801023c <_ZN3ros3MsgC1Ev>
 80107d4:	4a06      	ldr	r2, [pc, #24]	@ (80107f0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	601a      	str	r2, [r3, #0]
      level(0),
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2200      	movs	r2, #0
 80107de:	711a      	strb	r2, [r3, #4]
      msg("")
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	4a04      	ldr	r2, [pc, #16]	@ (80107f4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80107e4:	609a      	str	r2, [r3, #8]
    {
    }
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4618      	mov	r0, r3
 80107ea:	3708      	adds	r7, #8
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	08013d94 	.word	0x08013d94
 80107f4:	08013a0c 	.word	0x08013a0c

080107f8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8010802:	2300      	movs	r3, #0
 8010804:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	683a      	ldr	r2, [r7, #0]
 801080a:	4413      	add	r3, r2
 801080c:	687a      	ldr	r2, [r7, #4]
 801080e:	7912      	ldrb	r2, [r2, #4]
 8010810:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	3301      	adds	r3, #1
 8010816:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	689b      	ldr	r3, [r3, #8]
 801081c:	4618      	mov	r0, r3
 801081e:	f7ef fd77 	bl	8000310 <strlen>
 8010822:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	683a      	ldr	r2, [r7, #0]
 8010828:	4413      	add	r3, r2
 801082a:	68b9      	ldr	r1, [r7, #8]
 801082c:	4618      	mov	r0, r3
 801082e:	f001 fc2d 	bl	801208c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	3304      	adds	r3, #4
 8010836:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	683a      	ldr	r2, [r7, #0]
 801083c:	18d0      	adds	r0, r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	689b      	ldr	r3, [r3, #8]
 8010842:	68ba      	ldr	r2, [r7, #8]
 8010844:	4619      	mov	r1, r3
 8010846:	f002 ff9b 	bl	8013780 <memcpy>
      offset += length_msg;
 801084a:	68fa      	ldr	r2, [r7, #12]
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	4413      	add	r3, r2
 8010850:	60fb      	str	r3, [r7, #12]
      return offset;
 8010852:	68fb      	ldr	r3, [r7, #12]
    }
 8010854:	4618      	mov	r0, r3
 8010856:	3710      	adds	r7, #16
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 801085c:	b580      	push	{r7, lr}
 801085e:	b086      	sub	sp, #24
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8010866:	2300      	movs	r3, #0
 8010868:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 801086a:	693b      	ldr	r3, [r7, #16]
 801086c:	683a      	ldr	r2, [r7, #0]
 801086e:	4413      	add	r3, r2
 8010870:	781a      	ldrb	r2, [r3, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	3301      	adds	r3, #1
 801087a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	683a      	ldr	r2, [r7, #0]
 8010880:	441a      	add	r2, r3
 8010882:	f107 030c 	add.w	r3, r7, #12
 8010886:	4611      	mov	r1, r2
 8010888:	4618      	mov	r0, r3
 801088a:	f001 fc1e 	bl	80120ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	3304      	adds	r3, #4
 8010892:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	617b      	str	r3, [r7, #20]
 8010898:	e00b      	b.n	80108b2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	441a      	add	r2, r3
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	3b01      	subs	r3, #1
 80108a4:	6839      	ldr	r1, [r7, #0]
 80108a6:	440b      	add	r3, r1
 80108a8:	7812      	ldrb	r2, [r2, #0]
 80108aa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	3301      	adds	r3, #1
 80108b0:	617b      	str	r3, [r7, #20]
 80108b2:	693a      	ldr	r2, [r7, #16]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	4413      	add	r3, r2
 80108b8:	697a      	ldr	r2, [r7, #20]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d3ed      	bcc.n	801089a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80108be:	693a      	ldr	r2, [r7, #16]
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	4413      	add	r3, r2
 80108c4:	3b01      	subs	r3, #1
 80108c6:	683a      	ldr	r2, [r7, #0]
 80108c8:	4413      	add	r3, r2
 80108ca:	2200      	movs	r2, #0
 80108cc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	3b01      	subs	r3, #1
 80108d2:	683a      	ldr	r2, [r7, #0]
 80108d4:	441a      	add	r2, r3
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80108da:	693a      	ldr	r2, [r7, #16]
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	4413      	add	r3, r2
 80108e0:	613b      	str	r3, [r7, #16]
     return offset;
 80108e2:	693b      	ldr	r3, [r7, #16]
    }
 80108e4:	4618      	mov	r0, r3
 80108e6:	3718      	adds	r7, #24
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80108ec:	b480      	push	{r7}
 80108ee:	b083      	sub	sp, #12
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	4b03      	ldr	r3, [pc, #12]	@ (8010904 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80108f6:	4618      	mov	r0, r3
 80108f8:	370c      	adds	r7, #12
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	08013a50 	.word	0x08013a50

08010908 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8010908:	b480      	push	{r7}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	4b03      	ldr	r3, [pc, #12]	@ (8010920 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8010912:	4618      	mov	r0, r3
 8010914:	370c      	adds	r7, #12
 8010916:	46bd      	mov	sp, r7
 8010918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091c:	4770      	bx	lr
 801091e:	bf00      	nop
 8010920:	08013a64 	.word	0x08013a64

08010924 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	4618      	mov	r0, r3
 8010930:	f7ff fc84 	bl	801023c <_ZN3ros3MsgC1Ev>
 8010934:	4a0c      	ldr	r2, [pc, #48]	@ (8010968 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2200      	movs	r2, #0
 801093e:	605a      	str	r2, [r3, #4]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2200      	movs	r2, #0
 8010944:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2200      	movs	r2, #0
 801094a:	611a      	str	r2, [r3, #16]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2200      	movs	r2, #0
 8010956:	61da      	str	r2, [r3, #28]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2200      	movs	r2, #0
 801095c:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4618      	mov	r0, r3
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	08013d7c 	.word	0x08013d7c

0801096c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 801096c:	b580      	push	{r7, lr}
 801096e:	b08a      	sub	sp, #40	@ 0x28
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8010976:	2300      	movs	r3, #0
 8010978:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6859      	ldr	r1, [r3, #4]
 801097e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010980:	683a      	ldr	r2, [r7, #0]
 8010982:	4413      	add	r3, r2
 8010984:	b2ca      	uxtb	r2, r1
 8010986:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	685b      	ldr	r3, [r3, #4]
 801098c:	0a19      	lsrs	r1, r3, #8
 801098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010990:	3301      	adds	r3, #1
 8010992:	683a      	ldr	r2, [r7, #0]
 8010994:	4413      	add	r3, r2
 8010996:	b2ca      	uxtb	r2, r1
 8010998:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	0c19      	lsrs	r1, r3, #16
 80109a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a2:	3302      	adds	r3, #2
 80109a4:	683a      	ldr	r2, [r7, #0]
 80109a6:	4413      	add	r3, r2
 80109a8:	b2ca      	uxtb	r2, r1
 80109aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	685b      	ldr	r3, [r3, #4]
 80109b0:	0e19      	lsrs	r1, r3, #24
 80109b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109b4:	3303      	adds	r3, #3
 80109b6:	683a      	ldr	r2, [r7, #0]
 80109b8:	4413      	add	r3, r2
 80109ba:	b2ca      	uxtb	r2, r1
 80109bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80109be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c0:	3304      	adds	r3, #4
 80109c2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80109c4:	2300      	movs	r3, #0
 80109c6:	623b      	str	r3, [r7, #32]
 80109c8:	e02a      	b.n	8010a20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	68da      	ldr	r2, [r3, #12]
 80109ce:	6a3b      	ldr	r3, [r7, #32]
 80109d0:	009b      	lsls	r3, r3, #2
 80109d2:	4413      	add	r3, r2
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80109d8:	6939      	ldr	r1, [r7, #16]
 80109da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109dc:	683a      	ldr	r2, [r7, #0]
 80109de:	4413      	add	r3, r2
 80109e0:	b2ca      	uxtb	r2, r1
 80109e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	0a19      	lsrs	r1, r3, #8
 80109e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ea:	3301      	adds	r3, #1
 80109ec:	683a      	ldr	r2, [r7, #0]
 80109ee:	4413      	add	r3, r2
 80109f0:	b2ca      	uxtb	r2, r1
 80109f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	0c19      	lsrs	r1, r3, #16
 80109f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109fa:	3302      	adds	r3, #2
 80109fc:	683a      	ldr	r2, [r7, #0]
 80109fe:	4413      	add	r3, r2
 8010a00:	b2ca      	uxtb	r2, r1
 8010a02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	0e19      	lsrs	r1, r3, #24
 8010a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a0a:	3303      	adds	r3, #3
 8010a0c:	683a      	ldr	r2, [r7, #0]
 8010a0e:	4413      	add	r3, r2
 8010a10:	b2ca      	uxtb	r2, r1
 8010a12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8010a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a16:	3304      	adds	r3, #4
 8010a18:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8010a1a:	6a3b      	ldr	r3, [r7, #32]
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	623b      	str	r3, [r7, #32]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	6a3a      	ldr	r2, [r7, #32]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d3cf      	bcc.n	80109ca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6919      	ldr	r1, [r3, #16]
 8010a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a30:	683a      	ldr	r2, [r7, #0]
 8010a32:	4413      	add	r3, r2
 8010a34:	b2ca      	uxtb	r2, r1
 8010a36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	691b      	ldr	r3, [r3, #16]
 8010a3c:	0a19      	lsrs	r1, r3, #8
 8010a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a40:	3301      	adds	r3, #1
 8010a42:	683a      	ldr	r2, [r7, #0]
 8010a44:	4413      	add	r3, r2
 8010a46:	b2ca      	uxtb	r2, r1
 8010a48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	691b      	ldr	r3, [r3, #16]
 8010a4e:	0c19      	lsrs	r1, r3, #16
 8010a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a52:	3302      	adds	r3, #2
 8010a54:	683a      	ldr	r2, [r7, #0]
 8010a56:	4413      	add	r3, r2
 8010a58:	b2ca      	uxtb	r2, r1
 8010a5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	691b      	ldr	r3, [r3, #16]
 8010a60:	0e19      	lsrs	r1, r3, #24
 8010a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a64:	3303      	adds	r3, #3
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	4413      	add	r3, r2
 8010a6a:	b2ca      	uxtb	r2, r1
 8010a6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8010a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a70:	3304      	adds	r3, #4
 8010a72:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8010a74:	2300      	movs	r3, #0
 8010a76:	61fb      	str	r3, [r7, #28]
 8010a78:	e02a      	b.n	8010ad0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	699a      	ldr	r2, [r3, #24]
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	009b      	lsls	r3, r3, #2
 8010a82:	4413      	add	r3, r2
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8010a88:	68f9      	ldr	r1, [r7, #12]
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	4413      	add	r3, r2
 8010a90:	b2ca      	uxtb	r2, r1
 8010a92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	0a19      	lsrs	r1, r3, #8
 8010a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a9a:	3301      	adds	r3, #1
 8010a9c:	683a      	ldr	r2, [r7, #0]
 8010a9e:	4413      	add	r3, r2
 8010aa0:	b2ca      	uxtb	r2, r1
 8010aa2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	0c19      	lsrs	r1, r3, #16
 8010aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aaa:	3302      	adds	r3, #2
 8010aac:	683a      	ldr	r2, [r7, #0]
 8010aae:	4413      	add	r3, r2
 8010ab0:	b2ca      	uxtb	r2, r1
 8010ab2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	0e19      	lsrs	r1, r3, #24
 8010ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aba:	3303      	adds	r3, #3
 8010abc:	683a      	ldr	r2, [r7, #0]
 8010abe:	4413      	add	r3, r2
 8010ac0:	b2ca      	uxtb	r2, r1
 8010ac2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8010ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac6:	3304      	adds	r3, #4
 8010ac8:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	3301      	adds	r3, #1
 8010ace:	61fb      	str	r3, [r7, #28]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	691b      	ldr	r3, [r3, #16]
 8010ad4:	69fa      	ldr	r2, [r7, #28]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d3cf      	bcc.n	8010a7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	69d9      	ldr	r1, [r3, #28]
 8010ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae0:	683a      	ldr	r2, [r7, #0]
 8010ae2:	4413      	add	r3, r2
 8010ae4:	b2ca      	uxtb	r2, r1
 8010ae6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	69db      	ldr	r3, [r3, #28]
 8010aec:	0a19      	lsrs	r1, r3, #8
 8010aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af0:	3301      	adds	r3, #1
 8010af2:	683a      	ldr	r2, [r7, #0]
 8010af4:	4413      	add	r3, r2
 8010af6:	b2ca      	uxtb	r2, r1
 8010af8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	69db      	ldr	r3, [r3, #28]
 8010afe:	0c19      	lsrs	r1, r3, #16
 8010b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b02:	3302      	adds	r3, #2
 8010b04:	683a      	ldr	r2, [r7, #0]
 8010b06:	4413      	add	r3, r2
 8010b08:	b2ca      	uxtb	r2, r1
 8010b0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	69db      	ldr	r3, [r3, #28]
 8010b10:	0e19      	lsrs	r1, r3, #24
 8010b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b14:	3303      	adds	r3, #3
 8010b16:	683a      	ldr	r2, [r7, #0]
 8010b18:	4413      	add	r3, r2
 8010b1a:	b2ca      	uxtb	r2, r1
 8010b1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b20:	3304      	adds	r3, #4
 8010b22:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8010b24:	2300      	movs	r3, #0
 8010b26:	61bb      	str	r3, [r7, #24]
 8010b28:	e027      	b.n	8010b7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b2e:	69bb      	ldr	r3, [r7, #24]
 8010b30:	009b      	lsls	r3, r3, #2
 8010b32:	4413      	add	r3, r2
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7ef fbea 	bl	8000310 <strlen>
 8010b3c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8010b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b40:	683a      	ldr	r2, [r7, #0]
 8010b42:	4413      	add	r3, r2
 8010b44:	6979      	ldr	r1, [r7, #20]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f001 faa0 	bl	801208c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8010b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b4e:	3304      	adds	r3, #4
 8010b50:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8010b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b54:	683a      	ldr	r2, [r7, #0]
 8010b56:	18d0      	adds	r0, r2, r3
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	009b      	lsls	r3, r3, #2
 8010b60:	4413      	add	r3, r2
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	697a      	ldr	r2, [r7, #20]
 8010b66:	4619      	mov	r1, r3
 8010b68:	f002 fe0a 	bl	8013780 <memcpy>
      offset += length_stringsi;
 8010b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	4413      	add	r3, r2
 8010b72:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8010b74:	69bb      	ldr	r3, [r7, #24]
 8010b76:	3301      	adds	r3, #1
 8010b78:	61bb      	str	r3, [r7, #24]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	69db      	ldr	r3, [r3, #28]
 8010b7e:	69ba      	ldr	r2, [r7, #24]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d3d2      	bcc.n	8010b2a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8010b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8010b86:	4618      	mov	r0, r3
 8010b88:	3728      	adds	r7, #40	@ 0x28
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b08e      	sub	sp, #56	@ 0x38
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
 8010b96:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8010b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b9e:	683a      	ldr	r2, [r7, #0]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8010ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ba8:	3301      	adds	r3, #1
 8010baa:	683a      	ldr	r2, [r7, #0]
 8010bac:	4413      	add	r3, r2
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	021b      	lsls	r3, r3, #8
 8010bb2:	6a3a      	ldr	r2, [r7, #32]
 8010bb4:	4313      	orrs	r3, r2
 8010bb6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8010bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bba:	3302      	adds	r3, #2
 8010bbc:	683a      	ldr	r2, [r7, #0]
 8010bbe:	4413      	add	r3, r2
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	041b      	lsls	r3, r3, #16
 8010bc4:	6a3a      	ldr	r2, [r7, #32]
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8010bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bcc:	3303      	adds	r3, #3
 8010bce:	683a      	ldr	r2, [r7, #0]
 8010bd0:	4413      	add	r3, r2
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	061b      	lsls	r3, r3, #24
 8010bd6:	6a3a      	ldr	r2, [r7, #32]
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8010bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bde:	3304      	adds	r3, #4
 8010be0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	6a3a      	ldr	r2, [r7, #32]
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d90a      	bls.n	8010c02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	68da      	ldr	r2, [r3, #12]
 8010bf0:	6a3b      	ldr	r3, [r7, #32]
 8010bf2:	009b      	lsls	r3, r3, #2
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	4610      	mov	r0, r2
 8010bf8:	f002 fd58 	bl	80136ac <realloc>
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6a3a      	ldr	r2, [r7, #32]
 8010c06:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8010c08:	2300      	movs	r3, #0
 8010c0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8010c0c:	e035      	b.n	8010c7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c16:	6839      	ldr	r1, [r7, #0]
 8010c18:	440a      	add	r2, r1
 8010c1a:	7812      	ldrb	r2, [r2, #0]
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010c20:	697a      	ldr	r2, [r7, #20]
 8010c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c24:	3301      	adds	r3, #1
 8010c26:	6839      	ldr	r1, [r7, #0]
 8010c28:	440b      	add	r3, r1
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	021b      	lsls	r3, r3, #8
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8010c32:	697a      	ldr	r2, [r7, #20]
 8010c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c36:	3302      	adds	r3, #2
 8010c38:	6839      	ldr	r1, [r7, #0]
 8010c3a:	440b      	add	r3, r1
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	041b      	lsls	r3, r3, #16
 8010c40:	4313      	orrs	r3, r2
 8010c42:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010c44:	697a      	ldr	r2, [r7, #20]
 8010c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c48:	3303      	adds	r3, #3
 8010c4a:	6839      	ldr	r1, [r7, #0]
 8010c4c:	440b      	add	r3, r1
 8010c4e:	781b      	ldrb	r3, [r3, #0]
 8010c50:	061b      	lsls	r3, r3, #24
 8010c52:	4313      	orrs	r3, r2
 8010c54:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8010c56:	697a      	ldr	r2, [r7, #20]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8010c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c5e:	3304      	adds	r3, #4
 8010c60:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	68da      	ldr	r2, [r3, #12]
 8010c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c68:	009b      	lsls	r3, r3, #2
 8010c6a:	4413      	add	r3, r2
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	3208      	adds	r2, #8
 8010c70:	6812      	ldr	r2, [r2, #0]
 8010c72:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8010c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c76:	3301      	adds	r3, #1
 8010c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d3c4      	bcc.n	8010c0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8010c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c86:	683a      	ldr	r2, [r7, #0]
 8010c88:	4413      	add	r3, r2
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8010c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c90:	3301      	adds	r3, #1
 8010c92:	683a      	ldr	r2, [r7, #0]
 8010c94:	4413      	add	r3, r2
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	021b      	lsls	r3, r3, #8
 8010c9a:	69fa      	ldr	r2, [r7, #28]
 8010c9c:	4313      	orrs	r3, r2
 8010c9e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8010ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ca2:	3302      	adds	r3, #2
 8010ca4:	683a      	ldr	r2, [r7, #0]
 8010ca6:	4413      	add	r3, r2
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	041b      	lsls	r3, r3, #16
 8010cac:	69fa      	ldr	r2, [r7, #28]
 8010cae:	4313      	orrs	r3, r2
 8010cb0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8010cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cb4:	3303      	adds	r3, #3
 8010cb6:	683a      	ldr	r2, [r7, #0]
 8010cb8:	4413      	add	r3, r2
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	061b      	lsls	r3, r3, #24
 8010cbe:	69fa      	ldr	r2, [r7, #28]
 8010cc0:	4313      	orrs	r3, r2
 8010cc2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8010cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cc6:	3304      	adds	r3, #4
 8010cc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	691b      	ldr	r3, [r3, #16]
 8010cce:	69fa      	ldr	r2, [r7, #28]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d90a      	bls.n	8010cea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	699a      	ldr	r2, [r3, #24]
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	4619      	mov	r1, r3
 8010cde:	4610      	mov	r0, r2
 8010ce0:	f002 fce4 	bl	80136ac <realloc>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	69fa      	ldr	r2, [r7, #28]
 8010cee:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010cf4:	e035      	b.n	8010d62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cfe:	6839      	ldr	r1, [r7, #0]
 8010d00:	440a      	add	r2, r1
 8010d02:	7812      	ldrb	r2, [r2, #0]
 8010d04:	4313      	orrs	r3, r2
 8010d06:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010d08:	693a      	ldr	r2, [r7, #16]
 8010d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	6839      	ldr	r1, [r7, #0]
 8010d10:	440b      	add	r3, r1
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	021b      	lsls	r3, r3, #8
 8010d16:	4313      	orrs	r3, r2
 8010d18:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8010d1a:	693a      	ldr	r2, [r7, #16]
 8010d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d1e:	3302      	adds	r3, #2
 8010d20:	6839      	ldr	r1, [r7, #0]
 8010d22:	440b      	add	r3, r1
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	041b      	lsls	r3, r3, #16
 8010d28:	4313      	orrs	r3, r2
 8010d2a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010d2c:	693a      	ldr	r2, [r7, #16]
 8010d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d30:	3303      	adds	r3, #3
 8010d32:	6839      	ldr	r1, [r7, #0]
 8010d34:	440b      	add	r3, r1
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	061b      	lsls	r3, r3, #24
 8010d3a:	4313      	orrs	r3, r2
 8010d3c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8010d3e:	693a      	ldr	r2, [r7, #16]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8010d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d46:	3304      	adds	r3, #4
 8010d48:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	699a      	ldr	r2, [r3, #24]
 8010d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	4413      	add	r3, r2
 8010d54:	687a      	ldr	r2, [r7, #4]
 8010d56:	3214      	adds	r2, #20
 8010d58:	6812      	ldr	r2, [r2, #0]
 8010d5a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8010d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d5e:	3301      	adds	r3, #1
 8010d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	691b      	ldr	r3, [r3, #16]
 8010d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d3c4      	bcc.n	8010cf6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8010d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d6e:	683a      	ldr	r2, [r7, #0]
 8010d70:	4413      	add	r3, r2
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8010d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d78:	3301      	adds	r3, #1
 8010d7a:	683a      	ldr	r2, [r7, #0]
 8010d7c:	4413      	add	r3, r2
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	021b      	lsls	r3, r3, #8
 8010d82:	69ba      	ldr	r2, [r7, #24]
 8010d84:	4313      	orrs	r3, r2
 8010d86:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8010d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d8a:	3302      	adds	r3, #2
 8010d8c:	683a      	ldr	r2, [r7, #0]
 8010d8e:	4413      	add	r3, r2
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	041b      	lsls	r3, r3, #16
 8010d94:	69ba      	ldr	r2, [r7, #24]
 8010d96:	4313      	orrs	r3, r2
 8010d98:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8010d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d9c:	3303      	adds	r3, #3
 8010d9e:	683a      	ldr	r2, [r7, #0]
 8010da0:	4413      	add	r3, r2
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	061b      	lsls	r3, r3, #24
 8010da6:	69ba      	ldr	r2, [r7, #24]
 8010da8:	4313      	orrs	r3, r2
 8010daa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8010dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dae:	3304      	adds	r3, #4
 8010db0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	69db      	ldr	r3, [r3, #28]
 8010db6:	69ba      	ldr	r2, [r7, #24]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d90a      	bls.n	8010dd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	4610      	mov	r0, r2
 8010dc8:	f002 fc70 	bl	80136ac <realloc>
 8010dcc:	4602      	mov	r2, r0
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	69ba      	ldr	r2, [r7, #24]
 8010dd6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8010dd8:	2300      	movs	r3, #0
 8010dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010ddc:	e03e      	b.n	8010e5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8010dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010de0:	683a      	ldr	r2, [r7, #0]
 8010de2:	441a      	add	r2, r3
 8010de4:	f107 030c 	add.w	r3, r7, #12
 8010de8:	4611      	mov	r1, r2
 8010dea:	4618      	mov	r0, r3
 8010dec:	f001 f96d 	bl	80120ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8010df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010df2:	3304      	adds	r3, #4
 8010df4:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8010df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8010dfa:	e00b      	b.n	8010e14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8010dfc:	683a      	ldr	r2, [r7, #0]
 8010dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e00:	441a      	add	r2, r3
 8010e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e04:	3b01      	subs	r3, #1
 8010e06:	6839      	ldr	r1, [r7, #0]
 8010e08:	440b      	add	r3, r1
 8010e0a:	7812      	ldrb	r2, [r2, #0]
 8010e0c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8010e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e10:	3301      	adds	r3, #1
 8010e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	4413      	add	r3, r2
 8010e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d3ed      	bcc.n	8010dfc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8010e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	4413      	add	r3, r2
 8010e26:	3b01      	subs	r3, #1
 8010e28:	683a      	ldr	r2, [r7, #0]
 8010e2a:	4413      	add	r3, r2
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8010e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e32:	3b01      	subs	r3, #1
 8010e34:	683a      	ldr	r2, [r7, #0]
 8010e36:	441a      	add	r2, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8010e3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	4413      	add	r3, r2
 8010e42:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e4a:	009b      	lsls	r3, r3, #2
 8010e4c:	4413      	add	r3, r2
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	3220      	adds	r2, #32
 8010e52:	6812      	ldr	r2, [r2, #0]
 8010e54:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8010e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e58:	3301      	adds	r3, #1
 8010e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	69db      	ldr	r3, [r3, #28]
 8010e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d3bb      	bcc.n	8010dde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8010e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3738      	adds	r7, #56	@ 0x38
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	4b03      	ldr	r3, [pc, #12]	@ (8010e88 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	370c      	adds	r7, #12
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop
 8010e88:	08013c70 	.word	0x08013c70

08010e8c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	4b03      	ldr	r3, [pc, #12]	@ (8010ea4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8010e96:	4618      	mov	r0, r3
 8010e98:	370c      	adds	r7, #12
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	08013a88 	.word	0x08013a88

08010ea8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8010ea8:	b480      	push	{r7}
 8010eaa:	b085      	sub	sp, #20
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	60f8      	str	r0, [r7, #12]
 8010eb0:	60b9      	str	r1, [r7, #8]
 8010eb2:	607a      	str	r2, [r7, #4]
 8010eb4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	68ba      	ldr	r2, [r7, #8]
 8010eba:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	687a      	ldr	r2, [r7, #4]
 8010ec0:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	683a      	ldr	r2, [r7, #0]
 8010ec6:	611a      	str	r2, [r3, #16]
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3714      	adds	r7, #20
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr

08010ed6 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8010ed6:	b480      	push	{r7}
 8010ed8:	b083      	sub	sp, #12
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	691b      	ldr	r3, [r3, #16]
  }
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	370c      	adds	r7, #12
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr
	...

08010ef0 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 4096;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	4a4b      	ldr	r2, [pc, #300]	@ (8011030 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d077      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4a48      	ldr	r2, [pc, #288]	@ (8011034 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d06f      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	4a45      	ldr	r2, [pc, #276]	@ (8011038 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8010f24:	4293      	cmp	r3, r2
 8010f26:	d067      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4a42      	ldr	r2, [pc, #264]	@ (801103c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8010f34:	4293      	cmp	r3, r2
 8010f36:	d05f      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	4a3f      	ldr	r2, [pc, #252]	@ (8011040 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d057      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	4a3c      	ldr	r2, [pc, #240]	@ (8011044 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8010f54:	4293      	cmp	r3, r2
 8010f56:	d04f      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	4a39      	ldr	r2, [pc, #228]	@ (8011048 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d047      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	4a36      	ldr	r2, [pc, #216]	@ (801104c <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8010f74:	4293      	cmp	r3, r2
 8010f76:	d03f      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4a33      	ldr	r2, [pc, #204]	@ (8011050 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8010f84:	4293      	cmp	r3, r2
 8010f86:	d037      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	4a30      	ldr	r2, [pc, #192]	@ (8011054 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8010f94:	4293      	cmp	r3, r2
 8010f96:	d02f      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8011058 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	d027      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	4a2a      	ldr	r2, [pc, #168]	@ (801105c <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8010fb4:	4293      	cmp	r3, r2
 8010fb6:	d01f      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	4a27      	ldr	r2, [pc, #156]	@ (8011060 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d017      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	4a24      	ldr	r2, [pc, #144]	@ (8011064 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d00f      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	4a21      	ldr	r2, [pc, #132]	@ (8011068 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d007      	beq.n	8010ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	4a1e      	ldr	r2, [pc, #120]	@ (801106c <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d10a      	bne.n	801100e <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8011008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801100c:	e009      	b.n	8011022 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 801101e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011022:	4618      	mov	r0, r3
 8011024:	370c      	adds	r7, #12
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop
 8011030:	40020010 	.word	0x40020010
 8011034:	40020028 	.word	0x40020028
 8011038:	40020040 	.word	0x40020040
 801103c:	40020058 	.word	0x40020058
 8011040:	40020070 	.word	0x40020070
 8011044:	40020088 	.word	0x40020088
 8011048:	400200a0 	.word	0x400200a0
 801104c:	400200b8 	.word	0x400200b8
 8011050:	40020410 	.word	0x40020410
 8011054:	40020428 	.word	0x40020428
 8011058:	40020440 	.word	0x40020440
 801105c:	40020458 	.word	0x40020458
 8011060:	40020470 	.word	0x40020470
 8011064:	40020488 	.word	0x40020488
 8011068:	400204a0 	.word	0x400204a0
 801106c:	400204b8 	.word	0x400204b8

08011070 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 4096;
    uint8_t tbuf[tbuflen];
    uint16_t twind, tfind;

  public:
    STM32Hardware():
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	4a0c      	ldr	r2, [pc, #48]	@ (80110ac <_ZN13STM32HardwareC1Ev+0x3c>)
 801107c:	601a      	str	r2, [r3, #0]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011084:	461a      	mov	r2, r3
 8011086:	2300      	movs	r3, #0
 8011088:	6053      	str	r3, [r2, #4]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011090:	2200      	movs	r2, #0
 8011092:	811a      	strh	r2, [r3, #8]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801109a:	2200      	movs	r2, #0
 801109c:	815a      	strh	r2, [r3, #10]
    }
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	4618      	mov	r0, r3
 80110a2:	370c      	adds	r7, #12
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr
 80110ac:	24000970 	.word	0x24000970

080110b0 <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 80110b0:	b590      	push	{r4, r7, lr}
 80110b2:	b085      	sub	sp, #20
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80110b8:	f04f 33ff 	mov.w	r3, #4294967295
 80110bc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80110c4:	685c      	ldr	r4, [r3, #4]
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f7ff ff12 	bl	8010ef0 <_ZN13STM32Hardware10getRdmaIndEv>
 80110cc:	4603      	mov	r3, r0
 80110ce:	429c      	cmp	r4, r3
 80110d0:	bf14      	ite	ne
 80110d2:	2301      	movne	r3, #1
 80110d4:	2300      	moveq	r3, #0
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d016      	beq.n	801110a <_ZN13STM32Hardware4readEv+0x5a>
        c = rbuf[rind++];
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80110e2:	685b      	ldr	r3, [r3, #4]
 80110e4:	1c5a      	adds	r2, r3, #1
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80110ec:	604a      	str	r2, [r1, #4]
 80110ee:	687a      	ldr	r2, [r7, #4]
 80110f0:	4413      	add	r3, r2
 80110f2:	791b      	ldrb	r3, [r3, #4]
 80110f4:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011108:	6053      	str	r3, [r2, #4]
      }
      return c;
 801110a:	68fb      	ldr	r3, [r7, #12]
    }
 801110c:	4618      	mov	r0, r3
 801110e:	3714      	adds	r7, #20
 8011110:	46bd      	mov	sp, r7
 8011112:	bd90      	pop	{r4, r7, pc}

08011114 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8011114:	b580      	push	{r7, lr}
 8011116:	b084      	sub	sp, #16
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011124:	2b20      	cmp	r3, #32
 8011126:	d108      	bne.n	801113a <_ZN13STM32Hardware5flushEv+0x26>
 8011128:	4b2d      	ldr	r3, [pc, #180]	@ (80111e0 <_ZN13STM32Hardware5flushEv+0xcc>)
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	f083 0301 	eor.w	r3, r3, #1
 8011130:	b2db      	uxtb	r3, r3
 8011132:	2b00      	cmp	r3, #0
 8011134:	d001      	beq.n	801113a <_ZN13STM32Hardware5flushEv+0x26>
 8011136:	2301      	movs	r3, #1
 8011138:	e000      	b.n	801113c <_ZN13STM32Hardware5flushEv+0x28>
 801113a:	2300      	movs	r3, #0
 801113c:	2b00      	cmp	r3, #0
 801113e:	d04a      	beq.n	80111d6 <_ZN13STM32Hardware5flushEv+0xc2>
        mutex = true;
 8011140:	4b27      	ldr	r3, [pc, #156]	@ (80111e0 <_ZN13STM32Hardware5flushEv+0xcc>)
 8011142:	2201      	movs	r2, #1
 8011144:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801114c:	891a      	ldrh	r2, [r3, #8]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011154:	895b      	ldrh	r3, [r3, #10]
 8011156:	429a      	cmp	r2, r3
 8011158:	d03a      	beq.n	80111d0 <_ZN13STM32Hardware5flushEv+0xbc>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011160:	895a      	ldrh	r2, [r3, #10]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011168:	891b      	ldrh	r3, [r3, #8]
 801116a:	429a      	cmp	r2, r3
 801116c:	d20a      	bcs.n	8011184 <_ZN13STM32Hardware5flushEv+0x70>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011174:	891a      	ldrh	r2, [r3, #8]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801117c:	895b      	ldrh	r3, [r3, #10]
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	b29b      	uxth	r3, r3
 8011182:	e006      	b.n	8011192 <_ZN13STM32Hardware5flushEv+0x7e>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801118a:	895b      	ldrh	r3, [r3, #10]
 801118c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8011190:	b29b      	uxth	r3, r3
 8011192:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6818      	ldr	r0, [r3, #0]
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801119e:	895b      	ldrh	r3, [r3, #10]
 80111a0:	461a      	mov	r2, r3
 80111a2:	f241 0308 	movw	r3, #4104	@ 0x1008
 80111a6:	4413      	add	r3, r2
 80111a8:	687a      	ldr	r2, [r7, #4]
 80111aa:	4413      	add	r3, r2
 80111ac:	89fa      	ldrh	r2, [r7, #14]
 80111ae:	4619      	mov	r1, r3
 80111b0:	f7fc feba 	bl	800df28 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80111ba:	895a      	ldrh	r2, [r3, #10]
 80111bc:	89fb      	ldrh	r3, [r7, #14]
 80111be:	4413      	add	r3, r2
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80111c6:	b29a      	uxth	r2, r3
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80111ce:	815a      	strh	r2, [r3, #10]
        }
        mutex = false;
 80111d0:	4b03      	ldr	r3, [pc, #12]	@ (80111e0 <_ZN13STM32Hardware5flushEv+0xcc>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	701a      	strb	r2, [r3, #0]
      }
    }
 80111d6:	bf00      	nop
 80111d8:	3710      	adds	r7, #16
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	24001180 	.word	0x24001180

080111e4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b086      	sub	sp, #24
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	60f8      	str	r0, [r7, #12]
 80111ec:	60b9      	str	r1, [r7, #8]
 80111ee:	607a      	str	r2, [r7, #4]
      int n = length;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80111fa:	bfa8      	it	ge
 80111fc:	f44f 5380 	movge.w	r3, #4096	@ 0x1000
 8011200:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011208:	891b      	ldrh	r3, [r3, #8]
 801120a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 801120e:	697a      	ldr	r2, [r7, #20]
 8011210:	4293      	cmp	r3, r2
 8011212:	bfa8      	it	ge
 8011214:	4613      	movge	r3, r2
 8011216:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801121e:	891b      	ldrh	r3, [r3, #8]
 8011220:	461a      	mov	r2, r3
 8011222:	f241 0308 	movw	r3, #4104	@ 0x1008
 8011226:	4413      	add	r3, r2
 8011228:	68fa      	ldr	r2, [r7, #12]
 801122a:	4413      	add	r3, r2
 801122c:	693a      	ldr	r2, [r7, #16]
 801122e:	68b9      	ldr	r1, [r7, #8]
 8011230:	4618      	mov	r0, r3
 8011232:	f002 faa5 	bl	8013780 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801123c:	891a      	ldrh	r2, [r3, #8]
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	b29b      	uxth	r3, r3
 8011242:	4413      	add	r3, r2
 8011244:	b29b      	uxth	r3, r3
 8011246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801124a:	b29a      	uxth	r2, r3
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011252:	811a      	strh	r2, [r3, #8]

      if(n != n_tail){
 8011254:	697a      	ldr	r2, [r7, #20]
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	429a      	cmp	r2, r3
 801125a:	d00d      	beq.n	8011278 <_ZN13STM32Hardware5writeEPhi+0x94>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 801125c:	68fa      	ldr	r2, [r7, #12]
 801125e:	f241 0308 	movw	r3, #4104	@ 0x1008
 8011262:	4413      	add	r3, r2
 8011264:	693a      	ldr	r2, [r7, #16]
 8011266:	68b9      	ldr	r1, [r7, #8]
 8011268:	1888      	adds	r0, r1, r2
 801126a:	6979      	ldr	r1, [r7, #20]
 801126c:	693a      	ldr	r2, [r7, #16]
 801126e:	1a8a      	subs	r2, r1, r2
 8011270:	4601      	mov	r1, r0
 8011272:	4618      	mov	r0, r3
 8011274:	f002 fa84 	bl	8013780 <memcpy>
      }

      flush();
 8011278:	68f8      	ldr	r0, [r7, #12]
 801127a:	f7ff ff4b 	bl	8011114 <_ZN13STM32Hardware5flushEv>
    }
 801127e:	bf00      	nop
 8011280:	3718      	adds	r7, #24
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}

08011286 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8011286:	b580      	push	{r7, lr}
 8011288:	b082      	sub	sp, #8
 801128a:	af00      	add	r7, sp, #0
 801128c:	6078      	str	r0, [r7, #4]
 801128e:	f7f2 fc95 	bl	8003bbc <HAL_GetTick>
 8011292:	4603      	mov	r3, r0
 8011294:	4618      	mov	r0, r3
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7fe ffc8 	bl	801023c <_ZN3ros3MsgC1Ev>
 80112ac:	4a0e      	ldr	r2, [pc, #56]	@ (80112e8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	601a      	str	r2, [r3, #0]
      x(0),
 80112b2:	6879      	ldr	r1, [r7, #4]
 80112b4:	f04f 0200 	mov.w	r2, #0
 80112b8:	f04f 0300 	mov.w	r3, #0
 80112bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80112c0:	6879      	ldr	r1, [r7, #4]
 80112c2:	f04f 0200 	mov.w	r2, #0
 80112c6:	f04f 0300 	mov.w	r3, #0
 80112ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80112ce:	6879      	ldr	r1, [r7, #4]
 80112d0:	f04f 0200 	mov.w	r2, #0
 80112d4:	f04f 0300 	mov.w	r3, #0
 80112d8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	4618      	mov	r0, r3
 80112e0:	3708      	adds	r7, #8
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	bf00      	nop
 80112e8:	08013d38 	.word	0x08013d38

080112ec <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80112ec:	b480      	push	{r7}
 80112ee:	b08b      	sub	sp, #44	@ 0x2c
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80112f6:	2300      	movs	r3, #0
 80112f8:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011300:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8011304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011308:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801130a:	6838      	ldr	r0, [r7, #0]
 801130c:	4401      	add	r1, r0
 801130e:	b2d3      	uxtb	r3, r2
 8011310:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8011312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011316:	f04f 0200 	mov.w	r2, #0
 801131a:	f04f 0300 	mov.w	r3, #0
 801131e:	0a02      	lsrs	r2, r0, #8
 8011320:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011324:	0a0b      	lsrs	r3, r1, #8
 8011326:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011328:	3101      	adds	r1, #1
 801132a:	6838      	ldr	r0, [r7, #0]
 801132c:	4401      	add	r1, r0
 801132e:	b2d3      	uxtb	r3, r2
 8011330:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8011332:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011336:	f04f 0200 	mov.w	r2, #0
 801133a:	f04f 0300 	mov.w	r3, #0
 801133e:	0c02      	lsrs	r2, r0, #16
 8011340:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011344:	0c0b      	lsrs	r3, r1, #16
 8011346:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011348:	3102      	adds	r1, #2
 801134a:	6838      	ldr	r0, [r7, #0]
 801134c:	4401      	add	r1, r0
 801134e:	b2d3      	uxtb	r3, r2
 8011350:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8011352:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011356:	f04f 0200 	mov.w	r2, #0
 801135a:	f04f 0300 	mov.w	r3, #0
 801135e:	0e02      	lsrs	r2, r0, #24
 8011360:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011364:	0e0b      	lsrs	r3, r1, #24
 8011366:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011368:	3103      	adds	r1, #3
 801136a:	6838      	ldr	r0, [r7, #0]
 801136c:	4401      	add	r1, r0
 801136e:	b2d3      	uxtb	r3, r2
 8011370:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8011372:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011376:	f04f 0200 	mov.w	r2, #0
 801137a:	f04f 0300 	mov.w	r3, #0
 801137e:	000a      	movs	r2, r1
 8011380:	2300      	movs	r3, #0
 8011382:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011384:	3104      	adds	r1, #4
 8011386:	6838      	ldr	r0, [r7, #0]
 8011388:	4401      	add	r1, r0
 801138a:	b2d3      	uxtb	r3, r2
 801138c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 801138e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011392:	f04f 0200 	mov.w	r2, #0
 8011396:	f04f 0300 	mov.w	r3, #0
 801139a:	0a0a      	lsrs	r2, r1, #8
 801139c:	2300      	movs	r3, #0
 801139e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80113a0:	3105      	adds	r1, #5
 80113a2:	6838      	ldr	r0, [r7, #0]
 80113a4:	4401      	add	r1, r0
 80113a6:	b2d3      	uxtb	r3, r2
 80113a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80113aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80113ae:	f04f 0200 	mov.w	r2, #0
 80113b2:	f04f 0300 	mov.w	r3, #0
 80113b6:	0c0a      	lsrs	r2, r1, #16
 80113b8:	2300      	movs	r3, #0
 80113ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80113bc:	3106      	adds	r1, #6
 80113be:	6838      	ldr	r0, [r7, #0]
 80113c0:	4401      	add	r1, r0
 80113c2:	b2d3      	uxtb	r3, r2
 80113c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80113c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80113ca:	f04f 0200 	mov.w	r2, #0
 80113ce:	f04f 0300 	mov.w	r3, #0
 80113d2:	0e0a      	lsrs	r2, r1, #24
 80113d4:	2300      	movs	r3, #0
 80113d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80113d8:	3107      	adds	r1, #7
 80113da:	6838      	ldr	r0, [r7, #0]
 80113dc:	4401      	add	r1, r0
 80113de:	b2d3      	uxtb	r3, r2
 80113e0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80113e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113e4:	3308      	adds	r3, #8
 80113e6:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80113ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80113f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80113f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80113f8:	6838      	ldr	r0, [r7, #0]
 80113fa:	4401      	add	r1, r0
 80113fc:	b2d3      	uxtb	r3, r2
 80113fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8011400:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011404:	f04f 0200 	mov.w	r2, #0
 8011408:	f04f 0300 	mov.w	r3, #0
 801140c:	0a02      	lsrs	r2, r0, #8
 801140e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011412:	0a0b      	lsrs	r3, r1, #8
 8011414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011416:	3101      	adds	r1, #1
 8011418:	6838      	ldr	r0, [r7, #0]
 801141a:	4401      	add	r1, r0
 801141c:	b2d3      	uxtb	r3, r2
 801141e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8011420:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011424:	f04f 0200 	mov.w	r2, #0
 8011428:	f04f 0300 	mov.w	r3, #0
 801142c:	0c02      	lsrs	r2, r0, #16
 801142e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011432:	0c0b      	lsrs	r3, r1, #16
 8011434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011436:	3102      	adds	r1, #2
 8011438:	6838      	ldr	r0, [r7, #0]
 801143a:	4401      	add	r1, r0
 801143c:	b2d3      	uxtb	r3, r2
 801143e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8011440:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011444:	f04f 0200 	mov.w	r2, #0
 8011448:	f04f 0300 	mov.w	r3, #0
 801144c:	0e02      	lsrs	r2, r0, #24
 801144e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011452:	0e0b      	lsrs	r3, r1, #24
 8011454:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011456:	3103      	adds	r1, #3
 8011458:	6838      	ldr	r0, [r7, #0]
 801145a:	4401      	add	r1, r0
 801145c:	b2d3      	uxtb	r3, r2
 801145e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8011460:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011464:	f04f 0200 	mov.w	r2, #0
 8011468:	f04f 0300 	mov.w	r3, #0
 801146c:	000a      	movs	r2, r1
 801146e:	2300      	movs	r3, #0
 8011470:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011472:	3104      	adds	r1, #4
 8011474:	6838      	ldr	r0, [r7, #0]
 8011476:	4401      	add	r1, r0
 8011478:	b2d3      	uxtb	r3, r2
 801147a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 801147c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011480:	f04f 0200 	mov.w	r2, #0
 8011484:	f04f 0300 	mov.w	r3, #0
 8011488:	0a0a      	lsrs	r2, r1, #8
 801148a:	2300      	movs	r3, #0
 801148c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801148e:	3105      	adds	r1, #5
 8011490:	6838      	ldr	r0, [r7, #0]
 8011492:	4401      	add	r1, r0
 8011494:	b2d3      	uxtb	r3, r2
 8011496:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8011498:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801149c:	f04f 0200 	mov.w	r2, #0
 80114a0:	f04f 0300 	mov.w	r3, #0
 80114a4:	0c0a      	lsrs	r2, r1, #16
 80114a6:	2300      	movs	r3, #0
 80114a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80114aa:	3106      	adds	r1, #6
 80114ac:	6838      	ldr	r0, [r7, #0]
 80114ae:	4401      	add	r1, r0
 80114b0:	b2d3      	uxtb	r3, r2
 80114b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80114b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80114b8:	f04f 0200 	mov.w	r2, #0
 80114bc:	f04f 0300 	mov.w	r3, #0
 80114c0:	0e0a      	lsrs	r2, r1, #24
 80114c2:	2300      	movs	r3, #0
 80114c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80114c6:	3107      	adds	r1, #7
 80114c8:	6838      	ldr	r0, [r7, #0]
 80114ca:	4401      	add	r1, r0
 80114cc:	b2d3      	uxtb	r3, r2
 80114ce:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80114d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d2:	3308      	adds	r3, #8
 80114d4:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80114dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80114e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80114e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80114e6:	6838      	ldr	r0, [r7, #0]
 80114e8:	4401      	add	r1, r0
 80114ea:	b2d3      	uxtb	r3, r2
 80114ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80114ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80114f2:	f04f 0200 	mov.w	r2, #0
 80114f6:	f04f 0300 	mov.w	r3, #0
 80114fa:	0a02      	lsrs	r2, r0, #8
 80114fc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011500:	0a0b      	lsrs	r3, r1, #8
 8011502:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011504:	3101      	adds	r1, #1
 8011506:	6838      	ldr	r0, [r7, #0]
 8011508:	4401      	add	r1, r0
 801150a:	b2d3      	uxtb	r3, r2
 801150c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 801150e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011512:	f04f 0200 	mov.w	r2, #0
 8011516:	f04f 0300 	mov.w	r3, #0
 801151a:	0c02      	lsrs	r2, r0, #16
 801151c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011520:	0c0b      	lsrs	r3, r1, #16
 8011522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011524:	3102      	adds	r1, #2
 8011526:	6838      	ldr	r0, [r7, #0]
 8011528:	4401      	add	r1, r0
 801152a:	b2d3      	uxtb	r3, r2
 801152c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 801152e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011532:	f04f 0200 	mov.w	r2, #0
 8011536:	f04f 0300 	mov.w	r3, #0
 801153a:	0e02      	lsrs	r2, r0, #24
 801153c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011540:	0e0b      	lsrs	r3, r1, #24
 8011542:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011544:	3103      	adds	r1, #3
 8011546:	6838      	ldr	r0, [r7, #0]
 8011548:	4401      	add	r1, r0
 801154a:	b2d3      	uxtb	r3, r2
 801154c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 801154e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011552:	f04f 0200 	mov.w	r2, #0
 8011556:	f04f 0300 	mov.w	r3, #0
 801155a:	000a      	movs	r2, r1
 801155c:	2300      	movs	r3, #0
 801155e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011560:	3104      	adds	r1, #4
 8011562:	6838      	ldr	r0, [r7, #0]
 8011564:	4401      	add	r1, r0
 8011566:	b2d3      	uxtb	r3, r2
 8011568:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 801156a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801156e:	f04f 0200 	mov.w	r2, #0
 8011572:	f04f 0300 	mov.w	r3, #0
 8011576:	0a0a      	lsrs	r2, r1, #8
 8011578:	2300      	movs	r3, #0
 801157a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801157c:	3105      	adds	r1, #5
 801157e:	6838      	ldr	r0, [r7, #0]
 8011580:	4401      	add	r1, r0
 8011582:	b2d3      	uxtb	r3, r2
 8011584:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8011586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801158a:	f04f 0200 	mov.w	r2, #0
 801158e:	f04f 0300 	mov.w	r3, #0
 8011592:	0c0a      	lsrs	r2, r1, #16
 8011594:	2300      	movs	r3, #0
 8011596:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011598:	3106      	adds	r1, #6
 801159a:	6838      	ldr	r0, [r7, #0]
 801159c:	4401      	add	r1, r0
 801159e:	b2d3      	uxtb	r3, r2
 80115a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80115a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80115a6:	f04f 0200 	mov.w	r2, #0
 80115aa:	f04f 0300 	mov.w	r3, #0
 80115ae:	0e0a      	lsrs	r2, r1, #24
 80115b0:	2300      	movs	r3, #0
 80115b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80115b4:	3107      	adds	r1, #7
 80115b6:	6838      	ldr	r0, [r7, #0]
 80115b8:	4401      	add	r1, r0
 80115ba:	b2d3      	uxtb	r3, r2
 80115bc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80115be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c0:	3308      	adds	r3, #8
 80115c2:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 80115c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80115c6:	4618      	mov	r0, r3
 80115c8:	372c      	adds	r7, #44	@ 0x2c
 80115ca:	46bd      	mov	sp, r7
 80115cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d0:	4770      	bx	lr

080115d2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80115d2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80115d6:	b0eb      	sub	sp, #428	@ 0x1ac
 80115d8:	af00      	add	r7, sp, #0
 80115da:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 80115de:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 80115e2:	2300      	movs	r3, #0
 80115e4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80115e8:	f04f 0200 	mov.w	r2, #0
 80115ec:	f04f 0300 	mov.w	r3, #0
 80115f0:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80115f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80115f8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80115fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011600:	4413      	add	r3, r2
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	b2db      	uxtb	r3, r3
 8011606:	2200      	movs	r2, #0
 8011608:	461c      	mov	r4, r3
 801160a:	4615      	mov	r5, r2
 801160c:	ea40 0804 	orr.w	r8, r0, r4
 8011610:	ea41 0905 	orr.w	r9, r1, r5
 8011614:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8011618:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 801161c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011620:	1c5a      	adds	r2, r3, #1
 8011622:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011626:	4413      	add	r3, r2
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	b2db      	uxtb	r3, r3
 801162c:	2200      	movs	r2, #0
 801162e:	469a      	mov	sl, r3
 8011630:	4693      	mov	fp, r2
 8011632:	f04f 0200 	mov.w	r2, #0
 8011636:	f04f 0300 	mov.w	r3, #0
 801163a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 801163e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8011642:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8011646:	ea40 0402 	orr.w	r4, r0, r2
 801164a:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 801164e:	430b      	orrs	r3, r1
 8011650:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8011654:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8011658:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801165c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8011660:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011664:	1c9a      	adds	r2, r3, #2
 8011666:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801166a:	4413      	add	r3, r2
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	b2db      	uxtb	r3, r3
 8011670:	2200      	movs	r2, #0
 8011672:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8011676:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 801167a:	f04f 0200 	mov.w	r2, #0
 801167e:	f04f 0300 	mov.w	r3, #0
 8011682:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8011686:	464c      	mov	r4, r9
 8011688:	0423      	lsls	r3, r4, #16
 801168a:	4644      	mov	r4, r8
 801168c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8011690:	4644      	mov	r4, r8
 8011692:	0422      	lsls	r2, r4, #16
 8011694:	ea40 0402 	orr.w	r4, r0, r2
 8011698:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 801169c:	430b      	orrs	r3, r1
 801169e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80116a2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 80116a6:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80116aa:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80116ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80116b2:	1cda      	adds	r2, r3, #3
 80116b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80116b8:	4413      	add	r3, r2
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	2200      	movs	r2, #0
 80116c0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80116c4:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80116c8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80116cc:	4623      	mov	r3, r4
 80116ce:	0a1b      	lsrs	r3, r3, #8
 80116d0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80116d4:	4623      	mov	r3, r4
 80116d6:	061b      	lsls	r3, r3, #24
 80116d8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80116dc:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 80116e0:	4623      	mov	r3, r4
 80116e2:	4303      	orrs	r3, r0
 80116e4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80116e8:	462b      	mov	r3, r5
 80116ea:	430b      	orrs	r3, r1
 80116ec:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80116f0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 80116f4:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80116f8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80116fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011700:	1d1a      	adds	r2, r3, #4
 8011702:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011706:	4413      	add	r3, r2
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	b2db      	uxtb	r3, r3
 801170c:	2200      	movs	r2, #0
 801170e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8011712:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8011716:	f04f 0200 	mov.w	r2, #0
 801171a:	f04f 0300 	mov.w	r3, #0
 801171e:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8011722:	0023      	movs	r3, r4
 8011724:	2200      	movs	r2, #0
 8011726:	ea40 0402 	orr.w	r4, r0, r2
 801172a:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 801172e:	430b      	orrs	r3, r1
 8011730:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8011734:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8011738:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 801173c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8011740:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011744:	1d5a      	adds	r2, r3, #5
 8011746:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801174a:	4413      	add	r3, r2
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	b2db      	uxtb	r3, r3
 8011750:	2200      	movs	r2, #0
 8011752:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8011756:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 801175a:	f04f 0200 	mov.w	r2, #0
 801175e:	f04f 0300 	mov.w	r3, #0
 8011762:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8011766:	0223      	lsls	r3, r4, #8
 8011768:	2200      	movs	r2, #0
 801176a:	ea40 0402 	orr.w	r4, r0, r2
 801176e:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8011772:	430b      	orrs	r3, r1
 8011774:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8011778:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 801177c:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8011780:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8011784:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011788:	1d9a      	adds	r2, r3, #6
 801178a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801178e:	4413      	add	r3, r2
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	b2db      	uxtb	r3, r3
 8011794:	2200      	movs	r2, #0
 8011796:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801179a:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 801179e:	f04f 0200 	mov.w	r2, #0
 80117a2:	f04f 0300 	mov.w	r3, #0
 80117a6:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 80117aa:	0423      	lsls	r3, r4, #16
 80117ac:	2200      	movs	r2, #0
 80117ae:	ea40 0402 	orr.w	r4, r0, r2
 80117b2:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80117b6:	430b      	orrs	r3, r1
 80117b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80117bc:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 80117c0:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80117c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80117c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80117cc:	1dda      	adds	r2, r3, #7
 80117ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80117d2:	4413      	add	r3, r2
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	2200      	movs	r2, #0
 80117da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80117de:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80117e2:	f04f 0200 	mov.w	r2, #0
 80117e6:	f04f 0300 	mov.w	r3, #0
 80117ea:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80117ee:	0623      	lsls	r3, r4, #24
 80117f0:	2200      	movs	r2, #0
 80117f2:	ea40 0402 	orr.w	r4, r0, r2
 80117f6:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 80117fa:	430b      	orrs	r3, r1
 80117fc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8011800:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8011804:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8011808:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 801180c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8011810:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8011814:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011818:	3308      	adds	r3, #8
 801181a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 801181e:	f04f 0200 	mov.w	r2, #0
 8011822:	f04f 0300 	mov.w	r3, #0
 8011826:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 801182a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801182e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8011832:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011836:	4413      	add	r3, r2
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	b2db      	uxtb	r3, r3
 801183c:	2200      	movs	r2, #0
 801183e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8011842:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8011846:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 801184a:	4623      	mov	r3, r4
 801184c:	4303      	orrs	r3, r0
 801184e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8011852:	462b      	mov	r3, r5
 8011854:	430b      	orrs	r3, r1
 8011856:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801185a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 801185e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8011862:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8011866:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801186a:	1c5a      	adds	r2, r3, #1
 801186c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011870:	4413      	add	r3, r2
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	b2db      	uxtb	r3, r3
 8011876:	2200      	movs	r2, #0
 8011878:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801187c:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8011880:	f04f 0200 	mov.w	r2, #0
 8011884:	f04f 0300 	mov.w	r3, #0
 8011888:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 801188c:	464c      	mov	r4, r9
 801188e:	0223      	lsls	r3, r4, #8
 8011890:	4644      	mov	r4, r8
 8011892:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8011896:	4644      	mov	r4, r8
 8011898:	0222      	lsls	r2, r4, #8
 801189a:	ea40 0402 	orr.w	r4, r0, r2
 801189e:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80118a2:	430b      	orrs	r3, r1
 80118a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80118a8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80118ac:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80118b0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80118b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80118b8:	1c9a      	adds	r2, r3, #2
 80118ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80118be:	4413      	add	r3, r2
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	b2db      	uxtb	r3, r3
 80118c4:	2200      	movs	r2, #0
 80118c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80118ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80118ce:	f04f 0200 	mov.w	r2, #0
 80118d2:	f04f 0300 	mov.w	r3, #0
 80118d6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80118da:	464c      	mov	r4, r9
 80118dc:	0423      	lsls	r3, r4, #16
 80118de:	4644      	mov	r4, r8
 80118e0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80118e4:	4644      	mov	r4, r8
 80118e6:	0422      	lsls	r2, r4, #16
 80118e8:	ea40 0402 	orr.w	r4, r0, r2
 80118ec:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80118f0:	430b      	orrs	r3, r1
 80118f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80118f6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80118fa:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80118fe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8011902:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011906:	1cda      	adds	r2, r3, #3
 8011908:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801190c:	4413      	add	r3, r2
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	b2db      	uxtb	r3, r3
 8011912:	2200      	movs	r2, #0
 8011914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011918:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801191c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8011920:	4623      	mov	r3, r4
 8011922:	0a1b      	lsrs	r3, r3, #8
 8011924:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011928:	4623      	mov	r3, r4
 801192a:	061b      	lsls	r3, r3, #24
 801192c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011930:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8011934:	4623      	mov	r3, r4
 8011936:	4303      	orrs	r3, r0
 8011938:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801193c:	462b      	mov	r3, r5
 801193e:	430b      	orrs	r3, r1
 8011940:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011944:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8011948:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 801194c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8011950:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011954:	1d1a      	adds	r2, r3, #4
 8011956:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801195a:	4413      	add	r3, r2
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	b2db      	uxtb	r3, r3
 8011960:	2200      	movs	r2, #0
 8011962:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011966:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 801196a:	f04f 0200 	mov.w	r2, #0
 801196e:	f04f 0300 	mov.w	r3, #0
 8011972:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8011976:	0023      	movs	r3, r4
 8011978:	2200      	movs	r2, #0
 801197a:	ea40 0402 	orr.w	r4, r0, r2
 801197e:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8011982:	430b      	orrs	r3, r1
 8011984:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011988:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 801198c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8011990:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8011994:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011998:	1d5a      	adds	r2, r3, #5
 801199a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801199e:	4413      	add	r3, r2
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	2200      	movs	r2, #0
 80119a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80119aa:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80119ae:	f04f 0200 	mov.w	r2, #0
 80119b2:	f04f 0300 	mov.w	r3, #0
 80119b6:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 80119ba:	0223      	lsls	r3, r4, #8
 80119bc:	2200      	movs	r2, #0
 80119be:	ea40 0402 	orr.w	r4, r0, r2
 80119c2:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 80119c6:	430b      	orrs	r3, r1
 80119c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80119cc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80119d0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80119d4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80119d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80119dc:	1d9a      	adds	r2, r3, #6
 80119de:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80119e2:	4413      	add	r3, r2
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	b2db      	uxtb	r3, r3
 80119e8:	2200      	movs	r2, #0
 80119ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80119ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80119f2:	f04f 0200 	mov.w	r2, #0
 80119f6:	f04f 0300 	mov.w	r3, #0
 80119fa:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80119fe:	0423      	lsls	r3, r4, #16
 8011a00:	2200      	movs	r2, #0
 8011a02:	ea40 0402 	orr.w	r4, r0, r2
 8011a06:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8011a0a:	430b      	orrs	r3, r1
 8011a0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011a10:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8011a14:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8011a18:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8011a1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011a20:	1dda      	adds	r2, r3, #7
 8011a22:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011a26:	4413      	add	r3, r2
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011a32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011a36:	f04f 0200 	mov.w	r2, #0
 8011a3a:	f04f 0300 	mov.w	r3, #0
 8011a3e:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8011a42:	0623      	lsls	r3, r4, #24
 8011a44:	2200      	movs	r2, #0
 8011a46:	ea40 0402 	orr.w	r4, r0, r2
 8011a4a:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8011a4e:	430b      	orrs	r3, r1
 8011a50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011a54:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8011a58:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8011a5c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8011a60:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8011a64:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8011a68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011a6c:	3308      	adds	r3, #8
 8011a6e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8011a72:	f04f 0200 	mov.w	r2, #0
 8011a76:	f04f 0300 	mov.w	r3, #0
 8011a7a:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8011a7e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011a82:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8011a86:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011a8a:	4413      	add	r3, r2
 8011a8c:	781b      	ldrb	r3, [r3, #0]
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	2200      	movs	r2, #0
 8011a92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011a96:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8011a9a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8011a9e:	4623      	mov	r3, r4
 8011aa0:	4303      	orrs	r3, r0
 8011aa2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011aa4:	462b      	mov	r3, r5
 8011aa6:	430b      	orrs	r3, r1
 8011aa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011aaa:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8011aae:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8011ab2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011ab6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011aba:	1c5a      	adds	r2, r3, #1
 8011abc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011ac0:	4413      	add	r3, r2
 8011ac2:	781b      	ldrb	r3, [r3, #0]
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	673b      	str	r3, [r7, #112]	@ 0x70
 8011aca:	677a      	str	r2, [r7, #116]	@ 0x74
 8011acc:	f04f 0200 	mov.w	r2, #0
 8011ad0:	f04f 0300 	mov.w	r3, #0
 8011ad4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011ad8:	464c      	mov	r4, r9
 8011ada:	0223      	lsls	r3, r4, #8
 8011adc:	4644      	mov	r4, r8
 8011ade:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8011ae2:	4644      	mov	r4, r8
 8011ae4:	0222      	lsls	r2, r4, #8
 8011ae6:	ea40 0402 	orr.w	r4, r0, r2
 8011aea:	66bc      	str	r4, [r7, #104]	@ 0x68
 8011aec:	430b      	orrs	r3, r1
 8011aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011af0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8011af4:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8011af8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011afc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011b00:	1c9a      	adds	r2, r3, #2
 8011b02:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011b06:	4413      	add	r3, r2
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	b2db      	uxtb	r3, r3
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8011b10:	667a      	str	r2, [r7, #100]	@ 0x64
 8011b12:	f04f 0200 	mov.w	r2, #0
 8011b16:	f04f 0300 	mov.w	r3, #0
 8011b1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011b1e:	464c      	mov	r4, r9
 8011b20:	0423      	lsls	r3, r4, #16
 8011b22:	4644      	mov	r4, r8
 8011b24:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8011b28:	4644      	mov	r4, r8
 8011b2a:	0422      	lsls	r2, r4, #16
 8011b2c:	ea40 0402 	orr.w	r4, r0, r2
 8011b30:	65bc      	str	r4, [r7, #88]	@ 0x58
 8011b32:	430b      	orrs	r3, r1
 8011b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011b36:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8011b3a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8011b3e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011b42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011b46:	1cda      	adds	r2, r3, #3
 8011b48:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011b4c:	4413      	add	r3, r2
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	2200      	movs	r2, #0
 8011b54:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b56:	657a      	str	r2, [r7, #84]	@ 0x54
 8011b58:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8011b5c:	4623      	mov	r3, r4
 8011b5e:	0a1b      	lsrs	r3, r3, #8
 8011b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b62:	4623      	mov	r3, r4
 8011b64:	061b      	lsls	r3, r3, #24
 8011b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011b68:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8011b6c:	4623      	mov	r3, r4
 8011b6e:	4303      	orrs	r3, r0
 8011b70:	643b      	str	r3, [r7, #64]	@ 0x40
 8011b72:	462b      	mov	r3, r5
 8011b74:	430b      	orrs	r3, r1
 8011b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b78:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8011b7c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8011b80:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011b84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011b88:	1d1a      	adds	r2, r3, #4
 8011b8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011b8e:	4413      	add	r3, r2
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	b2db      	uxtb	r3, r3
 8011b94:	2200      	movs	r2, #0
 8011b96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011b98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011b9a:	f04f 0200 	mov.w	r2, #0
 8011b9e:	f04f 0300 	mov.w	r3, #0
 8011ba2:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8011ba4:	0023      	movs	r3, r4
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	ea40 0402 	orr.w	r4, r0, r2
 8011bac:	633c      	str	r4, [r7, #48]	@ 0x30
 8011bae:	430b      	orrs	r3, r1
 8011bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8011bb2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8011bb6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8011bba:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011bbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011bc2:	1d5a      	adds	r2, r3, #5
 8011bc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011bc8:	4413      	add	r3, r2
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	b2db      	uxtb	r3, r3
 8011bce:	2200      	movs	r2, #0
 8011bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011bd4:	f04f 0200 	mov.w	r2, #0
 8011bd8:	f04f 0300 	mov.w	r3, #0
 8011bdc:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8011bde:	0223      	lsls	r3, r4, #8
 8011be0:	2200      	movs	r2, #0
 8011be2:	ea40 0402 	orr.w	r4, r0, r2
 8011be6:	623c      	str	r4, [r7, #32]
 8011be8:	430b      	orrs	r3, r1
 8011bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8011bec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011bf0:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8011bf4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011bf8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011bfc:	3306      	adds	r3, #6
 8011bfe:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8011c02:	4413      	add	r3, r2
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	b2db      	uxtb	r3, r3
 8011c08:	2200      	movs	r2, #0
 8011c0a:	61bb      	str	r3, [r7, #24]
 8011c0c:	61fa      	str	r2, [r7, #28]
 8011c0e:	f04f 0200 	mov.w	r2, #0
 8011c12:	f04f 0300 	mov.w	r3, #0
 8011c16:	69bc      	ldr	r4, [r7, #24]
 8011c18:	0423      	lsls	r3, r4, #16
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	ea40 0402 	orr.w	r4, r0, r2
 8011c20:	613c      	str	r4, [r7, #16]
 8011c22:	430b      	orrs	r3, r1
 8011c24:	617b      	str	r3, [r7, #20]
 8011c26:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011c2a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8011c2e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011c32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011c36:	3307      	adds	r3, #7
 8011c38:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8011c3c:	4413      	add	r3, r2
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	b2db      	uxtb	r3, r3
 8011c42:	2200      	movs	r2, #0
 8011c44:	60bb      	str	r3, [r7, #8]
 8011c46:	60fa      	str	r2, [r7, #12]
 8011c48:	f04f 0200 	mov.w	r2, #0
 8011c4c:	f04f 0300 	mov.w	r3, #0
 8011c50:	68bc      	ldr	r4, [r7, #8]
 8011c52:	0623      	lsls	r3, r4, #24
 8011c54:	2200      	movs	r2, #0
 8011c56:	ea40 0402 	orr.w	r4, r0, r2
 8011c5a:	603c      	str	r4, [r7, #0]
 8011c5c:	430b      	orrs	r3, r1
 8011c5e:	607b      	str	r3, [r7, #4]
 8011c60:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011c64:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8011c68:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8011c6c:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 8011c70:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8011c74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011c78:	3308      	adds	r3, #8
 8011c7a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 8011c7e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 8011c82:	4618      	mov	r0, r3
 8011c84:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011c8e:	4770      	bx	lr

08011c90 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8011c90:	b480      	push	{r7}
 8011c92:	b083      	sub	sp, #12
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	4b03      	ldr	r3, [pc, #12]	@ (8011ca8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	370c      	adds	r7, #12
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca4:	4770      	bx	lr
 8011ca6:	bf00      	nop
 8011ca8:	08013aac 	.word	0x08013aac

08011cac <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8011cac:	b480      	push	{r7}
 8011cae:	b083      	sub	sp, #12
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	4b03      	ldr	r3, [pc, #12]	@ (8011cc4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	370c      	adds	r7, #12
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc0:	4770      	bx	lr
 8011cc2:	bf00      	nop
 8011cc4:	08013ac4 	.word	0x08013ac4

08011cc8 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b082      	sub	sp, #8
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7fe fab2 	bl	801023c <_ZN3ros3MsgC1Ev>
 8011cd8:	4a08      	ldr	r2, [pc, #32]	@ (8011cfc <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	601a      	str	r2, [r3, #0]
      linear(),
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	3308      	adds	r3, #8
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7ff fada 	bl	801129c <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	3328      	adds	r3, #40	@ 0x28
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7ff fad5 	bl	801129c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}
 8011cfc:	08013d20 	.word	0x08013d20

08011d00 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f103 0008 	add.w	r0, r3, #8
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	683a      	ldr	r2, [r7, #0]
 8011d18:	4413      	add	r3, r2
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	f7ff fae6 	bl	80112ec <_ZNK13geometry_msgs7Vector39serializeEPh>
 8011d20:	4602      	mov	r2, r0
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	4413      	add	r3, r2
 8011d26:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	683a      	ldr	r2, [r7, #0]
 8011d32:	4413      	add	r3, r2
 8011d34:	4619      	mov	r1, r3
 8011d36:	f7ff fad9 	bl	80112ec <_ZNK13geometry_msgs7Vector39serializeEPh>
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	4413      	add	r3, r2
 8011d40:	60fb      	str	r3, [r7, #12]
      return offset;
 8011d42:	68fb      	ldr	r3, [r7, #12]
    }
 8011d44:	4618      	mov	r0, r3
 8011d46:	3710      	adds	r7, #16
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}

08011d4c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8011d56:	2300      	movs	r3, #0
 8011d58:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f103 0008 	add.w	r0, r3, #8
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	683a      	ldr	r2, [r7, #0]
 8011d64:	4413      	add	r3, r2
 8011d66:	4619      	mov	r1, r3
 8011d68:	f7ff fc33 	bl	80115d2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	4413      	add	r3, r2
 8011d72:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	683a      	ldr	r2, [r7, #0]
 8011d7e:	4413      	add	r3, r2
 8011d80:	4619      	mov	r1, r3
 8011d82:	f7ff fc26 	bl	80115d2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8011d86:	4602      	mov	r2, r0
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	60fb      	str	r3, [r7, #12]
     return offset;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
    }
 8011d90:	4618      	mov	r0, r3
 8011d92:	3710      	adds	r7, #16
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8011d98:	b480      	push	{r7}
 8011d9a:	b083      	sub	sp, #12
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	4b03      	ldr	r3, [pc, #12]	@ (8011db0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8011da2:	4618      	mov	r0, r3
 8011da4:	370c      	adds	r7, #12
 8011da6:	46bd      	mov	sp, r7
 8011da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dac:	4770      	bx	lr
 8011dae:	bf00      	nop
 8011db0:	08013ae8 	.word	0x08013ae8

08011db4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8011db4:	b480      	push	{r7}
 8011db6:	b083      	sub	sp, #12
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	4b03      	ldr	r3, [pc, #12]	@ (8011dcc <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	370c      	adds	r7, #12
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	08013afc 	.word	0x08013afc

08011dd0 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
      data(0)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7fe fa2e 	bl	801023c <_ZN3ros3MsgC1Ev>
 8011de0:	4a05      	ldr	r2, [pc, #20]	@ (8011df8 <_ZN8std_msgs5Int32C1Ev+0x28>)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	601a      	str	r2, [r3, #0]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2200      	movs	r2, #0
 8011dea:	605a      	str	r2, [r3, #4]
    {
    }
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	4618      	mov	r0, r3
 8011df0:	3708      	adds	r7, #8
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	08013d08 	.word	0x08013d08

08011dfc <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8011dfc:	b480      	push	{r7}
 8011dfe:	b085      	sub	sp, #20
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8011e06:	2300      	movs	r3, #0
 8011e08:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	685b      	ldr	r3, [r3, #4]
 8011e0e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8011e10:	68b9      	ldr	r1, [r7, #8]
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	683a      	ldr	r2, [r7, #0]
 8011e16:	4413      	add	r3, r2
 8011e18:	b2ca      	uxtb	r2, r1
 8011e1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	0a19      	lsrs	r1, r3, #8
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	3301      	adds	r3, #1
 8011e24:	683a      	ldr	r2, [r7, #0]
 8011e26:	4413      	add	r3, r2
 8011e28:	b2ca      	uxtb	r2, r1
 8011e2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	0c19      	lsrs	r1, r3, #16
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	3302      	adds	r3, #2
 8011e34:	683a      	ldr	r2, [r7, #0]
 8011e36:	4413      	add	r3, r2
 8011e38:	b2ca      	uxtb	r2, r1
 8011e3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	0e19      	lsrs	r1, r3, #24
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	3303      	adds	r3, #3
 8011e44:	683a      	ldr	r2, [r7, #0]
 8011e46:	4413      	add	r3, r2
 8011e48:	b2ca      	uxtb	r2, r1
 8011e4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	3304      	adds	r3, #4
 8011e50:	60fb      	str	r3, [r7, #12]
      return offset;
 8011e52:	68fb      	ldr	r3, [r7, #12]
    }
 8011e54:	4618      	mov	r0, r3
 8011e56:	3714      	adds	r7, #20
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8011e60:	b480      	push	{r7}
 8011e62:	b085      	sub	sp, #20
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	68fa      	ldr	r2, [r7, #12]
 8011e76:	6839      	ldr	r1, [r7, #0]
 8011e78:	440a      	add	r2, r1
 8011e7a:	7812      	ldrb	r2, [r2, #0]
 8011e7c:	4313      	orrs	r3, r2
 8011e7e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8011e80:	68ba      	ldr	r2, [r7, #8]
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	3301      	adds	r3, #1
 8011e86:	6839      	ldr	r1, [r7, #0]
 8011e88:	440b      	add	r3, r1
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	021b      	lsls	r3, r3, #8
 8011e8e:	4313      	orrs	r3, r2
 8011e90:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8011e92:	68ba      	ldr	r2, [r7, #8]
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	3302      	adds	r3, #2
 8011e98:	6839      	ldr	r1, [r7, #0]
 8011e9a:	440b      	add	r3, r1
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	041b      	lsls	r3, r3, #16
 8011ea0:	4313      	orrs	r3, r2
 8011ea2:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8011ea4:	68ba      	ldr	r2, [r7, #8]
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	3303      	adds	r3, #3
 8011eaa:	6839      	ldr	r1, [r7, #0]
 8011eac:	440b      	add	r3, r1
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	061b      	lsls	r3, r3, #24
 8011eb2:	4313      	orrs	r3, r2
 8011eb4:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8011eb6:	68ba      	ldr	r2, [r7, #8]
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	3304      	adds	r3, #4
 8011ec0:	60fb      	str	r3, [r7, #12]
     return offset;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
    }
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3714      	adds	r7, #20
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ece:	4770      	bx	lr

08011ed0 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 8011ed0:	b480      	push	{r7}
 8011ed2:	b083      	sub	sp, #12
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	4b03      	ldr	r3, [pc, #12]	@ (8011ee8 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 8011eda:	4618      	mov	r0, r3
 8011edc:	370c      	adds	r7, #12
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr
 8011ee6:	bf00      	nop
 8011ee8:	08013b20 	.word	0x08013b20

08011eec <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8011eec:	b480      	push	{r7}
 8011eee:	b083      	sub	sp, #12
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	4b03      	ldr	r3, [pc, #12]	@ (8011f04 <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	370c      	adds	r7, #12
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr
 8011f02:	bf00      	nop
 8011f04:	08013b30 	.word	0x08013b30

08011f08 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
      data(0)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7fe f992 	bl	801023c <_ZN3ros3MsgC1Ev>
 8011f18:	4a05      	ldr	r2, [pc, #20]	@ (8011f30 <_ZN8std_msgs4BoolC1Ev+0x28>)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	601a      	str	r2, [r3, #0]
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	2200      	movs	r2, #0
 8011f22:	711a      	strb	r2, [r3, #4]
    {
    }
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	4618      	mov	r0, r3
 8011f28:	3708      	adds	r7, #8
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop
 8011f30:	08013cf0 	.word	0x08013cf0

08011f34 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8011f34:	b480      	push	{r7}
 8011f36:	b085      	sub	sp, #20
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	791b      	ldrb	r3, [r3, #4]
 8011f46:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	683a      	ldr	r2, [r7, #0]
 8011f4c:	4413      	add	r3, r2
 8011f4e:	7a3a      	ldrb	r2, [r7, #8]
 8011f50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	3301      	adds	r3, #1
 8011f56:	60fb      	str	r3, [r7, #12]
      return offset;
 8011f58:	68fb      	ldr	r3, [r7, #12]
    }
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3714      	adds	r7, #20
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f64:	4770      	bx	lr

08011f66 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8011f66:	b480      	push	{r7}
 8011f68:	b085      	sub	sp, #20
 8011f6a:	af00      	add	r7, sp, #0
 8011f6c:	6078      	str	r0, [r7, #4]
 8011f6e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8011f70:	2300      	movs	r3, #0
 8011f72:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8011f74:	2300      	movs	r3, #0
 8011f76:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8011f78:	7a3a      	ldrb	r2, [r7, #8]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	6839      	ldr	r1, [r7, #0]
 8011f7e:	440b      	add	r3, r1
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	4313      	orrs	r3, r2
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8011f88:	7a3a      	ldrb	r2, [r7, #8]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	3301      	adds	r3, #1
 8011f92:	60fb      	str	r3, [r7, #12]
     return offset;
 8011f94:	68fb      	ldr	r3, [r7, #12]
    }
 8011f96:	4618      	mov	r0, r3
 8011f98:	3714      	adds	r7, #20
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa0:	4770      	bx	lr
	...

08011fa4 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	4b03      	ldr	r3, [pc, #12]	@ (8011fbc <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8011fae:	4618      	mov	r0, r3
 8011fb0:	370c      	adds	r7, #12
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr
 8011fba:	bf00      	nop
 8011fbc:	08013b54 	.word	0x08013b54

08011fc0 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 8011fc0:	b480      	push	{r7}
 8011fc2:	b083      	sub	sp, #12
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	4b03      	ldr	r3, [pc, #12]	@ (8011fd8 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8011fca:	4618      	mov	r0, r3
 8011fcc:	370c      	adds	r7, #12
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr
 8011fd6:	bf00      	nop
 8011fd8:	08013b64 	.word	0x08013b64

08011fdc <_ZN4ROS116callback_ChassisERKN13geometry_msgs5TwistE>:

  /**
   * @brief Chassis callback, 接收 ROS 底盤速度指令。
   * @param geometry_msgs::Twist
   */
  void callback_Chassis(const geometry_msgs::Twist &msg) {
 8011fdc:	b480      	push	{r7}
 8011fde:	b083      	sub	sp, #12
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
    cmd_v_x = msg.linear.x;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	ed93 7b04 	vldr	d7, [r3, #16]
 8011fea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011fee:	4b0c      	ldr	r3, [pc, #48]	@ (8012020 <_ZN4ROS116callback_ChassisERKN13geometry_msgs5TwistE+0x44>)
 8011ff0:	edc3 7a00 	vstr	s15, [r3]
    cmd_v_y = msg.linear.y;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	ed93 7b06 	vldr	d7, [r3, #24]
 8011ffa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011ffe:	4b09      	ldr	r3, [pc, #36]	@ (8012024 <_ZN4ROS116callback_ChassisERKN13geometry_msgs5TwistE+0x48>)
 8012000:	edc3 7a00 	vstr	s15, [r3]
    cmd_v_w = msg.angular.z;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 801200a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801200e:	4b06      	ldr	r3, [pc, #24]	@ (8012028 <_ZN4ROS116callback_ChassisERKN13geometry_msgs5TwistE+0x4c>)
 8012010:	edc3 7a00 	vstr	s15, [r3]
    return;
 8012014:	bf00      	nop
  }
 8012016:	370c      	adds	r7, #12
 8012018:	46bd      	mov	sp, r7
 801201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201e:	4770      	bx	lr
 8012020:	240037b0 	.word	0x240037b0
 8012024:	240037b4 	.word	0x240037b4
 8012028:	240037b8 	.word	0x240037b8

0801202c <_ZN4ROS121callback_missonFinishERKN8std_msgs4BoolE>:

  /**
   * @brief MissionFinish callback, 接收任務完成資訊，完成後繼續底盤腳本。
   * @param std_msgs::Bool
   */
  void callback_missonFinish(const std_msgs::Bool &msg) {
 801202c:	b480      	push	{r7}
 801202e:	b083      	sub	sp, #12
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
    mission_complete = msg.data;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	791a      	ldrb	r2, [r3, #4]
 8012038:	4b03      	ldr	r3, [pc, #12]	@ (8012048 <_ZN4ROS121callback_missonFinishERKN8std_msgs4BoolE+0x1c>)
 801203a:	701a      	strb	r2, [r3, #0]
    return;
 801203c:	bf00      	nop
  }
 801203e:	370c      	adds	r7, #12
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr
 8012048:	24000025 	.word	0x24000025

0801204c <_ZN4ROS120callback_coffeeTableERKN8std_msgs5Int32E>:

  /**
   * @brief CoffeeTable callback, 接收咖啡桌號資訊。
   * @param std_msgs::Int32
   */
  void callback_coffeeTable(const std_msgs::Int32 &msg) {
 801204c:	b480      	push	{r7}
 801204e:	b083      	sub	sp, #12
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
    coffee_table = msg.data;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	4a03      	ldr	r2, [pc, #12]	@ (8012068 <_ZN4ROS120callback_coffeeTableERKN8std_msgs5Int32E+0x1c>)
 801205a:	6013      	str	r3, [r2, #0]
    return;
 801205c:	bf00      	nop
  }
 801205e:	370c      	adds	r7, #12
 8012060:	46bd      	mov	sp, r7
 8012062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012066:	4770      	bx	lr
 8012068:	2400002c 	.word	0x2400002c

0801206c <_ZN4ROS117callback_CupColorERKN8std_msgs5Int32E>:

  /**
   * @brief CupColor callback, 接收杯子顏色資訊。
   * @param std_msgs::Int32
   */
  void callback_CupColor(const std_msgs::Int32 &msg) {
 801206c:	b480      	push	{r7}
 801206e:	b083      	sub	sp, #12
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
    cup_color = msg.data;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	4a03      	ldr	r2, [pc, #12]	@ (8012088 <_ZN4ROS117callback_CupColorERKN8std_msgs5Int32E+0x1c>)
 801207a:	6013      	str	r3, [r2, #0]
    return;
 801207c:	bf00      	nop
  }
 801207e:	370c      	adds	r7, #12
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr
 8012088:	240037e4 	.word	0x240037e4

0801208c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 801208c:	b480      	push	{r7}
 801208e:	b085      	sub	sp, #20
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
 8012094:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8012096:	2300      	movs	r3, #0
 8012098:	60fb      	str	r3, [r7, #12]
 801209a:	e00c      	b.n	80120b6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	00db      	lsls	r3, r3, #3
 80120a0:	683a      	ldr	r2, [r7, #0]
 80120a2:	fa22 f103 	lsr.w	r1, r2, r3
 80120a6:	687a      	ldr	r2, [r7, #4]
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	4413      	add	r3, r2
 80120ac:	b2ca      	uxtb	r2, r1
 80120ae:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	3301      	adds	r3, #1
 80120b4:	60fb      	str	r3, [r7, #12]
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	2b03      	cmp	r3, #3
 80120ba:	d9ef      	bls.n	801209c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80120bc:	bf00      	nop
 80120be:	bf00      	nop
 80120c0:	3714      	adds	r7, #20
 80120c2:	46bd      	mov	sp, r7
 80120c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c8:	4770      	bx	lr

080120ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80120ca:	b480      	push	{r7}
 80120cc:	b085      	sub	sp, #20
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
 80120d2:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2200      	movs	r2, #0
 80120d8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80120da:	2300      	movs	r3, #0
 80120dc:	60fb      	str	r3, [r7, #12]
 80120de:	e010      	b.n	8012102 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	6839      	ldr	r1, [r7, #0]
 80120e6:	68fa      	ldr	r2, [r7, #12]
 80120e8:	440a      	add	r2, r1
 80120ea:	7812      	ldrb	r2, [r2, #0]
 80120ec:	4611      	mov	r1, r2
 80120ee:	68fa      	ldr	r2, [r7, #12]
 80120f0:	00d2      	lsls	r2, r2, #3
 80120f2:	fa01 f202 	lsl.w	r2, r1, r2
 80120f6:	431a      	orrs	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	3301      	adds	r3, #1
 8012100:	60fb      	str	r3, [r7, #12]
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	2b03      	cmp	r3, #3
 8012106:	d9eb      	bls.n	80120e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8012108:	bf00      	nop
 801210a:	bf00      	nop
 801210c:	3714      	adds	r7, #20
 801210e:	46bd      	mov	sp, r7
 8012110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012114:	4770      	bx	lr
	...

08012118 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8012118:	b480      	push	{r7}
 801211a:	b083      	sub	sp, #12
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	4a04      	ldr	r2, [pc, #16]	@ (8012134 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	601a      	str	r2, [r3, #0]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	4618      	mov	r0, r3
 801212a:	370c      	adds	r7, #12
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr
 8012134:	08013d68 	.word	0x08013d68

08012138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8012138:	b580      	push	{r7, lr}
 801213a:	b086      	sub	sp, #24
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	4618      	mov	r0, r3
 8012144:	f7ff ffe8 	bl	8012118 <_ZN3ros15NodeHandleBase_C1Ev>
 8012148:	4a47      	ldr	r2, [pc, #284]	@ (8012268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	601a      	str	r2, [r3, #0]
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	3304      	adds	r3, #4
 8012152:	4618      	mov	r0, r3
 8012154:	f7fe ff8c 	bl	8011070 <_ZN13STM32HardwareC1Ev>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801215e:	2200      	movs	r2, #0
 8012160:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
 8012164:	687a      	ldr	r2, [r7, #4]
 8012166:	f242 5310 	movw	r3, #9488	@ 0x2510
 801216a:	4413      	add	r3, r2
 801216c:	4618      	mov	r0, r3
 801216e:	f7fe fbd9 	bl	8010924 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8012172:	2300      	movs	r3, #0
 8012174:	617b      	str	r3, [r7, #20]
 8012176:	e009      	b.n	801218c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	697a      	ldr	r2, [r7, #20]
 801217c:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 8012180:	2100      	movs	r1, #0
 8012182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	3301      	adds	r3, #1
 801218a:	617b      	str	r3, [r7, #20]
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	2b18      	cmp	r3, #24
 8012190:	d9f2      	bls.n	8012178 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8012192:	2300      	movs	r3, #0
 8012194:	613b      	str	r3, [r7, #16]
 8012196:	e00a      	b.n	80121ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80121a0:	009b      	lsls	r3, r3, #2
 80121a2:	4413      	add	r3, r2
 80121a4:	2200      	movs	r2, #0
 80121a6:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	3301      	adds	r3, #1
 80121ac:	613b      	str	r3, [r7, #16]
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	2b18      	cmp	r3, #24
 80121b2:	d9f1      	bls.n	8012198 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80121b4:	2300      	movs	r3, #0
 80121b6:	60fb      	str	r3, [r7, #12]
 80121b8:	e00a      	b.n	80121d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80121ba:	687a      	ldr	r2, [r7, #4]
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	441a      	add	r2, r3
 80121c0:	f242 0320 	movw	r3, #8224	@ 0x2020
 80121c4:	4413      	add	r3, r2
 80121c6:	2200      	movs	r2, #0
 80121c8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	3301      	adds	r3, #1
 80121ce:	60fb      	str	r3, [r7, #12]
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121d6:	d3f0      	bcc.n	80121ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80121d8:	2300      	movs	r3, #0
 80121da:	60bb      	str	r3, [r7, #8]
 80121dc:	e00a      	b.n	80121f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	441a      	add	r2, r3
 80121e4:	f242 2320 	movw	r3, #8736	@ 0x2220
 80121e8:	4413      	add	r3, r2
 80121ea:	2200      	movs	r2, #0
 80121ec:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	3301      	adds	r3, #1
 80121f2:	60bb      	str	r3, [r7, #8]
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121fa:	d3f0      	bcc.n	80121de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012202:	461a      	mov	r2, r3
 8012204:	2300      	movs	r3, #0
 8012206:	f8c2 3514 	str.w	r3, [r2, #1300]	@ 0x514
    req_param_resp.ints = NULL;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012210:	461a      	mov	r2, r3
 8012212:	2300      	movs	r3, #0
 8012214:	f8c2 351c 	str.w	r3, [r2, #1308]	@ 0x51c
    req_param_resp.floats_length = 0;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801221e:	461a      	mov	r2, r3
 8012220:	2300      	movs	r3, #0
 8012222:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520
    req_param_resp.floats = NULL;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801222c:	461a      	mov	r2, r3
 801222e:	2300      	movs	r3, #0
 8012230:	f8c2 3528 	str.w	r3, [r2, #1320]	@ 0x528
    req_param_resp.ints_length = 0;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801223a:	461a      	mov	r2, r3
 801223c:	2300      	movs	r3, #0
 801223e:	f8c2 3514 	str.w	r3, [r2, #1300]	@ 0x514
    req_param_resp.ints = NULL;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012248:	461a      	mov	r2, r3
 801224a:	2300      	movs	r3, #0
 801224c:	f8c2 351c 	str.w	r3, [r2, #1308]	@ 0x51c

    spin_timeout_ = 0;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012256:	461a      	mov	r2, r3
 8012258:	2300      	movs	r3, #0
 801225a:	61d3      	str	r3, [r2, #28]
  }
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	4618      	mov	r0, r3
 8012260:	3718      	adds	r7, #24
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	08013cdc 	.word	0x08013cdc

0801226c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	4a04      	ldr	r2, [pc, #16]	@ (8012288 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	601a      	str	r2, [r3, #0]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	4618      	mov	r0, r3
 801227e:	370c      	adds	r7, #12
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr
 8012288:	08013d50 	.word	0x08013d50

0801228c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	607a      	str	r2, [r7, #4]
 8012298:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	4618      	mov	r0, r3
 801229e:	f7ff ffe5 	bl	801226c <_ZN3ros11Subscriber_C1Ev>
 80122a2:	4a0b      	ldr	r2, [pc, #44]	@ (80122d0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	601a      	str	r2, [r3, #0]
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	3310      	adds	r3, #16
 80122ac:	4618      	mov	r0, r3
 80122ae:	f7ff fd0b 	bl	8011cc8 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	683a      	ldr	r2, [r7, #0]
 80122bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	68ba      	ldr	r2, [r7, #8]
 80122c2:	609a      	str	r2, [r3, #8]
  };
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	4618      	mov	r0, r3
 80122c8:	3710      	adds	r7, #16
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	bf00      	nop
 80122d0:	08013cc4 	.word	0x08013cc4

080122d4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b084      	sub	sp, #16
 80122d8:	af00      	add	r7, sp, #0
 80122da:	60f8      	str	r0, [r7, #12]
 80122dc:	60b9      	str	r1, [r7, #8]
 80122de:	607a      	str	r2, [r7, #4]
 80122e0:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7ff ffc1 	bl	801226c <_ZN3ros11Subscriber_C1Ev>
 80122ea:	4a0b      	ldr	r2, [pc, #44]	@ (8012318 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	601a      	str	r2, [r3, #0]
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	330c      	adds	r3, #12
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7ff fe07 	bl	8011f08 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	687a      	ldr	r2, [r7, #4]
 80122fe:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	683a      	ldr	r2, [r7, #0]
 8012304:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	68ba      	ldr	r2, [r7, #8]
 801230a:	609a      	str	r2, [r3, #8]
  };
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	4618      	mov	r0, r3
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	08013cac 	.word	0x08013cac

0801231c <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	607a      	str	r2, [r7, #4]
 8012328:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	4618      	mov	r0, r3
 801232e:	f7ff ff9d 	bl	801226c <_ZN3ros11Subscriber_C1Ev>
 8012332:	4a0b      	ldr	r2, [pc, #44]	@ (8012360 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	601a      	str	r2, [r3, #0]
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	330c      	adds	r3, #12
 801233c:	4618      	mov	r0, r3
 801233e:	f7ff fd47 	bl	8011dd0 <_ZN8std_msgs5Int32C1Ev>
    cb_(cb),
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	683a      	ldr	r2, [r7, #0]
 801234c:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	68ba      	ldr	r2, [r7, #8]
 8012352:	609a      	str	r2, [r3, #8]
  };
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	4618      	mov	r0, r3
 8012358:	3710      	adds	r7, #16
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}
 801235e:	bf00      	nop
 8012360:	08013c94 	.word	0x08013c94

08012364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8012364:	b580      	push	{r7, lr}
 8012366:	b084      	sub	sp, #16
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3304      	adds	r3, #4
 8012370:	4618      	mov	r0, r3
 8012372:	f7fe ff88 	bl	8011286 <_ZN13STM32Hardware4timeEv>
 8012376:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801237e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8012382:	68fa      	ldr	r2, [r7, #12]
 8012384:	1ad3      	subs	r3, r2, r3
 8012386:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 801238a:	4293      	cmp	r3, r2
 801238c:	d905      	bls.n	801239a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
    {
      configured_ = false;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012394:	2200      	movs	r2, #0
 8012396:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80123a0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d00e      	beq.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80123ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80123b2:	68fa      	ldr	r2, [r7, #12]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d906      	bls.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80123be:	461a      	mov	r2, r3
 80123c0:	2300      	movs	r3, #0
 80123c2:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80123cc:	69db      	ldr	r3, [r3, #28]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d015      	beq.n	80123fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	3304      	adds	r3, #4
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7fe ff55 	bl	8011286 <_ZN13STM32Hardware4timeEv>
 80123dc:	4602      	mov	r2, r0
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	1ad2      	subs	r2, r2, r3
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80123e8:	69db      	ldr	r3, [r3, #28]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	bf8c      	ite	hi
 80123ee:	2301      	movhi	r3, #1
 80123f0:	2300      	movls	r3, #0
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d002      	beq.n	80123fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 80123f8:	f06f 0301 	mvn.w	r3, #1
 80123fc:	e226      	b.n	801284c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
        }
      }
      int data = hardware_.read();
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	3304      	adds	r3, #4
 8012402:	4618      	mov	r0, r3
 8012404:	f7fe fe54 	bl	80110b0 <_ZN13STM32Hardware4readEv>
 8012408:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	2b00      	cmp	r3, #0
 801240e:	f2c0 81ff 	blt.w	8012810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
        break;
      checksum_ += data;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012418:	f8d3 24f8 	ldr.w	r2, [r3, #1272]	@ 0x4f8
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	4413      	add	r3, r2
 8012420:	687a      	ldr	r2, [r7, #4]
 8012422:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8012426:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012430:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8012434:	2b07      	cmp	r3, #7
 8012436:	d12d      	bne.n	8012494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
      {
        message_in[index_++] = data;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801243e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8012442:	1c5a      	adds	r2, r3, #1
 8012444:	6879      	ldr	r1, [r7, #4]
 8012446:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 801244a:	f8c1 24f4 	str.w	r2, [r1, #1268]	@ 0x4f4
 801244e:	68ba      	ldr	r2, [r7, #8]
 8012450:	b2d1      	uxtb	r1, r2
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	441a      	add	r2, r3
 8012456:	f242 0320 	movw	r3, #8224	@ 0x2020
 801245a:	4413      	add	r3, r2
 801245c:	460a      	mov	r2, r1
 801245e:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012466:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 801246a:	3b01      	subs	r3, #1
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8012472:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801247c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8012480:	2b00      	cmp	r3, #0
 8012482:	d1a0      	bne.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801248a:	461a      	mov	r2, r3
 801248c:	2308      	movs	r3, #8
 801248e:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8012492:	e798      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801249a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d130      	bne.n	8012504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
      {
        if (data == 0xff)
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	2bff      	cmp	r3, #255	@ 0xff
 80124a6:	d112      	bne.n	80124ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
        {
          mode_++;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80124ae:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80124b2:	3301      	adds	r3, #1
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80124ba:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	3314      	adds	r3, #20
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80124c8:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
 80124cc:	e77b      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	3304      	adds	r3, #4
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7fe fed7 	bl	8011286 <_ZN13STM32Hardware4timeEv>
 80124d8:	4602      	mov	r2, r0
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	1ad3      	subs	r3, r2, r3
 80124de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80124e2:	4293      	cmp	r3, r2
 80124e4:	bf8c      	ite	hi
 80124e6:	2301      	movhi	r3, #1
 80124e8:	2300      	movls	r3, #0
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	f43f af6a 	beq.w	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80124f8:	2200      	movs	r2, #0
 80124fa:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
          return SPIN_TIMEOUT;
 80124fe:	f06f 0301 	mvn.w	r3, #1
 8012502:	e1a3      	b.n	801284c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801250a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 801250e:	2b01      	cmp	r3, #1
 8012510:	d121      	bne.n	8012556 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
      {
        if (data == PROTOCOL_VER)
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	2bfe      	cmp	r3, #254	@ 0xfe
 8012516:	d10b      	bne.n	8012530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
        {
          mode_++;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801251e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8012522:	3301      	adds	r3, #1
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801252a:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 801252e:	e74a      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012536:	461a      	mov	r2, r3
 8012538:	2300      	movs	r3, #0
 801253a:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
          if (configured_ == false)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012544:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
 8012548:	2b00      	cmp	r3, #0
 801254a:	f47f af3c 	bne.w	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f000 f980 	bl	8012854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8012554:	e737      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801255c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8012560:	2b02      	cmp	r3, #2
 8012562:	d120      	bne.n	80125a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
      {
        bytes_ = data;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801256a:	461a      	mov	r2, r3
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        index_ = 0;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012578:	461a      	mov	r2, r3
 801257a:	2300      	movs	r3, #0
 801257c:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_++;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012586:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 801258a:	3301      	adds	r3, #1
 801258c:	687a      	ldr	r2, [r7, #4]
 801258e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8012592:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        checksum_ = data;               /* first byte for calculating size checksum */
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801259c:	461a      	mov	r2, r3
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
 80125a4:	e70f      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80125ac:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80125b0:	2b03      	cmp	r3, #3
 80125b2:	d118      	bne.n	80125e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
      {
        bytes_ += data << 8;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80125ba:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	@ 0x4ec
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	021b      	lsls	r3, r3, #8
 80125c2:	4413      	add	r3, r2
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80125ca:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        mode_++;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80125d4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80125d8:	3301      	adds	r3, #1
 80125da:	687a      	ldr	r2, [r7, #4]
 80125dc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80125e0:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 80125e4:	e6ef      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80125ec:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80125f0:	2b04      	cmp	r3, #4
 80125f2:	d11f      	bne.n	8012634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
      {
        if ((checksum_ % 256) == 255)
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80125fa:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 80125fe:	425a      	negs	r2, r3
 8012600:	b2db      	uxtb	r3, r3
 8012602:	b2d2      	uxtb	r2, r2
 8012604:	bf58      	it	pl
 8012606:	4253      	negpl	r3, r2
 8012608:	2bff      	cmp	r3, #255	@ 0xff
 801260a:	d10b      	bne.n	8012624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012612:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8012616:	3301      	adds	r3, #1
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801261e:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8012622:	e6d0      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801262a:	461a      	mov	r2, r3
 801262c:	2300      	movs	r3, #0
 801262e:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8012632:	e6c8      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801263a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 801263e:	2b05      	cmp	r3, #5
 8012640:	d119      	bne.n	8012676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
      {
        topic_ = data;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012648:	461a      	mov	r2, r3
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_++;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012656:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 801265a:	3301      	adds	r3, #1
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8012662:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        checksum_ = data;               /* first byte included in checksum */
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801266c:	461a      	mov	r2, r3
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
 8012674:	e6a7      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801267c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8012680:	2b06      	cmp	r3, #6
 8012682:	d123      	bne.n	80126cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
      {
        topic_ += data << 8;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801268a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	021b      	lsls	r3, r3, #8
 8012692:	4413      	add	r3, r2
 8012694:	687a      	ldr	r2, [r7, #4]
 8012696:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801269a:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_ = MODE_MESSAGE;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80126a4:	461a      	mov	r2, r3
 80126a6:	2307      	movs	r3, #7
 80126a8:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        if (bytes_ == 0)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80126b2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f47f ae85 	bne.w	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80126c2:	461a      	mov	r2, r3
 80126c4:	2308      	movs	r3, #8
 80126c6:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 80126ca:	e67c      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80126d2:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80126d6:	2b08      	cmp	r3, #8
 80126d8:	f47f ae75 	bne.w	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80126e2:	461a      	mov	r2, r3
 80126e4:	2300      	movs	r3, #0
 80126e6:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        if ((checksum_ % 256) == 255)
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80126f0:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 80126f4:	425a      	negs	r2, r3
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	b2d2      	uxtb	r2, r2
 80126fa:	bf58      	it	pl
 80126fc:	4253      	negpl	r3, r2
 80126fe:	2bff      	cmp	r3, #255	@ 0xff
 8012700:	f47f ae61 	bne.w	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801270a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d116      	bne.n	8012740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
          {
            requestSyncTime();
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f000 f89e 	bl	8012854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 f8ba 	bl	8012892 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012724:	461a      	mov	r2, r3
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
            last_sync_receive_time = c_time;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012732:	461a      	mov	r2, r3
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
            return SPIN_ERR;
 801273a:	f04f 33ff 	mov.w	r3, #4294967295
 801273e:	e085      	b.n	801284c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012746:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 801274a:	2b0a      	cmp	r3, #10
 801274c:	d108      	bne.n	8012760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
          {
            syncTime(message_in);
 801274e:	687a      	ldr	r2, [r7, #4]
 8012750:	f242 0320 	movw	r3, #8224	@ 0x2020
 8012754:	4413      	add	r3, r2
 8012756:	4619      	mov	r1, r3
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f000 f97d 	bl	8012a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 801275e:	e632      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012766:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 801276a:	2b06      	cmp	r3, #6
 801276c:	d112      	bne.n	8012794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
          {
            req_param_resp.deserialize(message_in);
 801276e:	687a      	ldr	r2, [r7, #4]
 8012770:	f242 5310 	movw	r3, #9488	@ 0x2510
 8012774:	4413      	add	r3, r2
 8012776:	6879      	ldr	r1, [r7, #4]
 8012778:	f242 0220 	movw	r2, #8224	@ 0x2020
 801277c:	440a      	add	r2, r1
 801277e:	4611      	mov	r1, r2
 8012780:	4618      	mov	r0, r3
 8012782:	f7fe fa04 	bl	8010b8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801278c:	2201      	movs	r2, #1
 801278e:	f883 250c 	strb.w	r2, [r3, #1292]	@ 0x50c
 8012792:	e618      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801279a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 801279e:	2b0b      	cmp	r3, #11
 80127a0:	d106      	bne.n	80127b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
          {
            configured_ = false;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80127a8:	2200      	movs	r2, #0
 80127aa:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
 80127ae:	e60a      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80127b6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80127ba:	3b64      	subs	r3, #100	@ 0x64
 80127bc:	687a      	ldr	r2, [r7, #4]
 80127be:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80127c2:	009b      	lsls	r3, r3, #2
 80127c4:	4413      	add	r3, r2
 80127c6:	685b      	ldr	r3, [r3, #4]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	f43f adfc 	beq.w	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80127d4:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80127d8:	3b64      	subs	r3, #100	@ 0x64
 80127da:	687a      	ldr	r2, [r7, #4]
 80127dc:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80127e0:	009b      	lsls	r3, r3, #2
 80127e2:	4413      	add	r3, r2
 80127e4:	6858      	ldr	r0, [r3, #4]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80127ec:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80127f0:	3b64      	subs	r3, #100	@ 0x64
 80127f2:	687a      	ldr	r2, [r7, #4]
 80127f4:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80127f8:	009b      	lsls	r3, r3, #2
 80127fa:	4413      	add	r3, r2
 80127fc:	685b      	ldr	r3, [r3, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	681a      	ldr	r2, [r3, #0]
 8012802:	6879      	ldr	r1, [r7, #4]
 8012804:	f242 0320 	movw	r3, #8224	@ 0x2020
 8012808:	440b      	add	r3, r1
 801280a:	4619      	mov	r1, r3
 801280c:	4790      	blx	r2
    while (true)
 801280e:	e5da      	b.n	80123c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8012810:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012818:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
 801281c:	2b00      	cmp	r3, #0
 801281e:	d014      	beq.n	801284a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012826:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 801282a:	68fa      	ldr	r2, [r7, #12]
 801282c:	1ad3      	subs	r3, r2, r3
 801282e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8012832:	4293      	cmp	r3, r2
 8012834:	d909      	bls.n	801284a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
    {
      requestSyncTime();
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f000 f80c 	bl	8012854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012842:	461a      	mov	r2, r3
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
    }

    return SPIN_OK;
 801284a:	2300      	movs	r3, #0
  }
 801284c:	4618      	mov	r0, r3
 801284e:	3710      	adds	r7, #16
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 8012854:	b580      	push	{r7, lr}
 8012856:	b086      	sub	sp, #24
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 801285c:	f107 030c 	add.w	r3, r7, #12
 8012860:	4618      	mov	r0, r3
 8012862:	f7fd fcfb 	bl	801025c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	f107 020c 	add.w	r2, r7, #12
 8012870:	210a      	movs	r1, #10
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	4798      	blx	r3
    rt_time = hardware_.time();
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	3304      	adds	r3, #4
 801287a:	4618      	mov	r0, r3
 801287c:	f7fe fd03 	bl	8011286 <_ZN13STM32Hardware4timeEv>
 8012880:	4602      	mov	r2, r0
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012888:	611a      	str	r2, [r3, #16]
  }
 801288a:	bf00      	nop
 801288c:	3718      	adds	r7, #24
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}

08012892 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8012892:	b590      	push	{r4, r7, lr}
 8012894:	b08b      	sub	sp, #44	@ 0x2c
 8012896:	af00      	add	r7, sp, #0
 8012898:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 801289a:	f107 030c 	add.w	r3, r7, #12
 801289e:	4618      	mov	r0, r3
 80128a0:	f7fd fdcc 	bl	801043c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80128a4:	2300      	movs	r3, #0
 80128a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80128a8:	e05a      	b.n	8012960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128ae:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80128b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d04f      	beq.n	801295a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128be:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80128c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128c6:	689b      	ldr	r3, [r3, #8]
 80128c8:	b29b      	uxth	r3, r3
 80128ca:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128d0:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80128d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128e0:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80128e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128e8:	6859      	ldr	r1, [r3, #4]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128ee:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80128f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	3308      	adds	r3, #8
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	4608      	mov	r0, r1
 8012900:	4798      	blx	r3
 8012902:	4603      	mov	r3, r0
 8012904:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801290a:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 801290e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012912:	6859      	ldr	r1, [r3, #4]
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012918:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 801291c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	330c      	adds	r3, #12
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	4608      	mov	r0, r1
 801292a:	4798      	blx	r3
 801292c:	4603      	mov	r3, r0
 801292e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8012930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012934:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	681c      	ldr	r4, [r3, #0]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012940:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 8012944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012948:	4618      	mov	r0, r3
 801294a:	f7fe fac4 	bl	8010ed6 <_ZN3ros9Publisher15getEndpointTypeEv>
 801294e:	4601      	mov	r1, r0
 8012950:	f107 030c 	add.w	r3, r7, #12
 8012954:	461a      	mov	r2, r3
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 801295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801295c:	3301      	adds	r3, #1
 801295e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012962:	2b18      	cmp	r3, #24
 8012964:	dda1      	ble.n	80128aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8012966:	2300      	movs	r3, #0
 8012968:	627b      	str	r3, [r7, #36]	@ 0x24
 801296a:	e067      	b.n	8012a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 801296c:	687a      	ldr	r2, [r7, #4]
 801296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012970:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8012974:	009b      	lsls	r3, r3, #2
 8012976:	4413      	add	r3, r2
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d05b      	beq.n	8012a36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012982:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	4413      	add	r3, r2
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	b29b      	uxth	r3, r3
 8012990:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8012992:	687a      	ldr	r2, [r7, #4]
 8012994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012996:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 801299a:	009b      	lsls	r3, r3, #2
 801299c:	4413      	add	r3, r2
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	689b      	ldr	r3, [r3, #8]
 80129a2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80129a4:	687a      	ldr	r2, [r7, #4]
 80129a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129a8:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80129ac:	009b      	lsls	r3, r3, #2
 80129ae:	4413      	add	r3, r2
 80129b0:	6859      	ldr	r1, [r3, #4]
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129b6:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80129ba:	009b      	lsls	r3, r3, #2
 80129bc:	4413      	add	r3, r2
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	3308      	adds	r3, #8
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	4608      	mov	r0, r1
 80129c8:	4798      	blx	r3
 80129ca:	4603      	mov	r3, r0
 80129cc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129d2:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80129d6:	009b      	lsls	r3, r3, #2
 80129d8:	4413      	add	r3, r2
 80129da:	6859      	ldr	r1, [r3, #4]
 80129dc:	687a      	ldr	r2, [r7, #4]
 80129de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129e0:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80129e4:	009b      	lsls	r3, r3, #2
 80129e6:	4413      	add	r3, r2
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	330c      	adds	r3, #12
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	4608      	mov	r0, r1
 80129f2:	4798      	blx	r3
 80129f4:	4603      	mov	r3, r0
 80129f6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80129f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80129fc:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	681c      	ldr	r4, [r3, #0]
 8012a04:	687a      	ldr	r2, [r7, #4]
 8012a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a08:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8012a0c:	009b      	lsls	r3, r3, #2
 8012a0e:	4413      	add	r3, r2
 8012a10:	6859      	ldr	r1, [r3, #4]
 8012a12:	687a      	ldr	r2, [r7, #4]
 8012a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a16:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	4413      	add	r3, r2
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	3304      	adds	r3, #4
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	4608      	mov	r0, r1
 8012a28:	4798      	blx	r3
 8012a2a:	4601      	mov	r1, r0
 8012a2c:	f107 030c 	add.w	r3, r7, #12
 8012a30:	461a      	mov	r2, r3
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8012a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a38:	3301      	adds	r3, #1
 8012a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a3e:	2b18      	cmp	r3, #24
 8012a40:	dd94      	ble.n	801296c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012a48:	2201      	movs	r2, #1
 8012a4a:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
  }
 8012a4e:	bf00      	nop
 8012a50:	372c      	adds	r7, #44	@ 0x2c
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd90      	pop	{r4, r7, pc}
	...

08012a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b086      	sub	sp, #24
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8012a62:	f107 0308 	add.w	r3, r7, #8
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7fd fbf8 	bl	801025c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	3304      	adds	r3, #4
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7fe fc08 	bl	8011286 <_ZN13STM32Hardware4timeEv>
 8012a76:	4602      	mov	r2, r0
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012a7e:	691b      	ldr	r3, [r3, #16]
 8012a80:	1ad3      	subs	r3, r2, r3
 8012a82:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8012a84:	f107 0308 	add.w	r3, r7, #8
 8012a88:	6839      	ldr	r1, [r7, #0]
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f7fd fc56 	bl	801033c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8012a90:	68fa      	ldr	r2, [r7, #12]
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	4915      	ldr	r1, [pc, #84]	@ (8012aec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8012a96:	fba1 1303 	umull	r1, r3, r1, r3
 8012a9a:	099b      	lsrs	r3, r3, #6
 8012a9c:	4413      	add	r3, r2
 8012a9e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8012aa0:	6939      	ldr	r1, [r7, #16]
 8012aa2:	697a      	ldr	r2, [r7, #20]
 8012aa4:	4b11      	ldr	r3, [pc, #68]	@ (8012aec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8012aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8012aaa:	099b      	lsrs	r3, r3, #6
 8012aac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012ab0:	fb00 f303 	mul.w	r3, r0, r3
 8012ab4:	1ad3      	subs	r3, r2, r3
 8012ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8012af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8012ab8:	fb02 f303 	mul.w	r3, r2, r3
 8012abc:	440b      	add	r3, r1
 8012abe:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8012ac0:	f107 0308 	add.w	r3, r7, #8
 8012ac4:	3304      	adds	r3, #4
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f000 f8bf 	bl	8012c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	3304      	adds	r3, #4
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7fe fbd7 	bl	8011286 <_ZN13STM32Hardware4timeEv>
 8012ad8:	4602      	mov	r2, r0
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012ae0:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504
  }
 8012ae4:	bf00      	nop
 8012ae6:	3718      	adds	r7, #24
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}
 8012aec:	10624dd3 	.word	0x10624dd3
 8012af0:	000f4240 	.word	0x000f4240

08012af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b088      	sub	sp, #32
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8012b00:	68bb      	ldr	r3, [r7, #8]
 8012b02:	2b63      	cmp	r3, #99	@ 0x63
 8012b04:	dd0b      	ble.n	8012b1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012b0c:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
 8012b10:	f083 0301 	eor.w	r3, r3, #1
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d001      	beq.n	8012b1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	e090      	b.n	8012c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	681a      	ldr	r2, [r3, #0]
 8012b24:	68f9      	ldr	r1, [r7, #12]
 8012b26:	f242 2320 	movw	r3, #8736	@ 0x2220
 8012b2a:	440b      	add	r3, r1
 8012b2c:	3307      	adds	r3, #7
 8012b2e:	4619      	mov	r1, r3
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	4790      	blx	r2
 8012b34:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012b3c:	22ff      	movs	r2, #255	@ 0xff
 8012b3e:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
    message_out[1] = PROTOCOL_VER;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012b48:	22fe      	movs	r2, #254	@ 0xfe
 8012b4a:	f883 2221 	strb.w	r2, [r3, #545]	@ 0x221
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	b2da      	uxtb	r2, r3
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012b58:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	0a1b      	lsrs	r3, r3, #8
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	b2da      	uxtb	r2, r3
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012b6c:	f883 2223 	strb.w	r2, [r3, #547]	@ 0x223
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012b76:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012b80:	f893 3223 	ldrb.w	r3, [r3, #547]	@ 0x223
 8012b84:	4413      	add	r3, r2
 8012b86:	b2db      	uxtb	r3, r3
 8012b88:	43db      	mvns	r3, r3
 8012b8a:	b2da      	uxtb	r2, r3
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012b92:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	b2da      	uxtb	r2, r3
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012ba0:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	b21b      	sxth	r3, r3
 8012ba8:	121b      	asrs	r3, r3, #8
 8012baa:	b21b      	sxth	r3, r3
 8012bac:	b2da      	uxtb	r2, r3
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012bb4:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226

    /* calculate checksum */
    int chk = 0;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8012bbc:	2305      	movs	r3, #5
 8012bbe:	61bb      	str	r3, [r7, #24]
 8012bc0:	e00d      	b.n	8012bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8012bc2:	68fa      	ldr	r2, [r7, #12]
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	441a      	add	r2, r3
 8012bc8:	f242 2320 	movw	r3, #8736	@ 0x2220
 8012bcc:	4413      	add	r3, r2
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	69fb      	ldr	r3, [r7, #28]
 8012bd4:	4413      	add	r3, r2
 8012bd6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8012bd8:	69bb      	ldr	r3, [r7, #24]
 8012bda:	3301      	adds	r3, #1
 8012bdc:	61bb      	str	r3, [r7, #24]
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	3306      	adds	r3, #6
 8012be2:	69ba      	ldr	r2, [r7, #24]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	ddec      	ble.n	8012bc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	3307      	adds	r3, #7
 8012bec:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8012bee:	69fb      	ldr	r3, [r7, #28]
 8012bf0:	425a      	negs	r2, r3
 8012bf2:	b2db      	uxtb	r3, r3
 8012bf4:	b2d2      	uxtb	r2, r2
 8012bf6:	bf58      	it	pl
 8012bf8:	4253      	negpl	r3, r2
 8012bfa:	b2da      	uxtb	r2, r3
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	1c59      	adds	r1, r3, #1
 8012c00:	6179      	str	r1, [r7, #20]
 8012c02:	43d2      	mvns	r2, r2
 8012c04:	b2d1      	uxtb	r1, r2
 8012c06:	68fa      	ldr	r2, [r7, #12]
 8012c08:	441a      	add	r2, r3
 8012c0a:	f242 2320 	movw	r3, #8736	@ 0x2220
 8012c0e:	4413      	add	r3, r2
 8012c10:	460a      	mov	r2, r1
 8012c12:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8012c14:	697b      	ldr	r3, [r7, #20]
 8012c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c1a:	dc0b      	bgt.n	8012c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	1d18      	adds	r0, r3, #4
 8012c20:	68fa      	ldr	r2, [r7, #12]
 8012c22:	f242 2320 	movw	r3, #8736	@ 0x2220
 8012c26:	4413      	add	r3, r2
 8012c28:	697a      	ldr	r2, [r7, #20]
 8012c2a:	4619      	mov	r1, r3
 8012c2c:	f7fe fada 	bl	80111e4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	e005      	b.n	8012c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8012c34:	4904      	ldr	r1, [pc, #16]	@ (8012c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8012c36:	68f8      	ldr	r0, [r7, #12]
 8012c38:	f000 f84c 	bl	8012cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8012c3c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8012c40:	4618      	mov	r0, r3
 8012c42:	3720      	adds	r7, #32
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	08013b88 	.word	0x08013b88

08012c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b084      	sub	sp, #16
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	3304      	adds	r3, #4
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7fe fb13 	bl	8011286 <_ZN13STM32Hardware4timeEv>
 8012c60:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	681a      	ldr	r2, [r3, #0]
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	4917      	ldr	r1, [pc, #92]	@ (8012cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8012c6a:	fba1 1303 	umull	r1, r3, r1, r3
 8012c6e:	099b      	lsrs	r3, r3, #6
 8012c70:	1ad3      	subs	r3, r2, r3
 8012c72:	3b01      	subs	r3, #1
 8012c74:	687a      	ldr	r2, [r7, #4]
 8012c76:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8012c7a:	6153      	str	r3, [r2, #20]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	6859      	ldr	r1, [r3, #4]
 8012c80:	68fa      	ldr	r2, [r7, #12]
 8012c82:	4b11      	ldr	r3, [pc, #68]	@ (8012cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8012c84:	fba3 0302 	umull	r0, r3, r3, r2
 8012c88:	099b      	lsrs	r3, r3, #6
 8012c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012c8e:	fb00 f303 	mul.w	r3, r0, r3
 8012c92:	1ad3      	subs	r3, r2, r3
 8012c94:	4a0d      	ldr	r2, [pc, #52]	@ (8012ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8012c96:	fb02 f303 	mul.w	r3, r2, r3
 8012c9a:	1aca      	subs	r2, r1, r3
 8012c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8012cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8012c9e:	4413      	add	r3, r2
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8012ca6:	6193      	str	r3, [r2, #24]
    normalizeSecNSec(sec_offset, nsec_offset);
 8012ca8:	687a      	ldr	r2, [r7, #4]
 8012caa:	f242 0314 	movw	r3, #8212	@ 0x2014
 8012cae:	4413      	add	r3, r2
 8012cb0:	6879      	ldr	r1, [r7, #4]
 8012cb2:	f242 0218 	movw	r2, #8216	@ 0x2018
 8012cb6:	440a      	add	r2, r1
 8012cb8:	4611      	mov	r1, r2
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7ee fa0e 	bl	80010dc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8012cc0:	bf00      	nop
 8012cc2:	3710      	adds	r7, #16
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	10624dd3 	.word	0x10624dd3
 8012ccc:	000f4240 	.word	0x000f4240
 8012cd0:	3b9aca00 	.word	0x3b9aca00

08012cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8012cde:	683a      	ldr	r2, [r7, #0]
 8012ce0:	2103      	movs	r1, #3
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f000 f804 	bl	8012cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8012ce8:	bf00      	nop
 8012cea:	3708      	adds	r7, #8
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}

08012cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b088      	sub	sp, #32
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	60f8      	str	r0, [r7, #12]
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	607a      	str	r2, [r7, #4]
 8012cfc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8012cfe:	f107 0314 	add.w	r3, r7, #20
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7fd fd5e 	bl	80107c4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8012d08:	7afb      	ldrb	r3, [r7, #11]
 8012d0a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	f107 0214 	add.w	r2, r7, #20
 8012d1a:	2107      	movs	r1, #7
 8012d1c:	68f8      	ldr	r0, [r7, #12]
 8012d1e:	4798      	blx	r3
  }
 8012d20:	bf00      	nop
 8012d22:	3720      	adds	r7, #32
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}

08012d28 <_Z41__static_initialization_and_destruction_0v>:

}
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	af00      	add	r7, sp, #0
ros::NodeHandle nh;
 8012d2c:	4817      	ldr	r0, [pc, #92]	@ (8012d8c <_Z41__static_initialization_and_destruction_0v+0x64>)
 8012d2e:	f7ff fa03 	bl	8012138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool arriveDestination;
 8012d32:	4817      	ldr	r0, [pc, #92]	@ (8012d90 <_Z41__static_initialization_and_destruction_0v+0x68>)
 8012d34:	f7ff f8e8 	bl	8011f08 <_ZN8std_msgs4BoolC1Ev>
std_msgs::Bool receiveSpeedCmd;
 8012d38:	4816      	ldr	r0, [pc, #88]	@ (8012d94 <_Z41__static_initialization_and_destruction_0v+0x6c>)
 8012d3a:	f7ff f8e5 	bl	8011f08 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_arriveDestination("/arrive_destination", &arriveDestination);
 8012d3e:	2300      	movs	r3, #0
 8012d40:	4a13      	ldr	r2, [pc, #76]	@ (8012d90 <_Z41__static_initialization_and_destruction_0v+0x68>)
 8012d42:	4915      	ldr	r1, [pc, #84]	@ (8012d98 <_Z41__static_initialization_and_destruction_0v+0x70>)
 8012d44:	4815      	ldr	r0, [pc, #84]	@ (8012d9c <_Z41__static_initialization_and_destruction_0v+0x74>)
 8012d46:	f7fe f8af 	bl	8010ea8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_receiveSpeedCmd("/receive_speed_cmd", &receiveSpeedCmd);
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	4a11      	ldr	r2, [pc, #68]	@ (8012d94 <_Z41__static_initialization_and_destruction_0v+0x6c>)
 8012d4e:	4914      	ldr	r1, [pc, #80]	@ (8012da0 <_Z41__static_initialization_and_destruction_0v+0x78>)
 8012d50:	4814      	ldr	r0, [pc, #80]	@ (8012da4 <_Z41__static_initialization_and_destruction_0v+0x7c>)
 8012d52:	f7fe f8a9 	bl	8010ea8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub_chassis("/cmd_vel", ROS1::callback_Chassis);
 8012d56:	2301      	movs	r3, #1
 8012d58:	4a13      	ldr	r2, [pc, #76]	@ (8012da8 <_Z41__static_initialization_and_destruction_0v+0x80>)
 8012d5a:	4914      	ldr	r1, [pc, #80]	@ (8012dac <_Z41__static_initialization_and_destruction_0v+0x84>)
 8012d5c:	4814      	ldr	r0, [pc, #80]	@ (8012db0 <_Z41__static_initialization_and_destruction_0v+0x88>)
 8012d5e:	f7ff fa95 	bl	801228c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_missionFinish("/cmd_missionFinish", ROS1::callback_missonFinish);
 8012d62:	2301      	movs	r3, #1
 8012d64:	4a13      	ldr	r2, [pc, #76]	@ (8012db4 <_Z41__static_initialization_and_destruction_0v+0x8c>)
 8012d66:	4914      	ldr	r1, [pc, #80]	@ (8012db8 <_Z41__static_initialization_and_destruction_0v+0x90>)
 8012d68:	4814      	ldr	r0, [pc, #80]	@ (8012dbc <_Z41__static_initialization_and_destruction_0v+0x94>)
 8012d6a:	f7ff fab3 	bl	80122d4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_coffeeTable("/cmd_coffeeTable", ROS1::callback_coffeeTable);
 8012d6e:	2301      	movs	r3, #1
 8012d70:	4a13      	ldr	r2, [pc, #76]	@ (8012dc0 <_Z41__static_initialization_and_destruction_0v+0x98>)
 8012d72:	4914      	ldr	r1, [pc, #80]	@ (8012dc4 <_Z41__static_initialization_and_destruction_0v+0x9c>)
 8012d74:	4814      	ldr	r0, [pc, #80]	@ (8012dc8 <_Z41__static_initialization_and_destruction_0v+0xa0>)
 8012d76:	f7ff fad1 	bl	801231c <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_CupColor("/cmd_CupColor", ROS1::callback_CupColor);
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	4a13      	ldr	r2, [pc, #76]	@ (8012dcc <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8012d7e:	4914      	ldr	r1, [pc, #80]	@ (8012dd0 <_Z41__static_initialization_and_destruction_0v+0xa8>)
 8012d80:	4814      	ldr	r0, [pc, #80]	@ (8012dd4 <_Z41__static_initialization_and_destruction_0v+0xac>)
 8012d82:	f7ff facb 	bl	801231c <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
}
 8012d86:	bf00      	nop
 8012d88:	bd80      	pop	{r7, pc}
 8012d8a:	bf00      	nop
 8012d8c:	24001184 	.word	0x24001184
 8012d90:	240036bc 	.word	0x240036bc
 8012d94:	240036c4 	.word	0x240036c4
 8012d98:	08013bc4 	.word	0x08013bc4
 8012d9c:	240036cc 	.word	0x240036cc
 8012da0:	08013bd8 	.word	0x08013bd8
 8012da4:	240036e0 	.word	0x240036e0
 8012da8:	08011fdd 	.word	0x08011fdd
 8012dac:	08013bec 	.word	0x08013bec
 8012db0:	240036f8 	.word	0x240036f8
 8012db4:	0801202d 	.word	0x0801202d
 8012db8:	08013bf8 	.word	0x08013bf8
 8012dbc:	24003758 	.word	0x24003758
 8012dc0:	0801204d 	.word	0x0801204d
 8012dc4:	08013c0c 	.word	0x08013c0c
 8012dc8:	24003774 	.word	0x24003774
 8012dcc:	0801206d 	.word	0x0801206d
 8012dd0:	08013c20 	.word	0x08013c20
 8012dd4:	24003790 	.word	0x24003790

08012dd8 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b082      	sub	sp, #8
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	330c      	adds	r3, #12
 8012de6:	6839      	ldr	r1, [r7, #0]
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7ff f839 	bl	8011e60 <_ZN8std_msgs5Int3211deserializeEPh>
    this->cb_(msg);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	695b      	ldr	r3, [r3, #20]
 8012df2:	687a      	ldr	r2, [r7, #4]
 8012df4:	320c      	adds	r2, #12
 8012df6:	4610      	mov	r0, r2
 8012df8:	4798      	blx	r3
  }
 8012dfa:	bf00      	nop
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}

08012e02 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8012e02:	b480      	push	{r7}
 8012e04:	b083      	sub	sp, #12
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	699b      	ldr	r3, [r3, #24]
  }
 8012e0e:	4618      	mov	r0, r3
 8012e10:	370c      	adds	r7, #12
 8012e12:	46bd      	mov	sp, r7
 8012e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e18:	4770      	bx	lr

08012e1a <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8012e1a:	b580      	push	{r7, lr}
 8012e1c:	b082      	sub	sp, #8
 8012e1e:	af00      	add	r7, sp, #0
 8012e20:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	330c      	adds	r3, #12
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7ff f852 	bl	8011ed0 <_ZN8std_msgs5Int327getTypeEv>
 8012e2c:	4603      	mov	r3, r0
  }
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3708      	adds	r7, #8
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}

08012e36 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8012e36:	b580      	push	{r7, lr}
 8012e38:	b082      	sub	sp, #8
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	330c      	adds	r3, #12
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7ff f852 	bl	8011eec <_ZN8std_msgs5Int326getMD5Ev>
 8012e48:	4603      	mov	r3, r0
  }
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3708      	adds	r7, #8
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}

08012e52 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8012e52:	b580      	push	{r7, lr}
 8012e54:	b082      	sub	sp, #8
 8012e56:	af00      	add	r7, sp, #0
 8012e58:	6078      	str	r0, [r7, #4]
 8012e5a:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	330c      	adds	r3, #12
 8012e60:	6839      	ldr	r1, [r7, #0]
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7ff f87f 	bl	8011f66 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	695b      	ldr	r3, [r3, #20]
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	320c      	adds	r2, #12
 8012e70:	4610      	mov	r0, r2
 8012e72:	4798      	blx	r3
  }
 8012e74:	bf00      	nop
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	699b      	ldr	r3, [r3, #24]
  }
 8012e88:	4618      	mov	r0, r3
 8012e8a:	370c      	adds	r7, #12
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e92:	4770      	bx	lr

08012e94 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	330c      	adds	r3, #12
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7ff f87f 	bl	8011fa4 <_ZN8std_msgs4Bool7getTypeEv>
 8012ea6:	4603      	mov	r3, r0
  }
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3708      	adds	r7, #8
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	330c      	adds	r3, #12
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7ff f87f 	bl	8011fc0 <_ZN8std_msgs4Bool6getMD5Ev>
 8012ec2:	4603      	mov	r3, r0
  }
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3708      	adds	r7, #8
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	3310      	adds	r3, #16
 8012eda:	6839      	ldr	r1, [r7, #0]
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7fe ff35 	bl	8011d4c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ee6:	687a      	ldr	r2, [r7, #4]
 8012ee8:	3210      	adds	r2, #16
 8012eea:	4610      	mov	r0, r2
 8012eec:	4798      	blx	r3
  }
 8012eee:	bf00      	nop
 8012ef0:	3708      	adds	r7, #8
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bd80      	pop	{r7, pc}

08012ef6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8012ef6:	b480      	push	{r7}
 8012ef8:	b083      	sub	sp, #12
 8012efa:	af00      	add	r7, sp, #0
 8012efc:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 8012f02:	4618      	mov	r0, r3
 8012f04:	370c      	adds	r7, #12
 8012f06:	46bd      	mov	sp, r7
 8012f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0c:	4770      	bx	lr

08012f0e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8012f0e:	b580      	push	{r7, lr}
 8012f10:	b082      	sub	sp, #8
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	3310      	adds	r3, #16
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f7fe ff3c 	bl	8011d98 <_ZN13geometry_msgs5Twist7getTypeEv>
 8012f20:	4603      	mov	r3, r0
  }
 8012f22:	4618      	mov	r0, r3
 8012f24:	3708      	adds	r7, #8
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}

08012f2a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8012f2a:	b580      	push	{r7, lr}
 8012f2c:	b082      	sub	sp, #8
 8012f2e:	af00      	add	r7, sp, #0
 8012f30:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	3310      	adds	r3, #16
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fe ff3c 	bl	8011db4 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8012f3c:	4603      	mov	r3, r0
  }
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3708      	adds	r7, #8
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}

08012f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8012f46:	b480      	push	{r7}
 8012f48:	b083      	sub	sp, #12
 8012f4a:	af00      	add	r7, sp, #0
 8012f4c:	6078      	str	r0, [r7, #4]
    return configured_;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012f54:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
  };
 8012f58:	4618      	mov	r0, r3
 8012f5a:	370c      	adds	r7, #12
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f62:	4770      	bx	lr

08012f64 <_GLOBAL__sub_I_mission_complete>:
 8012f64:	b580      	push	{r7, lr}
 8012f66:	af00      	add	r7, sp, #0
 8012f68:	f7ff fede 	bl	8012d28 <_Z41__static_initialization_and_destruction_0v>
 8012f6c:	bd80      	pop	{r7, pc}
	...

08012f70 <_Z10path_setupv>:
adcRead_ADC3[3]  adc3-3   PA1    V
adcRead_ADC3[4]  adc3-4   PA0  left
adcRead_ADC3[5]  adc3-5   PB0  middle right
adcRead_ADC3[6]  adc3-6   PB1  middle left
*/
void path_setup(){
 8012f70:	b580      	push	{r7, lr}
 8012f72:	af00      	add	r7, sp, #0
	//    HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adcRead_ADC3, 12);
	    // Start DMA for ADC1, storing 3 channels in adcRead_ADC3_ADC1
	  //  HAL_ADCEx_Calibration_Start(&hadc1);
	    //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRead_ADC1, 3);//	    HAL_DMA_Start_IT(&hdma_adc1, (uint32_t)&hadc1.Instance->DR, (uint32_t)adcRead_ADC1, 3);
	   // HAL_ADC_Start(&hadc1);
	    HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adcRead_ADC3, 12);
 8012f74:	220c      	movs	r2, #12
 8012f76:	4905      	ldr	r1, [pc, #20]	@ (8012f8c <_Z10path_setupv+0x1c>)
 8012f78:	4805      	ldr	r0, [pc, #20]	@ (8012f90 <_Z10path_setupv+0x20>)
 8012f7a:	f7f1 fb6f 	bl	800465c <HAL_ADC_Start_DMA>
		check++;
 8012f7e:	4b05      	ldr	r3, [pc, #20]	@ (8012f94 <_Z10path_setupv+0x24>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	3301      	adds	r3, #1
 8012f84:	4a03      	ldr	r2, [pc, #12]	@ (8012f94 <_Z10path_setupv+0x24>)
 8012f86:	6013      	str	r3, [r2, #0]
}
 8012f88:	bf00      	nop
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	240037bc 	.word	0x240037bc
 8012f90:	240002f4 	.word	0x240002f4
 8012f94:	240037d4 	.word	0x240037d4

08012f98 <_Z6weighti>:
void weight(int dir) {//0:front,1:back,2:right,3:,left
 8012f98:	b480      	push	{r7}
 8012f9a:	b083      	sub	sp, #12
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
    // Calculate line following error (P and D)
	if (dir == 0){//front
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d162      	bne.n	801306c <_Z6weighti+0xd4>
    weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[2] + 3*adcRead_ADC3[3]) /
 8012fa6:	4b9a      	ldr	r3, [pc, #616]	@ (8013210 <_Z6weighti+0x278>)
 8012fa8:	881b      	ldrh	r3, [r3, #0]
 8012faa:	461a      	mov	r2, r3
 8012fac:	009b      	lsls	r3, r3, #2
 8012fae:	1ad3      	subs	r3, r2, r3
 8012fb0:	4a97      	ldr	r2, [pc, #604]	@ (8013210 <_Z6weighti+0x278>)
 8012fb2:	8852      	ldrh	r2, [r2, #2]
 8012fb4:	1a9b      	subs	r3, r3, r2
 8012fb6:	4a96      	ldr	r2, [pc, #600]	@ (8013210 <_Z6weighti+0x278>)
 8012fb8:	8892      	ldrh	r2, [r2, #4]
 8012fba:	441a      	add	r2, r3
 8012fbc:	4b94      	ldr	r3, [pc, #592]	@ (8013210 <_Z6weighti+0x278>)
 8012fbe:	88db      	ldrh	r3, [r3, #6]
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	460b      	mov	r3, r1
 8012fc4:	005b      	lsls	r3, r3, #1
 8012fc6:	440b      	add	r3, r1
 8012fc8:	4413      	add	r3, r2
 8012fca:	ee07 3a90 	vmov	s15, r3
 8012fce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                 (adcRead_ADC3[0] + adcRead_ADC3[1]+ 4096 +adcRead_ADC3[2] + adcRead_ADC3[3]));
 8012fd2:	4b8f      	ldr	r3, [pc, #572]	@ (8013210 <_Z6weighti+0x278>)
 8012fd4:	881b      	ldrh	r3, [r3, #0]
 8012fd6:	461a      	mov	r2, r3
 8012fd8:	4b8d      	ldr	r3, [pc, #564]	@ (8013210 <_Z6weighti+0x278>)
 8012fda:	885b      	ldrh	r3, [r3, #2]
 8012fdc:	4413      	add	r3, r2
 8012fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012fe2:	4a8b      	ldr	r2, [pc, #556]	@ (8013210 <_Z6weighti+0x278>)
 8012fe4:	8892      	ldrh	r2, [r2, #4]
 8012fe6:	4413      	add	r3, r2
 8012fe8:	4a89      	ldr	r2, [pc, #548]	@ (8013210 <_Z6weighti+0x278>)
 8012fea:	88d2      	ldrh	r2, [r2, #6]
 8012fec:	4413      	add	r3, r2
    weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[2] + 3*adcRead_ADC3[3]) /
 8012fee:	ee07 3a90 	vmov	s15, r3
 8012ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012ffa:	4b86      	ldr	r3, [pc, #536]	@ (8013214 <_Z6weighti+0x27c>)
 8012ffc:	edc3 7a00 	vstr	s15, [r3]
    weight_change = weight_err - weight_lasttime;
 8013000:	4b84      	ldr	r3, [pc, #528]	@ (8013214 <_Z6weighti+0x27c>)
 8013002:	ed93 7a00 	vldr	s14, [r3]
 8013006:	4b84      	ldr	r3, [pc, #528]	@ (8013218 <_Z6weighti+0x280>)
 8013008:	edd3 7a00 	vldr	s15, [r3]
 801300c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013010:	4b82      	ldr	r3, [pc, #520]	@ (801321c <_Z6weighti+0x284>)
 8013012:	edc3 7a00 	vstr	s15, [r3]
    weight_lasttime = weight_err;
 8013016:	4b7f      	ldr	r3, [pc, #508]	@ (8013214 <_Z6weighti+0x27c>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	4a7f      	ldr	r2, [pc, #508]	@ (8013218 <_Z6weighti+0x280>)
 801301c:	6013      	str	r3, [r2, #0]

    // For mecanum: output chassis velocity vector
    cmd_v_y = normal_Speed; // Forward speed (positive: forward)
 801301e:	4b80      	ldr	r3, [pc, #512]	@ (8013220 <_Z6weighti+0x288>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	ee07 3a90 	vmov	s15, r3
 8013026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801302a:	4b7e      	ldr	r3, [pc, #504]	@ (8013224 <_Z6weighti+0x28c>)
 801302c:	edc3 7a00 	vstr	s15, [r3]
    cmd_v_x = 0;            // No strafe (add logic here if you want to strafe)
 8013030:	4b7d      	ldr	r3, [pc, #500]	@ (8013228 <_Z6weighti+0x290>)
 8013032:	f04f 0200 	mov.w	r2, #0
 8013036:	601a      	str	r2, [r3, #0]
    cmd_v_w = (weight_err * w_kp + weight_change * w_kd); // Rotation correction
 8013038:	4b76      	ldr	r3, [pc, #472]	@ (8013214 <_Z6weighti+0x27c>)
 801303a:	edd3 7a00 	vldr	s15, [r3]
 801303e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013042:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 8013208 <_Z6weighti+0x270>
 8013046:	ee27 6b06 	vmul.f64	d6, d7, d6
 801304a:	4b74      	ldr	r3, [pc, #464]	@ (801321c <_Z6weighti+0x284>)
 801304c:	edd3 7a00 	vldr	s15, [r3]
 8013050:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 801322c <_Z6weighti+0x294>
 8013054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013058:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801305c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8013060:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8013064:	4b72      	ldr	r3, [pc, #456]	@ (8013230 <_Z6weighti+0x298>)
 8013066:	edc3 7a00 	vstr	s15, [r3]
	cmd_v_y = 0; // Forward speed (positive: forward)
	cmd_v_x = -normal_Speed;            // No strafe (add logic here if you want to strafe)
	cmd_v_w = (weight_err * w_kp + weight_change * w_kd); // Rotation correction
	}

	}
 801306a:	e149      	b.n	8013300 <_Z6weighti+0x368>
	else if(dir == 1){//back
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2b01      	cmp	r3, #1
 8013070:	d163      	bne.n	801313a <_Z6weighti+0x1a2>
	weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[3] + 3*adcRead_ADC3[4]) /
 8013072:	4b67      	ldr	r3, [pc, #412]	@ (8013210 <_Z6weighti+0x278>)
 8013074:	881b      	ldrh	r3, [r3, #0]
 8013076:	461a      	mov	r2, r3
 8013078:	009b      	lsls	r3, r3, #2
 801307a:	1ad3      	subs	r3, r2, r3
 801307c:	4a64      	ldr	r2, [pc, #400]	@ (8013210 <_Z6weighti+0x278>)
 801307e:	8852      	ldrh	r2, [r2, #2]
 8013080:	1a9b      	subs	r3, r3, r2
 8013082:	4a63      	ldr	r2, [pc, #396]	@ (8013210 <_Z6weighti+0x278>)
 8013084:	88d2      	ldrh	r2, [r2, #6]
 8013086:	441a      	add	r2, r3
 8013088:	4b61      	ldr	r3, [pc, #388]	@ (8013210 <_Z6weighti+0x278>)
 801308a:	891b      	ldrh	r3, [r3, #8]
 801308c:	4619      	mov	r1, r3
 801308e:	460b      	mov	r3, r1
 8013090:	005b      	lsls	r3, r3, #1
 8013092:	440b      	add	r3, r1
 8013094:	4413      	add	r3, r2
 8013096:	ee07 3a90 	vmov	s15, r3
 801309a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
		            (adcRead_ADC3[0] + adcRead_ADC3[1]+ 4096 +adcRead_ADC3[3] + adcRead_ADC3[4]));
 801309e:	4b5c      	ldr	r3, [pc, #368]	@ (8013210 <_Z6weighti+0x278>)
 80130a0:	881b      	ldrh	r3, [r3, #0]
 80130a2:	461a      	mov	r2, r3
 80130a4:	4b5a      	ldr	r3, [pc, #360]	@ (8013210 <_Z6weighti+0x278>)
 80130a6:	885b      	ldrh	r3, [r3, #2]
 80130a8:	4413      	add	r3, r2
 80130aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80130ae:	4a58      	ldr	r2, [pc, #352]	@ (8013210 <_Z6weighti+0x278>)
 80130b0:	88d2      	ldrh	r2, [r2, #6]
 80130b2:	4413      	add	r3, r2
 80130b4:	4a56      	ldr	r2, [pc, #344]	@ (8013210 <_Z6weighti+0x278>)
 80130b6:	8912      	ldrh	r2, [r2, #8]
 80130b8:	4413      	add	r3, r2
	weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[3] + 3*adcRead_ADC3[4]) /
 80130ba:	ee07 3a90 	vmov	s15, r3
 80130be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80130c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80130c6:	4b53      	ldr	r3, [pc, #332]	@ (8013214 <_Z6weighti+0x27c>)
 80130c8:	edc3 7a00 	vstr	s15, [r3]
	weight_change = weight_err - weight_lasttime;
 80130cc:	4b51      	ldr	r3, [pc, #324]	@ (8013214 <_Z6weighti+0x27c>)
 80130ce:	ed93 7a00 	vldr	s14, [r3]
 80130d2:	4b51      	ldr	r3, [pc, #324]	@ (8013218 <_Z6weighti+0x280>)
 80130d4:	edd3 7a00 	vldr	s15, [r3]
 80130d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80130dc:	4b4f      	ldr	r3, [pc, #316]	@ (801321c <_Z6weighti+0x284>)
 80130de:	edc3 7a00 	vstr	s15, [r3]
	weight_lasttime = weight_err;
 80130e2:	4b4c      	ldr	r3, [pc, #304]	@ (8013214 <_Z6weighti+0x27c>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	4a4c      	ldr	r2, [pc, #304]	@ (8013218 <_Z6weighti+0x280>)
 80130e8:	6013      	str	r3, [r2, #0]
	cmd_v_y = -normal_Speed; // Forward speed (positive: forward)
 80130ea:	4b4d      	ldr	r3, [pc, #308]	@ (8013220 <_Z6weighti+0x288>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	425b      	negs	r3, r3
 80130f0:	ee07 3a90 	vmov	s15, r3
 80130f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130f8:	4b4a      	ldr	r3, [pc, #296]	@ (8013224 <_Z6weighti+0x28c>)
 80130fa:	edc3 7a00 	vstr	s15, [r3]
	cmd_v_x = 0;            // No strafe (add logic here if you want to strafe)
 80130fe:	4b4a      	ldr	r3, [pc, #296]	@ (8013228 <_Z6weighti+0x290>)
 8013100:	f04f 0200 	mov.w	r2, #0
 8013104:	601a      	str	r2, [r3, #0]
	cmd_v_w = (weight_err * w_kp + weight_change * w_kd); // Rotation correction
 8013106:	4b43      	ldr	r3, [pc, #268]	@ (8013214 <_Z6weighti+0x27c>)
 8013108:	edd3 7a00 	vldr	s15, [r3]
 801310c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013110:	ed9f 6b3d 	vldr	d6, [pc, #244]	@ 8013208 <_Z6weighti+0x270>
 8013114:	ee27 6b06 	vmul.f64	d6, d7, d6
 8013118:	4b40      	ldr	r3, [pc, #256]	@ (801321c <_Z6weighti+0x284>)
 801311a:	edd3 7a00 	vldr	s15, [r3]
 801311e:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 801322c <_Z6weighti+0x294>
 8013122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013126:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801312a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801312e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8013132:	4b3f      	ldr	r3, [pc, #252]	@ (8013230 <_Z6weighti+0x298>)
 8013134:	edc3 7a00 	vstr	s15, [r3]
	}
 8013138:	e0e2      	b.n	8013300 <_Z6weighti+0x368>
	else if(dir == 2){//right
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2b02      	cmp	r3, #2
 801313e:	d179      	bne.n	8013234 <_Z6weighti+0x29c>
    weight_err = ((float)(-3*adcRead_ADC3[4] - adcRead_ADC3[5] + adcRead_ADC3[6] + 3*adcRead_ADC3[7]) /
 8013140:	4b33      	ldr	r3, [pc, #204]	@ (8013210 <_Z6weighti+0x278>)
 8013142:	891b      	ldrh	r3, [r3, #8]
 8013144:	461a      	mov	r2, r3
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	1ad3      	subs	r3, r2, r3
 801314a:	4a31      	ldr	r2, [pc, #196]	@ (8013210 <_Z6weighti+0x278>)
 801314c:	8952      	ldrh	r2, [r2, #10]
 801314e:	1a9b      	subs	r3, r3, r2
 8013150:	4a2f      	ldr	r2, [pc, #188]	@ (8013210 <_Z6weighti+0x278>)
 8013152:	8992      	ldrh	r2, [r2, #12]
 8013154:	441a      	add	r2, r3
 8013156:	4b2e      	ldr	r3, [pc, #184]	@ (8013210 <_Z6weighti+0x278>)
 8013158:	89db      	ldrh	r3, [r3, #14]
 801315a:	4619      	mov	r1, r3
 801315c:	460b      	mov	r3, r1
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	440b      	add	r3, r1
 8013162:	4413      	add	r3, r2
 8013164:	ee07 3a90 	vmov	s15, r3
 8013168:	eef8 6ae7 	vcvt.f32.s32	s13, s15
						   (adcRead_ADC3[4] + adcRead_ADC3[5]+ 4096 +adcRead_ADC3[6] + adcRead_ADC3[7]));
 801316c:	4b28      	ldr	r3, [pc, #160]	@ (8013210 <_Z6weighti+0x278>)
 801316e:	891b      	ldrh	r3, [r3, #8]
 8013170:	461a      	mov	r2, r3
 8013172:	4b27      	ldr	r3, [pc, #156]	@ (8013210 <_Z6weighti+0x278>)
 8013174:	895b      	ldrh	r3, [r3, #10]
 8013176:	4413      	add	r3, r2
 8013178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801317c:	4a24      	ldr	r2, [pc, #144]	@ (8013210 <_Z6weighti+0x278>)
 801317e:	8992      	ldrh	r2, [r2, #12]
 8013180:	4413      	add	r3, r2
 8013182:	4a23      	ldr	r2, [pc, #140]	@ (8013210 <_Z6weighti+0x278>)
 8013184:	89d2      	ldrh	r2, [r2, #14]
 8013186:	4413      	add	r3, r2
    weight_err = ((float)(-3*adcRead_ADC3[4] - adcRead_ADC3[5] + adcRead_ADC3[6] + 3*adcRead_ADC3[7]) /
 8013188:	ee07 3a90 	vmov	s15, r3
 801318c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013194:	4b1f      	ldr	r3, [pc, #124]	@ (8013214 <_Z6weighti+0x27c>)
 8013196:	edc3 7a00 	vstr	s15, [r3]
	weight_change = weight_err - weight_lasttime;
 801319a:	4b1e      	ldr	r3, [pc, #120]	@ (8013214 <_Z6weighti+0x27c>)
 801319c:	ed93 7a00 	vldr	s14, [r3]
 80131a0:	4b1d      	ldr	r3, [pc, #116]	@ (8013218 <_Z6weighti+0x280>)
 80131a2:	edd3 7a00 	vldr	s15, [r3]
 80131a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80131aa:	4b1c      	ldr	r3, [pc, #112]	@ (801321c <_Z6weighti+0x284>)
 80131ac:	edc3 7a00 	vstr	s15, [r3]
	weight_lasttime = weight_err;
 80131b0:	4b18      	ldr	r3, [pc, #96]	@ (8013214 <_Z6weighti+0x27c>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4a18      	ldr	r2, [pc, #96]	@ (8013218 <_Z6weighti+0x280>)
 80131b6:	6013      	str	r3, [r2, #0]
	cmd_v_y = 0; // Forward speed (positive: forward)
 80131b8:	4b1a      	ldr	r3, [pc, #104]	@ (8013224 <_Z6weighti+0x28c>)
 80131ba:	f04f 0200 	mov.w	r2, #0
 80131be:	601a      	str	r2, [r3, #0]
	cmd_v_x = normal_Speed;            // No strafe (add logic here if you want to strafe)
 80131c0:	4b17      	ldr	r3, [pc, #92]	@ (8013220 <_Z6weighti+0x288>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	ee07 3a90 	vmov	s15, r3
 80131c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131cc:	4b16      	ldr	r3, [pc, #88]	@ (8013228 <_Z6weighti+0x290>)
 80131ce:	edc3 7a00 	vstr	s15, [r3]
	cmd_v_w = (weight_err * w_kp + weight_change * w_kd); // Rotation correction
 80131d2:	4b10      	ldr	r3, [pc, #64]	@ (8013214 <_Z6weighti+0x27c>)
 80131d4:	edd3 7a00 	vldr	s15, [r3]
 80131d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80131dc:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8013208 <_Z6weighti+0x270>
 80131e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80131e4:	4b0d      	ldr	r3, [pc, #52]	@ (801321c <_Z6weighti+0x284>)
 80131e6:	edd3 7a00 	vldr	s15, [r3]
 80131ea:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 801322c <_Z6weighti+0x294>
 80131ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80131f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80131f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80131fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80131fe:	4b0c      	ldr	r3, [pc, #48]	@ (8013230 <_Z6weighti+0x298>)
 8013200:	edc3 7a00 	vstr	s15, [r3]
	}
 8013204:	e07c      	b.n	8013300 <_Z6weighti+0x368>
 8013206:	bf00      	nop
 8013208:	9999999a 	.word	0x9999999a
 801320c:	3fd99999 	.word	0x3fd99999
 8013210:	240037bc 	.word	0x240037bc
 8013214:	240037d8 	.word	0x240037d8
 8013218:	240037dc 	.word	0x240037dc
 801321c:	240037e0 	.word	0x240037e0
 8013220:	24000028 	.word	0x24000028
 8013224:	240037b4 	.word	0x240037b4
 8013228:	240037b0 	.word	0x240037b0
 801322c:	00000000 	.word	0x00000000
 8013230:	240037b8 	.word	0x240037b8
	else if(dir == 3){//left
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2b03      	cmp	r3, #3
 8013238:	d162      	bne.n	8013300 <_Z6weighti+0x368>
	weight_err = ((float)(-3*adcRead_ADC3[8] - adcRead_ADC3[9] + adcRead_ADC3[10] + 3*adcRead_ADC3[11]) /
 801323a:	4b37      	ldr	r3, [pc, #220]	@ (8013318 <_Z6weighti+0x380>)
 801323c:	8a1b      	ldrh	r3, [r3, #16]
 801323e:	461a      	mov	r2, r3
 8013240:	009b      	lsls	r3, r3, #2
 8013242:	1ad3      	subs	r3, r2, r3
 8013244:	4a34      	ldr	r2, [pc, #208]	@ (8013318 <_Z6weighti+0x380>)
 8013246:	8a52      	ldrh	r2, [r2, #18]
 8013248:	1a9b      	subs	r3, r3, r2
 801324a:	4a33      	ldr	r2, [pc, #204]	@ (8013318 <_Z6weighti+0x380>)
 801324c:	8a92      	ldrh	r2, [r2, #20]
 801324e:	441a      	add	r2, r3
 8013250:	4b31      	ldr	r3, [pc, #196]	@ (8013318 <_Z6weighti+0x380>)
 8013252:	8adb      	ldrh	r3, [r3, #22]
 8013254:	4619      	mov	r1, r3
 8013256:	460b      	mov	r3, r1
 8013258:	005b      	lsls	r3, r3, #1
 801325a:	440b      	add	r3, r1
 801325c:	4413      	add	r3, r2
 801325e:	ee07 3a90 	vmov	s15, r3
 8013262:	eef8 6ae7 	vcvt.f32.s32	s13, s15
				     (adcRead_ADC3[8] + adcRead_ADC3[9]+ 4096 +adcRead_ADC3[10] + adcRead_ADC3[11]));
 8013266:	4b2c      	ldr	r3, [pc, #176]	@ (8013318 <_Z6weighti+0x380>)
 8013268:	8a1b      	ldrh	r3, [r3, #16]
 801326a:	461a      	mov	r2, r3
 801326c:	4b2a      	ldr	r3, [pc, #168]	@ (8013318 <_Z6weighti+0x380>)
 801326e:	8a5b      	ldrh	r3, [r3, #18]
 8013270:	4413      	add	r3, r2
 8013272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013276:	4a28      	ldr	r2, [pc, #160]	@ (8013318 <_Z6weighti+0x380>)
 8013278:	8a92      	ldrh	r2, [r2, #20]
 801327a:	4413      	add	r3, r2
 801327c:	4a26      	ldr	r2, [pc, #152]	@ (8013318 <_Z6weighti+0x380>)
 801327e:	8ad2      	ldrh	r2, [r2, #22]
 8013280:	4413      	add	r3, r2
	weight_err = ((float)(-3*adcRead_ADC3[8] - adcRead_ADC3[9] + adcRead_ADC3[10] + 3*adcRead_ADC3[11]) /
 8013282:	ee07 3a90 	vmov	s15, r3
 8013286:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801328a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801328e:	4b23      	ldr	r3, [pc, #140]	@ (801331c <_Z6weighti+0x384>)
 8013290:	edc3 7a00 	vstr	s15, [r3]
	weight_change = weight_err - weight_lasttime;
 8013294:	4b21      	ldr	r3, [pc, #132]	@ (801331c <_Z6weighti+0x384>)
 8013296:	ed93 7a00 	vldr	s14, [r3]
 801329a:	4b21      	ldr	r3, [pc, #132]	@ (8013320 <_Z6weighti+0x388>)
 801329c:	edd3 7a00 	vldr	s15, [r3]
 80132a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80132a4:	4b1f      	ldr	r3, [pc, #124]	@ (8013324 <_Z6weighti+0x38c>)
 80132a6:	edc3 7a00 	vstr	s15, [r3]
	weight_lasttime = weight_err;
 80132aa:	4b1c      	ldr	r3, [pc, #112]	@ (801331c <_Z6weighti+0x384>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	4a1c      	ldr	r2, [pc, #112]	@ (8013320 <_Z6weighti+0x388>)
 80132b0:	6013      	str	r3, [r2, #0]
	cmd_v_y = 0; // Forward speed (positive: forward)
 80132b2:	4b1d      	ldr	r3, [pc, #116]	@ (8013328 <_Z6weighti+0x390>)
 80132b4:	f04f 0200 	mov.w	r2, #0
 80132b8:	601a      	str	r2, [r3, #0]
	cmd_v_x = -normal_Speed;            // No strafe (add logic here if you want to strafe)
 80132ba:	4b1c      	ldr	r3, [pc, #112]	@ (801332c <_Z6weighti+0x394>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	425b      	negs	r3, r3
 80132c0:	ee07 3a90 	vmov	s15, r3
 80132c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132c8:	4b19      	ldr	r3, [pc, #100]	@ (8013330 <_Z6weighti+0x398>)
 80132ca:	edc3 7a00 	vstr	s15, [r3]
	cmd_v_w = (weight_err * w_kp + weight_change * w_kd); // Rotation correction
 80132ce:	4b13      	ldr	r3, [pc, #76]	@ (801331c <_Z6weighti+0x384>)
 80132d0:	edd3 7a00 	vldr	s15, [r3]
 80132d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80132d8:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8013310 <_Z6weighti+0x378>
 80132dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80132e0:	4b10      	ldr	r3, [pc, #64]	@ (8013324 <_Z6weighti+0x38c>)
 80132e2:	edd3 7a00 	vldr	s15, [r3]
 80132e6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8013334 <_Z6weighti+0x39c>
 80132ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80132ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80132f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80132f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80132fa:	4b0f      	ldr	r3, [pc, #60]	@ (8013338 <_Z6weighti+0x3a0>)
 80132fc:	edc3 7a00 	vstr	s15, [r3]
	}
 8013300:	bf00      	nop
 8013302:	370c      	adds	r7, #12
 8013304:	46bd      	mov	sp, r7
 8013306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330a:	4770      	bx	lr
 801330c:	f3af 8000 	nop.w
 8013310:	9999999a 	.word	0x9999999a
 8013314:	3fd99999 	.word	0x3fd99999
 8013318:	240037bc 	.word	0x240037bc
 801331c:	240037d8 	.word	0x240037d8
 8013320:	240037dc 	.word	0x240037dc
 8013324:	240037e0 	.word	0x240037e0
 8013328:	240037b4 	.word	0x240037b4
 801332c:	24000028 	.word	0x24000028
 8013330:	240037b0 	.word	0x240037b0
 8013334:	00000000 	.word	0x00000000
 8013338:	240037b8 	.word	0x240037b8

0801333c <_Z4pathi>:


//motor_speed[0]:right motor speed, motor_speed[1]:left motor speed
void path(int dir) { // follow path for mecanum chassis
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
//		cmd_v_y = normal_Speed; // Forward speed
//		cmd_v_x = 0;            // No strafe
//		cmd_v_w = 0;            // No rotation
//   }
//    else {
         weight(dir); // sets cmd_v_y, cmd_v_x, cmd_v_w
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ff fe27 	bl	8012f98 <_Z6weighti>
//    }
}
 801334a:	bf00      	nop
 801334c:	3708      	adds	r7, #8
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}

08013352 <sinf_poly>:
 8013352:	07cb      	lsls	r3, r1, #31
 8013354:	d412      	bmi.n	801337c <sinf_poly+0x2a>
 8013356:	ee21 5b00 	vmul.f64	d5, d1, d0
 801335a:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801335e:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8013362:	eea6 7b01 	vfma.f64	d7, d6, d1
 8013366:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801336a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801336e:	eea6 0b05 	vfma.f64	d0, d6, d5
 8013372:	eea7 0b01 	vfma.f64	d0, d7, d1
 8013376:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801337a:	4770      	bx	lr
 801337c:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8013380:	ee21 5b01 	vmul.f64	d5, d1, d1
 8013384:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8013388:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801338c:	eea1 7b06 	vfma.f64	d7, d1, d6
 8013390:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8013394:	eea1 0b06 	vfma.f64	d0, d1, d6
 8013398:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801339c:	ee21 1b05 	vmul.f64	d1, d1, d5
 80133a0:	eea5 0b06 	vfma.f64	d0, d5, d6
 80133a4:	e7e5      	b.n	8013372 <sinf_poly+0x20>
	...

080133a8 <sinf>:
 80133a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80133aa:	ee10 4a10 	vmov	r4, s0
 80133ae:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80133b2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80133b6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80133ba:	eef0 7a40 	vmov.f32	s15, s0
 80133be:	d218      	bcs.n	80133f2 <sinf+0x4a>
 80133c0:	ee26 1b06 	vmul.f64	d1, d6, d6
 80133c4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80133c8:	d20a      	bcs.n	80133e0 <sinf+0x38>
 80133ca:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80133ce:	d103      	bne.n	80133d8 <sinf+0x30>
 80133d0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80133d4:	ed8d 1a01 	vstr	s2, [sp, #4]
 80133d8:	eeb0 0a67 	vmov.f32	s0, s15
 80133dc:	b003      	add	sp, #12
 80133de:	bd30      	pop	{r4, r5, pc}
 80133e0:	483b      	ldr	r0, [pc, #236]	@ (80134d0 <sinf+0x128>)
 80133e2:	eeb0 0b46 	vmov.f64	d0, d6
 80133e6:	2100      	movs	r1, #0
 80133e8:	b003      	add	sp, #12
 80133ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80133ee:	f7ff bfb0 	b.w	8013352 <sinf_poly>
 80133f2:	f240 422e 	movw	r2, #1070	@ 0x42e
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d824      	bhi.n	8013444 <sinf+0x9c>
 80133fa:	4b35      	ldr	r3, [pc, #212]	@ (80134d0 <sinf+0x128>)
 80133fc:	ed93 7b08 	vldr	d7, [r3, #32]
 8013400:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013404:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8013408:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801340c:	ee17 1a90 	vmov	r1, s15
 8013410:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8013414:	1609      	asrs	r1, r1, #24
 8013416:	ee07 1a90 	vmov	s15, r1
 801341a:	f001 0203 	and.w	r2, r1, #3
 801341e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8013422:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013426:	ed92 0b00 	vldr	d0, [r2]
 801342a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801342e:	f011 0f02 	tst.w	r1, #2
 8013432:	eea5 6b47 	vfms.f64	d6, d5, d7
 8013436:	bf08      	it	eq
 8013438:	4618      	moveq	r0, r3
 801343a:	ee26 1b06 	vmul.f64	d1, d6, d6
 801343e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8013442:	e7d1      	b.n	80133e8 <sinf+0x40>
 8013444:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8013448:	d237      	bcs.n	80134ba <sinf+0x112>
 801344a:	4922      	ldr	r1, [pc, #136]	@ (80134d4 <sinf+0x12c>)
 801344c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8013450:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8013454:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8013458:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801345c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8013460:	6a10      	ldr	r0, [r2, #32]
 8013462:	6912      	ldr	r2, [r2, #16]
 8013464:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013468:	40ab      	lsls	r3, r5
 801346a:	fba0 5003 	umull	r5, r0, r0, r3
 801346e:	4359      	muls	r1, r3
 8013470:	fbe3 0102 	umlal	r0, r1, r3, r2
 8013474:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8013478:	0f9d      	lsrs	r5, r3, #30
 801347a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801347e:	1ac9      	subs	r1, r1, r3
 8013480:	f7ed f8dc 	bl	800063c <__aeabi_l2d>
 8013484:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8013488:	4b11      	ldr	r3, [pc, #68]	@ (80134d0 <sinf+0x128>)
 801348a:	f004 0203 	and.w	r2, r4, #3
 801348e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8013492:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80134c8 <sinf+0x120>
 8013496:	ed92 0b00 	vldr	d0, [r2]
 801349a:	ec41 0b17 	vmov	d7, r0, r1
 801349e:	f014 0f02 	tst.w	r4, #2
 80134a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80134a6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80134aa:	4629      	mov	r1, r5
 80134ac:	bf08      	it	eq
 80134ae:	4618      	moveq	r0, r3
 80134b0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80134b4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80134b8:	e796      	b.n	80133e8 <sinf+0x40>
 80134ba:	b003      	add	sp, #12
 80134bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134c0:	f000 b8e4 	b.w	801368c <__math_invalidf>
 80134c4:	f3af 8000 	nop.w
 80134c8:	54442d18 	.word	0x54442d18
 80134cc:	3c1921fb 	.word	0x3c1921fb
 80134d0:	08013e50 	.word	0x08013e50
 80134d4:	08013dec 	.word	0x08013dec

080134d8 <sinf_poly>:
 80134d8:	07cb      	lsls	r3, r1, #31
 80134da:	d412      	bmi.n	8013502 <sinf_poly+0x2a>
 80134dc:	ee21 5b00 	vmul.f64	d5, d1, d0
 80134e0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80134e4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80134e8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80134ec:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80134f0:	ee21 1b05 	vmul.f64	d1, d1, d5
 80134f4:	eea6 0b05 	vfma.f64	d0, d6, d5
 80134f8:	eea7 0b01 	vfma.f64	d0, d7, d1
 80134fc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013500:	4770      	bx	lr
 8013502:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8013506:	ee21 5b01 	vmul.f64	d5, d1, d1
 801350a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801350e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8013512:	eea1 7b06 	vfma.f64	d7, d1, d6
 8013516:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801351a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801351e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8013522:	ee21 1b05 	vmul.f64	d1, d1, d5
 8013526:	eea5 0b06 	vfma.f64	d0, d5, d6
 801352a:	e7e5      	b.n	80134f8 <sinf_poly+0x20>
 801352c:	0000      	movs	r0, r0
	...

08013530 <cosf>:
 8013530:	b538      	push	{r3, r4, r5, lr}
 8013532:	ee10 4a10 	vmov	r4, s0
 8013536:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801353a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801353e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8013542:	d21f      	bcs.n	8013584 <cosf+0x54>
 8013544:	ee27 7b07 	vmul.f64	d7, d7, d7
 8013548:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801354c:	f0c0 8082 	bcc.w	8013654 <cosf+0x124>
 8013550:	ee27 4b07 	vmul.f64	d4, d7, d7
 8013554:	4b44      	ldr	r3, [pc, #272]	@ (8013668 <cosf+0x138>)
 8013556:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 801355a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801355e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8013562:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013566:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 801356a:	eea7 0b05 	vfma.f64	d0, d7, d5
 801356e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8013572:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013576:	eea4 0b05 	vfma.f64	d0, d4, d5
 801357a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801357e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013582:	bd38      	pop	{r3, r4, r5, pc}
 8013584:	f240 422e 	movw	r2, #1070	@ 0x42e
 8013588:	4293      	cmp	r3, r2
 801358a:	d829      	bhi.n	80135e0 <cosf+0xb0>
 801358c:	4b36      	ldr	r3, [pc, #216]	@ (8013668 <cosf+0x138>)
 801358e:	ed93 6b08 	vldr	d6, [r3, #32]
 8013592:	ee27 6b06 	vmul.f64	d6, d7, d6
 8013596:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801359a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801359e:	ee16 1a90 	vmov	r1, s13
 80135a2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80135a6:	1609      	asrs	r1, r1, #24
 80135a8:	ee06 1a90 	vmov	s13, r1
 80135ac:	f001 0203 	and.w	r2, r1, #3
 80135b0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80135b4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80135b8:	ed92 0b00 	vldr	d0, [r2]
 80135bc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80135c0:	f011 0f02 	tst.w	r1, #2
 80135c4:	f081 0101 	eor.w	r1, r1, #1
 80135c8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80135cc:	bf08      	it	eq
 80135ce:	4618      	moveq	r0, r3
 80135d0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80135d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80135dc:	f7ff bf7c 	b.w	80134d8 <sinf_poly>
 80135e0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80135e4:	d232      	bcs.n	801364c <cosf+0x11c>
 80135e6:	4921      	ldr	r1, [pc, #132]	@ (801366c <cosf+0x13c>)
 80135e8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80135ec:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80135f0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80135f4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80135f8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80135fc:	6a10      	ldr	r0, [r2, #32]
 80135fe:	6912      	ldr	r2, [r2, #16]
 8013600:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013604:	40ab      	lsls	r3, r5
 8013606:	fba0 5003 	umull	r5, r0, r0, r3
 801360a:	4359      	muls	r1, r3
 801360c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8013610:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8013614:	0f9d      	lsrs	r5, r3, #30
 8013616:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801361a:	1ac9      	subs	r1, r1, r3
 801361c:	f7ed f80e 	bl	800063c <__aeabi_l2d>
 8013620:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8013624:	4b10      	ldr	r3, [pc, #64]	@ (8013668 <cosf+0x138>)
 8013626:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8013660 <cosf+0x130>
 801362a:	ec41 0b17 	vmov	d7, r0, r1
 801362e:	f004 0203 	and.w	r2, r4, #3
 8013632:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8013636:	ed92 0b00 	vldr	d0, [r2]
 801363a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801363e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8013642:	f014 0f02 	tst.w	r4, #2
 8013646:	f085 0101 	eor.w	r1, r5, #1
 801364a:	e7bf      	b.n	80135cc <cosf+0x9c>
 801364c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013650:	f000 b81c 	b.w	801368c <__math_invalidf>
 8013654:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013658:	e793      	b.n	8013582 <cosf+0x52>
 801365a:	bf00      	nop
 801365c:	f3af 8000 	nop.w
 8013660:	54442d18 	.word	0x54442d18
 8013664:	3c1921fb 	.word	0x3c1921fb
 8013668:	08013e50 	.word	0x08013e50
 801366c:	08013dec 	.word	0x08013dec

08013670 <with_errnof>:
 8013670:	b510      	push	{r4, lr}
 8013672:	ed2d 8b02 	vpush	{d8}
 8013676:	eeb0 8a40 	vmov.f32	s16, s0
 801367a:	4604      	mov	r4, r0
 801367c:	f000 f854 	bl	8013728 <__errno>
 8013680:	eeb0 0a48 	vmov.f32	s0, s16
 8013684:	ecbd 8b02 	vpop	{d8}
 8013688:	6004      	str	r4, [r0, #0]
 801368a:	bd10      	pop	{r4, pc}

0801368c <__math_invalidf>:
 801368c:	eef0 7a40 	vmov.f32	s15, s0
 8013690:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013694:	eef4 7a67 	vcmp.f32	s15, s15
 8013698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801369c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80136a0:	d602      	bvs.n	80136a8 <__math_invalidf+0x1c>
 80136a2:	2021      	movs	r0, #33	@ 0x21
 80136a4:	f7ff bfe4 	b.w	8013670 <with_errnof>
 80136a8:	4770      	bx	lr
	...

080136ac <realloc>:
 80136ac:	4b02      	ldr	r3, [pc, #8]	@ (80136b8 <realloc+0xc>)
 80136ae:	460a      	mov	r2, r1
 80136b0:	4601      	mov	r1, r0
 80136b2:	6818      	ldr	r0, [r3, #0]
 80136b4:	f000 b802 	b.w	80136bc <_realloc_r>
 80136b8:	24000030 	.word	0x24000030

080136bc <_realloc_r>:
 80136bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136c0:	4607      	mov	r7, r0
 80136c2:	4614      	mov	r4, r2
 80136c4:	460d      	mov	r5, r1
 80136c6:	b921      	cbnz	r1, 80136d2 <_realloc_r+0x16>
 80136c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136cc:	4611      	mov	r1, r2
 80136ce:	f000 b8d1 	b.w	8013874 <_malloc_r>
 80136d2:	b92a      	cbnz	r2, 80136e0 <_realloc_r+0x24>
 80136d4:	f000 f862 	bl	801379c <_free_r>
 80136d8:	4625      	mov	r5, r4
 80136da:	4628      	mov	r0, r5
 80136dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e0:	f000 f954 	bl	801398c <_malloc_usable_size_r>
 80136e4:	4284      	cmp	r4, r0
 80136e6:	4606      	mov	r6, r0
 80136e8:	d802      	bhi.n	80136f0 <_realloc_r+0x34>
 80136ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80136ee:	d8f4      	bhi.n	80136da <_realloc_r+0x1e>
 80136f0:	4621      	mov	r1, r4
 80136f2:	4638      	mov	r0, r7
 80136f4:	f000 f8be 	bl	8013874 <_malloc_r>
 80136f8:	4680      	mov	r8, r0
 80136fa:	b908      	cbnz	r0, 8013700 <_realloc_r+0x44>
 80136fc:	4645      	mov	r5, r8
 80136fe:	e7ec      	b.n	80136da <_realloc_r+0x1e>
 8013700:	42b4      	cmp	r4, r6
 8013702:	4622      	mov	r2, r4
 8013704:	4629      	mov	r1, r5
 8013706:	bf28      	it	cs
 8013708:	4632      	movcs	r2, r6
 801370a:	f000 f839 	bl	8013780 <memcpy>
 801370e:	4629      	mov	r1, r5
 8013710:	4638      	mov	r0, r7
 8013712:	f000 f843 	bl	801379c <_free_r>
 8013716:	e7f1      	b.n	80136fc <_realloc_r+0x40>

08013718 <memset>:
 8013718:	4402      	add	r2, r0
 801371a:	4603      	mov	r3, r0
 801371c:	4293      	cmp	r3, r2
 801371e:	d100      	bne.n	8013722 <memset+0xa>
 8013720:	4770      	bx	lr
 8013722:	f803 1b01 	strb.w	r1, [r3], #1
 8013726:	e7f9      	b.n	801371c <memset+0x4>

08013728 <__errno>:
 8013728:	4b01      	ldr	r3, [pc, #4]	@ (8013730 <__errno+0x8>)
 801372a:	6818      	ldr	r0, [r3, #0]
 801372c:	4770      	bx	lr
 801372e:	bf00      	nop
 8013730:	24000030 	.word	0x24000030

08013734 <__libc_init_array>:
 8013734:	b570      	push	{r4, r5, r6, lr}
 8013736:	4d0d      	ldr	r5, [pc, #52]	@ (801376c <__libc_init_array+0x38>)
 8013738:	4c0d      	ldr	r4, [pc, #52]	@ (8013770 <__libc_init_array+0x3c>)
 801373a:	1b64      	subs	r4, r4, r5
 801373c:	10a4      	asrs	r4, r4, #2
 801373e:	2600      	movs	r6, #0
 8013740:	42a6      	cmp	r6, r4
 8013742:	d109      	bne.n	8013758 <__libc_init_array+0x24>
 8013744:	4d0b      	ldr	r5, [pc, #44]	@ (8013774 <__libc_init_array+0x40>)
 8013746:	4c0c      	ldr	r4, [pc, #48]	@ (8013778 <__libc_init_array+0x44>)
 8013748:	f000 f938 	bl	80139bc <_init>
 801374c:	1b64      	subs	r4, r4, r5
 801374e:	10a4      	asrs	r4, r4, #2
 8013750:	2600      	movs	r6, #0
 8013752:	42a6      	cmp	r6, r4
 8013754:	d105      	bne.n	8013762 <__libc_init_array+0x2e>
 8013756:	bd70      	pop	{r4, r5, r6, pc}
 8013758:	f855 3b04 	ldr.w	r3, [r5], #4
 801375c:	4798      	blx	r3
 801375e:	3601      	adds	r6, #1
 8013760:	e7ee      	b.n	8013740 <__libc_init_array+0xc>
 8013762:	f855 3b04 	ldr.w	r3, [r5], #4
 8013766:	4798      	blx	r3
 8013768:	3601      	adds	r6, #1
 801376a:	e7f2      	b.n	8013752 <__libc_init_array+0x1e>
 801376c:	08013f38 	.word	0x08013f38
 8013770:	08013f38 	.word	0x08013f38
 8013774:	08013f38 	.word	0x08013f38
 8013778:	08013f48 	.word	0x08013f48

0801377c <__retarget_lock_acquire_recursive>:
 801377c:	4770      	bx	lr

0801377e <__retarget_lock_release_recursive>:
 801377e:	4770      	bx	lr

08013780 <memcpy>:
 8013780:	440a      	add	r2, r1
 8013782:	4291      	cmp	r1, r2
 8013784:	f100 33ff 	add.w	r3, r0, #4294967295
 8013788:	d100      	bne.n	801378c <memcpy+0xc>
 801378a:	4770      	bx	lr
 801378c:	b510      	push	{r4, lr}
 801378e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013792:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013796:	4291      	cmp	r1, r2
 8013798:	d1f9      	bne.n	801378e <memcpy+0xe>
 801379a:	bd10      	pop	{r4, pc}

0801379c <_free_r>:
 801379c:	b538      	push	{r3, r4, r5, lr}
 801379e:	4605      	mov	r5, r0
 80137a0:	2900      	cmp	r1, #0
 80137a2:	d041      	beq.n	8013828 <_free_r+0x8c>
 80137a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137a8:	1f0c      	subs	r4, r1, #4
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	bfb8      	it	lt
 80137ae:	18e4      	addlt	r4, r4, r3
 80137b0:	f000 f8e0 	bl	8013974 <__malloc_lock>
 80137b4:	4a1d      	ldr	r2, [pc, #116]	@ (801382c <_free_r+0x90>)
 80137b6:	6813      	ldr	r3, [r2, #0]
 80137b8:	b933      	cbnz	r3, 80137c8 <_free_r+0x2c>
 80137ba:	6063      	str	r3, [r4, #4]
 80137bc:	6014      	str	r4, [r2, #0]
 80137be:	4628      	mov	r0, r5
 80137c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137c4:	f000 b8dc 	b.w	8013980 <__malloc_unlock>
 80137c8:	42a3      	cmp	r3, r4
 80137ca:	d908      	bls.n	80137de <_free_r+0x42>
 80137cc:	6820      	ldr	r0, [r4, #0]
 80137ce:	1821      	adds	r1, r4, r0
 80137d0:	428b      	cmp	r3, r1
 80137d2:	bf01      	itttt	eq
 80137d4:	6819      	ldreq	r1, [r3, #0]
 80137d6:	685b      	ldreq	r3, [r3, #4]
 80137d8:	1809      	addeq	r1, r1, r0
 80137da:	6021      	streq	r1, [r4, #0]
 80137dc:	e7ed      	b.n	80137ba <_free_r+0x1e>
 80137de:	461a      	mov	r2, r3
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	b10b      	cbz	r3, 80137e8 <_free_r+0x4c>
 80137e4:	42a3      	cmp	r3, r4
 80137e6:	d9fa      	bls.n	80137de <_free_r+0x42>
 80137e8:	6811      	ldr	r1, [r2, #0]
 80137ea:	1850      	adds	r0, r2, r1
 80137ec:	42a0      	cmp	r0, r4
 80137ee:	d10b      	bne.n	8013808 <_free_r+0x6c>
 80137f0:	6820      	ldr	r0, [r4, #0]
 80137f2:	4401      	add	r1, r0
 80137f4:	1850      	adds	r0, r2, r1
 80137f6:	4283      	cmp	r3, r0
 80137f8:	6011      	str	r1, [r2, #0]
 80137fa:	d1e0      	bne.n	80137be <_free_r+0x22>
 80137fc:	6818      	ldr	r0, [r3, #0]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	6053      	str	r3, [r2, #4]
 8013802:	4408      	add	r0, r1
 8013804:	6010      	str	r0, [r2, #0]
 8013806:	e7da      	b.n	80137be <_free_r+0x22>
 8013808:	d902      	bls.n	8013810 <_free_r+0x74>
 801380a:	230c      	movs	r3, #12
 801380c:	602b      	str	r3, [r5, #0]
 801380e:	e7d6      	b.n	80137be <_free_r+0x22>
 8013810:	6820      	ldr	r0, [r4, #0]
 8013812:	1821      	adds	r1, r4, r0
 8013814:	428b      	cmp	r3, r1
 8013816:	bf04      	itt	eq
 8013818:	6819      	ldreq	r1, [r3, #0]
 801381a:	685b      	ldreq	r3, [r3, #4]
 801381c:	6063      	str	r3, [r4, #4]
 801381e:	bf04      	itt	eq
 8013820:	1809      	addeq	r1, r1, r0
 8013822:	6021      	streq	r1, [r4, #0]
 8013824:	6054      	str	r4, [r2, #4]
 8013826:	e7ca      	b.n	80137be <_free_r+0x22>
 8013828:	bd38      	pop	{r3, r4, r5, pc}
 801382a:	bf00      	nop
 801382c:	2400392c 	.word	0x2400392c

08013830 <sbrk_aligned>:
 8013830:	b570      	push	{r4, r5, r6, lr}
 8013832:	4e0f      	ldr	r6, [pc, #60]	@ (8013870 <sbrk_aligned+0x40>)
 8013834:	460c      	mov	r4, r1
 8013836:	6831      	ldr	r1, [r6, #0]
 8013838:	4605      	mov	r5, r0
 801383a:	b911      	cbnz	r1, 8013842 <sbrk_aligned+0x12>
 801383c:	f000 f8ae 	bl	801399c <_sbrk_r>
 8013840:	6030      	str	r0, [r6, #0]
 8013842:	4621      	mov	r1, r4
 8013844:	4628      	mov	r0, r5
 8013846:	f000 f8a9 	bl	801399c <_sbrk_r>
 801384a:	1c43      	adds	r3, r0, #1
 801384c:	d103      	bne.n	8013856 <sbrk_aligned+0x26>
 801384e:	f04f 34ff 	mov.w	r4, #4294967295
 8013852:	4620      	mov	r0, r4
 8013854:	bd70      	pop	{r4, r5, r6, pc}
 8013856:	1cc4      	adds	r4, r0, #3
 8013858:	f024 0403 	bic.w	r4, r4, #3
 801385c:	42a0      	cmp	r0, r4
 801385e:	d0f8      	beq.n	8013852 <sbrk_aligned+0x22>
 8013860:	1a21      	subs	r1, r4, r0
 8013862:	4628      	mov	r0, r5
 8013864:	f000 f89a 	bl	801399c <_sbrk_r>
 8013868:	3001      	adds	r0, #1
 801386a:	d1f2      	bne.n	8013852 <sbrk_aligned+0x22>
 801386c:	e7ef      	b.n	801384e <sbrk_aligned+0x1e>
 801386e:	bf00      	nop
 8013870:	24003928 	.word	0x24003928

08013874 <_malloc_r>:
 8013874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013878:	1ccd      	adds	r5, r1, #3
 801387a:	f025 0503 	bic.w	r5, r5, #3
 801387e:	3508      	adds	r5, #8
 8013880:	2d0c      	cmp	r5, #12
 8013882:	bf38      	it	cc
 8013884:	250c      	movcc	r5, #12
 8013886:	2d00      	cmp	r5, #0
 8013888:	4606      	mov	r6, r0
 801388a:	db01      	blt.n	8013890 <_malloc_r+0x1c>
 801388c:	42a9      	cmp	r1, r5
 801388e:	d904      	bls.n	801389a <_malloc_r+0x26>
 8013890:	230c      	movs	r3, #12
 8013892:	6033      	str	r3, [r6, #0]
 8013894:	2000      	movs	r0, #0
 8013896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801389a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013970 <_malloc_r+0xfc>
 801389e:	f000 f869 	bl	8013974 <__malloc_lock>
 80138a2:	f8d8 3000 	ldr.w	r3, [r8]
 80138a6:	461c      	mov	r4, r3
 80138a8:	bb44      	cbnz	r4, 80138fc <_malloc_r+0x88>
 80138aa:	4629      	mov	r1, r5
 80138ac:	4630      	mov	r0, r6
 80138ae:	f7ff ffbf 	bl	8013830 <sbrk_aligned>
 80138b2:	1c43      	adds	r3, r0, #1
 80138b4:	4604      	mov	r4, r0
 80138b6:	d158      	bne.n	801396a <_malloc_r+0xf6>
 80138b8:	f8d8 4000 	ldr.w	r4, [r8]
 80138bc:	4627      	mov	r7, r4
 80138be:	2f00      	cmp	r7, #0
 80138c0:	d143      	bne.n	801394a <_malloc_r+0xd6>
 80138c2:	2c00      	cmp	r4, #0
 80138c4:	d04b      	beq.n	801395e <_malloc_r+0xea>
 80138c6:	6823      	ldr	r3, [r4, #0]
 80138c8:	4639      	mov	r1, r7
 80138ca:	4630      	mov	r0, r6
 80138cc:	eb04 0903 	add.w	r9, r4, r3
 80138d0:	f000 f864 	bl	801399c <_sbrk_r>
 80138d4:	4581      	cmp	r9, r0
 80138d6:	d142      	bne.n	801395e <_malloc_r+0xea>
 80138d8:	6821      	ldr	r1, [r4, #0]
 80138da:	1a6d      	subs	r5, r5, r1
 80138dc:	4629      	mov	r1, r5
 80138de:	4630      	mov	r0, r6
 80138e0:	f7ff ffa6 	bl	8013830 <sbrk_aligned>
 80138e4:	3001      	adds	r0, #1
 80138e6:	d03a      	beq.n	801395e <_malloc_r+0xea>
 80138e8:	6823      	ldr	r3, [r4, #0]
 80138ea:	442b      	add	r3, r5
 80138ec:	6023      	str	r3, [r4, #0]
 80138ee:	f8d8 3000 	ldr.w	r3, [r8]
 80138f2:	685a      	ldr	r2, [r3, #4]
 80138f4:	bb62      	cbnz	r2, 8013950 <_malloc_r+0xdc>
 80138f6:	f8c8 7000 	str.w	r7, [r8]
 80138fa:	e00f      	b.n	801391c <_malloc_r+0xa8>
 80138fc:	6822      	ldr	r2, [r4, #0]
 80138fe:	1b52      	subs	r2, r2, r5
 8013900:	d420      	bmi.n	8013944 <_malloc_r+0xd0>
 8013902:	2a0b      	cmp	r2, #11
 8013904:	d917      	bls.n	8013936 <_malloc_r+0xc2>
 8013906:	1961      	adds	r1, r4, r5
 8013908:	42a3      	cmp	r3, r4
 801390a:	6025      	str	r5, [r4, #0]
 801390c:	bf18      	it	ne
 801390e:	6059      	strne	r1, [r3, #4]
 8013910:	6863      	ldr	r3, [r4, #4]
 8013912:	bf08      	it	eq
 8013914:	f8c8 1000 	streq.w	r1, [r8]
 8013918:	5162      	str	r2, [r4, r5]
 801391a:	604b      	str	r3, [r1, #4]
 801391c:	4630      	mov	r0, r6
 801391e:	f000 f82f 	bl	8013980 <__malloc_unlock>
 8013922:	f104 000b 	add.w	r0, r4, #11
 8013926:	1d23      	adds	r3, r4, #4
 8013928:	f020 0007 	bic.w	r0, r0, #7
 801392c:	1ac2      	subs	r2, r0, r3
 801392e:	bf1c      	itt	ne
 8013930:	1a1b      	subne	r3, r3, r0
 8013932:	50a3      	strne	r3, [r4, r2]
 8013934:	e7af      	b.n	8013896 <_malloc_r+0x22>
 8013936:	6862      	ldr	r2, [r4, #4]
 8013938:	42a3      	cmp	r3, r4
 801393a:	bf0c      	ite	eq
 801393c:	f8c8 2000 	streq.w	r2, [r8]
 8013940:	605a      	strne	r2, [r3, #4]
 8013942:	e7eb      	b.n	801391c <_malloc_r+0xa8>
 8013944:	4623      	mov	r3, r4
 8013946:	6864      	ldr	r4, [r4, #4]
 8013948:	e7ae      	b.n	80138a8 <_malloc_r+0x34>
 801394a:	463c      	mov	r4, r7
 801394c:	687f      	ldr	r7, [r7, #4]
 801394e:	e7b6      	b.n	80138be <_malloc_r+0x4a>
 8013950:	461a      	mov	r2, r3
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	42a3      	cmp	r3, r4
 8013956:	d1fb      	bne.n	8013950 <_malloc_r+0xdc>
 8013958:	2300      	movs	r3, #0
 801395a:	6053      	str	r3, [r2, #4]
 801395c:	e7de      	b.n	801391c <_malloc_r+0xa8>
 801395e:	230c      	movs	r3, #12
 8013960:	6033      	str	r3, [r6, #0]
 8013962:	4630      	mov	r0, r6
 8013964:	f000 f80c 	bl	8013980 <__malloc_unlock>
 8013968:	e794      	b.n	8013894 <_malloc_r+0x20>
 801396a:	6005      	str	r5, [r0, #0]
 801396c:	e7d6      	b.n	801391c <_malloc_r+0xa8>
 801396e:	bf00      	nop
 8013970:	2400392c 	.word	0x2400392c

08013974 <__malloc_lock>:
 8013974:	4801      	ldr	r0, [pc, #4]	@ (801397c <__malloc_lock+0x8>)
 8013976:	f7ff bf01 	b.w	801377c <__retarget_lock_acquire_recursive>
 801397a:	bf00      	nop
 801397c:	24003924 	.word	0x24003924

08013980 <__malloc_unlock>:
 8013980:	4801      	ldr	r0, [pc, #4]	@ (8013988 <__malloc_unlock+0x8>)
 8013982:	f7ff befc 	b.w	801377e <__retarget_lock_release_recursive>
 8013986:	bf00      	nop
 8013988:	24003924 	.word	0x24003924

0801398c <_malloc_usable_size_r>:
 801398c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013990:	1f18      	subs	r0, r3, #4
 8013992:	2b00      	cmp	r3, #0
 8013994:	bfbc      	itt	lt
 8013996:	580b      	ldrlt	r3, [r1, r0]
 8013998:	18c0      	addlt	r0, r0, r3
 801399a:	4770      	bx	lr

0801399c <_sbrk_r>:
 801399c:	b538      	push	{r3, r4, r5, lr}
 801399e:	4d06      	ldr	r5, [pc, #24]	@ (80139b8 <_sbrk_r+0x1c>)
 80139a0:	2300      	movs	r3, #0
 80139a2:	4604      	mov	r4, r0
 80139a4:	4608      	mov	r0, r1
 80139a6:	602b      	str	r3, [r5, #0]
 80139a8:	f7ef ff78 	bl	800389c <_sbrk>
 80139ac:	1c43      	adds	r3, r0, #1
 80139ae:	d102      	bne.n	80139b6 <_sbrk_r+0x1a>
 80139b0:	682b      	ldr	r3, [r5, #0]
 80139b2:	b103      	cbz	r3, 80139b6 <_sbrk_r+0x1a>
 80139b4:	6023      	str	r3, [r4, #0]
 80139b6:	bd38      	pop	{r3, r4, r5, pc}
 80139b8:	24003920 	.word	0x24003920

080139bc <_init>:
 80139bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139be:	bf00      	nop
 80139c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139c2:	bc08      	pop	{r3}
 80139c4:	469e      	mov	lr, r3
 80139c6:	4770      	bx	lr

080139c8 <_fini>:
 80139c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ca:	bf00      	nop
 80139cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139ce:	bc08      	pop	{r3}
 80139d0:	469e      	mov	lr, r3
 80139d2:	4770      	bx	lr
