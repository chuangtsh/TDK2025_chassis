
TDK2025_chassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014e8c  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08015160  08015160  00016160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015778  08015778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  08015780  08015780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015790  08015790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  08015794  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003940  24000080  08015810  00017080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240039c0  08015810  000179c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001707c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037adf  00000000  00000000  000170aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000523f  00000000  00000000  0004eb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f58  00000000  00000000  00053dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001890  00000000  00000000  00055d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b66f  00000000  00000000  000575b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ba4a  00000000  00000000  00092c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171ff5  00000000  00000000  000be669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023065e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008d84  00000000  00000000  002306a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  00239428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015144 	.word	0x08015144

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	08015144 	.word	0x08015144

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	@ 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	3c01      	subs	r4, #1
 800045c:	bf28      	it	cs
 800045e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000462:	d2e9      	bcs.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b988 	b.w	80009c0 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	468e      	mov	lr, r1
 80006d0:	4604      	mov	r4, r0
 80006d2:	4688      	mov	r8, r1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d14a      	bne.n	800076e <__udivmoddi4+0xa6>
 80006d8:	428a      	cmp	r2, r1
 80006da:	4617      	mov	r7, r2
 80006dc:	d962      	bls.n	80007a4 <__udivmoddi4+0xdc>
 80006de:	fab2 f682 	clz	r6, r2
 80006e2:	b14e      	cbz	r6, 80006f8 <__udivmoddi4+0x30>
 80006e4:	f1c6 0320 	rsb	r3, r6, #32
 80006e8:	fa01 f806 	lsl.w	r8, r1, r6
 80006ec:	fa20 f303 	lsr.w	r3, r0, r3
 80006f0:	40b7      	lsls	r7, r6
 80006f2:	ea43 0808 	orr.w	r8, r3, r8
 80006f6:	40b4      	lsls	r4, r6
 80006f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006fc:	fa1f fc87 	uxth.w	ip, r7
 8000700:	fbb8 f1fe 	udiv	r1, r8, lr
 8000704:	0c23      	lsrs	r3, r4, #16
 8000706:	fb0e 8811 	mls	r8, lr, r1, r8
 800070a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800070e:	fb01 f20c 	mul.w	r2, r1, ip
 8000712:	429a      	cmp	r2, r3
 8000714:	d909      	bls.n	800072a <__udivmoddi4+0x62>
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	f101 30ff 	add.w	r0, r1, #4294967295
 800071c:	f080 80ea 	bcs.w	80008f4 <__udivmoddi4+0x22c>
 8000720:	429a      	cmp	r2, r3
 8000722:	f240 80e7 	bls.w	80008f4 <__udivmoddi4+0x22c>
 8000726:	3902      	subs	r1, #2
 8000728:	443b      	add	r3, r7
 800072a:	1a9a      	subs	r2, r3, r2
 800072c:	b2a3      	uxth	r3, r4
 800072e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000732:	fb0e 2210 	mls	r2, lr, r0, r2
 8000736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800073a:	fb00 fc0c 	mul.w	ip, r0, ip
 800073e:	459c      	cmp	ip, r3
 8000740:	d909      	bls.n	8000756 <__udivmoddi4+0x8e>
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	f100 32ff 	add.w	r2, r0, #4294967295
 8000748:	f080 80d6 	bcs.w	80008f8 <__udivmoddi4+0x230>
 800074c:	459c      	cmp	ip, r3
 800074e:	f240 80d3 	bls.w	80008f8 <__udivmoddi4+0x230>
 8000752:	443b      	add	r3, r7
 8000754:	3802      	subs	r0, #2
 8000756:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800075a:	eba3 030c 	sub.w	r3, r3, ip
 800075e:	2100      	movs	r1, #0
 8000760:	b11d      	cbz	r5, 800076a <__udivmoddi4+0xa2>
 8000762:	40f3      	lsrs	r3, r6
 8000764:	2200      	movs	r2, #0
 8000766:	e9c5 3200 	strd	r3, r2, [r5]
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	428b      	cmp	r3, r1
 8000770:	d905      	bls.n	800077e <__udivmoddi4+0xb6>
 8000772:	b10d      	cbz	r5, 8000778 <__udivmoddi4+0xb0>
 8000774:	e9c5 0100 	strd	r0, r1, [r5]
 8000778:	2100      	movs	r1, #0
 800077a:	4608      	mov	r0, r1
 800077c:	e7f5      	b.n	800076a <__udivmoddi4+0xa2>
 800077e:	fab3 f183 	clz	r1, r3
 8000782:	2900      	cmp	r1, #0
 8000784:	d146      	bne.n	8000814 <__udivmoddi4+0x14c>
 8000786:	4573      	cmp	r3, lr
 8000788:	d302      	bcc.n	8000790 <__udivmoddi4+0xc8>
 800078a:	4282      	cmp	r2, r0
 800078c:	f200 8105 	bhi.w	800099a <__udivmoddi4+0x2d2>
 8000790:	1a84      	subs	r4, r0, r2
 8000792:	eb6e 0203 	sbc.w	r2, lr, r3
 8000796:	2001      	movs	r0, #1
 8000798:	4690      	mov	r8, r2
 800079a:	2d00      	cmp	r5, #0
 800079c:	d0e5      	beq.n	800076a <__udivmoddi4+0xa2>
 800079e:	e9c5 4800 	strd	r4, r8, [r5]
 80007a2:	e7e2      	b.n	800076a <__udivmoddi4+0xa2>
 80007a4:	2a00      	cmp	r2, #0
 80007a6:	f000 8090 	beq.w	80008ca <__udivmoddi4+0x202>
 80007aa:	fab2 f682 	clz	r6, r2
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	f040 80a4 	bne.w	80008fc <__udivmoddi4+0x234>
 80007b4:	1a8a      	subs	r2, r1, r2
 80007b6:	0c03      	lsrs	r3, r0, #16
 80007b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007bc:	b280      	uxth	r0, r0
 80007be:	b2bc      	uxth	r4, r7
 80007c0:	2101      	movs	r1, #1
 80007c2:	fbb2 fcfe 	udiv	ip, r2, lr
 80007c6:	fb0e 221c 	mls	r2, lr, ip, r2
 80007ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007ce:	fb04 f20c 	mul.w	r2, r4, ip
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d907      	bls.n	80007e6 <__udivmoddi4+0x11e>
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80007dc:	d202      	bcs.n	80007e4 <__udivmoddi4+0x11c>
 80007de:	429a      	cmp	r2, r3
 80007e0:	f200 80e0 	bhi.w	80009a4 <__udivmoddi4+0x2dc>
 80007e4:	46c4      	mov	ip, r8
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	fbb3 f2fe 	udiv	r2, r3, lr
 80007ec:	fb0e 3312 	mls	r3, lr, r2, r3
 80007f0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80007f4:	fb02 f404 	mul.w	r4, r2, r4
 80007f8:	429c      	cmp	r4, r3
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0x144>
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0x142>
 8000804:	429c      	cmp	r4, r3
 8000806:	f200 80ca 	bhi.w	800099e <__udivmoddi4+0x2d6>
 800080a:	4602      	mov	r2, r0
 800080c:	1b1b      	subs	r3, r3, r4
 800080e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000812:	e7a5      	b.n	8000760 <__udivmoddi4+0x98>
 8000814:	f1c1 0620 	rsb	r6, r1, #32
 8000818:	408b      	lsls	r3, r1
 800081a:	fa22 f706 	lsr.w	r7, r2, r6
 800081e:	431f      	orrs	r7, r3
 8000820:	fa0e f401 	lsl.w	r4, lr, r1
 8000824:	fa20 f306 	lsr.w	r3, r0, r6
 8000828:	fa2e fe06 	lsr.w	lr, lr, r6
 800082c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000830:	4323      	orrs	r3, r4
 8000832:	fa00 f801 	lsl.w	r8, r0, r1
 8000836:	fa1f fc87 	uxth.w	ip, r7
 800083a:	fbbe f0f9 	udiv	r0, lr, r9
 800083e:	0c1c      	lsrs	r4, r3, #16
 8000840:	fb09 ee10 	mls	lr, r9, r0, lr
 8000844:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000848:	fb00 fe0c 	mul.w	lr, r0, ip
 800084c:	45a6      	cmp	lr, r4
 800084e:	fa02 f201 	lsl.w	r2, r2, r1
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x1a0>
 8000854:	193c      	adds	r4, r7, r4
 8000856:	f100 3aff 	add.w	sl, r0, #4294967295
 800085a:	f080 809c 	bcs.w	8000996 <__udivmoddi4+0x2ce>
 800085e:	45a6      	cmp	lr, r4
 8000860:	f240 8099 	bls.w	8000996 <__udivmoddi4+0x2ce>
 8000864:	3802      	subs	r0, #2
 8000866:	443c      	add	r4, r7
 8000868:	eba4 040e 	sub.w	r4, r4, lr
 800086c:	fa1f fe83 	uxth.w	lr, r3
 8000870:	fbb4 f3f9 	udiv	r3, r4, r9
 8000874:	fb09 4413 	mls	r4, r9, r3, r4
 8000878:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800087c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000880:	45a4      	cmp	ip, r4
 8000882:	d908      	bls.n	8000896 <__udivmoddi4+0x1ce>
 8000884:	193c      	adds	r4, r7, r4
 8000886:	f103 3eff 	add.w	lr, r3, #4294967295
 800088a:	f080 8082 	bcs.w	8000992 <__udivmoddi4+0x2ca>
 800088e:	45a4      	cmp	ip, r4
 8000890:	d97f      	bls.n	8000992 <__udivmoddi4+0x2ca>
 8000892:	3b02      	subs	r3, #2
 8000894:	443c      	add	r4, r7
 8000896:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800089a:	eba4 040c 	sub.w	r4, r4, ip
 800089e:	fba0 ec02 	umull	lr, ip, r0, r2
 80008a2:	4564      	cmp	r4, ip
 80008a4:	4673      	mov	r3, lr
 80008a6:	46e1      	mov	r9, ip
 80008a8:	d362      	bcc.n	8000970 <__udivmoddi4+0x2a8>
 80008aa:	d05f      	beq.n	800096c <__udivmoddi4+0x2a4>
 80008ac:	b15d      	cbz	r5, 80008c6 <__udivmoddi4+0x1fe>
 80008ae:	ebb8 0203 	subs.w	r2, r8, r3
 80008b2:	eb64 0409 	sbc.w	r4, r4, r9
 80008b6:	fa04 f606 	lsl.w	r6, r4, r6
 80008ba:	fa22 f301 	lsr.w	r3, r2, r1
 80008be:	431e      	orrs	r6, r3
 80008c0:	40cc      	lsrs	r4, r1
 80008c2:	e9c5 6400 	strd	r6, r4, [r5]
 80008c6:	2100      	movs	r1, #0
 80008c8:	e74f      	b.n	800076a <__udivmoddi4+0xa2>
 80008ca:	fbb1 fcf2 	udiv	ip, r1, r2
 80008ce:	0c01      	lsrs	r1, r0, #16
 80008d0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80008d4:	b280      	uxth	r0, r0
 80008d6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80008da:	463b      	mov	r3, r7
 80008dc:	4638      	mov	r0, r7
 80008de:	463c      	mov	r4, r7
 80008e0:	46b8      	mov	r8, r7
 80008e2:	46be      	mov	lr, r7
 80008e4:	2620      	movs	r6, #32
 80008e6:	fbb1 f1f7 	udiv	r1, r1, r7
 80008ea:	eba2 0208 	sub.w	r2, r2, r8
 80008ee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80008f2:	e766      	b.n	80007c2 <__udivmoddi4+0xfa>
 80008f4:	4601      	mov	r1, r0
 80008f6:	e718      	b.n	800072a <__udivmoddi4+0x62>
 80008f8:	4610      	mov	r0, r2
 80008fa:	e72c      	b.n	8000756 <__udivmoddi4+0x8e>
 80008fc:	f1c6 0220 	rsb	r2, r6, #32
 8000900:	fa2e f302 	lsr.w	r3, lr, r2
 8000904:	40b7      	lsls	r7, r6
 8000906:	40b1      	lsls	r1, r6
 8000908:	fa20 f202 	lsr.w	r2, r0, r2
 800090c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000910:	430a      	orrs	r2, r1
 8000912:	fbb3 f8fe 	udiv	r8, r3, lr
 8000916:	b2bc      	uxth	r4, r7
 8000918:	fb0e 3318 	mls	r3, lr, r8, r3
 800091c:	0c11      	lsrs	r1, r2, #16
 800091e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000922:	fb08 f904 	mul.w	r9, r8, r4
 8000926:	40b0      	lsls	r0, r6
 8000928:	4589      	cmp	r9, r1
 800092a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800092e:	b280      	uxth	r0, r0
 8000930:	d93e      	bls.n	80009b0 <__udivmoddi4+0x2e8>
 8000932:	1879      	adds	r1, r7, r1
 8000934:	f108 3cff 	add.w	ip, r8, #4294967295
 8000938:	d201      	bcs.n	800093e <__udivmoddi4+0x276>
 800093a:	4589      	cmp	r9, r1
 800093c:	d81f      	bhi.n	800097e <__udivmoddi4+0x2b6>
 800093e:	eba1 0109 	sub.w	r1, r1, r9
 8000942:	fbb1 f9fe 	udiv	r9, r1, lr
 8000946:	fb09 f804 	mul.w	r8, r9, r4
 800094a:	fb0e 1119 	mls	r1, lr, r9, r1
 800094e:	b292      	uxth	r2, r2
 8000950:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000954:	4542      	cmp	r2, r8
 8000956:	d229      	bcs.n	80009ac <__udivmoddi4+0x2e4>
 8000958:	18ba      	adds	r2, r7, r2
 800095a:	f109 31ff 	add.w	r1, r9, #4294967295
 800095e:	d2c4      	bcs.n	80008ea <__udivmoddi4+0x222>
 8000960:	4542      	cmp	r2, r8
 8000962:	d2c2      	bcs.n	80008ea <__udivmoddi4+0x222>
 8000964:	f1a9 0102 	sub.w	r1, r9, #2
 8000968:	443a      	add	r2, r7
 800096a:	e7be      	b.n	80008ea <__udivmoddi4+0x222>
 800096c:	45f0      	cmp	r8, lr
 800096e:	d29d      	bcs.n	80008ac <__udivmoddi4+0x1e4>
 8000970:	ebbe 0302 	subs.w	r3, lr, r2
 8000974:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000978:	3801      	subs	r0, #1
 800097a:	46e1      	mov	r9, ip
 800097c:	e796      	b.n	80008ac <__udivmoddi4+0x1e4>
 800097e:	eba7 0909 	sub.w	r9, r7, r9
 8000982:	4449      	add	r1, r9
 8000984:	f1a8 0c02 	sub.w	ip, r8, #2
 8000988:	fbb1 f9fe 	udiv	r9, r1, lr
 800098c:	fb09 f804 	mul.w	r8, r9, r4
 8000990:	e7db      	b.n	800094a <__udivmoddi4+0x282>
 8000992:	4673      	mov	r3, lr
 8000994:	e77f      	b.n	8000896 <__udivmoddi4+0x1ce>
 8000996:	4650      	mov	r0, sl
 8000998:	e766      	b.n	8000868 <__udivmoddi4+0x1a0>
 800099a:	4608      	mov	r0, r1
 800099c:	e6fd      	b.n	800079a <__udivmoddi4+0xd2>
 800099e:	443b      	add	r3, r7
 80009a0:	3a02      	subs	r2, #2
 80009a2:	e733      	b.n	800080c <__udivmoddi4+0x144>
 80009a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009a8:	443b      	add	r3, r7
 80009aa:	e71c      	b.n	80007e6 <__udivmoddi4+0x11e>
 80009ac:	4649      	mov	r1, r9
 80009ae:	e79c      	b.n	80008ea <__udivmoddi4+0x222>
 80009b0:	eba1 0109 	sub.w	r1, r1, r9
 80009b4:	46c4      	mov	ip, r8
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fb09 f804 	mul.w	r8, r9, r4
 80009be:	e7c4      	b.n	800094a <__udivmoddi4+0x282>

080009c0 <__aeabi_idiv0>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80009ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80009d2:	f014 f971 	bl	8014cb8 <cosf>
 80009d6:	eef0 7a40 	vmov.f32	s15, s0
 80009da:	eeb0 0a67 	vmov.f32	s0, s15
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80009ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80009f2:	f014 f89d 	bl	8014b30 <sinf>
 80009f6:	eef0 7a40 	vmov.f32	s15, s0
 80009fa:	eeb0 0a67 	vmov.f32	s0, s15
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_ZNK8DC_motor9get_speedEv>:
class DC_motor{
public:
	void setup();
	void PI_run();
	void update_speed(int sign);
	float get_speed() const { return speed; } 
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eeb0 0a67 	vmov.f32	s0, s15
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>:
	void setspeed(float target_speed);
	void set_motor_parameter(float reduction_ratio,int resolution) ;


	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim,
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6178      	str	r0, [r7, #20]
 8000a2c:	6139      	str	r1, [r7, #16]
 8000a2e:	60fa      	str	r2, [r7, #12]
 8000a30:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a34:	edc7 0a00 	vstr	s1, [r7]
 8000a38:	817b      	strh	r3, [r7, #10]
			uint32_t _PWM_TIM_CHANNEL,float _kp,float _ki,bool dirpin) {
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f04f 0200 	mov.w	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f04f 0200 	mov.w	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f04f 0200 	mov.w	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	f04f 0200 	mov.w	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f04f 0200 	mov.w	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	f04f 0200 	mov.w	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f04f 0200 	mov.w	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	4a1e      	ldr	r2, [pc, #120]	@ (8000b00 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb+0xdc>)
 8000a86:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f240 321f 	movw	r2, #799	@ 0x31f
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	641a      	str	r2, [r3, #64]	@ 0x40
		enc_htim = _enc_htim;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	645a      	str	r2, [r3, #68]	@ 0x44
		dirPort = _dirPort;
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	649a      	str	r2, [r3, #72]	@ 0x48
		dirPin = _dirPin;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	897a      	ldrh	r2, [r7, #10]
 8000acc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		PWM_htim = _PWM_htim;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	6a3a      	ldr	r2, [r7, #32]
 8000ad4:	651a      	str	r2, [r3, #80]	@ 0x50
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ada:	655a      	str	r2, [r3, #84]	@ 0x54
		kp = _kp;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
		ki = _ki;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
		dir_pin = dirpin;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000aee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	};
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	4618      	mov	r0, r3
 8000af6:	371c      	adds	r7, #28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	3a83126f 	.word	0x3a83126f

08000b04 <_Z13chassis_setupv>:
DC_motor wheel_FR ={&htim2,GPIOG,GPIO_PIN_14,&htim5,TIM_CHANNEL_2,4,20,1};
DC_motor wheel_BL ={&htim8,GPIOG,GPIO_PIN_15,&htim5,TIM_CHANNEL_3,4.0,20,1};
DC_motor wheel_BR ={&htim4,GPIOD,GPIO_PIN_15,&htim5,TIM_CHANNEL_4,4,20,1};


void chassis_setup(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
    wheel_FR.setup();
 8000b08:	4806      	ldr	r0, [pc, #24]	@ (8000b24 <_Z13chassis_setupv+0x20>)
 8000b0a:	f00f fb56 	bl	80101ba <_ZN8DC_motor5setupEv>
    wheel_FL.setup();
 8000b0e:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <_Z13chassis_setupv+0x24>)
 8000b10:	f00f fb53 	bl	80101ba <_ZN8DC_motor5setupEv>
    wheel_BR.setup();
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <_Z13chassis_setupv+0x28>)
 8000b16:	f00f fb50 	bl	80101ba <_ZN8DC_motor5setupEv>
    wheel_BL.setup();
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <_Z13chassis_setupv+0x2c>)
 8000b1c:	f00f fb4d 	bl	80101ba <_ZN8DC_motor5setupEv>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2400010c 	.word	0x2400010c
 8000b28:	240000b4 	.word	0x240000b4
 8000b2c:	240001bc 	.word	0x240001bc
 8000b30:	24000164 	.word	0x24000164

08000b34 <_Z18mecan_IK_transformfff>:


void mecan_IK_transform(float _v_x, float _v_y, float _v_w) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b090      	sub	sp, #64	@ 0x40
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000b42:	ed87 1a01 	vstr	s2, [r7, #4]
    // Convert wheel_diameter to radius
    float r = wheel_diameter / 2.0f / 1.0f; // wheel radius in centimeters
 8000b46:	4b4f      	ldr	r3, [pc, #316]	@ (8000c84 <_Z18mecan_IK_transformfff+0x150>)
 8000b48:	ed93 7a00 	vldr	s14, [r3]
 8000b4c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b54:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Chassis geometry factor
    float L = chassis_length / 1.0f;
 8000b58:	4b4b      	ldr	r3, [pc, #300]	@ (8000c88 <_Z18mecan_IK_transformfff+0x154>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    float W = chassis_width / 1.0f;
 8000b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c8c <_Z18mecan_IK_transformfff+0x158>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
    float a = L + W;
 8000b64:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000b68:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b70:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Calculate wheel speeds in cm/s
    float v1 = -_v_x + _v_y + _v_w * a / 2.0f; // Front Right
 8000b74:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b80:	edd7 6a01 	vldr	s13, [r7, #4]
 8000b84:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000b88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000b8c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000b90:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b98:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float v2 =  _v_x + _v_y - _v_w * a / 2.0f; // Front Left
 8000b9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ba0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ba8:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bac:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000bb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bb4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000bb8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bc0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float v3 =  _v_x + _v_y + _v_w * a / 2.0f; // Back Right
 8000bc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bd0:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bd4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000bd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bdc:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000be0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float v4 = -_v_x + _v_y - _v_w * a / 2.0f; // Back Left
 8000bec:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bf8:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bfc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c04:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000c08:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c10:	edc7 7a08 	vstr	s15, [r7, #32]

    // Convert linear speed (cm/s) to angular speed (rad/s)
    float w1 = v1 / r;
 8000c14:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000c18:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c20:	edc7 7a07 	vstr	s15, [r7, #28]
    float w2 = v2 / r;
 8000c24:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000c28:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c30:	edc7 7a06 	vstr	s15, [r7, #24]
    float w3 = v3 / r;
 8000c34:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000c38:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c40:	edc7 7a05 	vstr	s15, [r7, #20]
    float w4 = v4 / r;
 8000c44:	edd7 6a08 	vldr	s13, [r7, #32]
 8000c48:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c50:	edc7 7a04 	vstr	s15, [r7, #16]

    wheel_FR.setspeed(w1);
 8000c54:	ed97 0a07 	vldr	s0, [r7, #28]
 8000c58:	480d      	ldr	r0, [pc, #52]	@ (8000c90 <_Z18mecan_IK_transformfff+0x15c>)
 8000c5a:	f00f fa67 	bl	801012c <_ZN8DC_motor8setspeedEf>
    wheel_FL.setspeed(w2);
 8000c5e:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c62:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <_Z18mecan_IK_transformfff+0x160>)
 8000c64:	f00f fa62 	bl	801012c <_ZN8DC_motor8setspeedEf>
    wheel_BR.setspeed(w3);
 8000c68:	ed97 0a05 	vldr	s0, [r7, #20]
 8000c6c:	480a      	ldr	r0, [pc, #40]	@ (8000c98 <_Z18mecan_IK_transformfff+0x164>)
 8000c6e:	f00f fa5d 	bl	801012c <_ZN8DC_motor8setspeedEf>
    wheel_BL.setspeed(w4);
 8000c72:	ed97 0a04 	vldr	s0, [r7, #16]
 8000c76:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <_Z18mecan_IK_transformfff+0x168>)
 8000c78:	f00f fa58 	bl	801012c <_ZN8DC_motor8setspeedEf>
}
 8000c7c:	bf00      	nop
 8000c7e:	3740      	adds	r7, #64	@ 0x40
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	24000008 	.word	0x24000008
 8000c88:	24000004 	.word	0x24000004
 8000c8c:	24000000 	.word	0x24000000
 8000c90:	2400010c 	.word	0x2400010c
 8000c94:	240000b4 	.word	0x240000b4
 8000c98:	240001bc 	.word	0x240001bc
 8000c9c:	24000164 	.word	0x24000164

08000ca0 <_Z18mecan_FK_transformv>:

void mecan_FK_transform() {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
    float v1 = wheel_FR.get_speed()*wheel_diameter*pi;
 8000ca6:	484c      	ldr	r0, [pc, #304]	@ (8000dd8 <_Z18mecan_FK_transformv+0x138>)
 8000ca8:	f7ff feac 	bl	8000a04 <_ZNK8DC_motor9get_speedEv>
 8000cac:	eeb0 7a40 	vmov.f32	s14, s0
 8000cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8000ddc <_Z18mecan_FK_transformv+0x13c>)
 8000cb2:	edd3 7a00 	vldr	s15, [r3]
 8000cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cba:	4b49      	ldr	r3, [pc, #292]	@ (8000de0 <_Z18mecan_FK_transformv+0x140>)
 8000cbc:	edd3 7a00 	vldr	s15, [r3]
 8000cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc4:	edc7 7a03 	vstr	s15, [r7, #12]
    float v2 = wheel_FL.get_speed()*wheel_diameter*pi;
 8000cc8:	4846      	ldr	r0, [pc, #280]	@ (8000de4 <_Z18mecan_FK_transformv+0x144>)
 8000cca:	f7ff fe9b 	bl	8000a04 <_ZNK8DC_motor9get_speedEv>
 8000cce:	eeb0 7a40 	vmov.f32	s14, s0
 8000cd2:	4b42      	ldr	r3, [pc, #264]	@ (8000ddc <_Z18mecan_FK_transformv+0x13c>)
 8000cd4:	edd3 7a00 	vldr	s15, [r3]
 8000cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cdc:	4b40      	ldr	r3, [pc, #256]	@ (8000de0 <_Z18mecan_FK_transformv+0x140>)
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce6:	edc7 7a02 	vstr	s15, [r7, #8]
    float v3 = wheel_BR.get_speed()*wheel_diameter*pi;
 8000cea:	483f      	ldr	r0, [pc, #252]	@ (8000de8 <_Z18mecan_FK_transformv+0x148>)
 8000cec:	f7ff fe8a 	bl	8000a04 <_ZNK8DC_motor9get_speedEv>
 8000cf0:	eeb0 7a40 	vmov.f32	s14, s0
 8000cf4:	4b39      	ldr	r3, [pc, #228]	@ (8000ddc <_Z18mecan_FK_transformv+0x13c>)
 8000cf6:	edd3 7a00 	vldr	s15, [r3]
 8000cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cfe:	4b38      	ldr	r3, [pc, #224]	@ (8000de0 <_Z18mecan_FK_transformv+0x140>)
 8000d00:	edd3 7a00 	vldr	s15, [r3]
 8000d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d08:	edc7 7a01 	vstr	s15, [r7, #4]
    float v4 = wheel_BL.get_speed()*wheel_diameter*pi;
 8000d0c:	4837      	ldr	r0, [pc, #220]	@ (8000dec <_Z18mecan_FK_transformv+0x14c>)
 8000d0e:	f7ff fe79 	bl	8000a04 <_ZNK8DC_motor9get_speedEv>
 8000d12:	eeb0 7a40 	vmov.f32	s14, s0
 8000d16:	4b31      	ldr	r3, [pc, #196]	@ (8000ddc <_Z18mecan_FK_transformv+0x13c>)
 8000d18:	edd3 7a00 	vldr	s15, [r3]
 8000d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d20:	4b2f      	ldr	r3, [pc, #188]	@ (8000de0 <_Z18mecan_FK_transformv+0x140>)
 8000d22:	edd3 7a00 	vldr	s15, [r3]
 8000d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d2a:	edc7 7a00 	vstr	s15, [r7]
    v_x = -(v1 - v2 - v3 + v4) / 4.0f;
 8000d2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d32:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d42:	edd7 7a00 	vldr	s15, [r7]
 8000d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d4a:	eeb1 7a67 	vneg.f32	s14, s15
 8000d4e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d56:	4b26      	ldr	r3, [pc, #152]	@ (8000df0 <_Z18mecan_FK_transformv+0x150>)
 8000d58:	edc3 7a00 	vstr	s15, [r3]
    v_y = (v1 + v2 + v3 + v4) / 4.0f;
 8000d5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d60:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d68:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d70:	edd7 7a00 	vldr	s15, [r7]
 8000d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d78:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000d7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d80:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <_Z18mecan_FK_transformv+0x154>)
 8000d82:	edc3 7a00 	vstr	s15, [r3]
    v_w = -(-v1 + v2 - v3 + v4) / (4.0f * (chassis_width + chassis_length) / 2.0f);
 8000d86:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d9a:	edd7 7a00 	vldr	s15, [r7]
 8000d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da2:	eef1 6a67 	vneg.f32	s13, s15
 8000da6:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <_Z18mecan_FK_transformv+0x158>)
 8000da8:	ed93 7a00 	vldr	s14, [r3]
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <_Z18mecan_FK_transformv+0x15c>)
 8000dae:	edd3 7a00 	vldr	s15, [r3]
 8000db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dbe:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000dc2:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8000dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <_Z18mecan_FK_transformv+0x160>)
 8000dcc:	edc3 7a00 	vstr	s15, [r3]
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2400010c 	.word	0x2400010c
 8000ddc:	24000008 	.word	0x24000008
 8000de0:	24000010 	.word	0x24000010
 8000de4:	240000b4 	.word	0x240000b4
 8000de8:	240001bc 	.word	0x240001bc
 8000dec:	24000164 	.word	0x24000164
 8000df0:	2400009c 	.word	0x2400009c
 8000df4:	240000a0 	.word	0x240000a0
 8000df8:	24000000 	.word	0x24000000
 8000dfc:	24000004 	.word	0x24000004
 8000e00:	240000a4 	.word	0x240000a4
 8000e04:	00000000 	.word	0x00000000

08000e08 <_Z12localizationv>:


void localization() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
    // 方向角轉換用
    float cos_t = cos(theta);
 8000e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f48 <_Z12localizationv+0x140>)
 8000e10:	edd3 7a00 	vldr	s15, [r3]
 8000e14:	eeb0 0a67 	vmov.f32	s0, s15
 8000e18:	f7ff fdd4 	bl	80009c4 <_ZSt3cosf>
 8000e1c:	ed87 0a01 	vstr	s0, [r7, #4]
    float sin_t = sin(theta);
 8000e20:	4b49      	ldr	r3, [pc, #292]	@ (8000f48 <_Z12localizationv+0x140>)
 8000e22:	edd3 7a00 	vldr	s15, [r3]
 8000e26:	eeb0 0a67 	vmov.f32	s0, s15
 8000e2a:	f7ff fddb 	bl	80009e4 <_ZSt3sinf>
 8000e2e:	ed87 0a00 	vstr	s0, [r7]

    // 機體座標轉換成世界座標再積分
    map_x += (v_x * cos_t - v_y * sin_t) * span;
 8000e32:	4b46      	ldr	r3, [pc, #280]	@ (8000f4c <_Z12localizationv+0x144>)
 8000e34:	ed93 7a00 	vldr	s14, [r3]
 8000e38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e40:	4b43      	ldr	r3, [pc, #268]	@ (8000f50 <_Z12localizationv+0x148>)
 8000e42:	edd3 6a00 	vldr	s13, [r3]
 8000e46:	edd7 7a00 	vldr	s15, [r7]
 8000e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e52:	4b40      	ldr	r3, [pc, #256]	@ (8000f54 <_Z12localizationv+0x14c>)
 8000e54:	edd3 7a00 	vldr	s15, [r3]
 8000e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f58 <_Z12localizationv+0x150>)
 8000e5e:	edd3 7a00 	vldr	s15, [r3]
 8000e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e66:	4b3c      	ldr	r3, [pc, #240]	@ (8000f58 <_Z12localizationv+0x150>)
 8000e68:	edc3 7a00 	vstr	s15, [r3]
    map_y += (v_x * sin_t + v_y * cos_t) * span;
 8000e6c:	4b37      	ldr	r3, [pc, #220]	@ (8000f4c <_Z12localizationv+0x144>)
 8000e6e:	ed93 7a00 	vldr	s14, [r3]
 8000e72:	edd7 7a00 	vldr	s15, [r7]
 8000e76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e7a:	4b35      	ldr	r3, [pc, #212]	@ (8000f50 <_Z12localizationv+0x148>)
 8000e7c:	edd3 6a00 	vldr	s13, [r3]
 8000e80:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e8c:	4b31      	ldr	r3, [pc, #196]	@ (8000f54 <_Z12localizationv+0x14c>)
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e96:	4b31      	ldr	r3, [pc, #196]	@ (8000f5c <_Z12localizationv+0x154>)
 8000e98:	edd3 7a00 	vldr	s15, [r3]
 8000e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f5c <_Z12localizationv+0x154>)
 8000ea2:	edc3 7a00 	vstr	s15, [r3]
    theta += v_w * span;
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f60 <_Z12localizationv+0x158>)
 8000ea8:	ed93 7a00 	vldr	s14, [r3]
 8000eac:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <_Z12localizationv+0x14c>)
 8000eae:	edd3 7a00 	vldr	s15, [r3]
 8000eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb6:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <_Z12localizationv+0x140>)
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec0:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <_Z12localizationv+0x140>)
 8000ec2:	edc3 7a00 	vstr	s15, [r3]

    // 可選：角度標準化在 -π ~ π，避免θ無限增長
    if (theta > M_PI) {
 8000ec6:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <_Z12localizationv+0x140>)
 8000ec8:	edd3 7a00 	vldr	s15, [r3]
 8000ecc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ed0:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8000f38 <_Z12localizationv+0x130>
 8000ed4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	dd0d      	ble.n	8000efa <_Z12localizationv+0xf2>
        theta -= 2 * pi;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <_Z12localizationv+0x140>)
 8000ee0:	ed93 7a00 	vldr	s14, [r3]
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <_Z12localizationv+0x15c>)
 8000ee6:	edd3 7a00 	vldr	s15, [r3]
 8000eea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <_Z12localizationv+0x140>)
 8000ef4:	edc3 7a00 	vstr	s15, [r3]
    } else if (theta < -M_PI) {
        theta += 2 * pi;
    }
}
 8000ef8:	e019      	b.n	8000f2e <_Z12localizationv+0x126>
    } else if (theta < -M_PI) {
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <_Z12localizationv+0x140>)
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f04:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000f40 <_Z12localizationv+0x138>
 8000f08:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f10:	d400      	bmi.n	8000f14 <_Z12localizationv+0x10c>
}
 8000f12:	e00c      	b.n	8000f2e <_Z12localizationv+0x126>
        theta += 2 * pi;
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <_Z12localizationv+0x15c>)
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <_Z12localizationv+0x140>)
 8000f20:	edd3 7a00 	vldr	s15, [r3]
 8000f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <_Z12localizationv+0x140>)
 8000f2a:	edc3 7a00 	vstr	s15, [r3]
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	54442d18 	.word	0x54442d18
 8000f3c:	400921fb 	.word	0x400921fb
 8000f40:	54442d18 	.word	0x54442d18
 8000f44:	c00921fb 	.word	0xc00921fb
 8000f48:	240000b0 	.word	0x240000b0
 8000f4c:	2400009c 	.word	0x2400009c
 8000f50:	240000a0 	.word	0x240000a0
 8000f54:	2400000c 	.word	0x2400000c
 8000f58:	240000a8 	.word	0x240000a8
 8000f5c:	240000ac 	.word	0x240000ac
 8000f60:	240000a4 	.word	0x240000a4
 8000f64:	24000010 	.word	0x24000010

08000f68 <_Z20chassis_update_speedfff>:

	cmd_v_x = (world_v_x * cos(theta)) + (world_v_y * sin(theta));
	cmd_v_y = (-world_v_x * sin(theta)) + (world_v_y * cos(theta));
}

void chassis_update_speed(float _v_x,float _v_y,float _v_w){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f72:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f76:	ed87 1a01 	vstr	s2, [r7, #4]
    mecan_IK_transform(_v_x,_v_y,_v_w);
 8000f7a:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f7e:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f82:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f86:	f7ff fdd5 	bl	8000b34 <_Z18mecan_IK_transformfff>
    wheel_FR.PI_run();
 8000f8a:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <_Z20chassis_update_speedfff+0x70>)
 8000f8c:	f00e ff98 	bl	800fec0 <_ZN8DC_motor6PI_runEv>
    wheel_FL.PI_run();
 8000f90:	4812      	ldr	r0, [pc, #72]	@ (8000fdc <_Z20chassis_update_speedfff+0x74>)
 8000f92:	f00e ff95 	bl	800fec0 <_ZN8DC_motor6PI_runEv>
    wheel_BR.PI_run();
 8000f96:	4812      	ldr	r0, [pc, #72]	@ (8000fe0 <_Z20chassis_update_speedfff+0x78>)
 8000f98:	f00e ff92 	bl	800fec0 <_ZN8DC_motor6PI_runEv>
    wheel_BL.PI_run();
 8000f9c:	4811      	ldr	r0, [pc, #68]	@ (8000fe4 <_Z20chassis_update_speedfff+0x7c>)
 8000f9e:	f00e ff8f 	bl	800fec0 <_ZN8DC_motor6PI_runEv>
    wheel_FR.update_speed(1);
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <_Z20chassis_update_speedfff+0x70>)
 8000fa6:	f00f f8d0 	bl	801014a <_ZN8DC_motor12update_speedEi>
    wheel_FL.update_speed(-1);
 8000faa:	f04f 31ff 	mov.w	r1, #4294967295
 8000fae:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <_Z20chassis_update_speedfff+0x74>)
 8000fb0:	f00f f8cb 	bl	801014a <_ZN8DC_motor12update_speedEi>
    wheel_BR.update_speed(1);
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	480a      	ldr	r0, [pc, #40]	@ (8000fe0 <_Z20chassis_update_speedfff+0x78>)
 8000fb8:	f00f f8c7 	bl	801014a <_ZN8DC_motor12update_speedEi>
    wheel_BL.update_speed(-1);
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	4808      	ldr	r0, [pc, #32]	@ (8000fe4 <_Z20chassis_update_speedfff+0x7c>)
 8000fc2:	f00f f8c2 	bl	801014a <_ZN8DC_motor12update_speedEi>
    mecan_FK_transform();
 8000fc6:	f7ff fe6b 	bl	8000ca0 <_Z18mecan_FK_transformv>
    localization();
 8000fca:	f7ff ff1d 	bl	8000e08 <_Z12localizationv>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2400010c 	.word	0x2400010c
 8000fdc:	240000b4 	.word	0x240000b4
 8000fe0:	240001bc 	.word	0x240001bc
 8000fe4:	24000164 	.word	0x24000164

08000fe8 <_Z41__static_initialization_and_destruction_0v>:
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af04      	add	r7, sp, #16
DC_motor wheel_FL ={&htim1,GPIOG,GPIO_PIN_11,&htim5,TIM_CHANNEL_1,4,20,0};
 8000fee:	2300      	movs	r3, #0
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	4b21      	ldr	r3, [pc, #132]	@ (800107c <_Z41__static_initialization_and_destruction_0v+0x94>)
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8000ffe:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001002:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001006:	4a1e      	ldr	r2, [pc, #120]	@ (8001080 <_Z41__static_initialization_and_destruction_0v+0x98>)
 8001008:	491e      	ldr	r1, [pc, #120]	@ (8001084 <_Z41__static_initialization_and_destruction_0v+0x9c>)
 800100a:	481f      	ldr	r0, [pc, #124]	@ (8001088 <_Z41__static_initialization_and_destruction_0v+0xa0>)
 800100c:	f7ff fd0a 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor wheel_FR ={&htim2,GPIOG,GPIO_PIN_14,&htim5,TIM_CHANNEL_2,4,20,1};
 8001010:	2301      	movs	r3, #1
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	2304      	movs	r3, #4
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <_Z41__static_initialization_and_destruction_0v+0x94>)
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8001020:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001024:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001028:	4a15      	ldr	r2, [pc, #84]	@ (8001080 <_Z41__static_initialization_and_destruction_0v+0x98>)
 800102a:	4918      	ldr	r1, [pc, #96]	@ (800108c <_Z41__static_initialization_and_destruction_0v+0xa4>)
 800102c:	4818      	ldr	r0, [pc, #96]	@ (8001090 <_Z41__static_initialization_and_destruction_0v+0xa8>)
 800102e:	f7ff fcf9 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor wheel_BL ={&htim8,GPIOG,GPIO_PIN_15,&htim5,TIM_CHANNEL_3,4.0,20,1};
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2308      	movs	r3, #8
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <_Z41__static_initialization_and_destruction_0v+0x94>)
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8001042:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800104a:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <_Z41__static_initialization_and_destruction_0v+0x98>)
 800104c:	4911      	ldr	r1, [pc, #68]	@ (8001094 <_Z41__static_initialization_and_destruction_0v+0xac>)
 800104e:	4812      	ldr	r0, [pc, #72]	@ (8001098 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 8001050:	f7ff fce8 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor wheel_BR ={&htim4,GPIOD,GPIO_PIN_15,&htim5,TIM_CHANNEL_4,4,20,1};
 8001054:	2301      	movs	r3, #1
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	230c      	movs	r3, #12
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	4b07      	ldr	r3, [pc, #28]	@ (800107c <_Z41__static_initialization_and_destruction_0v+0x94>)
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8001064:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001068:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800106c:	4a0b      	ldr	r2, [pc, #44]	@ (800109c <_Z41__static_initialization_and_destruction_0v+0xb4>)
 800106e:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <_Z41__static_initialization_and_destruction_0v+0xb8>)
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <_Z41__static_initialization_and_destruction_0v+0xbc>)
 8001072:	f7ff fcd7 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2400062c 	.word	0x2400062c
 8001080:	58021800 	.word	0x58021800
 8001084:	240004fc 	.word	0x240004fc
 8001088:	240000b4 	.word	0x240000b4
 800108c:	24000548 	.word	0x24000548
 8001090:	2400010c 	.word	0x2400010c
 8001094:	24000710 	.word	0x24000710
 8001098:	24000164 	.word	0x24000164
 800109c:	58020c00 	.word	0x58020c00
 80010a0:	240005e0 	.word	0x240005e0
 80010a4:	240001bc 	.word	0x240001bc

080010a8 <_GLOBAL__sub_I_chassis_width>:
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	f7ff ff9c 	bl	8000fe8 <_Z41__static_initialization_and_destruction_0v>
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	0a5a      	lsrs	r2, r3, #9
 80010c4:	490f      	ldr	r1, [pc, #60]	@ (8001104 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80010c6:	fba1 1202 	umull	r1, r2, r1, r2
 80010ca:	09d2      	lsrs	r2, r2, #7
 80010cc:	490e      	ldr	r1, [pc, #56]	@ (8001108 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80010ce:	fb01 f202 	mul.w	r2, r1, r2
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	0a5b      	lsrs	r3, r3, #9
 80010dc:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	09db      	lsrs	r3, r3, #7
 80010e4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	441a      	add	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	601a      	str	r2, [r3, #0]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	00044b83 	.word	0x00044b83
 8001108:	3b9aca00 	.word	0x3b9aca00

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001110:	f002 fcba 	bl	8003a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001114:	f000 f836 	bl	8001184 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001118:	f000 f8a2 	bl	8001260 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f001 f9c6 	bl	80024ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001120:	f001 f97c 	bl	800241c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001124:	f001 f8e2 	bl	80022ec <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001128:	f000 fc8c 	bl	8001a44 <MX_TIM4_Init>
  MX_TIM5_Init();
 800112c:	f000 fce0 	bl	8001af0 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001130:	f000 fd5a 	bl	8001be8 <MX_TIM6_Init>
  MX_TIM15_Init();
 8001134:	f000 fea8 	bl	8001e88 <MX_TIM15_Init>
  MX_TIM1_Init();
 8001138:	f000 fb80 	bl	800183c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800113c:	f001 f922 	bl	8002384 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001140:	f000 fbd6 	bl	80018f0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001144:	f000 fafa 	bl	800173c <MX_I2C1_Init>
  MX_ADC3_Init();
 8001148:	f000 f9d0 	bl	80014ec <MX_ADC3_Init>
  MX_TIM7_Init();
 800114c:	f000 fd82 	bl	8001c54 <MX_TIM7_Init>
  MX_I2C2_Init();
 8001150:	f000 fb34 	bl	80017bc <MX_I2C2_Init>
  MX_TIM12_Init();
 8001154:	f000 fe0e 	bl	8001d74 <MX_TIM12_Init>
  MX_TIM23_Init();
 8001158:	f001 f81c 	bl	8002194 <MX_TIM23_Init>
  MX_TIM24_Init();
 800115c:	f001 f870 	bl	8002240 <MX_TIM24_Init>
  MX_TIM8_Init();
 8001160:	f000 fdae 	bl	8001cc0 <MX_TIM8_Init>
  MX_TIM13_Init();
 8001164:	f000 fe6c 	bl	8001e40 <MX_TIM13_Init>
  MX_ADC1_Init();
 8001168:	f000 f8aa 	bl	80012c0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800116c:	f000 fc14 	bl	8001998 <MX_TIM3_Init>
  MX_TIM16_Init();
 8001170:	f000 ff1c 	bl	8001fac <MX_TIM16_Init>
  MX_TIM17_Init();
 8001174:	f000 ff94 	bl	80020a0 <MX_TIM17_Init>
  MX_ADC2_Init();
 8001178:	f000 f946 	bl	8001408 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //hadc1.Init.DMAContinuousRequests = ENABLE;
  main_function();
 800117c:	f001 face 	bl	800271c <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <main+0x74>

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b09c      	sub	sp, #112	@ 0x70
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118e:	224c      	movs	r2, #76	@ 0x4c
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f013 fe84 	bl	8014ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2220      	movs	r2, #32
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f013 fe7e 	bl	8014ea0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011a4:	2002      	movs	r0, #2
 80011a6:	f007 ffd1 	bl	800914c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <SystemClock_Config+0xd8>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a2a      	ldr	r2, [pc, #168]	@ (800125c <SystemClock_Config+0xd8>)
 80011b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b28      	ldr	r3, [pc, #160]	@ (800125c <SystemClock_Config+0xd8>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011c6:	bf00      	nop
 80011c8:	4b24      	ldr	r3, [pc, #144]	@ (800125c <SystemClock_Config+0xd8>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011d4:	d1f8      	bne.n	80011c8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d6:	2302      	movs	r3, #2
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011da:	2301      	movs	r3, #1
 80011dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80011de:	2340      	movs	r3, #64	@ 0x40
 80011e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e6:	2300      	movs	r3, #0
 80011e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011ea:	2304      	movs	r3, #4
 80011ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80011ee:	2320      	movs	r3, #32
 80011f0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011fe:	230c      	movs	r3, #12
 8001200:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001202:	2300      	movs	r3, #0
 8001204:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120e:	4618      	mov	r0, r3
 8001210:	f007 ffd6 	bl	80091c0 <HAL_RCC_OscConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800121a:	f001 fa61 	bl	80026e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	233f      	movs	r3, #63	@ 0x3f
 8001220:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	2303      	movs	r3, #3
 8001224:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800122a:	2308      	movs	r3, #8
 800122c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800122e:	2340      	movs	r3, #64	@ 0x40
 8001230:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001232:	2340      	movs	r3, #64	@ 0x40
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800123a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800123c:	2340      	movs	r3, #64	@ 0x40
 800123e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2103      	movs	r1, #3
 8001244:	4618      	mov	r0, r3
 8001246:	f008 fb95 	bl	8009974 <HAL_RCC_ClockConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001250:	f001 fa46 	bl	80026e0 <Error_Handler>
  }
}
 8001254:	bf00      	nop
 8001256:	3770      	adds	r7, #112	@ 0x70
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	58024800 	.word	0x58024800

08001260 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0ae      	sub	sp, #184	@ 0xb8
 8001264:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	22b8      	movs	r2, #184	@ 0xb8
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f013 fe17 	bl	8014ea0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001272:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 800127e:	2320      	movs	r3, #32
 8001280:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8001282:	2381      	movs	r3, #129	@ 0x81
 8001284:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001286:	2302      	movs	r3, #2
 8001288:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800128a:	2302      	movs	r3, #2
 800128c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001292:	2340      	movs	r3, #64	@ 0x40
 8001294:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4618      	mov	r0, r3
 80012a8:	f008 fef0 	bl	800a08c <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80012b2:	f001 fa15 	bl	80026e0 <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	37b8      	adds	r7, #184	@ 0xb8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	@ 0x30
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	2224      	movs	r2, #36	@ 0x24
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f013 fde1 	bl	8014ea0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012de:	4b45      	ldr	r3, [pc, #276]	@ (80013f4 <MX_ADC1_Init+0x134>)
 80012e0:	4a45      	ldr	r2, [pc, #276]	@ (80013f8 <MX_ADC1_Init+0x138>)
 80012e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80012e4:	4b43      	ldr	r3, [pc, #268]	@ (80013f4 <MX_ADC1_Init+0x134>)
 80012e6:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80012ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ec:	4b41      	ldr	r3, [pc, #260]	@ (80013f4 <MX_ADC1_Init+0x134>)
 80012ee:	2208      	movs	r2, #8
 80012f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012f2:	4b40      	ldr	r3, [pc, #256]	@ (80013f4 <MX_ADC1_Init+0x134>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f8:	4b3e      	ldr	r3, [pc, #248]	@ (80013f4 <MX_ADC1_Init+0x134>)
 80012fa:	2204      	movs	r2, #4
 80012fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012fe:	4b3d      	ldr	r3, [pc, #244]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001300:	2200      	movs	r2, #0
 8001302:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001304:	4b3b      	ldr	r3, [pc, #236]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001306:	2201      	movs	r2, #1
 8001308:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800130a:	4b3a      	ldr	r3, [pc, #232]	@ (80013f4 <MX_ADC1_Init+0x134>)
 800130c:	2203      	movs	r2, #3
 800130e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001310:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001318:	4b36      	ldr	r3, [pc, #216]	@ (80013f4 <MX_ADC1_Init+0x134>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800131e:	4b35      	ldr	r3, [pc, #212]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001320:	2200      	movs	r2, #0
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001324:	4b33      	ldr	r3, [pc, #204]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001326:	2200      	movs	r2, #0
 8001328:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800132a:	4b32      	ldr	r3, [pc, #200]	@ (80013f4 <MX_ADC1_Init+0x134>)
 800132c:	2200      	movs	r2, #0
 800132e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001330:	4b30      	ldr	r3, [pc, #192]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001332:	2200      	movs	r2, #0
 8001334:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = ENABLE;
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 2;
 800133e:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001340:	2202      	movs	r2, #2
 8001342:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001346:	2200      	movs	r2, #0
 8001348:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800134a:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <MX_ADC1_Init+0x134>)
 800134c:	2200      	movs	r2, #0
 800134e:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001350:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001352:	2201      	movs	r2, #1
 8001354:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001356:	4827      	ldr	r0, [pc, #156]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001358:	f002 ff64 	bl	8004224 <HAL_ADC_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001362:	f001 f9bd 	bl	80026e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800136a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	4820      	ldr	r0, [pc, #128]	@ (80013f4 <MX_ADC1_Init+0x134>)
 8001372:	f004 fbcb 	bl	8005b0c <HAL_ADCEx_MultiModeConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 800137c:	f001 f9b0 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001380:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <MX_ADC1_Init+0x13c>)
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001384:	2306      	movs	r3, #6
 8001386:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001388:	2301      	movs	r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800138c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001392:	2304      	movs	r3, #4
 8001394:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4813      	ldr	r0, [pc, #76]	@ (80013f4 <MX_ADC1_Init+0x134>)
 80013a6:	f003 fc79 	bl	8004c9c <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80013b0:	f001 f996 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <MX_ADC1_Init+0x140>)
 80013b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013b8:	230c      	movs	r3, #12
 80013ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	4619      	mov	r1, r3
 80013c0:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <MX_ADC1_Init+0x134>)
 80013c2:	f003 fc6b 	bl	8004c9c <HAL_ADC_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80013cc:	f001 f988 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_ADC1_Init+0x144>)
 80013d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013d4:	2312      	movs	r3, #18
 80013d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_ADC1_Init+0x134>)
 80013de:	f003 fc5d 	bl	8004c9c <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80013e8:	f001 f97a 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	3730      	adds	r7, #48	@ 0x30
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	24000214 	.word	0x24000214
 80013f8:	40022000 	.word	0x40022000
 80013fc:	10c00010 	.word	0x10c00010
 8001400:	21800100 	.word	0x21800100
 8001404:	4b840000 	.word	0x4b840000

08001408 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2224      	movs	r2, #36	@ 0x24
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f013 fd43 	bl	8014ea0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800141a:	4b31      	ldr	r3, [pc, #196]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 800141c:	4a31      	ldr	r2, [pc, #196]	@ (80014e4 <MX_ADC2_Init+0xdc>)
 800141e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001420:	4b2f      	ldr	r3, [pc, #188]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001422:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001426:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001428:	4b2d      	ldr	r3, [pc, #180]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142e:	4b2c      	ldr	r3, [pc, #176]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001434:	4b2a      	ldr	r3, [pc, #168]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001436:	2204      	movs	r2, #4
 8001438:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800143a:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 800143c:	2200      	movs	r2, #0
 800143e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001440:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001442:	2200      	movs	r2, #0
 8001444:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001446:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001448:	2201      	movs	r2, #1
 800144a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800144c:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001454:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800145a:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 800145c:	2200      	movs	r2, #0
 800145e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001460:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001462:	2200      	movs	r2, #0
 8001464:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001466:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001468:	2200      	movs	r2, #0
 800146a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800146c:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 800146e:	2200      	movs	r2, #0
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = ENABLE;
 8001472:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 800147c:	2201      	movs	r2, #1
 800147e:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001482:	2200      	movs	r2, #0
 8001484:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001488:	2200      	movs	r2, #0
 800148a:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 800148e:	2201      	movs	r2, #1
 8001490:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001492:	4813      	ldr	r0, [pc, #76]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 8001494:	f002 fec6 	bl	8004224 <HAL_ADC_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
 800149e:	f001 f91f 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_ADC2_Init+0xe0>)
 80014a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a6:	2306      	movs	r3, #6
 80014a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ae:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80014b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014b4:	2304      	movs	r3, #4
 80014b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	@ (80014e0 <MX_ADC2_Init+0xd8>)
 80014c8:	f003 fbe8 	bl	8004c9c <HAL_ADC_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 80014d2:	f001 f905 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	@ 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	24000284 	.word	0x24000284
 80014e4:	40022100 	.word	0x40022100
 80014e8:	0c900008 	.word	0x0c900008

080014ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2224      	movs	r2, #36	@ 0x24
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f013 fcd1 	bl	8014ea0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014fe:	4b82      	ldr	r3, [pc, #520]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001500:	4a82      	ldr	r2, [pc, #520]	@ (800170c <MX_ADC3_Init+0x220>)
 8001502:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001504:	4b80      	ldr	r3, [pc, #512]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001506:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800150a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800150c:	4b7e      	ldr	r3, [pc, #504]	@ (8001708 <MX_ADC3_Init+0x21c>)
 800150e:	2208      	movs	r2, #8
 8001510:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001512:	4b7d      	ldr	r3, [pc, #500]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001518:	4b7b      	ldr	r3, [pc, #492]	@ (8001708 <MX_ADC3_Init+0x21c>)
 800151a:	2201      	movs	r2, #1
 800151c:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800151e:	4b7a      	ldr	r3, [pc, #488]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001520:	2204      	movs	r2, #4
 8001522:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001524:	4b78      	ldr	r3, [pc, #480]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001526:	2200      	movs	r2, #0
 8001528:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800152a:	4b77      	ldr	r3, [pc, #476]	@ (8001708 <MX_ADC3_Init+0x21c>)
 800152c:	2201      	movs	r2, #1
 800152e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 12;
 8001530:	4b75      	ldr	r3, [pc, #468]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001532:	220c      	movs	r2, #12
 8001534:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001536:	4b74      	ldr	r3, [pc, #464]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800153e:	4b72      	ldr	r3, [pc, #456]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001540:	2200      	movs	r2, #0
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001544:	4b70      	ldr	r3, [pc, #448]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001546:	2200      	movs	r2, #0
 8001548:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800154a:	4b6f      	ldr	r3, [pc, #444]	@ (8001708 <MX_ADC3_Init+0x21c>)
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001552:	4b6d      	ldr	r3, [pc, #436]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001554:	2200      	movs	r2, #0
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001558:	4b6b      	ldr	r3, [pc, #428]	@ (8001708 <MX_ADC3_Init+0x21c>)
 800155a:	2203      	movs	r2, #3
 800155c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800155e:	4b6a      	ldr	r3, [pc, #424]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001560:	2200      	movs	r2, #0
 8001562:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001564:	4b68      	ldr	r3, [pc, #416]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001566:	2200      	movs	r2, #0
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800156a:	4b67      	ldr	r3, [pc, #412]	@ (8001708 <MX_ADC3_Init+0x21c>)
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8001572:	4b65      	ldr	r3, [pc, #404]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001574:	2200      	movs	r2, #0
 8001576:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001578:	4863      	ldr	r0, [pc, #396]	@ (8001708 <MX_ADC3_Init+0x21c>)
 800157a:	f002 fe53 	bl	8004224 <HAL_ADC_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 8001584:	f001 f8ac 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001588:	2301      	movs	r3, #1
 800158a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800158c:	2306      	movs	r3, #6
 800158e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001594:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001598:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800159a:	2304      	movs	r3, #4
 800159c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4857      	ldr	r0, [pc, #348]	@ (8001708 <MX_ADC3_Init+0x21c>)
 80015ac:	f003 fb76 	bl	8004c9c <HAL_ADC_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80015b6:	f001 f893 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ba:	4b55      	ldr	r3, [pc, #340]	@ (8001710 <MX_ADC3_Init+0x224>)
 80015bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015be:	230c      	movs	r3, #12
 80015c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4850      	ldr	r0, [pc, #320]	@ (8001708 <MX_ADC3_Init+0x21c>)
 80015c8:	f003 fb68 	bl	8004c9c <HAL_ADC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015d2:	f001 f885 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001714 <MX_ADC3_Init+0x228>)
 80015d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015da:	2312      	movs	r3, #18
 80015dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4849      	ldr	r0, [pc, #292]	@ (8001708 <MX_ADC3_Init+0x21c>)
 80015e4:	f003 fb5a 	bl	8004c9c <HAL_ADC_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80015ee:	f001 f877 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015f2:	4b49      	ldr	r3, [pc, #292]	@ (8001718 <MX_ADC3_Init+0x22c>)
 80015f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015f6:	2318      	movs	r3, #24
 80015f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4842      	ldr	r0, [pc, #264]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001600:	f003 fb4c 	bl	8004c9c <HAL_ADC_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 800160a:	f001 f869 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800160e:	4b43      	ldr	r3, [pc, #268]	@ (800171c <MX_ADC3_Init+0x230>)
 8001610:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001612:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	4619      	mov	r1, r3
 800161c:	483a      	ldr	r0, [pc, #232]	@ (8001708 <MX_ADC3_Init+0x21c>)
 800161e:	f003 fb3d 	bl	8004c9c <HAL_ADC_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 8001628:	f001 f85a 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800162c:	4b3c      	ldr	r3, [pc, #240]	@ (8001720 <MX_ADC3_Init+0x234>)
 800162e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001630:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001634:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4833      	ldr	r0, [pc, #204]	@ (8001708 <MX_ADC3_Init+0x21c>)
 800163c:	f003 fb2e 	bl	8004c9c <HAL_ADC_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 8001646:	f001 f84b 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800164a:	4b36      	ldr	r3, [pc, #216]	@ (8001724 <MX_ADC3_Init+0x238>)
 800164c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800164e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001652:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4619      	mov	r1, r3
 8001658:	482b      	ldr	r0, [pc, #172]	@ (8001708 <MX_ADC3_Init+0x21c>)
 800165a:	f003 fb1f 	bl	8004c9c <HAL_ADC_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 8001664:	f001 f83c 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001668:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <MX_ADC3_Init+0x23c>)
 800166a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800166c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4824      	ldr	r0, [pc, #144]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001678:	f003 fb10 	bl	8004c9c <HAL_ADC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 8001682:	f001 f82d 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <MX_ADC3_Init+0x240>)
 8001688:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800168a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800168e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4619      	mov	r1, r3
 8001694:	481c      	ldr	r0, [pc, #112]	@ (8001708 <MX_ADC3_Init+0x21c>)
 8001696:	f003 fb01 	bl	8004c9c <HAL_ADC_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 80016a0:	f001 f81e 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016a4:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <MX_ADC3_Init+0x244>)
 80016a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80016a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4815      	ldr	r0, [pc, #84]	@ (8001708 <MX_ADC3_Init+0x21c>)
 80016b4:	f003 faf2 	bl	8004c9c <HAL_ADC_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 80016be:	f001 f80f 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <MX_ADC3_Init+0x248>)
 80016c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80016c6:	f240 2306 	movw	r3, #518	@ 0x206
 80016ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4619      	mov	r1, r3
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_ADC3_Init+0x21c>)
 80016d2:	f003 fae3 	bl	8004c9c <HAL_ADC_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC3_Init+0x1f4>
  {
    Error_Handler();
 80016dc:	f001 f800 	bl	80026e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80016e0:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <MX_ADC3_Init+0x24c>)
 80016e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80016e4:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80016e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	@ (8001708 <MX_ADC3_Init+0x21c>)
 80016f0:	f003 fad4 	bl	8004c9c <HAL_ADC_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_ADC3_Init+0x212>
  {
    Error_Handler();
 80016fa:	f000 fff1 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	@ 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	240002f4 	.word	0x240002f4
 800170c:	58026000 	.word	0x58026000
 8001710:	04300002 	.word	0x04300002
 8001714:	08600004 	.word	0x08600004
 8001718:	0c900008 	.word	0x0c900008
 800171c:	10c00010 	.word	0x10c00010
 8001720:	14f00020 	.word	0x14f00020
 8001724:	19200040 	.word	0x19200040
 8001728:	1d500080 	.word	0x1d500080
 800172c:	21800100 	.word	0x21800100
 8001730:	25b00200 	.word	0x25b00200
 8001734:	2a000400 	.word	0x2a000400
 8001738:	2e300800 	.word	0x2e300800

0800173c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <MX_I2C1_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001748:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <MX_I2C1_Init+0x7c>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001778:	f007 fbb4 	bl	8008ee4 <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001782:	f000 ffad 	bl	80026e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800178a:	f007 fc47 	bl	800901c <HAL_I2CEx_ConfigAnalogFilter>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 ffa4 	bl	80026e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800179c:	f007 fc89 	bl	80090b2 <HAL_I2CEx_ConfigDigitalFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 ff9b 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	24000454 	.word	0x24000454
 80017b4:	40005400 	.word	0x40005400
 80017b8:	20a0c4df 	.word	0x20a0c4df

080017bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001834 <MX_I2C2_Init+0x78>)
 80017c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001838 <MX_I2C2_Init+0x7c>)
 80017ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017cc:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d2:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d8:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017f6:	480e      	ldr	r0, [pc, #56]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017f8:	f007 fb74 	bl	8008ee4 <HAL_I2C_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001802:	f000 ff6d 	bl	80026e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001806:	2100      	movs	r1, #0
 8001808:	4809      	ldr	r0, [pc, #36]	@ (8001830 <MX_I2C2_Init+0x74>)
 800180a:	f007 fc07 	bl	800901c <HAL_I2CEx_ConfigAnalogFilter>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001814:	f000 ff64 	bl	80026e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001818:	2100      	movs	r1, #0
 800181a:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_I2C2_Init+0x74>)
 800181c:	f007 fc49 	bl	80090b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001826:	f000 ff5b 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	240004a8 	.word	0x240004a8
 8001834:	40005800 	.word	0x40005800
 8001838:	20a0c4df 	.word	0x20a0c4df

0800183c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	@ 0x30
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2224      	movs	r2, #36	@ 0x24
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f013 fb28 	bl	8014ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <MX_TIM1_Init+0xac>)
 800185c:	4a23      	ldr	r2, [pc, #140]	@ (80018ec <MX_TIM1_Init+0xb0>)
 800185e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001860:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <MX_TIM1_Init+0xac>)
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <MX_TIM1_Init+0xac>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <MX_TIM1_Init+0xac>)
 800186e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001872:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <MX_TIM1_Init+0xac>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <MX_TIM1_Init+0xac>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <MX_TIM1_Init+0xac>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001886:	2303      	movs	r3, #3
 8001888:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800189e:	2301      	movs	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4619      	mov	r1, r3
 80018b0:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <MX_TIM1_Init+0xac>)
 80018b2:	f00b fa6f 	bl	800cd94 <HAL_TIM_Encoder_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80018bc:	f000 ff10 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <MX_TIM1_Init+0xac>)
 80018d2:	f00c f97f 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80018dc:	f000 ff00 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3730      	adds	r7, #48	@ 0x30
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	240004fc 	.word	0x240004fc
 80018ec:	40010000 	.word	0x40010000

080018f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	@ 0x30
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	2224      	movs	r2, #36	@ 0x24
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f013 face 	bl	8014ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800190e:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <MX_TIM2_Init+0xa4>)
 8001910:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001916:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <MX_TIM2_Init+0xa4>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <MX_TIM2_Init+0xa4>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001922:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <MX_TIM2_Init+0xa4>)
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192a:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <MX_TIM2_Init+0xa4>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <MX_TIM2_Init+0xa4>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001936:	2303      	movs	r3, #3
 8001938:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800193e:	2301      	movs	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800194e:	2301      	movs	r3, #1
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4619      	mov	r1, r3
 8001960:	480c      	ldr	r0, [pc, #48]	@ (8001994 <MX_TIM2_Init+0xa4>)
 8001962:	f00b fa17 	bl	800cd94 <HAL_TIM_Encoder_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800196c:	f000 feb8 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_TIM2_Init+0xa4>)
 800197e:	f00c f929 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001988:	f000 feaa 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3730      	adds	r7, #48	@ 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	24000548 	.word	0x24000548

08001998 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	@ 0x30
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	2224      	movs	r2, #36	@ 0x24
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f013 fa7a 	bl	8014ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	463b      	mov	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019b6:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <MX_TIM3_Init+0xa4>)
 80019b8:	4a21      	ldr	r2, [pc, #132]	@ (8001a40 <MX_TIM3_Init+0xa8>)
 80019ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <MX_TIM3_Init+0xa4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <MX_TIM3_Init+0xa4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019c8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <MX_TIM3_Init+0xa4>)
 80019ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <MX_TIM3_Init+0xa4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d6:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <MX_TIM3_Init+0xa4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019dc:	2303      	movs	r3, #3
 80019de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019e4:	2301      	movs	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019f4:	2301      	movs	r3, #1
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <MX_TIM3_Init+0xa4>)
 8001a08:	f00b f9c4 	bl	800cd94 <HAL_TIM_Encoder_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a12:	f000 fe65 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	@ (8001a3c <MX_TIM3_Init+0xa4>)
 8001a24:	f00c f8d6 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a2e:	f000 fe57 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3730      	adds	r7, #48	@ 0x30
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	24000594 	.word	0x24000594
 8001a40:	40000400 	.word	0x40000400

08001a44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	@ 0x30
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	2224      	movs	r2, #36	@ 0x24
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f013 fa24 	bl	8014ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a62:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <MX_TIM4_Init+0xa4>)
 8001a64:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <MX_TIM4_Init+0xa8>)
 8001a66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <MX_TIM4_Init+0xa4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <MX_TIM4_Init+0xa4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <MX_TIM4_Init+0xa4>)
 8001a76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <MX_TIM4_Init+0xa4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <MX_TIM4_Init+0xa4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a90:	2301      	movs	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <MX_TIM4_Init+0xa4>)
 8001ab4:	f00b f96e 	bl	800cd94 <HAL_TIM_Encoder_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001abe:	f000 fe0f 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aca:	463b      	mov	r3, r7
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	@ (8001ae8 <MX_TIM4_Init+0xa4>)
 8001ad0:	f00c f880 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001ada:	f000 fe01 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	3730      	adds	r7, #48	@ 0x30
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	240005e0 	.word	0x240005e0
 8001aec:	40000800 	.word	0x40000800

08001af0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b02:	463b      	mov	r3, r7
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
 8001b10:	615a      	str	r2, [r3, #20]
 8001b12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b14:	4b32      	ldr	r3, [pc, #200]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001b16:	4a33      	ldr	r2, [pc, #204]	@ (8001be4 <MX_TIM5_Init+0xf4>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 31;
 8001b1a:	4b31      	ldr	r3, [pc, #196]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001b1c:	221f      	movs	r2, #31
 8001b1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 799;
 8001b26:	4b2e      	ldr	r3, [pc, #184]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001b28:	f240 321f 	movw	r2, #799	@ 0x31f
 8001b2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b3a:	4829      	ldr	r0, [pc, #164]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001b3c:	f00a ff6a 	bl	800ca14 <HAL_TIM_PWM_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001b46:	f000 fdcb 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4821      	ldr	r0, [pc, #132]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001b5a:	f00c f83b 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001b64:	f000 fdbc 	bl	80026e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b68:	2360      	movs	r3, #96	@ 0x60
 8001b6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4818      	ldr	r0, [pc, #96]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001b80:	f00b fb44 	bl	800d20c <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001b8a:	f000 fda9 	bl	80026e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b8e:	463b      	mov	r3, r7
 8001b90:	2204      	movs	r2, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4812      	ldr	r0, [pc, #72]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001b96:	f00b fb39 	bl	800d20c <HAL_TIM_PWM_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001ba0:	f000 fd9e 	bl	80026e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001bac:	f00b fb2e 	bl	800d20c <HAL_TIM_PWM_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8001bb6:	f000 fd93 	bl	80026e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bba:	463b      	mov	r3, r7
 8001bbc:	220c      	movs	r2, #12
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4807      	ldr	r0, [pc, #28]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001bc2:	f00b fb23 	bl	800d20c <HAL_TIM_PWM_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM5_Init+0xe0>
  {
    Error_Handler();
 8001bcc:	f000 fd88 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001bd0:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <MX_TIM5_Init+0xf0>)
 8001bd2:	f001 fb17 	bl	8003204 <HAL_TIM_MspPostInit>

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	@ 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2400062c 	.word	0x2400062c
 8001be4:	40000c00 	.word	0x40000c00

08001be8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <MX_TIM6_Init+0x64>)
 8001bfa:	4a15      	ldr	r2, [pc, #84]	@ (8001c50 <MX_TIM6_Init+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 255;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <MX_TIM6_Init+0x64>)
 8001c00:	22ff      	movs	r2, #255	@ 0xff
 8001c02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <MX_TIM6_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <MX_TIM6_Init+0x64>)
 8001c0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <MX_TIM6_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <MX_TIM6_Init+0x64>)
 8001c1a:	f00a fe1d 	bl	800c858 <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c24:	f000 fd5c 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <MX_TIM6_Init+0x64>)
 8001c36:	f00b ffcd 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c40:	f000 fd4e 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	24000678 	.word	0x24000678
 8001c50:	40001000 	.word	0x40001000

08001c54 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <MX_TIM7_Init+0x64>)
 8001c66:	4a15      	ldr	r2, [pc, #84]	@ (8001cbc <MX_TIM7_Init+0x68>)
 8001c68:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 255;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <MX_TIM7_Init+0x64>)
 8001c6c:	22ff      	movs	r2, #255	@ 0xff
 8001c6e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <MX_TIM7_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <MX_TIM7_Init+0x64>)
 8001c78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c7c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <MX_TIM7_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c84:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <MX_TIM7_Init+0x64>)
 8001c86:	f00a fde7 	bl	800c858 <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c90:	f000 fd26 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <MX_TIM7_Init+0x64>)
 8001ca2:	f00b ff97 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001cac:	f000 fd18 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	240006c4 	.word	0x240006c4
 8001cbc:	40001400 	.word	0x40001400

08001cc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	@ 0x30
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	2224      	movs	r2, #36	@ 0x24
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f013 f8e6 	bl	8014ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cde:	4b23      	ldr	r3, [pc, #140]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001ce0:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <MX_TIM8_Init+0xb0>)
 8001ce2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ce4:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001cf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cf6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d12:	2301      	movs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d22:	2301      	movs	r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	4619      	mov	r1, r3
 8001d34:	480d      	ldr	r0, [pc, #52]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001d36:	f00b f82d 	bl	800cd94 <HAL_TIM_Encoder_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001d40:	f000 fcce 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d50:	463b      	mov	r3, r7
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001d56:	f00b ff3d 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001d60:	f000 fcbe 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d64:	bf00      	nop
 8001d66:	3730      	adds	r7, #48	@ 0x30
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	24000710 	.word	0x24000710
 8001d70:	40010400 	.word	0x40010400

08001d74 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	@ 0x28
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d86:	463b      	mov	r3, r7
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d98:	4b27      	ldr	r3, [pc, #156]	@ (8001e38 <MX_TIM12_Init+0xc4>)
 8001d9a:	4a28      	ldr	r2, [pc, #160]	@ (8001e3c <MX_TIM12_Init+0xc8>)
 8001d9c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001d9e:	4b26      	ldr	r3, [pc, #152]	@ (8001e38 <MX_TIM12_Init+0xc4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b24      	ldr	r3, [pc, #144]	@ (8001e38 <MX_TIM12_Init+0xc4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001daa:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <MX_TIM12_Init+0xc4>)
 8001dac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001db0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db2:	4b21      	ldr	r3, [pc, #132]	@ (8001e38 <MX_TIM12_Init+0xc4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <MX_TIM12_Init+0xc4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001dbe:	481e      	ldr	r0, [pc, #120]	@ (8001e38 <MX_TIM12_Init+0xc4>)
 8001dc0:	f00a fe28 	bl	800ca14 <HAL_TIM_PWM_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8001dca:	f000 fc89 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4816      	ldr	r0, [pc, #88]	@ (8001e38 <MX_TIM12_Init+0xc4>)
 8001dde:	f00b fef9 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001de8:	f000 fc7a 	bl	80026e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dec:	2360      	movs	r3, #96	@ 0x60
 8001dee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	2200      	movs	r2, #0
 8001e00:	4619      	mov	r1, r3
 8001e02:	480d      	ldr	r0, [pc, #52]	@ (8001e38 <MX_TIM12_Init+0xc4>)
 8001e04:	f00b fa02 	bl	800d20c <HAL_TIM_PWM_ConfigChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8001e0e:	f000 fc67 	bl	80026e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e12:	463b      	mov	r3, r7
 8001e14:	2204      	movs	r2, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	4807      	ldr	r0, [pc, #28]	@ (8001e38 <MX_TIM12_Init+0xc4>)
 8001e1a:	f00b f9f7 	bl	800d20c <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 8001e24:	f000 fc5c 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e28:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <MX_TIM12_Init+0xc4>)
 8001e2a:	f001 f9eb 	bl	8003204 <HAL_TIM_MspPostInit>

}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	@ 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2400075c 	.word	0x2400075c
 8001e3c:	40001800 	.word	0x40001800

08001e40 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e44:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <MX_TIM13_Init+0x40>)
 8001e46:	4a0f      	ldr	r2, [pc, #60]	@ (8001e84 <MX_TIM13_Init+0x44>)
 8001e48:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2549;
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <MX_TIM13_Init+0x40>)
 8001e4c:	f640 12f5 	movw	r2, #2549	@ 0x9f5
 8001e50:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <MX_TIM13_Init+0x40>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24999;
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <MX_TIM13_Init+0x40>)
 8001e5a:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001e5e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e60:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <MX_TIM13_Init+0x40>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <MX_TIM13_Init+0x40>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e6c:	4804      	ldr	r0, [pc, #16]	@ (8001e80 <MX_TIM13_Init+0x40>)
 8001e6e:	f00a fcf3 	bl	800c858 <HAL_TIM_Base_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001e78:	f000 fc32 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	240007a8 	.word	0x240007a8
 8001e84:	40001c00 	.word	0x40001c00

08001e88 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b098      	sub	sp, #96	@ 0x60
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]
 8001eaa:	615a      	str	r2, [r3, #20]
 8001eac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2234      	movs	r2, #52	@ 0x34
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f012 fff3 	bl	8014ea0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001eba:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001ebc:	4a3a      	ldr	r2, [pc, #232]	@ (8001fa8 <MX_TIM15_Init+0x120>)
 8001ebe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001ec0:	4b38      	ldr	r3, [pc, #224]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b37      	ldr	r3, [pc, #220]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001ecc:	4b35      	ldr	r3, [pc, #212]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001ece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ed2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	4b33      	ldr	r3, [pc, #204]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001eda:	4b32      	ldr	r3, [pc, #200]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee0:	4b30      	ldr	r3, [pc, #192]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001ee6:	482f      	ldr	r0, [pc, #188]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001ee8:	f00a fd94 	bl	800ca14 <HAL_TIM_PWM_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001ef2:	f000 fbf5 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001efe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f02:	4619      	mov	r1, r3
 8001f04:	4827      	ldr	r0, [pc, #156]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001f06:	f00b fe65 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001f10:	f000 fbe6 	bl	80026e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f14:	2360      	movs	r3, #96	@ 0x60
 8001f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f20:	2300      	movs	r3, #0
 8001f22:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f34:	2200      	movs	r2, #0
 8001f36:	4619      	mov	r1, r3
 8001f38:	481a      	ldr	r0, [pc, #104]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001f3a:	f00b f967 	bl	800d20c <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001f44:	f000 fbcc 	bl	80026e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4814      	ldr	r0, [pc, #80]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001f52:	f00b f95b 	bl	800d20c <HAL_TIM_PWM_ConfigChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001f5c:	f000 fbc0 	bl	80026e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4807      	ldr	r0, [pc, #28]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001f88:	f00b fec0 	bl	800dd0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001f92:	f000 fba5 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001f96:	4803      	ldr	r0, [pc, #12]	@ (8001fa4 <MX_TIM15_Init+0x11c>)
 8001f98:	f001 f934 	bl	8003204 <HAL_TIM_MspPostInit>

}
 8001f9c:	bf00      	nop
 8001f9e:	3760      	adds	r7, #96	@ 0x60
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	240007f4 	.word	0x240007f4
 8001fa8:	40014000 	.word	0x40014000

08001fac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b094      	sub	sp, #80	@ 0x50
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
 8001fc0:	611a      	str	r2, [r3, #16]
 8001fc2:	615a      	str	r2, [r3, #20]
 8001fc4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	2234      	movs	r2, #52	@ 0x34
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f012 ff67 	bl	8014ea0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fd2:	4b31      	ldr	r3, [pc, #196]	@ (8002098 <MX_TIM16_Init+0xec>)
 8001fd4:	4a31      	ldr	r2, [pc, #196]	@ (800209c <MX_TIM16_Init+0xf0>)
 8001fd6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002098 <MX_TIM16_Init+0xec>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fde:	4b2e      	ldr	r3, [pc, #184]	@ (8002098 <MX_TIM16_Init+0xec>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8002098 <MX_TIM16_Init+0xec>)
 8001fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fec:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <MX_TIM16_Init+0xec>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ff2:	4b29      	ldr	r3, [pc, #164]	@ (8002098 <MX_TIM16_Init+0xec>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff8:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <MX_TIM16_Init+0xec>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ffe:	4826      	ldr	r0, [pc, #152]	@ (8002098 <MX_TIM16_Init+0xec>)
 8002000:	f00a fc2a 	bl	800c858 <HAL_TIM_Base_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800200a:	f000 fb69 	bl	80026e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800200e:	4822      	ldr	r0, [pc, #136]	@ (8002098 <MX_TIM16_Init+0xec>)
 8002010:	f00a fd00 	bl	800ca14 <HAL_TIM_PWM_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800201a:	f000 fb61 	bl	80026e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201e:	2360      	movs	r3, #96	@ 0x60
 8002020:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002026:	2300      	movs	r3, #0
 8002028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800202a:	2300      	movs	r3, #0
 800202c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800203a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800203e:	2200      	movs	r2, #0
 8002040:	4619      	mov	r1, r3
 8002042:	4815      	ldr	r0, [pc, #84]	@ (8002098 <MX_TIM16_Init+0xec>)
 8002044:	f00b f8e2 	bl	800d20c <HAL_TIM_PWM_ConfigChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800204e:	f000 fb47 	bl	80026e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800206a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002074:	463b      	mov	r3, r7
 8002076:	4619      	mov	r1, r3
 8002078:	4807      	ldr	r0, [pc, #28]	@ (8002098 <MX_TIM16_Init+0xec>)
 800207a:	f00b fe47 	bl	800dd0c <HAL_TIMEx_ConfigBreakDeadTime>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002084:	f000 fb2c 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002088:	4803      	ldr	r0, [pc, #12]	@ (8002098 <MX_TIM16_Init+0xec>)
 800208a:	f001 f8bb 	bl	8003204 <HAL_TIM_MspPostInit>

}
 800208e:	bf00      	nop
 8002090:	3750      	adds	r7, #80	@ 0x50
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	24000840 	.word	0x24000840
 800209c:	40014400 	.word	0x40014400

080020a0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b094      	sub	sp, #80	@ 0x50
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]
 80020b6:	615a      	str	r2, [r3, #20]
 80020b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020ba:	463b      	mov	r3, r7
 80020bc:	2234      	movs	r2, #52	@ 0x34
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f012 feed 	bl	8014ea0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80020c6:	4b31      	ldr	r3, [pc, #196]	@ (800218c <MX_TIM17_Init+0xec>)
 80020c8:	4a31      	ldr	r2, [pc, #196]	@ (8002190 <MX_TIM17_Init+0xf0>)
 80020ca:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80020cc:	4b2f      	ldr	r3, [pc, #188]	@ (800218c <MX_TIM17_Init+0xec>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d2:	4b2e      	ldr	r3, [pc, #184]	@ (800218c <MX_TIM17_Init+0xec>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80020d8:	4b2c      	ldr	r3, [pc, #176]	@ (800218c <MX_TIM17_Init+0xec>)
 80020da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020de:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e0:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <MX_TIM17_Init+0xec>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80020e6:	4b29      	ldr	r3, [pc, #164]	@ (800218c <MX_TIM17_Init+0xec>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ec:	4b27      	ldr	r3, [pc, #156]	@ (800218c <MX_TIM17_Init+0xec>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80020f2:	4826      	ldr	r0, [pc, #152]	@ (800218c <MX_TIM17_Init+0xec>)
 80020f4:	f00a fbb0 	bl	800c858 <HAL_TIM_Base_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80020fe:	f000 faef 	bl	80026e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002102:	4822      	ldr	r0, [pc, #136]	@ (800218c <MX_TIM17_Init+0xec>)
 8002104:	f00a fc86 	bl	800ca14 <HAL_TIM_PWM_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800210e:	f000 fae7 	bl	80026e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002112:	2360      	movs	r3, #96	@ 0x60
 8002114:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211a:	2300      	movs	r3, #0
 800211c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800211e:	2300      	movs	r3, #0
 8002120:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800212e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002132:	2200      	movs	r2, #0
 8002134:	4619      	mov	r1, r3
 8002136:	4815      	ldr	r0, [pc, #84]	@ (800218c <MX_TIM17_Init+0xec>)
 8002138:	f00b f868 	bl	800d20c <HAL_TIM_PWM_ConfigChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002142:	f000 facd 	bl	80026e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800215a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800215e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002168:	463b      	mov	r3, r7
 800216a:	4619      	mov	r1, r3
 800216c:	4807      	ldr	r0, [pc, #28]	@ (800218c <MX_TIM17_Init+0xec>)
 800216e:	f00b fdcd 	bl	800dd0c <HAL_TIMEx_ConfigBreakDeadTime>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002178:	f000 fab2 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800217c:	4803      	ldr	r0, [pc, #12]	@ (800218c <MX_TIM17_Init+0xec>)
 800217e:	f001 f841 	bl	8003204 <HAL_TIM_MspPostInit>

}
 8002182:	bf00      	nop
 8002184:	3750      	adds	r7, #80	@ 0x50
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2400088c 	.word	0x2400088c
 8002190:	40014800 	.word	0x40014800

08002194 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	@ 0x30
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800219a:	f107 030c 	add.w	r3, r7, #12
 800219e:	2224      	movs	r2, #36	@ 0x24
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f012 fe7c 	bl	8014ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a8:	463b      	mov	r3, r7
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80021b2:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <MX_TIM23_Init+0xa4>)
 80021b4:	4a21      	ldr	r2, [pc, #132]	@ (800223c <MX_TIM23_Init+0xa8>)
 80021b6:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002238 <MX_TIM23_Init+0xa4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <MX_TIM23_Init+0xa4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80021c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002238 <MX_TIM23_Init+0xa4>)
 80021c6:	f04f 32ff 	mov.w	r2, #4294967295
 80021ca:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <MX_TIM23_Init+0xa4>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d2:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <MX_TIM23_Init+0xa4>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021d8:	2303      	movs	r3, #3
 80021da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021e0:	2301      	movs	r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	4619      	mov	r1, r3
 8002202:	480d      	ldr	r0, [pc, #52]	@ (8002238 <MX_TIM23_Init+0xa4>)
 8002204:	f00a fdc6 	bl	800cd94 <HAL_TIM_Encoder_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800220e:	f000 fa67 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800221a:	463b      	mov	r3, r7
 800221c:	4619      	mov	r1, r3
 800221e:	4806      	ldr	r0, [pc, #24]	@ (8002238 <MX_TIM23_Init+0xa4>)
 8002220:	f00b fcd8 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800222a:	f000 fa59 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800222e:	bf00      	nop
 8002230:	3730      	adds	r7, #48	@ 0x30
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	240008d8 	.word	0x240008d8
 800223c:	4000e000 	.word	0x4000e000

08002240 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08c      	sub	sp, #48	@ 0x30
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	2224      	movs	r2, #36	@ 0x24
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f012 fe26 	bl	8014ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002254:	463b      	mov	r3, r7
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800225e:	4b21      	ldr	r3, [pc, #132]	@ (80022e4 <MX_TIM24_Init+0xa4>)
 8002260:	4a21      	ldr	r2, [pc, #132]	@ (80022e8 <MX_TIM24_Init+0xa8>)
 8002262:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8002264:	4b1f      	ldr	r3, [pc, #124]	@ (80022e4 <MX_TIM24_Init+0xa4>)
 8002266:	2200      	movs	r2, #0
 8002268:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226a:	4b1e      	ldr	r3, [pc, #120]	@ (80022e4 <MX_TIM24_Init+0xa4>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8002270:	4b1c      	ldr	r3, [pc, #112]	@ (80022e4 <MX_TIM24_Init+0xa4>)
 8002272:	f04f 32ff 	mov.w	r2, #4294967295
 8002276:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002278:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <MX_TIM24_Init+0xa4>)
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227e:	4b19      	ldr	r3, [pc, #100]	@ (80022e4 <MX_TIM24_Init+0xa4>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002284:	2303      	movs	r3, #3
 8002286:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800228c:	2301      	movs	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002290:	2300      	movs	r3, #0
 8002292:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800229c:	2301      	movs	r3, #1
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	4619      	mov	r1, r3
 80022ae:	480d      	ldr	r0, [pc, #52]	@ (80022e4 <MX_TIM24_Init+0xa4>)
 80022b0:	f00a fd70 	bl	800cd94 <HAL_TIM_Encoder_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 80022ba:	f000 fa11 	bl	80026e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	4619      	mov	r1, r3
 80022ca:	4806      	ldr	r0, [pc, #24]	@ (80022e4 <MX_TIM24_Init+0xa4>)
 80022cc:	f00b fc82 	bl	800dbd4 <HAL_TIMEx_MasterConfigSynchronization>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 80022d6:	f000 fa03 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	3730      	adds	r7, #48	@ 0x30
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	24000924 	.word	0x24000924
 80022e8:	4000e400 	.word	0x4000e400

080022ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022f0:	4b22      	ldr	r3, [pc, #136]	@ (800237c <MX_USART1_UART_Init+0x90>)
 80022f2:	4a23      	ldr	r2, [pc, #140]	@ (8002380 <MX_USART1_UART_Init+0x94>)
 80022f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022f6:	4b21      	ldr	r3, [pc, #132]	@ (800237c <MX_USART1_UART_Init+0x90>)
 80022f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022fe:	4b1f      	ldr	r3, [pc, #124]	@ (800237c <MX_USART1_UART_Init+0x90>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002304:	4b1d      	ldr	r3, [pc, #116]	@ (800237c <MX_USART1_UART_Init+0x90>)
 8002306:	2200      	movs	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800230a:	4b1c      	ldr	r3, [pc, #112]	@ (800237c <MX_USART1_UART_Init+0x90>)
 800230c:	2200      	movs	r2, #0
 800230e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002310:	4b1a      	ldr	r3, [pc, #104]	@ (800237c <MX_USART1_UART_Init+0x90>)
 8002312:	220c      	movs	r2, #12
 8002314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002316:	4b19      	ldr	r3, [pc, #100]	@ (800237c <MX_USART1_UART_Init+0x90>)
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800231c:	4b17      	ldr	r3, [pc, #92]	@ (800237c <MX_USART1_UART_Init+0x90>)
 800231e:	2200      	movs	r2, #0
 8002320:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002322:	4b16      	ldr	r3, [pc, #88]	@ (800237c <MX_USART1_UART_Init+0x90>)
 8002324:	2200      	movs	r2, #0
 8002326:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002328:	4b14      	ldr	r3, [pc, #80]	@ (800237c <MX_USART1_UART_Init+0x90>)
 800232a:	2200      	movs	r2, #0
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800232e:	4b13      	ldr	r3, [pc, #76]	@ (800237c <MX_USART1_UART_Init+0x90>)
 8002330:	2200      	movs	r2, #0
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002334:	4811      	ldr	r0, [pc, #68]	@ (800237c <MX_USART1_UART_Init+0x90>)
 8002336:	f00b fd93 	bl	800de60 <HAL_UART_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002340:	f000 f9ce 	bl	80026e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002344:	2100      	movs	r1, #0
 8002346:	480d      	ldr	r0, [pc, #52]	@ (800237c <MX_USART1_UART_Init+0x90>)
 8002348:	f00d fc53 	bl	800fbf2 <HAL_UARTEx_SetTxFifoThreshold>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002352:	f000 f9c5 	bl	80026e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002356:	2100      	movs	r1, #0
 8002358:	4808      	ldr	r0, [pc, #32]	@ (800237c <MX_USART1_UART_Init+0x90>)
 800235a:	f00d fc88 	bl	800fc6e <HAL_UARTEx_SetRxFifoThreshold>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002364:	f000 f9bc 	bl	80026e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002368:	4804      	ldr	r0, [pc, #16]	@ (800237c <MX_USART1_UART_Init+0x90>)
 800236a:	f00d fc09 	bl	800fb80 <HAL_UARTEx_DisableFifoMode>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002374:	f000 f9b4 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	24000970 	.word	0x24000970
 8002380:	40011000 	.word	0x40011000

08002384 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002388:	4b22      	ldr	r3, [pc, #136]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 800238a:	4a23      	ldr	r2, [pc, #140]	@ (8002418 <MX_USART3_UART_Init+0x94>)
 800238c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800238e:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 8002390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002394:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002396:	4b1f      	ldr	r3, [pc, #124]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800239c:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 80023aa:	220c      	movs	r2, #12
 80023ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ae:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b4:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ba:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 80023bc:	2200      	movs	r2, #0
 80023be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023c0:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023c6:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023cc:	4811      	ldr	r0, [pc, #68]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 80023ce:	f00b fd47 	bl	800de60 <HAL_UART_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80023d8:	f000 f982 	bl	80026e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023dc:	2100      	movs	r1, #0
 80023de:	480d      	ldr	r0, [pc, #52]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 80023e0:	f00d fc07 	bl	800fbf2 <HAL_UARTEx_SetTxFifoThreshold>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80023ea:	f000 f979 	bl	80026e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ee:	2100      	movs	r1, #0
 80023f0:	4808      	ldr	r0, [pc, #32]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 80023f2:	f00d fc3c 	bl	800fc6e <HAL_UARTEx_SetRxFifoThreshold>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80023fc:	f000 f970 	bl	80026e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002400:	4804      	ldr	r0, [pc, #16]	@ (8002414 <MX_USART3_UART_Init+0x90>)
 8002402:	f00d fbbd 	bl	800fb80 <HAL_UARTEx_DisableFifoMode>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800240c:	f000 f968 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	24000a04 	.word	0x24000a04
 8002418:	40004800 	.word	0x40004800

0800241c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002422:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <MX_DMA_Init+0x8c>)
 8002424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002428:	4a1f      	ldr	r2, [pc, #124]	@ (80024a8 <MX_DMA_Init+0x8c>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002432:	4b1d      	ldr	r3, [pc, #116]	@ (80024a8 <MX_DMA_Init+0x8c>)
 8002434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	200b      	movs	r0, #11
 8002446:	f003 fd1e 	bl	8005e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800244a:	200b      	movs	r0, #11
 800244c:	f003 fd35 	bl	8005eba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2100      	movs	r1, #0
 8002454:	200c      	movs	r0, #12
 8002456:	f003 fd16 	bl	8005e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800245a:	200c      	movs	r0, #12
 800245c:	f003 fd2d 	bl	8005eba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002460:	2200      	movs	r2, #0
 8002462:	2100      	movs	r1, #0
 8002464:	200d      	movs	r0, #13
 8002466:	f003 fd0e 	bl	8005e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800246a:	200d      	movs	r0, #13
 800246c:	f003 fd25 	bl	8005eba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	200e      	movs	r0, #14
 8002476:	f003 fd06 	bl	8005e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800247a:	200e      	movs	r0, #14
 800247c:	f003 fd1d 	bl	8005eba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	200f      	movs	r0, #15
 8002486:	f003 fcfe 	bl	8005e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800248a:	200f      	movs	r0, #15
 800248c:	f003 fd15 	bl	8005eba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002490:	2200      	movs	r2, #0
 8002492:	2100      	movs	r1, #0
 8002494:	2010      	movs	r0, #16
 8002496:	f003 fcf6 	bl	8005e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800249a:	2010      	movs	r0, #16
 800249c:	f003 fd0d 	bl	8005eba <HAL_NVIC_EnableIRQ>

}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	58024400 	.word	0x58024400

080024ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	@ 0x38
 80024b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024c2:	4b80      	ldr	r3, [pc, #512]	@ (80026c4 <MX_GPIO_Init+0x218>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c8:	4a7e      	ldr	r2, [pc, #504]	@ (80026c4 <MX_GPIO_Init+0x218>)
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d2:	4b7c      	ldr	r3, [pc, #496]	@ (80026c4 <MX_GPIO_Init+0x218>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	623b      	str	r3, [r7, #32]
 80024de:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e0:	4b78      	ldr	r3, [pc, #480]	@ (80026c4 <MX_GPIO_Init+0x218>)
 80024e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e6:	4a77      	ldr	r2, [pc, #476]	@ (80026c4 <MX_GPIO_Init+0x218>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f0:	4b74      	ldr	r3, [pc, #464]	@ (80026c4 <MX_GPIO_Init+0x218>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024fe:	4b71      	ldr	r3, [pc, #452]	@ (80026c4 <MX_GPIO_Init+0x218>)
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002504:	4a6f      	ldr	r2, [pc, #444]	@ (80026c4 <MX_GPIO_Init+0x218>)
 8002506:	f043 0320 	orr.w	r3, r3, #32
 800250a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800250e:	4b6d      	ldr	r3, [pc, #436]	@ (80026c4 <MX_GPIO_Init+0x218>)
 8002510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800251c:	4b69      	ldr	r3, [pc, #420]	@ (80026c4 <MX_GPIO_Init+0x218>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002522:	4a68      	ldr	r2, [pc, #416]	@ (80026c4 <MX_GPIO_Init+0x218>)
 8002524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800252c:	4b65      	ldr	r3, [pc, #404]	@ (80026c4 <MX_GPIO_Init+0x218>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	4b62      	ldr	r3, [pc, #392]	@ (80026c4 <MX_GPIO_Init+0x218>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002540:	4a60      	ldr	r2, [pc, #384]	@ (80026c4 <MX_GPIO_Init+0x218>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800254a:	4b5e      	ldr	r3, [pc, #376]	@ (80026c4 <MX_GPIO_Init+0x218>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002558:	4b5a      	ldr	r3, [pc, #360]	@ (80026c4 <MX_GPIO_Init+0x218>)
 800255a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800255e:	4a59      	ldr	r2, [pc, #356]	@ (80026c4 <MX_GPIO_Init+0x218>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002568:	4b56      	ldr	r3, [pc, #344]	@ (80026c4 <MX_GPIO_Init+0x218>)
 800256a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002576:	4b53      	ldr	r3, [pc, #332]	@ (80026c4 <MX_GPIO_Init+0x218>)
 8002578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800257c:	4a51      	ldr	r2, [pc, #324]	@ (80026c4 <MX_GPIO_Init+0x218>)
 800257e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002582:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002586:	4b4f      	ldr	r3, [pc, #316]	@ (80026c4 <MX_GPIO_Init+0x218>)
 8002588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800258c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002594:	4b4b      	ldr	r3, [pc, #300]	@ (80026c4 <MX_GPIO_Init+0x218>)
 8002596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800259a:	4a4a      	ldr	r2, [pc, #296]	@ (80026c4 <MX_GPIO_Init+0x218>)
 800259c:	f043 0308 	orr.w	r3, r3, #8
 80025a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025a4:	4b47      	ldr	r3, [pc, #284]	@ (80026c4 <MX_GPIO_Init+0x218>)
 80025a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80025b2:	2200      	movs	r2, #0
 80025b4:	f64c 71fe 	movw	r1, #53246	@ 0xcffe
 80025b8:	4843      	ldr	r0, [pc, #268]	@ (80026c8 <MX_GPIO_Init+0x21c>)
 80025ba:	f006 fc79 	bl	8008eb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 80025be:	2200      	movs	r2, #0
 80025c0:	f64c 611e 	movw	r1, #52766	@ 0xce1e
 80025c4:	4841      	ldr	r0, [pc, #260]	@ (80026cc <MX_GPIO_Init+0x220>)
 80025c6:	f006 fc73 	bl	8008eb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80025ca:	2200      	movs	r2, #0
 80025cc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80025d0:	483f      	ldr	r0, [pc, #252]	@ (80026d0 <MX_GPIO_Init+0x224>)
 80025d2:	f006 fc6d 	bl	8008eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 80025d6:	f243 0306 	movw	r3, #12294	@ 0x3006
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ea:	4619      	mov	r1, r3
 80025ec:	4839      	ldr	r0, [pc, #228]	@ (80026d4 <MX_GPIO_Init+0x228>)
 80025ee:	f006 fab7 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80025f2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002606:	4619      	mov	r1, r3
 8002608:	4833      	ldr	r0, [pc, #204]	@ (80026d8 <MX_GPIO_Init+0x22c>)
 800260a:	f006 faa9 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800260e:	2301      	movs	r3, #1
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002612:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002616:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800261c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002620:	4619      	mov	r1, r3
 8002622:	4829      	ldr	r0, [pc, #164]	@ (80026c8 <MX_GPIO_Init+0x21c>)
 8002624:	f006 fa9c 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG6 PG7 PG8
                           PG9 PG10 PG11 PG14
                           PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002628:	f64c 73fe 	movw	r3, #53246	@ 0xcffe
 800262c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800263a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800263e:	4619      	mov	r1, r3
 8002640:	4821      	ldr	r0, [pc, #132]	@ (80026c8 <MX_GPIO_Init+0x21c>)
 8002642:	f006 fa8d 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8002646:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800264c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002650:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800265a:	4619      	mov	r1, r3
 800265c:	481f      	ldr	r0, [pc, #124]	@ (80026dc <MX_GPIO_Init+0x230>)
 800265e:	f006 fa7f 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002662:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002668:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800266c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002676:	4619      	mov	r1, r3
 8002678:	4814      	ldr	r0, [pc, #80]	@ (80026cc <MX_GPIO_Init+0x220>)
 800267a:	f006 fa71 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD14
                           PD15 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 800267e:	f64c 631e 	movw	r3, #52766	@ 0xce1e
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002684:	2301      	movs	r3, #1
 8002686:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002694:	4619      	mov	r1, r3
 8002696:	480d      	ldr	r0, [pc, #52]	@ (80026cc <MX_GPIO_Init+0x220>)
 8002698:	f006 fa62 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800269c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a2:	2301      	movs	r3, #1
 80026a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b2:	4619      	mov	r1, r3
 80026b4:	4806      	ldr	r0, [pc, #24]	@ (80026d0 <MX_GPIO_Init+0x224>)
 80026b6:	f006 fa53 	bl	8008b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80026ba:	bf00      	nop
 80026bc:	3738      	adds	r7, #56	@ 0x38
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	58024400 	.word	0x58024400
 80026c8:	58021800 	.word	0x58021800
 80026cc:	58020c00 	.word	0x58020c00
 80026d0:	58020800 	.word	0x58020800
 80026d4:	58020400 	.word	0x58020400
 80026d8:	58021400 	.word	0x58021400
 80026dc:	58021000 	.word	0x58021000

080026e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e4:	b672      	cpsid	i
}
 80026e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <Error_Handler+0x8>

080026ec <_Z5setupv>:
//  }
//}



void setup(){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	//ros_setup();
	//path_setup();
//	ROS1::init();
	HAL_TIM_Base_Start_IT(&htim7);
 80026f0:	4807      	ldr	r0, [pc, #28]	@ (8002710 <_Z5setupv+0x24>)
 80026f2:	f00a f909 	bl	800c908 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 80026f6:	4807      	ldr	r0, [pc, #28]	@ (8002714 <_Z5setupv+0x28>)
 80026f8:	f00a f906 	bl	800c908 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80026fc:	4806      	ldr	r0, [pc, #24]	@ (8002718 <_Z5setupv+0x2c>)
 80026fe:	f00a f903 	bl	800c908 <HAL_TIM_Base_Start_IT>
	chassis_setup();
 8002702:	f7fe f9ff 	bl	8000b04 <_Z13chassis_setupv>
	//lifter_setup();
	path_setup();
 8002706:	f012 f871 	bl	80147ec <_Z10path_setupv>
//	ros_setup();

}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	240006c4 	.word	0x240006c4
 8002714:	24000678 	.word	0x24000678
 8002718:	240007a8 	.word	0x240007a8

0800271c <main_function>:
{
	//ros_loop();
}


void main_function(){
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	//path_setup();
	setup();
 8002720:	f7ff ffe4 	bl	80026ec <_Z5setupv>

	while(1){
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <main_function+0x8>

08002728 <HAL_TIM_PeriodElapsedCallback>:
}




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

	if (htim -> Instance == TIM6){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a15      	ldr	r2, [pc, #84]	@ (800278c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d11a      	bne.n	8002770 <HAL_TIM_PeriodElapsedCallback+0x48>
//		chassis_move();
		path(path_dir);
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f012 f9c0 	bl	8014ac4 <_Z4pathi>
		//ROS1::spinCycle();
		//path(path_dir);
		chassis_update_speed(cmd_v_x,cmd_v_y,cmd_v_w);
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800274c:	ed93 7a00 	vldr	s14, [r3]
 8002750:	4b12      	ldr	r3, [pc, #72]	@ (800279c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002752:	edd3 6a00 	vldr	s13, [r3]
 8002756:	eeb0 1a66 	vmov.f32	s2, s13
 800275a:	eef0 0a47 	vmov.f32	s1, s14
 800275e:	eeb0 0a67 	vmov.f32	s0, s15
 8002762:	f7fe fc01 	bl	8000f68 <_Z20chassis_update_speedfff>
		//move_mode();
		ms++;
 8002766:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	4a0c      	ldr	r2, [pc, #48]	@ (80027a0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800276e:	6013      	str	r3, [r2, #0]
		}
	if (htim -> Instance == TIM13){
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0b      	ldr	r2, [pc, #44]	@ (80027a4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d104      	bne.n	8002784 <HAL_TIM_PeriodElapsedCallback+0x5c>
	   // path();
//		lifter_measuredistance();
	    test++;
 800277a:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	4a09      	ldr	r2, [pc, #36]	@ (80027a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002782:	6013      	str	r3, [r2, #0]
	    }
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40001000 	.word	0x40001000
 8002790:	24003840 	.word	0x24003840
 8002794:	24003844 	.word	0x24003844
 8002798:	24003848 	.word	0x24003848
 800279c:	2400384c 	.word	0x2400384c
 80027a0:	24000c78 	.word	0x24000c78
 80027a4:	40001c00 	.word	0x40001c00
 80027a8:	24000014 	.word	0x24000014

080027ac <HAL_ADC_ConvCpltCallback>:

int adc1 = 0,adc3 = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	if (hadc -> Instance == ADC1){
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0b      	ldr	r2, [pc, #44]	@ (80027e8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d104      	bne.n	80027c8 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1++;
 80027be:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <HAL_ADC_ConvCpltCallback+0x40>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3301      	adds	r3, #1
 80027c4:	4a09      	ldr	r2, [pc, #36]	@ (80027ec <HAL_ADC_ConvCpltCallback+0x40>)
 80027c6:	6013      	str	r3, [r2, #0]
	}
	if (hadc -> Instance == ADC3){
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a08      	ldr	r2, [pc, #32]	@ (80027f0 <HAL_ADC_ConvCpltCallback+0x44>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d104      	bne.n	80027dc <HAL_ADC_ConvCpltCallback+0x30>
		adc3++;
 80027d2:	4b08      	ldr	r3, [pc, #32]	@ (80027f4 <HAL_ADC_ConvCpltCallback+0x48>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	4a06      	ldr	r2, [pc, #24]	@ (80027f4 <HAL_ADC_ConvCpltCallback+0x48>)
 80027da:	6013      	str	r3, [r2, #0]
	}
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40022000 	.word	0x40022000
 80027ec:	24000c7c 	.word	0x24000c7c
 80027f0:	58026000 	.word	0x58026000
 80027f4:	24000c80 	.word	0x24000c80

080027f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <HAL_MspInit+0x3c>)
 8002800:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002804:	4a0b      	ldr	r2, [pc, #44]	@ (8002834 <HAL_MspInit+0x3c>)
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800280e:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <HAL_MspInit+0x3c>)
 8002810:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2100      	movs	r1, #0
 8002820:	2005      	movs	r0, #5
 8002822:	f003 fb30 	bl	8005e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002826:	2005      	movs	r0, #5
 8002828:	f003 fb47 	bl	8005eba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	58024400 	.word	0x58024400

08002838 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b090      	sub	sp, #64	@ 0x40
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4aaf      	ldr	r2, [pc, #700]	@ (8002b14 <HAL_ADC_MspInit+0x2dc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	f040 8087 	bne.w	800296a <HAL_ADC_MspInit+0x132>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800285c:	4bae      	ldr	r3, [pc, #696]	@ (8002b18 <HAL_ADC_MspInit+0x2e0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	4aad      	ldr	r2, [pc, #692]	@ (8002b18 <HAL_ADC_MspInit+0x2e0>)
 8002864:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002866:	4bac      	ldr	r3, [pc, #688]	@ (8002b18 <HAL_ADC_MspInit+0x2e0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10e      	bne.n	800288c <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800286e:	4bab      	ldr	r3, [pc, #684]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002870:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002874:	4aa9      	ldr	r2, [pc, #676]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002876:	f043 0320 	orr.w	r3, r3, #32
 800287a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800287e:	4ba7      	ldr	r3, [pc, #668]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800288a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288c:	4ba3      	ldr	r3, [pc, #652]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002892:	4aa2      	ldr	r2, [pc, #648]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800289c:	4b9f      	ldr	r3, [pc, #636]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 800289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	4b9c      	ldr	r3, [pc, #624]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b0:	4a9a      	ldr	r2, [pc, #616]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028ba:	4b98      	ldr	r3, [pc, #608]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	623b      	str	r3, [r7, #32]
 80028c6:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028c8:	2310      	movs	r3, #16
 80028ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028cc:	2303      	movs	r3, #3
 80028ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028d8:	4619      	mov	r1, r3
 80028da:	4891      	ldr	r0, [pc, #580]	@ (8002b20 <HAL_ADC_MspInit+0x2e8>)
 80028dc:	f006 f940 	bl	8008b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80028e0:	2330      	movs	r3, #48	@ 0x30
 80028e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028e4:	2303      	movs	r3, #3
 80028e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028f0:	4619      	mov	r1, r3
 80028f2:	488c      	ldr	r0, [pc, #560]	@ (8002b24 <HAL_ADC_MspInit+0x2ec>)
 80028f4:	f006 f934 	bl	8008b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80028f8:	4b8b      	ldr	r3, [pc, #556]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 80028fa:	4a8c      	ldr	r2, [pc, #560]	@ (8002b2c <HAL_ADC_MspInit+0x2f4>)
 80028fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80028fe:	4b8a      	ldr	r3, [pc, #552]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 8002900:	2209      	movs	r2, #9
 8002902:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002904:	4b88      	ldr	r3, [pc, #544]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800290a:	4b87      	ldr	r3, [pc, #540]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 800290c:	2200      	movs	r2, #0
 800290e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002910:	4b85      	ldr	r3, [pc, #532]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 8002912:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002916:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002918:	4b83      	ldr	r3, [pc, #524]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 800291a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800291e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002920:	4b81      	ldr	r3, [pc, #516]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 8002922:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002926:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002928:	4b7f      	ldr	r3, [pc, #508]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 800292a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800292e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002930:	4b7d      	ldr	r3, [pc, #500]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 8002932:	2200      	movs	r2, #0
 8002934:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002936:	4b7c      	ldr	r3, [pc, #496]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 8002938:	2200      	movs	r2, #0
 800293a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800293c:	487a      	ldr	r0, [pc, #488]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 800293e:	f003 fad7 	bl	8005ef0 <HAL_DMA_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8002948:	f7ff feca 	bl	80026e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a76      	ldr	r2, [pc, #472]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 8002950:	659a      	str	r2, [r3, #88]	@ 0x58
 8002952:	4a75      	ldr	r2, [pc, #468]	@ (8002b28 <HAL_ADC_MspInit+0x2f0>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	2012      	movs	r0, #18
 800295e:	f003 fa92 	bl	8005e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002962:	2012      	movs	r0, #18
 8002964:	f003 faa9 	bl	8005eba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002968:	e0d0      	b.n	8002b0c <HAL_ADC_MspInit+0x2d4>
  else if(hadc->Instance==ADC2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a70      	ldr	r2, [pc, #448]	@ (8002b30 <HAL_ADC_MspInit+0x2f8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d13b      	bne.n	80029ec <HAL_ADC_MspInit+0x1b4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002974:	4b68      	ldr	r3, [pc, #416]	@ (8002b18 <HAL_ADC_MspInit+0x2e0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	4a67      	ldr	r2, [pc, #412]	@ (8002b18 <HAL_ADC_MspInit+0x2e0>)
 800297c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800297e:	4b66      	ldr	r3, [pc, #408]	@ (8002b18 <HAL_ADC_MspInit+0x2e0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d10e      	bne.n	80029a4 <HAL_ADC_MspInit+0x16c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002986:	4b65      	ldr	r3, [pc, #404]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002988:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800298c:	4a63      	ldr	r2, [pc, #396]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 800298e:	f043 0320 	orr.w	r3, r3, #32
 8002992:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002996:	4b61      	ldr	r3, [pc, #388]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a4:	4b5d      	ldr	r3, [pc, #372]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 80029a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029aa:	4a5c      	ldr	r2, [pc, #368]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029b4:	4b59      	ldr	r3, [pc, #356]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 80029b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029c2:	2340      	movs	r3, #64	@ 0x40
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029c6:	2303      	movs	r3, #3
 80029c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029d2:	4619      	mov	r1, r3
 80029d4:	4852      	ldr	r0, [pc, #328]	@ (8002b20 <HAL_ADC_MspInit+0x2e8>)
 80029d6:	f006 f8c3 	bl	8008b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	2012      	movs	r0, #18
 80029e0:	f003 fa51 	bl	8005e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80029e4:	2012      	movs	r0, #18
 80029e6:	f003 fa68 	bl	8005eba <HAL_NVIC_EnableIRQ>
}
 80029ea:	e08f      	b.n	8002b0c <HAL_ADC_MspInit+0x2d4>
  else if(hadc->Instance==ADC3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a50      	ldr	r2, [pc, #320]	@ (8002b34 <HAL_ADC_MspInit+0x2fc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	f040 808a 	bne.w	8002b0c <HAL_ADC_MspInit+0x2d4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029f8:	4b48      	ldr	r3, [pc, #288]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 80029fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029fe:	4a47      	ldr	r2, [pc, #284]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002a00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a08:	4b44      	ldr	r3, [pc, #272]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a16:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a1c:	4a3f      	ldr	r2, [pc, #252]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002a1e:	f043 0320 	orr.w	r3, r3, #32
 8002a22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a26:	4b3d      	ldr	r3, [pc, #244]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a34:	4b39      	ldr	r3, [pc, #228]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a3a:	4a38      	ldr	r2, [pc, #224]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a44:	4b35      	ldr	r3, [pc, #212]	@ (8002b1c <HAL_ADC_MspInit+0x2e4>)
 8002a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002a52:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8002a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a64:	4619      	mov	r1, r3
 8002a66:	4834      	ldr	r0, [pc, #208]	@ (8002b38 <HAL_ADC_MspInit+0x300>)
 8002a68:	f006 f87a 	bl	8008b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a70:	2303      	movs	r3, #3
 8002a72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4829      	ldr	r0, [pc, #164]	@ (8002b24 <HAL_ADC_MspInit+0x2ec>)
 8002a80:	f006 f86e 	bl	8008b60 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002a84:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002a88:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002a8c:	f001 f88e 	bl	8003bac <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002a90:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002a94:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002a98:	f001 f888 	bl	8003bac <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream5;
 8002a9c:	4b27      	ldr	r3, [pc, #156]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002a9e:	4a28      	ldr	r2, [pc, #160]	@ (8002b40 <HAL_ADC_MspInit+0x308>)
 8002aa0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002aa2:	4b26      	ldr	r3, [pc, #152]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002aa4:	2273      	movs	r2, #115	@ 0x73
 8002aa6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa8:	4b24      	ldr	r3, [pc, #144]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aae:	4b23      	ldr	r3, [pc, #140]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002ab4:	4b21      	ldr	r3, [pc, #132]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aba:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002abc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002abe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ac2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002ac6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aca:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002acc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002ace:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ad2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002ad4:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ada:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002ae0:	4816      	ldr	r0, [pc, #88]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002ae2:	f003 fa05 	bl	8005ef0 <HAL_DMA_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_ADC_MspInit+0x2b8>
      Error_Handler();
 8002aec:	f7ff fdf8 	bl	80026e0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a12      	ldr	r2, [pc, #72]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002af4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002af6:	4a11      	ldr	r2, [pc, #68]	@ (8002b3c <HAL_ADC_MspInit+0x304>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 1, 0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2101      	movs	r1, #1
 8002b00:	207f      	movs	r0, #127	@ 0x7f
 8002b02:	f003 f9c0 	bl	8005e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002b06:	207f      	movs	r0, #127	@ 0x7f
 8002b08:	f003 f9d7 	bl	8005eba <HAL_NVIC_EnableIRQ>
}
 8002b0c:	bf00      	nop
 8002b0e:	3740      	adds	r7, #64	@ 0x40
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40022000 	.word	0x40022000
 8002b18:	24000c84 	.word	0x24000c84
 8002b1c:	58024400 	.word	0x58024400
 8002b20:	58020000 	.word	0x58020000
 8002b24:	58020800 	.word	0x58020800
 8002b28:	24000364 	.word	0x24000364
 8002b2c:	40020010 	.word	0x40020010
 8002b30:	40022100 	.word	0x40022100
 8002b34:	58026000 	.word	0x58026000
 8002b38:	58021400 	.word	0x58021400
 8002b3c:	240003dc 	.word	0x240003dc
 8002b40:	40020088 	.word	0x40020088

08002b44 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0ba      	sub	sp, #232	@ 0xe8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b5c:	f107 0318 	add.w	r3, r7, #24
 8002b60:	22b8      	movs	r2, #184	@ 0xb8
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f012 f99b 	bl	8014ea0 <memset>
  if(hi2c->Instance==I2C1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a4c      	ldr	r2, [pc, #304]	@ (8002ca0 <HAL_I2C_MspInit+0x15c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d146      	bne.n	8002c02 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b74:	f04f 0208 	mov.w	r2, #8
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b86:	f107 0318 	add.w	r3, r7, #24
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f007 fa7e 	bl	800a08c <HAL_RCCEx_PeriphCLKConfig>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002b96:	f7ff fda3 	bl	80026e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	4b42      	ldr	r3, [pc, #264]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ba0:	4a40      	ldr	r2, [pc, #256]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002ba2:	f043 0302 	orr.w	r3, r3, #2
 8002ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002baa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bb8:	23c0      	movs	r3, #192	@ 0xc0
 8002bba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bbe:	2312      	movs	r3, #18
 8002bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4832      	ldr	r0, [pc, #200]	@ (8002ca8 <HAL_I2C_MspInit+0x164>)
 8002bde:	f005 ffbf 	bl	8008b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002be2:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002be8:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002bea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002bf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c00:	e04a      	b.n	8002c98 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a29      	ldr	r2, [pc, #164]	@ (8002cac <HAL_I2C_MspInit+0x168>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d145      	bne.n	8002c98 <HAL_I2C_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c0c:	f04f 0208 	mov.w	r2, #8
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c1e:	f107 0318 	add.w	r3, r7, #24
 8002c22:	4618      	mov	r0, r3
 8002c24:	f007 fa32 	bl	800a08c <HAL_RCCEx_PeriphCLKConfig>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8002c2e:	f7ff fd57 	bl	80026e0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c32:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c38:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002c3a:	f043 0320 	orr.w	r3, r3, #32
 8002c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c42:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c50:	2303      	movs	r3, #3
 8002c52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c56:	2312      	movs	r3, #18
 8002c58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c68:	2304      	movs	r3, #4
 8002c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c6e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c72:	4619      	mov	r1, r3
 8002c74:	480e      	ldr	r0, [pc, #56]	@ (8002cb0 <HAL_I2C_MspInit+0x16c>)
 8002c76:	f005 ff73 	bl	8008b60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c80:	4a08      	ldr	r2, [pc, #32]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002c82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_I2C_MspInit+0x160>)
 8002c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	37e8      	adds	r7, #232	@ 0xe8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40005400 	.word	0x40005400
 8002ca4:	58024400 	.word	0x58024400
 8002ca8:	58020400 	.word	0x58020400
 8002cac:	40005800 	.word	0x40005800
 8002cb0:	58021400 	.word	0x58021400

08002cb4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b096      	sub	sp, #88	@ 0x58
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4aaf      	ldr	r2, [pc, #700]	@ (8002f90 <HAL_TIM_Encoder_MspInit+0x2dc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d12f      	bne.n	8002d36 <HAL_TIM_Encoder_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cd6:	4baf      	ldr	r3, [pc, #700]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cdc:	4aad      	ldr	r2, [pc, #692]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ce6:	4bab      	ldr	r3, [pc, #684]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cf4:	4ba7      	ldr	r3, [pc, #668]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cfa:	4aa6      	ldr	r2, [pc, #664]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002cfc:	f043 0310 	orr.w	r3, r3, #16
 8002d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d04:	4ba3      	ldr	r3, [pc, #652]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002d12:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002d16:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d24:	2301      	movs	r3, #1
 8002d26:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d28:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	489a      	ldr	r0, [pc, #616]	@ (8002f98 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d30:	f005 ff16 	bl	8008b60 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM24_MspInit 1 */

    /* USER CODE END TIM24_MspInit 1 */
  }

}
 8002d34:	e178      	b.n	8003028 <HAL_TIM_Encoder_MspInit+0x374>
  else if(htim_encoder->Instance==TIM2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d3e:	d14d      	bne.n	8002ddc <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d40:	4b94      	ldr	r3, [pc, #592]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d46:	4a93      	ldr	r2, [pc, #588]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d50:	4b90      	ldr	r3, [pc, #576]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d64:	4a8b      	ldr	r2, [pc, #556]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d6e:	4b89      	ldr	r3, [pc, #548]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7c:	4b85      	ldr	r3, [pc, #532]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d82:	4a84      	ldr	r2, [pc, #528]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d8c:	4b81      	ldr	r3, [pc, #516]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002daa:	2301      	movs	r3, #1
 8002dac:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002db2:	4619      	mov	r1, r3
 8002db4:	4879      	ldr	r0, [pc, #484]	@ (8002f9c <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002db6:	f005 fed3 	bl	8008b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dba:	2308      	movs	r3, #8
 8002dbc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4872      	ldr	r0, [pc, #456]	@ (8002fa0 <HAL_TIM_Encoder_MspInit+0x2ec>)
 8002dd6:	f005 fec3 	bl	8008b60 <HAL_GPIO_Init>
}
 8002dda:	e125      	b.n	8003028 <HAL_TIM_Encoder_MspInit+0x374>
  else if(htim_encoder->Instance==TIM3)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a70      	ldr	r2, [pc, #448]	@ (8002fa4 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d12e      	bne.n	8002e44 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002de6:	4b6b      	ldr	r3, [pc, #428]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dec:	4a69      	ldr	r2, [pc, #420]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002dee:	f043 0302 	orr.w	r3, r3, #2
 8002df2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002df6:	4b67      	ldr	r3, [pc, #412]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e04:	4b63      	ldr	r3, [pc, #396]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e0a:	4a62      	ldr	r2, [pc, #392]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e14:	4b5f      	ldr	r3, [pc, #380]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e22:	2330      	movs	r3, #48	@ 0x30
 8002e24:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e32:	2302      	movs	r3, #2
 8002e34:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4858      	ldr	r0, [pc, #352]	@ (8002fa0 <HAL_TIM_Encoder_MspInit+0x2ec>)
 8002e3e:	f005 fe8f 	bl	8008b60 <HAL_GPIO_Init>
}
 8002e42:	e0f1      	b.n	8003028 <HAL_TIM_Encoder_MspInit+0x374>
  else if(htim_encoder->Instance==TIM4)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a57      	ldr	r2, [pc, #348]	@ (8002fa8 <HAL_TIM_Encoder_MspInit+0x2f4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d12f      	bne.n	8002eae <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e4e:	4b51      	ldr	r3, [pc, #324]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e54:	4a4f      	ldr	r2, [pc, #316]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e56:	f043 0304 	orr.w	r3, r3, #4
 8002e5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e6c:	4b49      	ldr	r3, [pc, #292]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e72:	4a48      	ldr	r2, [pc, #288]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e74:	f043 0308 	orr.w	r3, r3, #8
 8002e78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e7c:	4b45      	ldr	r3, [pc, #276]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	623b      	str	r3, [r7, #32]
 8002e88:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002e8a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002e8e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e90:	2302      	movs	r3, #2
 8002e92:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ea0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4841      	ldr	r0, [pc, #260]	@ (8002fac <HAL_TIM_Encoder_MspInit+0x2f8>)
 8002ea8:	f005 fe5a 	bl	8008b60 <HAL_GPIO_Init>
}
 8002eac:	e0bc      	b.n	8003028 <HAL_TIM_Encoder_MspInit+0x374>
  else if(htim_encoder->Instance==TIM8)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a3f      	ldr	r2, [pc, #252]	@ (8002fb0 <HAL_TIM_Encoder_MspInit+0x2fc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d136      	bne.n	8002f26 <HAL_TIM_Encoder_MspInit+0x272>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002eb8:	4b36      	ldr	r3, [pc, #216]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ebe:	4a35      	ldr	r2, [pc, #212]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ec8:	4b32      	ldr	r3, [pc, #200]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002edc:	4a2d      	ldr	r2, [pc, #180]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ef4:	23c0      	movs	r3, #192	@ 0xc0
 8002ef6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f00:	2300      	movs	r3, #0
 8002f02:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002f04:	2303      	movs	r3, #3
 8002f06:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f08:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4829      	ldr	r0, [pc, #164]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x300>)
 8002f10:	f005 fe26 	bl	8008b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2100      	movs	r1, #0
 8002f18:	202c      	movs	r0, #44	@ 0x2c
 8002f1a:	f002 ffb4 	bl	8005e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002f1e:	202c      	movs	r0, #44	@ 0x2c
 8002f20:	f002 ffcb 	bl	8005eba <HAL_NVIC_EnableIRQ>
}
 8002f24:	e080      	b.n	8003028 <HAL_TIM_Encoder_MspInit+0x374>
  else if(htim_encoder->Instance==TIM23)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a23      	ldr	r2, [pc, #140]	@ (8002fb8 <HAL_TIM_Encoder_MspInit+0x304>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d147      	bne.n	8002fc0 <HAL_TIM_Encoder_MspInit+0x30c>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002f30:	4b18      	ldr	r3, [pc, #96]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002f36:	4a17      	ldr	r2, [pc, #92]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f3c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002f40:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002f46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f4e:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f54:	4a0f      	ldr	r2, [pc, #60]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002f6c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002f70:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	2302      	movs	r3, #2
 8002f74:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002f7e:	230d      	movs	r3, #13
 8002f80:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f82:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002f86:	4619      	mov	r1, r3
 8002f88:	480c      	ldr	r0, [pc, #48]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x308>)
 8002f8a:	f005 fde9 	bl	8008b60 <HAL_GPIO_Init>
}
 8002f8e:	e04b      	b.n	8003028 <HAL_TIM_Encoder_MspInit+0x374>
 8002f90:	40010000 	.word	0x40010000
 8002f94:	58024400 	.word	0x58024400
 8002f98:	58021000 	.word	0x58021000
 8002f9c:	58020000 	.word	0x58020000
 8002fa0:	58020400 	.word	0x58020400
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40000800 	.word	0x40000800
 8002fac:	58020c00 	.word	0x58020c00
 8002fb0:	40010400 	.word	0x40010400
 8002fb4:	58020800 	.word	0x58020800
 8002fb8:	4000e000 	.word	0x4000e000
 8002fbc:	58021800 	.word	0x58021800
  else if(htim_encoder->Instance==TIM24)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8003030 <HAL_TIM_Encoder_MspInit+0x37c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d12e      	bne.n	8003028 <HAL_TIM_Encoder_MspInit+0x374>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8002fca:	4b1a      	ldr	r3, [pc, #104]	@ (8003034 <HAL_TIM_Encoder_MspInit+0x380>)
 8002fcc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002fd0:	4a18      	ldr	r2, [pc, #96]	@ (8003034 <HAL_TIM_Encoder_MspInit+0x380>)
 8002fd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fd6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002fda:	4b16      	ldr	r3, [pc, #88]	@ (8003034 <HAL_TIM_Encoder_MspInit+0x380>)
 8002fdc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fe8:	4b12      	ldr	r3, [pc, #72]	@ (8003034 <HAL_TIM_Encoder_MspInit+0x380>)
 8002fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fee:	4a11      	ldr	r2, [pc, #68]	@ (8003034 <HAL_TIM_Encoder_MspInit+0x380>)
 8002ff0:	f043 0320 	orr.w	r3, r3, #32
 8002ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8003034 <HAL_TIM_Encoder_MspInit+0x380>)
 8002ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003006:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800300a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300c:	2302      	movs	r3, #2
 800300e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003014:	2300      	movs	r3, #0
 8003016:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8003018:	230e      	movs	r3, #14
 800301a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800301c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003020:	4619      	mov	r1, r3
 8003022:	4805      	ldr	r0, [pc, #20]	@ (8003038 <HAL_TIM_Encoder_MspInit+0x384>)
 8003024:	f005 fd9c 	bl	8008b60 <HAL_GPIO_Init>
}
 8003028:	bf00      	nop
 800302a:	3758      	adds	r7, #88	@ 0x58
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	4000e400 	.word	0x4000e400
 8003034:	58024400 	.word	0x58024400
 8003038:	58021400 	.word	0x58021400

0800303c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a20      	ldr	r2, [pc, #128]	@ (80030cc <HAL_TIM_PWM_MspInit+0x90>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10f      	bne.n	800306e <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800304e:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <HAL_TIM_PWM_MspInit+0x94>)
 8003050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003054:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <HAL_TIM_PWM_MspInit+0x94>)
 8003056:	f043 0308 	orr.w	r3, r3, #8
 800305a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800305e:	4b1c      	ldr	r3, [pc, #112]	@ (80030d0 <HAL_TIM_PWM_MspInit+0x94>)
 8003060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM15_MspInit 1 */

    /* USER CODE END TIM15_MspInit 1 */
  }

}
 800306c:	e028      	b.n	80030c0 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM12)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a18      	ldr	r2, [pc, #96]	@ (80030d4 <HAL_TIM_PWM_MspInit+0x98>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d10f      	bne.n	8003098 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003078:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <HAL_TIM_PWM_MspInit+0x94>)
 800307a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800307e:	4a14      	ldr	r2, [pc, #80]	@ (80030d0 <HAL_TIM_PWM_MspInit+0x94>)
 8003080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003084:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003088:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <HAL_TIM_PWM_MspInit+0x94>)
 800308a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800308e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
}
 8003096:	e013      	b.n	80030c0 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM15)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0e      	ldr	r2, [pc, #56]	@ (80030d8 <HAL_TIM_PWM_MspInit+0x9c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80030a2:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_TIM_PWM_MspInit+0x94>)
 80030a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030a8:	4a09      	ldr	r2, [pc, #36]	@ (80030d0 <HAL_TIM_PWM_MspInit+0x94>)
 80030aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030b2:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <HAL_TIM_PWM_MspInit+0x94>)
 80030b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40000c00 	.word	0x40000c00
 80030d0:	58024400 	.word	0x58024400
 80030d4:	40001800 	.word	0x40001800
 80030d8:	40014000 	.word	0x40014000

080030dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a40      	ldr	r2, [pc, #256]	@ (80031ec <HAL_TIM_Base_MspInit+0x110>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d117      	bne.n	800311e <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030ee:	4b40      	ldr	r3, [pc, #256]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 80030f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030f4:	4a3e      	ldr	r2, [pc, #248]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 80030f6:	f043 0310 	orr.w	r3, r3, #16
 80030fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030fe:	4b3c      	ldr	r3, [pc, #240]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 8003100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800310c:	2200      	movs	r2, #0
 800310e:	2100      	movs	r1, #0
 8003110:	2036      	movs	r0, #54	@ 0x36
 8003112:	f002 feb8 	bl	8005e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003116:	2036      	movs	r0, #54	@ 0x36
 8003118:	f002 fecf 	bl	8005eba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 800311c:	e062      	b.n	80031e4 <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM7)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a34      	ldr	r2, [pc, #208]	@ (80031f4 <HAL_TIM_Base_MspInit+0x118>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d117      	bne.n	8003158 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003128:	4b31      	ldr	r3, [pc, #196]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 800312a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800312e:	4a30      	ldr	r2, [pc, #192]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 8003130:	f043 0320 	orr.w	r3, r3, #32
 8003134:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003138:	4b2d      	ldr	r3, [pc, #180]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 800313a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	2037      	movs	r0, #55	@ 0x37
 800314c:	f002 fe9b 	bl	8005e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003150:	2037      	movs	r0, #55	@ 0x37
 8003152:	f002 feb2 	bl	8005eba <HAL_NVIC_EnableIRQ>
}
 8003156:	e045      	b.n	80031e4 <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM13)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a26      	ldr	r2, [pc, #152]	@ (80031f8 <HAL_TIM_Base_MspInit+0x11c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d117      	bne.n	8003192 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003162:	4b23      	ldr	r3, [pc, #140]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 8003164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003168:	4a21      	ldr	r2, [pc, #132]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 800316a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800316e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003172:	4b1f      	ldr	r3, [pc, #124]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 8003174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003180:	2200      	movs	r2, #0
 8003182:	2100      	movs	r1, #0
 8003184:	202c      	movs	r0, #44	@ 0x2c
 8003186:	f002 fe7e 	bl	8005e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800318a:	202c      	movs	r0, #44	@ 0x2c
 800318c:	f002 fe95 	bl	8005eba <HAL_NVIC_EnableIRQ>
}
 8003190:	e028      	b.n	80031e4 <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM16)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a19      	ldr	r2, [pc, #100]	@ (80031fc <HAL_TIM_Base_MspInit+0x120>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d10f      	bne.n	80031bc <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800319c:	4b14      	ldr	r3, [pc, #80]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 800319e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031a2:	4a13      	ldr	r2, [pc, #76]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 80031a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031ac:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 80031ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	693b      	ldr	r3, [r7, #16]
}
 80031ba:	e013      	b.n	80031e4 <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM17)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003200 <HAL_TIM_Base_MspInit+0x124>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80031c6:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 80031c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031cc:	4a08      	ldr	r2, [pc, #32]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 80031ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031d6:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <HAL_TIM_Base_MspInit+0x114>)
 80031d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
}
 80031e4:	bf00      	nop
 80031e6:	3720      	adds	r7, #32
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40001000 	.word	0x40001000
 80031f0:	58024400 	.word	0x58024400
 80031f4:	40001400 	.word	0x40001400
 80031f8:	40001c00 	.word	0x40001c00
 80031fc:	40014400 	.word	0x40014400
 8003200:	40014800 	.word	0x40014800

08003204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08c      	sub	sp, #48	@ 0x30
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 031c 	add.w	r3, r7, #28
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a5e      	ldr	r2, [pc, #376]	@ (800339c <HAL_TIM_MspPostInit+0x198>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d11f      	bne.n	8003266 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003226:	4b5e      	ldr	r3, [pc, #376]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 8003228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800322c:	4a5c      	ldr	r2, [pc, #368]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003236:	4b5a      	ldr	r3, [pc, #360]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 8003238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003244:	230f      	movs	r3, #15
 8003246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	2302      	movs	r3, #2
 800324a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003250:	2300      	movs	r3, #0
 8003252:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003254:	2302      	movs	r3, #2
 8003256:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	4619      	mov	r1, r3
 800325e:	4851      	ldr	r0, [pc, #324]	@ (80033a4 <HAL_TIM_MspPostInit+0x1a0>)
 8003260:	f005 fc7e 	bl	8008b60 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003264:	e095      	b.n	8003392 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM12)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a4f      	ldr	r2, [pc, #316]	@ (80033a8 <HAL_TIM_MspPostInit+0x1a4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d120      	bne.n	80032b2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003270:	4b4b      	ldr	r3, [pc, #300]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 8003272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003276:	4a4a      	ldr	r2, [pc, #296]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 8003278:	f043 0302 	orr.w	r3, r3, #2
 800327c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003280:	4b47      	ldr	r3, [pc, #284]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 8003282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800328e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80032a0:	2302      	movs	r3, #2
 80032a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	4619      	mov	r1, r3
 80032aa:	4840      	ldr	r0, [pc, #256]	@ (80033ac <HAL_TIM_MspPostInit+0x1a8>)
 80032ac:	f005 fc58 	bl	8008b60 <HAL_GPIO_Init>
}
 80032b0:	e06f      	b.n	8003392 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a3e      	ldr	r2, [pc, #248]	@ (80033b0 <HAL_TIM_MspPostInit+0x1ac>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d11f      	bne.n	80032fc <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032bc:	4b38      	ldr	r3, [pc, #224]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 80032be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032c2:	4a37      	ldr	r2, [pc, #220]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 80032c4:	f043 0310 	orr.w	r3, r3, #16
 80032c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032cc:	4b34      	ldr	r3, [pc, #208]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 80032ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80032da:	2360      	movs	r3, #96	@ 0x60
 80032dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	2302      	movs	r3, #2
 80032e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e6:	2300      	movs	r3, #0
 80032e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80032ea:	2304      	movs	r3, #4
 80032ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032ee:	f107 031c 	add.w	r3, r7, #28
 80032f2:	4619      	mov	r1, r3
 80032f4:	482f      	ldr	r0, [pc, #188]	@ (80033b4 <HAL_TIM_MspPostInit+0x1b0>)
 80032f6:	f005 fc33 	bl	8008b60 <HAL_GPIO_Init>
}
 80032fa:	e04a      	b.n	8003392 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM16)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2d      	ldr	r2, [pc, #180]	@ (80033b8 <HAL_TIM_MspPostInit+0x1b4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d120      	bne.n	8003348 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003306:	4b26      	ldr	r3, [pc, #152]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 8003308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800330c:	4a24      	ldr	r2, [pc, #144]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003316:	4b22      	ldr	r3, [pc, #136]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 8003318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003324:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	2300      	movs	r3, #0
 8003334:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003336:	2301      	movs	r3, #1
 8003338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333a:	f107 031c 	add.w	r3, r7, #28
 800333e:	4619      	mov	r1, r3
 8003340:	481a      	ldr	r0, [pc, #104]	@ (80033ac <HAL_TIM_MspPostInit+0x1a8>)
 8003342:	f005 fc0d 	bl	8008b60 <HAL_GPIO_Init>
}
 8003346:	e024      	b.n	8003392 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM17)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1b      	ldr	r2, [pc, #108]	@ (80033bc <HAL_TIM_MspPostInit+0x1b8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d11f      	bne.n	8003392 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003352:	4b13      	ldr	r3, [pc, #76]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 8003354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003358:	4a11      	ldr	r2, [pc, #68]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 800335a:	f043 0302 	orr.w	r3, r3, #2
 800335e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003362:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <HAL_TIM_MspPostInit+0x19c>)
 8003364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337e:	2300      	movs	r3, #0
 8003380:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003382:	2301      	movs	r3, #1
 8003384:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003386:	f107 031c 	add.w	r3, r7, #28
 800338a:	4619      	mov	r1, r3
 800338c:	4807      	ldr	r0, [pc, #28]	@ (80033ac <HAL_TIM_MspPostInit+0x1a8>)
 800338e:	f005 fbe7 	bl	8008b60 <HAL_GPIO_Init>
}
 8003392:	bf00      	nop
 8003394:	3730      	adds	r7, #48	@ 0x30
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40000c00 	.word	0x40000c00
 80033a0:	58024400 	.word	0x58024400
 80033a4:	58020000 	.word	0x58020000
 80033a8:	40001800 	.word	0x40001800
 80033ac:	58020400 	.word	0x58020400
 80033b0:	40014000 	.word	0x40014000
 80033b4:	58021000 	.word	0x58021000
 80033b8:	40014400 	.word	0x40014400
 80033bc:	40014800 	.word	0x40014800

080033c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b0ba      	sub	sp, #232	@ 0xe8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033d8:	f107 0318 	add.w	r3, r7, #24
 80033dc:	22b8      	movs	r2, #184	@ 0xb8
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f011 fd5d 	bl	8014ea0 <memset>
  if(huart->Instance==USART1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a59      	ldr	r2, [pc, #356]	@ (8003550 <HAL_UART_MspInit+0x190>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	f040 80bd 	bne.w	800356c <HAL_UART_MspInit+0x1ac>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033f2:	f04f 0201 	mov.w	r2, #1
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003404:	f107 0318 	add.w	r3, r7, #24
 8003408:	4618      	mov	r0, r3
 800340a:	f006 fe3f 	bl	800a08c <HAL_RCCEx_PeriphCLKConfig>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003414:	f7ff f964 	bl	80026e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003418:	4b4e      	ldr	r3, [pc, #312]	@ (8003554 <HAL_UART_MspInit+0x194>)
 800341a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800341e:	4a4d      	ldr	r2, [pc, #308]	@ (8003554 <HAL_UART_MspInit+0x194>)
 8003420:	f043 0310 	orr.w	r3, r3, #16
 8003424:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003428:	4b4a      	ldr	r3, [pc, #296]	@ (8003554 <HAL_UART_MspInit+0x194>)
 800342a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003436:	4b47      	ldr	r3, [pc, #284]	@ (8003554 <HAL_UART_MspInit+0x194>)
 8003438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800343c:	4a45      	ldr	r2, [pc, #276]	@ (8003554 <HAL_UART_MspInit+0x194>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003446:	4b43      	ldr	r3, [pc, #268]	@ (8003554 <HAL_UART_MspInit+0x194>)
 8003448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003454:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003458:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003468:	2300      	movs	r3, #0
 800346a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800346e:	2307      	movs	r3, #7
 8003470:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003474:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003478:	4619      	mov	r1, r3
 800347a:	4837      	ldr	r0, [pc, #220]	@ (8003558 <HAL_UART_MspInit+0x198>)
 800347c:	f005 fb70 	bl	8008b60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream4;
 8003480:	4b36      	ldr	r3, [pc, #216]	@ (800355c <HAL_UART_MspInit+0x19c>)
 8003482:	4a37      	ldr	r2, [pc, #220]	@ (8003560 <HAL_UART_MspInit+0x1a0>)
 8003484:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003486:	4b35      	ldr	r3, [pc, #212]	@ (800355c <HAL_UART_MspInit+0x19c>)
 8003488:	222a      	movs	r2, #42	@ 0x2a
 800348a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800348c:	4b33      	ldr	r3, [pc, #204]	@ (800355c <HAL_UART_MspInit+0x19c>)
 800348e:	2240      	movs	r2, #64	@ 0x40
 8003490:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003492:	4b32      	ldr	r3, [pc, #200]	@ (800355c <HAL_UART_MspInit+0x19c>)
 8003494:	2200      	movs	r2, #0
 8003496:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003498:	4b30      	ldr	r3, [pc, #192]	@ (800355c <HAL_UART_MspInit+0x19c>)
 800349a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800349e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034a0:	4b2e      	ldr	r3, [pc, #184]	@ (800355c <HAL_UART_MspInit+0x19c>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034a6:	4b2d      	ldr	r3, [pc, #180]	@ (800355c <HAL_UART_MspInit+0x19c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80034ac:	4b2b      	ldr	r3, [pc, #172]	@ (800355c <HAL_UART_MspInit+0x19c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034b2:	4b2a      	ldr	r3, [pc, #168]	@ (800355c <HAL_UART_MspInit+0x19c>)
 80034b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80034b8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ba:	4b28      	ldr	r3, [pc, #160]	@ (800355c <HAL_UART_MspInit+0x19c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034c0:	4826      	ldr	r0, [pc, #152]	@ (800355c <HAL_UART_MspInit+0x19c>)
 80034c2:	f002 fd15 	bl	8005ef0 <HAL_DMA_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80034cc:	f7ff f908 	bl	80026e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a22      	ldr	r2, [pc, #136]	@ (800355c <HAL_UART_MspInit+0x19c>)
 80034d4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80034d6:	4a21      	ldr	r2, [pc, #132]	@ (800355c <HAL_UART_MspInit+0x19c>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream1;
 80034dc:	4b21      	ldr	r3, [pc, #132]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 80034de:	4a22      	ldr	r2, [pc, #136]	@ (8003568 <HAL_UART_MspInit+0x1a8>)
 80034e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80034e2:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 80034e4:	2229      	movs	r2, #41	@ 0x29
 80034e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 80034f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 80034fe:	2200      	movs	r2, #0
 8003500:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003502:	4b18      	ldr	r3, [pc, #96]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003508:	4b16      	ldr	r3, [pc, #88]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 800350a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800350e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003510:	4b14      	ldr	r3, [pc, #80]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 8003512:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003516:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003518:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 800351a:	2200      	movs	r2, #0
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800351e:	4811      	ldr	r0, [pc, #68]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 8003520:	f002 fce6 	bl	8005ef0 <HAL_DMA_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 800352a:	f7ff f8d9 	bl	80026e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a0c      	ldr	r2, [pc, #48]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 8003532:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003536:	4a0b      	ldr	r2, [pc, #44]	@ (8003564 <HAL_UART_MspInit+0x1a4>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800353c:	2200      	movs	r2, #0
 800353e:	2100      	movs	r1, #0
 8003540:	2025      	movs	r0, #37	@ 0x25
 8003542:	f002 fca0 	bl	8005e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003546:	2025      	movs	r0, #37	@ 0x25
 8003548:	f002 fcb7 	bl	8005eba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800354c:	e0bf      	b.n	80036ce <HAL_UART_MspInit+0x30e>
 800354e:	bf00      	nop
 8003550:	40011000 	.word	0x40011000
 8003554:	58024400 	.word	0x58024400
 8003558:	58020000 	.word	0x58020000
 800355c:	24000a98 	.word	0x24000a98
 8003560:	40020070 	.word	0x40020070
 8003564:	24000b10 	.word	0x24000b10
 8003568:	40020028 	.word	0x40020028
  else if(huart->Instance==USART3)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a59      	ldr	r2, [pc, #356]	@ (80036d8 <HAL_UART_MspInit+0x318>)
 8003572:	4293      	cmp	r3, r2
 8003574:	f040 80ab 	bne.w	80036ce <HAL_UART_MspInit+0x30e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003578:	f04f 0202 	mov.w	r2, #2
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800358a:	f107 0318 	add.w	r3, r7, #24
 800358e:	4618      	mov	r0, r3
 8003590:	f006 fd7c 	bl	800a08c <HAL_RCCEx_PeriphCLKConfig>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_UART_MspInit+0x1de>
      Error_Handler();
 800359a:	f7ff f8a1 	bl	80026e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800359e:	4b4f      	ldr	r3, [pc, #316]	@ (80036dc <HAL_UART_MspInit+0x31c>)
 80035a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035a4:	4a4d      	ldr	r2, [pc, #308]	@ (80036dc <HAL_UART_MspInit+0x31c>)
 80035a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035ae:	4b4b      	ldr	r3, [pc, #300]	@ (80036dc <HAL_UART_MspInit+0x31c>)
 80035b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035bc:	4b47      	ldr	r3, [pc, #284]	@ (80036dc <HAL_UART_MspInit+0x31c>)
 80035be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035c2:	4a46      	ldr	r2, [pc, #280]	@ (80036dc <HAL_UART_MspInit+0x31c>)
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035cc:	4b43      	ldr	r3, [pc, #268]	@ (80036dc <HAL_UART_MspInit+0x31c>)
 80035ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80035de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035f4:	2307      	movs	r3, #7
 80035f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80035fe:	4619      	mov	r1, r3
 8003600:	4837      	ldr	r0, [pc, #220]	@ (80036e0 <HAL_UART_MspInit+0x320>)
 8003602:	f005 faad 	bl	8008b60 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8003606:	4b37      	ldr	r3, [pc, #220]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 8003608:	4a37      	ldr	r2, [pc, #220]	@ (80036e8 <HAL_UART_MspInit+0x328>)
 800360a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800360c:	4b35      	ldr	r3, [pc, #212]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 800360e:	222d      	movs	r2, #45	@ 0x2d
 8003610:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003612:	4b34      	ldr	r3, [pc, #208]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 8003614:	2200      	movs	r2, #0
 8003616:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003618:	4b32      	ldr	r3, [pc, #200]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 800361a:	2200      	movs	r2, #0
 800361c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800361e:	4b31      	ldr	r3, [pc, #196]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 8003620:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003624:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003626:	4b2f      	ldr	r3, [pc, #188]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 8003628:	2200      	movs	r2, #0
 800362a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800362c:	4b2d      	ldr	r3, [pc, #180]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 800362e:	2200      	movs	r2, #0
 8003630:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003632:	4b2c      	ldr	r3, [pc, #176]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 8003634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003638:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800363a:	4b2a      	ldr	r3, [pc, #168]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 800363c:	2200      	movs	r2, #0
 800363e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003640:	4b28      	ldr	r3, [pc, #160]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 8003642:	2200      	movs	r2, #0
 8003644:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003646:	4827      	ldr	r0, [pc, #156]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 8003648:	f002 fc52 	bl	8005ef0 <HAL_DMA_Init>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_UART_MspInit+0x296>
      Error_Handler();
 8003652:	f7ff f845 	bl	80026e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a22      	ldr	r2, [pc, #136]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 800365a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800365e:	4a21      	ldr	r2, [pc, #132]	@ (80036e4 <HAL_UART_MspInit+0x324>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003664:	4b21      	ldr	r3, [pc, #132]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 8003666:	4a22      	ldr	r2, [pc, #136]	@ (80036f0 <HAL_UART_MspInit+0x330>)
 8003668:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800366a:	4b20      	ldr	r3, [pc, #128]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 800366c:	222e      	movs	r2, #46	@ 0x2e
 800366e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003670:	4b1e      	ldr	r3, [pc, #120]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 8003672:	2240      	movs	r2, #64	@ 0x40
 8003674:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003676:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 8003678:	2200      	movs	r2, #0
 800367a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800367c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 800367e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003682:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003684:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 8003686:	2200      	movs	r2, #0
 8003688:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800368a:	4b18      	ldr	r3, [pc, #96]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003690:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003696:	4b15      	ldr	r3, [pc, #84]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 8003698:	2200      	movs	r2, #0
 800369a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369c:	4b13      	ldr	r3, [pc, #76]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 800369e:	2200      	movs	r2, #0
 80036a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80036a2:	4812      	ldr	r0, [pc, #72]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 80036a4:	f002 fc24 	bl	8005ef0 <HAL_DMA_Init>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_UART_MspInit+0x2f2>
      Error_Handler();
 80036ae:	f7ff f817 	bl	80026e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a0d      	ldr	r2, [pc, #52]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 80036b6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80036b8:	4a0c      	ldr	r2, [pc, #48]	@ (80036ec <HAL_UART_MspInit+0x32c>)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	2100      	movs	r1, #0
 80036c2:	2027      	movs	r0, #39	@ 0x27
 80036c4:	f002 fbdf 	bl	8005e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036c8:	2027      	movs	r0, #39	@ 0x27
 80036ca:	f002 fbf6 	bl	8005eba <HAL_NVIC_EnableIRQ>
}
 80036ce:	bf00      	nop
 80036d0:	37e8      	adds	r7, #232	@ 0xe8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40004800 	.word	0x40004800
 80036dc:	58024400 	.word	0x58024400
 80036e0:	58020400 	.word	0x58020400
 80036e4:	24000b88 	.word	0x24000b88
 80036e8:	40020040 	.word	0x40020040
 80036ec:	24000c00 	.word	0x24000c00
 80036f0:	40020058 	.word	0x40020058

080036f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <NMI_Handler+0x4>

080036fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <HardFault_Handler+0x4>

08003704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <MemManage_Handler+0x4>

0800370c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <BusFault_Handler+0x4>

08003714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <UsageFault_Handler+0x4>

0800371c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003720:	bf00      	nop
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800374a:	f000 fa0f 	bl	8003b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}

08003752 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003764:	4802      	ldr	r0, [pc, #8]	@ (8003770 <DMA1_Stream0_IRQHandler+0x10>)
 8003766:	f003 fee9 	bl	800753c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	24000364 	.word	0x24000364

08003774 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003778:	4802      	ldr	r0, [pc, #8]	@ (8003784 <DMA1_Stream1_IRQHandler+0x10>)
 800377a:	f003 fedf 	bl	800753c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	24000b10 	.word	0x24000b10

08003788 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800378c:	4802      	ldr	r0, [pc, #8]	@ (8003798 <DMA1_Stream2_IRQHandler+0x10>)
 800378e:	f003 fed5 	bl	800753c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	24000b88 	.word	0x24000b88

0800379c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80037a0:	4802      	ldr	r0, [pc, #8]	@ (80037ac <DMA1_Stream3_IRQHandler+0x10>)
 80037a2:	f003 fecb 	bl	800753c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	24000c00 	.word	0x24000c00

080037b0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80037b4:	4802      	ldr	r0, [pc, #8]	@ (80037c0 <DMA1_Stream4_IRQHandler+0x10>)
 80037b6:	f003 fec1 	bl	800753c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	24000a98 	.word	0x24000a98

080037c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80037c8:	4802      	ldr	r0, [pc, #8]	@ (80037d4 <DMA1_Stream5_IRQHandler+0x10>)
 80037ca:	f003 feb7 	bl	800753c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	240003dc 	.word	0x240003dc

080037d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037dc:	4803      	ldr	r0, [pc, #12]	@ (80037ec <ADC_IRQHandler+0x14>)
 80037de:	f001 f805 	bl	80047ec <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80037e2:	4803      	ldr	r0, [pc, #12]	@ (80037f0 <ADC_IRQHandler+0x18>)
 80037e4:	f001 f802 	bl	80047ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80037e8:	bf00      	nop
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	24000214 	.word	0x24000214
 80037f0:	24000284 	.word	0x24000284

080037f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037f8:	4802      	ldr	r0, [pc, #8]	@ (8003804 <USART1_IRQHandler+0x10>)
 80037fa:	f00a fc01 	bl	800e000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	24000970 	.word	0x24000970

08003808 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800380c:	4802      	ldr	r0, [pc, #8]	@ (8003818 <USART3_IRQHandler+0x10>)
 800380e:	f00a fbf7 	bl	800e000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	24000a04 	.word	0x24000a04

0800381c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003820:	4803      	ldr	r0, [pc, #12]	@ (8003830 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8003822:	f009 fbeb 	bl	800cffc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003826:	4803      	ldr	r0, [pc, #12]	@ (8003834 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003828:	f009 fbe8 	bl	800cffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}
 8003830:	24000710 	.word	0x24000710
 8003834:	240007a8 	.word	0x240007a8

08003838 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800383c:	4802      	ldr	r0, [pc, #8]	@ (8003848 <TIM6_DAC_IRQHandler+0x10>)
 800383e:	f009 fbdd 	bl	800cffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	24000678 	.word	0x24000678

0800384c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003850:	4802      	ldr	r0, [pc, #8]	@ (800385c <TIM7_IRQHandler+0x10>)
 8003852:	f009 fbd3 	bl	800cffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	240006c4 	.word	0x240006c4

08003860 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003864:	4802      	ldr	r0, [pc, #8]	@ (8003870 <ADC3_IRQHandler+0x10>)
 8003866:	f000 ffc1 	bl	80047ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	240002f4 	.word	0x240002f4

08003874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800387c:	4a14      	ldr	r2, [pc, #80]	@ (80038d0 <_sbrk+0x5c>)
 800387e:	4b15      	ldr	r3, [pc, #84]	@ (80038d4 <_sbrk+0x60>)
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003888:	4b13      	ldr	r3, [pc, #76]	@ (80038d8 <_sbrk+0x64>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003890:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <_sbrk+0x64>)
 8003892:	4a12      	ldr	r2, [pc, #72]	@ (80038dc <_sbrk+0x68>)
 8003894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003896:	4b10      	ldr	r3, [pc, #64]	@ (80038d8 <_sbrk+0x64>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d207      	bcs.n	80038b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038a4:	f011 fb04 	bl	8014eb0 <__errno>
 80038a8:	4603      	mov	r3, r0
 80038aa:	220c      	movs	r2, #12
 80038ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ae:	f04f 33ff 	mov.w	r3, #4294967295
 80038b2:	e009      	b.n	80038c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038b4:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <_sbrk+0x64>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ba:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <_sbrk+0x64>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4413      	add	r3, r2
 80038c2:	4a05      	ldr	r2, [pc, #20]	@ (80038d8 <_sbrk+0x64>)
 80038c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	24050000 	.word	0x24050000
 80038d4:	00000400 	.word	0x00000400
 80038d8:	24000c88 	.word	0x24000c88
 80038dc:	240039c0 	.word	0x240039c0

080038e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038e4:	4b3e      	ldr	r3, [pc, #248]	@ (80039e0 <SystemInit+0x100>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ea:	4a3d      	ldr	r2, [pc, #244]	@ (80039e0 <SystemInit+0x100>)
 80038ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038f4:	4b3b      	ldr	r3, [pc, #236]	@ (80039e4 <SystemInit+0x104>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	d807      	bhi.n	8003910 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003900:	4b38      	ldr	r3, [pc, #224]	@ (80039e4 <SystemInit+0x104>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 030f 	bic.w	r3, r3, #15
 8003908:	4a36      	ldr	r2, [pc, #216]	@ (80039e4 <SystemInit+0x104>)
 800390a:	f043 0307 	orr.w	r3, r3, #7
 800390e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003910:	4b35      	ldr	r3, [pc, #212]	@ (80039e8 <SystemInit+0x108>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a34      	ldr	r2, [pc, #208]	@ (80039e8 <SystemInit+0x108>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800391c:	4b32      	ldr	r3, [pc, #200]	@ (80039e8 <SystemInit+0x108>)
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003922:	4b31      	ldr	r3, [pc, #196]	@ (80039e8 <SystemInit+0x108>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4930      	ldr	r1, [pc, #192]	@ (80039e8 <SystemInit+0x108>)
 8003928:	4b30      	ldr	r3, [pc, #192]	@ (80039ec <SystemInit+0x10c>)
 800392a:	4013      	ands	r3, r2
 800392c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800392e:	4b2d      	ldr	r3, [pc, #180]	@ (80039e4 <SystemInit+0x104>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800393a:	4b2a      	ldr	r3, [pc, #168]	@ (80039e4 <SystemInit+0x104>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 030f 	bic.w	r3, r3, #15
 8003942:	4a28      	ldr	r2, [pc, #160]	@ (80039e4 <SystemInit+0x104>)
 8003944:	f043 0307 	orr.w	r3, r3, #7
 8003948:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800394a:	4b27      	ldr	r3, [pc, #156]	@ (80039e8 <SystemInit+0x108>)
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003950:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <SystemInit+0x108>)
 8003952:	2200      	movs	r2, #0
 8003954:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003956:	4b24      	ldr	r3, [pc, #144]	@ (80039e8 <SystemInit+0x108>)
 8003958:	2200      	movs	r2, #0
 800395a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800395c:	4b22      	ldr	r3, [pc, #136]	@ (80039e8 <SystemInit+0x108>)
 800395e:	4a24      	ldr	r2, [pc, #144]	@ (80039f0 <SystemInit+0x110>)
 8003960:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003962:	4b21      	ldr	r3, [pc, #132]	@ (80039e8 <SystemInit+0x108>)
 8003964:	4a23      	ldr	r2, [pc, #140]	@ (80039f4 <SystemInit+0x114>)
 8003966:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003968:	4b1f      	ldr	r3, [pc, #124]	@ (80039e8 <SystemInit+0x108>)
 800396a:	4a23      	ldr	r2, [pc, #140]	@ (80039f8 <SystemInit+0x118>)
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800396e:	4b1e      	ldr	r3, [pc, #120]	@ (80039e8 <SystemInit+0x108>)
 8003970:	2200      	movs	r2, #0
 8003972:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003974:	4b1c      	ldr	r3, [pc, #112]	@ (80039e8 <SystemInit+0x108>)
 8003976:	4a20      	ldr	r2, [pc, #128]	@ (80039f8 <SystemInit+0x118>)
 8003978:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800397a:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <SystemInit+0x108>)
 800397c:	2200      	movs	r2, #0
 800397e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003980:	4b19      	ldr	r3, [pc, #100]	@ (80039e8 <SystemInit+0x108>)
 8003982:	4a1d      	ldr	r2, [pc, #116]	@ (80039f8 <SystemInit+0x118>)
 8003984:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003986:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <SystemInit+0x108>)
 8003988:	2200      	movs	r2, #0
 800398a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800398c:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <SystemInit+0x108>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a15      	ldr	r2, [pc, #84]	@ (80039e8 <SystemInit+0x108>)
 8003992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003996:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003998:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <SystemInit+0x108>)
 800399a:	2200      	movs	r2, #0
 800399c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800399e:	4b12      	ldr	r3, [pc, #72]	@ (80039e8 <SystemInit+0x108>)
 80039a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d113      	bne.n	80039d4 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80039ac:	4b0e      	ldr	r3, [pc, #56]	@ (80039e8 <SystemInit+0x108>)
 80039ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039b2:	4a0d      	ldr	r2, [pc, #52]	@ (80039e8 <SystemInit+0x108>)
 80039b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039b8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039bc:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <SystemInit+0x11c>)
 80039be:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80039c2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80039c4:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <SystemInit+0x108>)
 80039c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039ca:	4a07      	ldr	r2, [pc, #28]	@ (80039e8 <SystemInit+0x108>)
 80039cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000ed00 	.word	0xe000ed00
 80039e4:	52002000 	.word	0x52002000
 80039e8:	58024400 	.word	0x58024400
 80039ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80039f0:	02020200 	.word	0x02020200
 80039f4:	01ff0000 	.word	0x01ff0000
 80039f8:	01010280 	.word	0x01010280
 80039fc:	52004000 	.word	0x52004000

08003a00 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003a04:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <ExitRun0Mode+0x2c>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a08      	ldr	r2, [pc, #32]	@ (8003a2c <ExitRun0Mode+0x2c>)
 8003a0a:	f043 0302 	orr.w	r3, r3, #2
 8003a0e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003a10:	bf00      	nop
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <ExitRun0Mode+0x2c>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f9      	beq.n	8003a12 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	58024800 	.word	0x58024800

08003a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a30:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003a6c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003a34:	f7ff ffe4 	bl	8003a00 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a38:	f7ff ff52 	bl	80038e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a3c:	480c      	ldr	r0, [pc, #48]	@ (8003a70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a3e:	490d      	ldr	r1, [pc, #52]	@ (8003a74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a40:	4a0d      	ldr	r2, [pc, #52]	@ (8003a78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a44:	e002      	b.n	8003a4c <LoopCopyDataInit>

08003a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a4a:	3304      	adds	r3, #4

08003a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a50:	d3f9      	bcc.n	8003a46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a52:	4a0a      	ldr	r2, [pc, #40]	@ (8003a7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a54:	4c0a      	ldr	r4, [pc, #40]	@ (8003a80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a58:	e001      	b.n	8003a5e <LoopFillZerobss>

08003a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a5c:	3204      	adds	r2, #4

08003a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a60:	d3fb      	bcc.n	8003a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a62:	f011 fa2b 	bl	8014ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a66:	f7fd fb51 	bl	800110c <main>
  bx  lr
 8003a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a6c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003a70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003a74:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8003a78:	08015794 	.word	0x08015794
  ldr r2, =_sbss
 8003a7c:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8003a80:	240039c0 	.word	0x240039c0

08003a84 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a84:	e7fe      	b.n	8003a84 <BDMA_Channel0_IRQHandler>
	...

08003a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a8e:	2003      	movs	r0, #3
 8003a90:	f002 f9ee 	bl	8005e70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a94:	f006 f924 	bl	8009ce0 <HAL_RCC_GetSysClockFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b15      	ldr	r3, [pc, #84]	@ (8003af0 <HAL_Init+0x68>)
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	4913      	ldr	r1, [pc, #76]	@ (8003af4 <HAL_Init+0x6c>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <HAL_Init+0x68>)
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	4a0e      	ldr	r2, [pc, #56]	@ (8003af4 <HAL_Init+0x6c>)
 8003abc:	5cd3      	ldrb	r3, [r2, r3]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8003af8 <HAL_Init+0x70>)
 8003aca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003acc:	4a0b      	ldr	r2, [pc, #44]	@ (8003afc <HAL_Init+0x74>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f000 f814 	bl	8003b00 <HAL_InitTick>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e002      	b.n	8003ae8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ae2:	f7fe fe89 	bl	80027f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	58024400 	.word	0x58024400
 8003af4:	08015430 	.word	0x08015430
 8003af8:	2400001c 	.word	0x2400001c
 8003afc:	24000018 	.word	0x24000018

08003b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003b08:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <HAL_InitTick+0x60>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e021      	b.n	8003b58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b14:	4b13      	ldr	r3, [pc, #76]	@ (8003b64 <HAL_InitTick+0x64>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <HAL_InitTick+0x60>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f002 f9d3 	bl	8005ed6 <HAL_SYSTICK_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00e      	b.n	8003b58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b0f      	cmp	r3, #15
 8003b3e:	d80a      	bhi.n	8003b56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b40:	2200      	movs	r2, #0
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	f002 f99d 	bl	8005e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b4c:	4a06      	ldr	r2, [pc, #24]	@ (8003b68 <HAL_InitTick+0x68>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	24000024 	.word	0x24000024
 8003b64:	24000018 	.word	0x24000018
 8003b68:	24000020 	.word	0x24000020

08003b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_IncTick+0x20>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <HAL_IncTick+0x24>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a04      	ldr	r2, [pc, #16]	@ (8003b90 <HAL_IncTick+0x24>)
 8003b7e:	6013      	str	r3, [r2, #0]
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	24000024 	.word	0x24000024
 8003b90:	24000c8c 	.word	0x24000c8c

08003b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return uwTick;
 8003b98:	4b03      	ldr	r3, [pc, #12]	@ (8003ba8 <HAL_GetTick+0x14>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	24000c8c 	.word	0x24000c8c

08003bac <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003bb6:	4b07      	ldr	r3, [pc, #28]	@ (8003bd4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	4904      	ldr	r1, [pc, #16]	@ (8003bd4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	58000400 	.word	0x58000400

08003bd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	609a      	str	r2, [r3, #8]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	609a      	str	r2, [r3, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a18      	ldr	r2, [pc, #96]	@ (8003cb0 <LL_ADC_SetChannelPreselection+0x70>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d027      	beq.n	8003ca2 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d107      	bne.n	8003c6c <LL_ADC_SetChannelPreselection+0x2c>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	0e9b      	lsrs	r3, r3, #26
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2201      	movs	r2, #1
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	e015      	b.n	8003c98 <LL_ADC_SetChannelPreselection+0x58>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8003c82:	2320      	movs	r3, #32
 8003c84:	e003      	b.n	8003c8e <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	fab3 f383 	clz	r3, r3
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	2201      	movs	r2, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	69d2      	ldr	r2, [r2, #28]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	58026000 	.word	0x58026000

08003cb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3360      	adds	r3, #96	@ 0x60
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a10      	ldr	r2, [pc, #64]	@ (8003d14 <LL_ADC_SetOffset+0x60>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d10b      	bne.n	8003cf0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003cee:	e00b      	b.n	8003d08 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	431a      	orrs	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	601a      	str	r2, [r3, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	58026000 	.word	0x58026000

08003d18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3360      	adds	r3, #96	@ 0x60
 8003d26:	461a      	mov	r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	431a      	orrs	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	611a      	str	r2, [r3, #16]
}
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4a0c      	ldr	r2, [pc, #48]	@ (8003db8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00e      	beq.n	8003daa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3360      	adds	r3, #96	@ 0x60
 8003d90:	461a      	mov	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	601a      	str	r2, [r3, #0]
  }
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	58026000 	.word	0x58026000

08003dbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a0c      	ldr	r2, [pc, #48]	@ (8003dfc <LL_ADC_SetOffsetSaturation+0x40>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10e      	bne.n	8003dee <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3360      	adds	r3, #96	@ 0x60
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	58026000 	.word	0x58026000

08003e00 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e40 <LL_ADC_SetOffsetSign+0x40>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d10e      	bne.n	8003e32 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3360      	adds	r3, #96	@ 0x60
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	58026000 	.word	0x58026000

08003e44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3360      	adds	r3, #96	@ 0x60
 8003e54:	461a      	mov	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a0c      	ldr	r2, [pc, #48]	@ (8003e94 <LL_ADC_SetOffsetState+0x50>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003e76:	e007      	b.n	8003e88 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	601a      	str	r2, [r3, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	58026000 	.word	0x58026000

08003e98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b087      	sub	sp, #28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3330      	adds	r3, #48	@ 0x30
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	4413      	add	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	211f      	movs	r1, #31
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0e9b      	lsrs	r3, r3, #26
 8003ef6:	f003 011f 	and.w	r1, r3, #31
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	431a      	orrs	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f023 0203 	bic.w	r2, r3, #3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f043 0201 	orr.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60da      	str	r2, [r3, #12]
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <LL_ADC_REG_SetDMATransferMode+0x30>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d107      	bne.n	8003f7e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60da      	str	r2, [r3, #12]
  }
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	58026000 	.word	0x58026000

08003f90 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b087      	sub	sp, #28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3314      	adds	r3, #20
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	0e5b      	lsrs	r3, r3, #25
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	4413      	add	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	0d1b      	lsrs	r3, r3, #20
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2107      	movs	r1, #7
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	401a      	ands	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	0d1b      	lsrs	r3, r3, #20
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a1a      	ldr	r2, [pc, #104]	@ (8004084 <LL_ADC_SetChannelSingleDiff+0x78>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d115      	bne.n	800404c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800402c:	43db      	mvns	r3, r3
 800402e:	401a      	ands	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f003 0318 	and.w	r3, r3, #24
 8004036:	4914      	ldr	r1, [pc, #80]	@ (8004088 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004038:	40d9      	lsrs	r1, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	400b      	ands	r3, r1
 800403e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004042:	431a      	orrs	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800404a:	e014      	b.n	8004076 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004058:	43db      	mvns	r3, r3
 800405a:	401a      	ands	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f003 0318 	and.w	r3, r3, #24
 8004062:	4909      	ldr	r1, [pc, #36]	@ (8004088 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004064:	40d9      	lsrs	r1, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	400b      	ands	r3, r1
 800406a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800406e:	431a      	orrs	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	58026000 	.word	0x58026000
 8004088:	000fffff 	.word	0x000fffff

0800408c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 031f 	and.w	r3, r3, #31
}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	4b04      	ldr	r3, [pc, #16]	@ (80040e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6093      	str	r3, [r2, #8]
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	5fffffc0 	.word	0x5fffffc0

080040e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040fc:	d101      	bne.n	8004102 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <LL_ADC_EnableInternalRegulator+0x24>)
 800411e:	4013      	ands	r3, r2
 8004120:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	6fffffc0 	.word	0x6fffffc0

08004138 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004148:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800414c:	d101      	bne.n	8004152 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <LL_ADC_Enable+0x24>)
 800416e:	4013      	ands	r3, r2
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	7fffffc0 	.word	0x7fffffc0

08004188 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <LL_ADC_IsEnabled+0x18>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <LL_ADC_IsEnabled+0x1a>
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <LL_ADC_REG_StartConversion+0x24>)
 80041be:	4013      	ands	r3, r2
 80041c0:	f043 0204 	orr.w	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	7fffffc0 	.word	0x7fffffc0

080041d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d101      	bne.n	80041f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b08      	cmp	r3, #8
 8004210:	d101      	bne.n	8004216 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b089      	sub	sp, #36	@ 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e1ee      	b.n	800461c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004248:	2b00      	cmp	r3, #0
 800424a:	d109      	bne.n	8004260 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7fe faf3 	bl	8002838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff3f 	bl	80040e8 <LL_ADC_IsDeepPowerDownEnabled>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff ff25 	bl	80040c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ff5a 	bl	8004138 <LL_ADC_IsInternalRegulatorEnabled>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d114      	bne.n	80042b4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff ff3e 	bl	8004110 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004294:	4b8e      	ldr	r3, [pc, #568]	@ (80044d0 <HAL_ADC_Init+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	099b      	lsrs	r3, r3, #6
 800429a:	4a8e      	ldr	r2, [pc, #568]	@ (80044d4 <HAL_ADC_Init+0x2b0>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	099b      	lsrs	r3, r3, #6
 80042a2:	3301      	adds	r3, #1
 80042a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042a6:	e002      	b.n	80042ae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f9      	bne.n	80042a8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff ff3d 	bl	8004138 <LL_ADC_IsInternalRegulatorEnabled>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10d      	bne.n	80042e0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c8:	f043 0210 	orr.w	r2, r3, #16
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042d4:	f043 0201 	orr.w	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff77 	bl	80041d8 <LL_ADC_REG_IsConversionOngoing>
 80042ea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f040 8188 	bne.w	800460a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f040 8184 	bne.w	800460a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004306:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800430a:	f043 0202 	orr.w	r2, r3, #2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff ff36 	bl	8004188 <LL_ADC_IsEnabled>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d136      	bne.n	8004390 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6c      	ldr	r2, [pc, #432]	@ (80044d8 <HAL_ADC_Init+0x2b4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_ADC_Init+0x112>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a6a      	ldr	r2, [pc, #424]	@ (80044dc <HAL_ADC_Init+0x2b8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d10e      	bne.n	8004354 <HAL_ADC_Init+0x130>
 8004336:	4868      	ldr	r0, [pc, #416]	@ (80044d8 <HAL_ADC_Init+0x2b4>)
 8004338:	f7ff ff26 	bl	8004188 <LL_ADC_IsEnabled>
 800433c:	4604      	mov	r4, r0
 800433e:	4867      	ldr	r0, [pc, #412]	@ (80044dc <HAL_ADC_Init+0x2b8>)
 8004340:	f7ff ff22 	bl	8004188 <LL_ADC_IsEnabled>
 8004344:	4603      	mov	r3, r0
 8004346:	4323      	orrs	r3, r4
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e008      	b.n	8004366 <HAL_ADC_Init+0x142>
 8004354:	4862      	ldr	r0, [pc, #392]	@ (80044e0 <HAL_ADC_Init+0x2bc>)
 8004356:	f7ff ff17 	bl	8004188 <LL_ADC_IsEnabled>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d012      	beq.n	8004390 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a5a      	ldr	r2, [pc, #360]	@ (80044d8 <HAL_ADC_Init+0x2b4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d004      	beq.n	800437e <HAL_ADC_Init+0x15a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a58      	ldr	r2, [pc, #352]	@ (80044dc <HAL_ADC_Init+0x2b8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d101      	bne.n	8004382 <HAL_ADC_Init+0x15e>
 800437e:	4a59      	ldr	r2, [pc, #356]	@ (80044e4 <HAL_ADC_Init+0x2c0>)
 8004380:	e000      	b.n	8004384 <HAL_ADC_Init+0x160>
 8004382:	4a59      	ldr	r2, [pc, #356]	@ (80044e8 <HAL_ADC_Init+0x2c4>)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f7ff fc24 	bl	8003bd8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a52      	ldr	r2, [pc, #328]	@ (80044e0 <HAL_ADC_Init+0x2bc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d129      	bne.n	80043ee <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7e5b      	ldrb	r3, [r3, #25]
 800439e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043a4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80043aa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d013      	beq.n	80043dc <HAL_ADC_Init+0x1b8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b0c      	cmp	r3, #12
 80043ba:	d00d      	beq.n	80043d8 <HAL_ADC_Init+0x1b4>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b1c      	cmp	r3, #28
 80043c2:	d007      	beq.n	80043d4 <HAL_ADC_Init+0x1b0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b18      	cmp	r3, #24
 80043ca:	d101      	bne.n	80043d0 <HAL_ADC_Init+0x1ac>
 80043cc:	2318      	movs	r3, #24
 80043ce:	e006      	b.n	80043de <HAL_ADC_Init+0x1ba>
 80043d0:	2300      	movs	r3, #0
 80043d2:	e004      	b.n	80043de <HAL_ADC_Init+0x1ba>
 80043d4:	2310      	movs	r3, #16
 80043d6:	e002      	b.n	80043de <HAL_ADC_Init+0x1ba>
 80043d8:	2308      	movs	r3, #8
 80043da:	e000      	b.n	80043de <HAL_ADC_Init+0x1ba>
 80043dc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80043de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043e8:	4313      	orrs	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	e00e      	b.n	800440c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	7e5b      	ldrb	r3, [r3, #25]
 80043f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80043fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004406:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d106      	bne.n	8004424 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	3b01      	subs	r3, #1
 800441c:	045b      	lsls	r3, r3, #17
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4313      	orrs	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4313      	orrs	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a26      	ldr	r2, [pc, #152]	@ (80044e0 <HAL_ADC_Init+0x2bc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d115      	bne.n	8004476 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	4b26      	ldr	r3, [pc, #152]	@ (80044ec <HAL_ADC_Init+0x2c8>)
 8004452:	4013      	ands	r3, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	69b9      	ldr	r1, [r7, #24]
 800445a:	430b      	orrs	r3, r1
 800445c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	611a      	str	r2, [r3, #16]
 8004474:	e009      	b.n	800448a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	4b1c      	ldr	r3, [pc, #112]	@ (80044f0 <HAL_ADC_Init+0x2cc>)
 800447e:	4013      	ands	r3, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	69b9      	ldr	r1, [r7, #24]
 8004486:	430b      	orrs	r3, r1
 8004488:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fea2 	bl	80041d8 <LL_ADC_REG_IsConversionOngoing>
 8004494:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff feaf 	bl	80041fe <LL_ADC_INJ_IsConversionOngoing>
 80044a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 808e 	bne.w	80045c6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f040 808a 	bne.w	80045c6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a0a      	ldr	r2, [pc, #40]	@ (80044e0 <HAL_ADC_Init+0x2bc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d11b      	bne.n	80044f4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7e1b      	ldrb	r3, [r3, #24]
 80044c0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80044c8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	e018      	b.n	8004502 <HAL_ADC_Init+0x2de>
 80044d0:	24000018 	.word	0x24000018
 80044d4:	053e2d63 	.word	0x053e2d63
 80044d8:	40022000 	.word	0x40022000
 80044dc:	40022100 	.word	0x40022100
 80044e0:	58026000 	.word	0x58026000
 80044e4:	40022300 	.word	0x40022300
 80044e8:	58026300 	.word	0x58026300
 80044ec:	fff04007 	.word	0xfff04007
 80044f0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7e1b      	ldrb	r3, [r3, #24]
 80044f8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	4b46      	ldr	r3, [pc, #280]	@ (8004624 <HAL_ADC_Init+0x400>)
 800450a:	4013      	ands	r3, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	430b      	orrs	r3, r1
 8004514:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800451c:	2b01      	cmp	r3, #1
 800451e:	d137      	bne.n	8004590 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3f      	ldr	r2, [pc, #252]	@ (8004628 <HAL_ADC_Init+0x404>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d116      	bne.n	800455e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	4b3d      	ldr	r3, [pc, #244]	@ (800462c <HAL_ADC_Init+0x408>)
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004542:	4311      	orrs	r1, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004548:	4311      	orrs	r1, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800454e:	430a      	orrs	r2, r1
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	611a      	str	r2, [r3, #16]
 800455c:	e020      	b.n	80045a0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	4b32      	ldr	r3, [pc, #200]	@ (8004630 <HAL_ADC_Init+0x40c>)
 8004566:	4013      	ands	r3, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800456c:	3a01      	subs	r2, #1
 800456e:	0411      	lsls	r1, r2, #16
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800457a:	4311      	orrs	r1, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004580:	430a      	orrs	r2, r1
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	611a      	str	r2, [r3, #16]
 800458e:	e007      	b.n	80045a0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004628 <HAL_ADC_Init+0x404>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d002      	beq.n	80045c6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f001 f95d 	bl	8005880 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10c      	bne.n	80045e8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d4:	f023 010f 	bic.w	r1, r3, #15
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	1e5a      	subs	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80045e6:	e007      	b.n	80045f8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 020f 	bic.w	r2, r2, #15
 80045f6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fc:	f023 0303 	bic.w	r3, r3, #3
 8004600:	f043 0201 	orr.w	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	661a      	str	r2, [r3, #96]	@ 0x60
 8004608:	e007      	b.n	800461a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800460e:	f043 0210 	orr.w	r2, r3, #16
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800461a:	7ffb      	ldrb	r3, [r7, #31]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3724      	adds	r7, #36	@ 0x24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd90      	pop	{r4, r7, pc}
 8004624:	ffffbffc 	.word	0xffffbffc
 8004628:	58026000 	.word	0x58026000
 800462c:	fc00f81f 	.word	0xfc00f81f
 8004630:	fc00f81e 	.word	0xfc00f81e

08004634 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a60      	ldr	r2, [pc, #384]	@ (80047c8 <HAL_ADC_Start_DMA+0x194>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_ADC_Start_DMA+0x20>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a5f      	ldr	r2, [pc, #380]	@ (80047cc <HAL_ADC_Start_DMA+0x198>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_ADC_Start_DMA+0x24>
 8004654:	4b5e      	ldr	r3, [pc, #376]	@ (80047d0 <HAL_ADC_Start_DMA+0x19c>)
 8004656:	e000      	b.n	800465a <HAL_ADC_Start_DMA+0x26>
 8004658:	4b5e      	ldr	r3, [pc, #376]	@ (80047d4 <HAL_ADC_Start_DMA+0x1a0>)
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fd16 	bl	800408c <LL_ADC_GetMultimode>
 8004660:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff fdb6 	bl	80041d8 <LL_ADC_REG_IsConversionOngoing>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	f040 80a2 	bne.w	80047b8 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_ADC_Start_DMA+0x4e>
 800467e:	2302      	movs	r3, #2
 8004680:	e09d      	b.n	80047be <HAL_ADC_Start_DMA+0x18a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d006      	beq.n	800469e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b05      	cmp	r3, #5
 8004694:	d003      	beq.n	800469e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b09      	cmp	r3, #9
 800469a:	f040 8086 	bne.w	80047aa <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 ffd0 	bl	8005644 <ADC_Enable>
 80046a4:	4603      	mov	r3, r0
 80046a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d178      	bne.n	80047a0 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046b2:	4b49      	ldr	r3, [pc, #292]	@ (80047d8 <HAL_ADC_Start_DMA+0x1a4>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a42      	ldr	r2, [pc, #264]	@ (80047cc <HAL_ADC_Start_DMA+0x198>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d002      	beq.n	80046ce <HAL_ADC_Start_DMA+0x9a>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	e000      	b.n	80046d0 <HAL_ADC_Start_DMA+0x9c>
 80046ce:	4b3e      	ldr	r3, [pc, #248]	@ (80047c8 <HAL_ADC_Start_DMA+0x194>)
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d002      	beq.n	80046de <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d105      	bne.n	80046ea <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d006      	beq.n	8004704 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046fa:	f023 0206 	bic.w	r2, r3, #6
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	665a      	str	r2, [r3, #100]	@ 0x64
 8004702:	e002      	b.n	800470a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470e:	4a33      	ldr	r2, [pc, #204]	@ (80047dc <HAL_ADC_Start_DMA+0x1a8>)
 8004710:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004716:	4a32      	ldr	r2, [pc, #200]	@ (80047e0 <HAL_ADC_Start_DMA+0x1ac>)
 8004718:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471e:	4a31      	ldr	r2, [pc, #196]	@ (80047e4 <HAL_ADC_Start_DMA+0x1b0>)
 8004720:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	221c      	movs	r2, #28
 8004728:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0210 	orr.w	r2, r2, #16
 8004740:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a28      	ldr	r2, [pc, #160]	@ (80047e8 <HAL_ADC_Start_DMA+0x1b4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d10f      	bne.n	800476c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f7ff fbfe 	bl	8003f5c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fbe9 	bl	8003f3c <LL_ADC_EnableDMAReq>
 800476a:	e007      	b.n	800477c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f7ff fbcd 	bl	8003f16 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3340      	adds	r3, #64	@ 0x40
 8004786:	4619      	mov	r1, r3
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f001 ff08 	bl	80065a0 <HAL_DMA_Start_IT>
 8004790:	4603      	mov	r3, r0
 8004792:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fd09 	bl	80041b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800479e:	e00d      	b.n	80047bc <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80047a8:	e008      	b.n	80047bc <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80047b6:	e001      	b.n	80047bc <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047b8:	2302      	movs	r3, #2
 80047ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40022000 	.word	0x40022000
 80047cc:	40022100 	.word	0x40022100
 80047d0:	40022300 	.word	0x40022300
 80047d4:	58026300 	.word	0x58026300
 80047d8:	fffff0fe 	.word	0xfffff0fe
 80047dc:	08005759 	.word	0x08005759
 80047e0:	08005831 	.word	0x08005831
 80047e4:	0800584d 	.word	0x0800584d
 80047e8:	58026000 	.word	0x58026000

080047ec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	@ 0x28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80047f4:	2300      	movs	r3, #0
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a87      	ldr	r2, [pc, #540]	@ (8004a2c <HAL_ADC_IRQHandler+0x240>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d004      	beq.n	800481c <HAL_ADC_IRQHandler+0x30>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a86      	ldr	r2, [pc, #536]	@ (8004a30 <HAL_ADC_IRQHandler+0x244>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d101      	bne.n	8004820 <HAL_ADC_IRQHandler+0x34>
 800481c:	4b85      	ldr	r3, [pc, #532]	@ (8004a34 <HAL_ADC_IRQHandler+0x248>)
 800481e:	e000      	b.n	8004822 <HAL_ADC_IRQHandler+0x36>
 8004820:	4b85      	ldr	r3, [pc, #532]	@ (8004a38 <HAL_ADC_IRQHandler+0x24c>)
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fc32 	bl	800408c <LL_ADC_GetMultimode>
 8004828:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d017      	beq.n	8004864 <HAL_ADC_IRQHandler+0x78>
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d012      	beq.n	8004864 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800484e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f001 f94e 	bl	8005af8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2202      	movs	r2, #2
 8004862:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_ADC_IRQHandler+0x8c>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8083 	beq.w	800498a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d07d      	beq.n	800498a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	d105      	bne.n	80048a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800489e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff faf4 	bl	8003e98 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d062      	beq.n	800497c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a5d      	ldr	r2, [pc, #372]	@ (8004a30 <HAL_ADC_IRQHandler+0x244>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d002      	beq.n	80048c6 <HAL_ADC_IRQHandler+0xda>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	e000      	b.n	80048c8 <HAL_ADC_IRQHandler+0xdc>
 80048c6:	4b59      	ldr	r3, [pc, #356]	@ (8004a2c <HAL_ADC_IRQHandler+0x240>)
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d008      	beq.n	80048e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b05      	cmp	r3, #5
 80048da:	d002      	beq.n	80048e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b09      	cmp	r3, #9
 80048e0:	d104      	bne.n	80048ec <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	623b      	str	r3, [r7, #32]
 80048ea:	e00c      	b.n	8004906 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004a30 <HAL_ADC_IRQHandler+0x244>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d002      	beq.n	80048fc <HAL_ADC_IRQHandler+0x110>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	e000      	b.n	80048fe <HAL_ADC_IRQHandler+0x112>
 80048fc:	4b4b      	ldr	r3, [pc, #300]	@ (8004a2c <HAL_ADC_IRQHandler+0x240>)
 80048fe:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d135      	bne.n	800497c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b08      	cmp	r3, #8
 800491c:	d12e      	bne.n	800497c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fc58 	bl	80041d8 <LL_ADC_REG_IsConversionOngoing>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d11a      	bne.n	8004964 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 020c 	bic.w	r2, r2, #12
 800493c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004942:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800494e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d112      	bne.n	800497c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800495a:	f043 0201 	orr.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	661a      	str	r2, [r3, #96]	@ 0x60
 8004962:	e00b      	b.n	800497c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004968:	f043 0210 	orr.w	r2, r3, #16
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004974:	f043 0201 	orr.w	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7fd ff15 	bl	80027ac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	220c      	movs	r2, #12
 8004988:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d004      	beq.n	800499e <HAL_ADC_IRQHandler+0x1b2>
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80a0 	beq.w	8004aea <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 809a 	beq.w	8004aea <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d105      	bne.n	80049ce <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fadc 	bl	8003f90 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80049d8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fa5a 	bl	8003e98 <LL_ADC_REG_IsTriggerSourceSWStart>
 80049e4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a11      	ldr	r2, [pc, #68]	@ (8004a30 <HAL_ADC_IRQHandler+0x244>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d002      	beq.n	80049f6 <HAL_ADC_IRQHandler+0x20a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	e000      	b.n	80049f8 <HAL_ADC_IRQHandler+0x20c>
 80049f6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <HAL_ADC_IRQHandler+0x240>)
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d008      	beq.n	8004a12 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b06      	cmp	r3, #6
 8004a0a:	d002      	beq.n	8004a12 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b07      	cmp	r3, #7
 8004a10:	d104      	bne.n	8004a1c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	623b      	str	r3, [r7, #32]
 8004a1a:	e014      	b.n	8004a46 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a03      	ldr	r2, [pc, #12]	@ (8004a30 <HAL_ADC_IRQHandler+0x244>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00a      	beq.n	8004a3c <HAL_ADC_IRQHandler+0x250>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	e008      	b.n	8004a3e <HAL_ADC_IRQHandler+0x252>
 8004a2c:	40022000 	.word	0x40022000
 8004a30:	40022100 	.word	0x40022100
 8004a34:	40022300 	.word	0x40022300
 8004a38:	58026300 	.word	0x58026300
 8004a3c:	4b84      	ldr	r3, [pc, #528]	@ (8004c50 <HAL_ADC_IRQHandler+0x464>)
 8004a3e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d047      	beq.n	8004adc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_ADC_IRQHandler+0x27a>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d03f      	beq.n	8004adc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d13a      	bne.n	8004adc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a70:	2b40      	cmp	r3, #64	@ 0x40
 8004a72:	d133      	bne.n	8004adc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d12e      	bne.n	8004adc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff fbbb 	bl	80041fe <LL_ADC_INJ_IsConversionOngoing>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11a      	bne.n	8004ac4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a9c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d112      	bne.n	8004adc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aba:	f043 0201 	orr.w	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	661a      	str	r2, [r3, #96]	@ 0x60
 8004ac2:	e00b      	b.n	8004adc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac8:	f043 0210 	orr.w	r2, r3, #16
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ad4:	f043 0201 	orr.w	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 ffe3 	bl	8005aa8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2260      	movs	r2, #96	@ 0x60
 8004ae8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d011      	beq.n	8004b18 <HAL_ADC_IRQHandler+0x32c>
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00c      	beq.n	8004b18 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f8b2 	bl	8004c74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2280      	movs	r2, #128	@ 0x80
 8004b16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d012      	beq.n	8004b48 <HAL_ADC_IRQHandler+0x35c>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00d      	beq.n	8004b48 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b30:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 ffc9 	bl	8005ad0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d012      	beq.n	8004b78 <HAL_ADC_IRQHandler+0x38c>
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b60:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 ffbb 	bl	8005ae4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d043      	beq.n	8004c0a <HAL_ADC_IRQHandler+0x41e>
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d03e      	beq.n	8004c0a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004b94:	2301      	movs	r3, #1
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b98:	e021      	b.n	8004bde <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d015      	beq.n	8004bcc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c50 <HAL_ADC_IRQHandler+0x464>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_ADC_IRQHandler+0x3c8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a29      	ldr	r2, [pc, #164]	@ (8004c54 <HAL_ADC_IRQHandler+0x468>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d101      	bne.n	8004bb8 <HAL_ADC_IRQHandler+0x3cc>
 8004bb4:	4b28      	ldr	r3, [pc, #160]	@ (8004c58 <HAL_ADC_IRQHandler+0x46c>)
 8004bb6:	e000      	b.n	8004bba <HAL_ADC_IRQHandler+0x3ce>
 8004bb8:	4b28      	ldr	r3, [pc, #160]	@ (8004c5c <HAL_ADC_IRQHandler+0x470>)
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff fa74 	bl	80040a8 <LL_ADC_GetMultiDMATransfer>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00b      	beq.n	8004bde <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bca:	e008      	b.n	8004bde <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d10e      	bne.n	8004c02 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bf4:	f043 0202 	orr.w	r2, r3, #2
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f843 	bl	8004c88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2210      	movs	r2, #16
 8004c08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d018      	beq.n	8004c46 <HAL_ADC_IRQHandler+0x45a>
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d013      	beq.n	8004c46 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c22:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c2e:	f043 0208 	orr.w	r2, r3, #8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c3e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 ff3b 	bl	8005abc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004c46:	bf00      	nop
 8004c48:	3728      	adds	r7, #40	@ 0x28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40022000 	.word	0x40022000
 8004c54:	40022100 	.word	0x40022100
 8004c58:	40022300 	.word	0x40022300
 8004c5c:	58026300 	.word	0x58026300

08004c60 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b0a5      	sub	sp, #148	@ 0x94
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cb6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4aa4      	ldr	r2, [pc, #656]	@ (8004f50 <HAL_ADC_ConfigChannel+0x2b4>)
 8004cbe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d102      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x34>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	f000 bca2 	b.w	8005614 <HAL_ADC_ConfigChannel+0x978>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fa7b 	bl	80041d8 <LL_ADC_REG_IsConversionOngoing>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f040 8486 	bne.w	80055f6 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	db31      	blt.n	8004d56 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a97      	ldr	r2, [pc, #604]	@ (8004f54 <HAL_ADC_ConfigChannel+0x2b8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d02c      	beq.n	8004d56 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d108      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x7e>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	0e9b      	lsrs	r3, r3, #26
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	2201      	movs	r2, #1
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	e016      	b.n	8004d48 <HAL_ADC_ConfigChannel+0xac>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d22:	fa93 f3a3 	rbit	r3, r3
 8004d26:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004d28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8004d32:	2320      	movs	r3, #32
 8004d34:	e003      	b.n	8004d3e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8004d36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d38:	fab3 f383 	clz	r3, r3
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	2201      	movs	r2, #1
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	69d1      	ldr	r1, [r2, #28]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	430b      	orrs	r3, r1
 8004d54:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f7ff f8ab 	bl	8003ebe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff fa33 	bl	80041d8 <LL_ADC_REG_IsConversionOngoing>
 8004d72:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff fa3f 	bl	80041fe <LL_ADC_INJ_IsConversionOngoing>
 8004d80:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f040 824a 	bne.w	8005222 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 8245 	bne.w	8005222 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	461a      	mov	r2, r3
 8004da6:	f7ff f906 	bl	8003fb6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a69      	ldr	r2, [pc, #420]	@ (8004f54 <HAL_ADC_ConfigChannel+0x2b8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d10d      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	08db      	lsrs	r3, r3, #3
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004dce:	e032      	b.n	8004e36 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004dd0:	4b61      	ldr	r3, [pc, #388]	@ (8004f58 <HAL_ADC_ConfigChannel+0x2bc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ddc:	d10b      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x15a>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695a      	ldr	r2, [r3, #20]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	089b      	lsrs	r3, r3, #2
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	e01d      	b.n	8004e32 <HAL_ADC_ConfigChannel+0x196>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x180>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	089b      	lsrs	r3, r3, #2
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	e00a      	b.n	8004e32 <HAL_ADC_ConfigChannel+0x196>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	089b      	lsrs	r3, r3, #2
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d048      	beq.n	8004ed0 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6919      	ldr	r1, [r3, #16]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e4e:	f7fe ff31 	bl	8003cb4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a3f      	ldr	r2, [pc, #252]	@ (8004f54 <HAL_ADC_ConfigChannel+0x2b8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d119      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6919      	ldr	r1, [r3, #16]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f7fe ffc9 	bl	8003e00 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6919      	ldr	r1, [r3, #16]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d102      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x1ea>
 8004e80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e84:	e000      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x1ec>
 8004e86:	2300      	movs	r3, #0
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f7fe ff97 	bl	8003dbc <LL_ADC_SetOffsetSaturation>
 8004e8e:	e1c8      	b.n	8005222 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6919      	ldr	r1, [r3, #16]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d102      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x20c>
 8004ea2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004ea6:	e000      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x20e>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f7fe ff64 	bl	8003d78 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6919      	ldr	r1, [r3, #16]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	7e1b      	ldrb	r3, [r3, #24]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d102      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x22a>
 8004ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ec4:	e000      	b.n	8004ec8 <HAL_ADC_ConfigChannel+0x22c>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f7fe ff3b 	bl	8003d44 <LL_ADC_SetDataRightShift>
 8004ece:	e1a8      	b.n	8005222 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f54 <HAL_ADC_ConfigChannel+0x2b8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	f040 815b 	bne.w	8005192 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe ff18 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x26c>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe ff0d 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 8004efe:	4603      	mov	r3, r0
 8004f00:	0e9b      	lsrs	r3, r3, #26
 8004f02:	f003 021f 	and.w	r2, r3, #31
 8004f06:	e017      	b.n	8004f38 <HAL_ADC_ConfigChannel+0x29c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe ff02 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 8004f14:	4603      	mov	r3, r0
 8004f16:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f1a:	fa93 f3a3 	rbit	r3, r3
 8004f1e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004f20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f22:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004f24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004f2a:	2320      	movs	r3, #32
 8004f2c:	e003      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8004f2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f30:	fab3 f383 	clz	r3, r3
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x2c0>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	0e9b      	lsrs	r3, r3, #26
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	e017      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x2e4>
 8004f50:	47ff0000 	.word	0x47ff0000
 8004f54:	58026000 	.word	0x58026000
 8004f58:	5c001000 	.word	0x5c001000
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f64:	fa93 f3a3 	rbit	r3, r3
 8004f68:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004f6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004f6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8004f74:	2320      	movs	r3, #32
 8004f76:	e003      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8004f78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f7a:	fab3 f383 	clz	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d106      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe ff59 	bl	8003e44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2101      	movs	r1, #1
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fe febd 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x322>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2101      	movs	r1, #1
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe feb2 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	0e9b      	lsrs	r3, r3, #26
 8004fb8:	f003 021f 	and.w	r2, r3, #31
 8004fbc:	e017      	b.n	8004fee <HAL_ADC_ConfigChannel+0x352>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fe fea7 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fd0:	fa93 f3a3 	rbit	r3, r3
 8004fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	e003      	b.n	8004fec <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8004fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fe6:	fab3 f383 	clz	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d105      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x36a>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	0e9b      	lsrs	r3, r3, #26
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	e011      	b.n	800502a <HAL_ADC_ConfigChannel+0x38e>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800500e:	fa93 f3a3 	rbit	r3, r3
 8005012:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005016:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800501e:	2320      	movs	r3, #32
 8005020:	e003      	b.n	800502a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005024:	fab3 f383 	clz	r3, r3
 8005028:	b2db      	uxtb	r3, r3
 800502a:	429a      	cmp	r2, r3
 800502c:	d106      	bne.n	800503c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	2101      	movs	r1, #1
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe ff04 	bl	8003e44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2102      	movs	r1, #2
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fe68 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 8005048:	4603      	mov	r3, r0
 800504a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x3cc>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2102      	movs	r1, #2
 8005058:	4618      	mov	r0, r3
 800505a:	f7fe fe5d 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 800505e:	4603      	mov	r3, r0
 8005060:	0e9b      	lsrs	r3, r3, #26
 8005062:	f003 021f 	and.w	r2, r3, #31
 8005066:	e017      	b.n	8005098 <HAL_ADC_ConfigChannel+0x3fc>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2102      	movs	r1, #2
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe fe52 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 8005074:	4603      	mov	r3, r0
 8005076:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507a:	fa93 f3a3 	rbit	r3, r3
 800507e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005082:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800508a:	2320      	movs	r3, #32
 800508c:	e003      	b.n	8005096 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800508e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005090:	fab3 f383 	clz	r3, r3
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x414>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	0e9b      	lsrs	r3, r3, #26
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	e011      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x438>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b8:	fa93 f3a3 	rbit	r3, r3
 80050bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80050c8:	2320      	movs	r3, #32
 80050ca:	e003      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80050cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ce:	fab3 f383 	clz	r3, r3
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d106      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2200      	movs	r2, #0
 80050de:	2102      	movs	r1, #2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fe feaf 	bl	8003e44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2103      	movs	r1, #3
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe fe13 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x476>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2103      	movs	r1, #3
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe fe08 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 8005108:	4603      	mov	r3, r0
 800510a:	0e9b      	lsrs	r3, r3, #26
 800510c:	f003 021f 	and.w	r2, r3, #31
 8005110:	e017      	b.n	8005142 <HAL_ADC_ConfigChannel+0x4a6>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2103      	movs	r1, #3
 8005118:	4618      	mov	r0, r3
 800511a:	f7fe fdfd 	bl	8003d18 <LL_ADC_GetOffsetChannel>
 800511e:	4603      	mov	r3, r0
 8005120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	fa93 f3a3 	rbit	r3, r3
 8005128:	61fb      	str	r3, [r7, #28]
  return result;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005134:	2320      	movs	r3, #32
 8005136:	e003      	b.n	8005140 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800514a:	2b00      	cmp	r3, #0
 800514c:	d105      	bne.n	800515a <HAL_ADC_ConfigChannel+0x4be>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	0e9b      	lsrs	r3, r3, #26
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	e011      	b.n	800517e <HAL_ADC_ConfigChannel+0x4e2>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	fa93 f3a3 	rbit	r3, r3
 8005166:	613b      	str	r3, [r7, #16]
  return result;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8005172:	2320      	movs	r3, #32
 8005174:	e003      	b.n	800517e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	fab3 f383 	clz	r3, r3
 800517c:	b2db      	uxtb	r3, r3
 800517e:	429a      	cmp	r2, r3
 8005180:	d14f      	bne.n	8005222 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	2103      	movs	r1, #3
 800518a:	4618      	mov	r0, r3
 800518c:	f7fe fe5a 	bl	8003e44 <LL_ADC_SetOffsetState>
 8005190:	e047      	b.n	8005222 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005198:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	069b      	lsls	r3, r3, #26
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d107      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80051b4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	069b      	lsls	r3, r3, #26
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d107      	bne.n	80051da <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80051d8:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	069b      	lsls	r3, r3, #26
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d107      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80051fc:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005204:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	069b      	lsls	r3, r3, #26
 800520e:	429a      	cmp	r2, r3
 8005210:	d107      	bne.n	8005222 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005220:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe ffae 	bl	8004188 <LL_ADC_IsEnabled>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	f040 81ea 	bne.w	8005608 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	6819      	ldr	r1, [r3, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	461a      	mov	r2, r3
 8005242:	f7fe fee3 	bl	800400c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	4a7a      	ldr	r2, [pc, #488]	@ (8005434 <HAL_ADC_ConfigChannel+0x798>)
 800524c:	4293      	cmp	r3, r2
 800524e:	f040 80e0 	bne.w	8005412 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4977      	ldr	r1, [pc, #476]	@ (8005438 <HAL_ADC_ConfigChannel+0x79c>)
 800525c:	428b      	cmp	r3, r1
 800525e:	d147      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x654>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4975      	ldr	r1, [pc, #468]	@ (800543c <HAL_ADC_ConfigChannel+0x7a0>)
 8005266:	428b      	cmp	r3, r1
 8005268:	d040      	beq.n	80052ec <HAL_ADC_ConfigChannel+0x650>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4974      	ldr	r1, [pc, #464]	@ (8005440 <HAL_ADC_ConfigChannel+0x7a4>)
 8005270:	428b      	cmp	r3, r1
 8005272:	d039      	beq.n	80052e8 <HAL_ADC_ConfigChannel+0x64c>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4972      	ldr	r1, [pc, #456]	@ (8005444 <HAL_ADC_ConfigChannel+0x7a8>)
 800527a:	428b      	cmp	r3, r1
 800527c:	d032      	beq.n	80052e4 <HAL_ADC_ConfigChannel+0x648>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4971      	ldr	r1, [pc, #452]	@ (8005448 <HAL_ADC_ConfigChannel+0x7ac>)
 8005284:	428b      	cmp	r3, r1
 8005286:	d02b      	beq.n	80052e0 <HAL_ADC_ConfigChannel+0x644>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	496f      	ldr	r1, [pc, #444]	@ (800544c <HAL_ADC_ConfigChannel+0x7b0>)
 800528e:	428b      	cmp	r3, r1
 8005290:	d024      	beq.n	80052dc <HAL_ADC_ConfigChannel+0x640>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	496e      	ldr	r1, [pc, #440]	@ (8005450 <HAL_ADC_ConfigChannel+0x7b4>)
 8005298:	428b      	cmp	r3, r1
 800529a:	d01d      	beq.n	80052d8 <HAL_ADC_ConfigChannel+0x63c>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	496c      	ldr	r1, [pc, #432]	@ (8005454 <HAL_ADC_ConfigChannel+0x7b8>)
 80052a2:	428b      	cmp	r3, r1
 80052a4:	d016      	beq.n	80052d4 <HAL_ADC_ConfigChannel+0x638>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	496b      	ldr	r1, [pc, #428]	@ (8005458 <HAL_ADC_ConfigChannel+0x7bc>)
 80052ac:	428b      	cmp	r3, r1
 80052ae:	d00f      	beq.n	80052d0 <HAL_ADC_ConfigChannel+0x634>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4969      	ldr	r1, [pc, #420]	@ (800545c <HAL_ADC_ConfigChannel+0x7c0>)
 80052b6:	428b      	cmp	r3, r1
 80052b8:	d008      	beq.n	80052cc <HAL_ADC_ConfigChannel+0x630>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4968      	ldr	r1, [pc, #416]	@ (8005460 <HAL_ADC_ConfigChannel+0x7c4>)
 80052c0:	428b      	cmp	r3, r1
 80052c2:	d101      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x62c>
 80052c4:	4b67      	ldr	r3, [pc, #412]	@ (8005464 <HAL_ADC_ConfigChannel+0x7c8>)
 80052c6:	e0a0      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80052c8:	2300      	movs	r3, #0
 80052ca:	e09e      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80052cc:	4b66      	ldr	r3, [pc, #408]	@ (8005468 <HAL_ADC_ConfigChannel+0x7cc>)
 80052ce:	e09c      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80052d0:	4b66      	ldr	r3, [pc, #408]	@ (800546c <HAL_ADC_ConfigChannel+0x7d0>)
 80052d2:	e09a      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80052d4:	4b60      	ldr	r3, [pc, #384]	@ (8005458 <HAL_ADC_ConfigChannel+0x7bc>)
 80052d6:	e098      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80052d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005454 <HAL_ADC_ConfigChannel+0x7b8>)
 80052da:	e096      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80052dc:	4b64      	ldr	r3, [pc, #400]	@ (8005470 <HAL_ADC_ConfigChannel+0x7d4>)
 80052de:	e094      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80052e0:	4b64      	ldr	r3, [pc, #400]	@ (8005474 <HAL_ADC_ConfigChannel+0x7d8>)
 80052e2:	e092      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80052e4:	4b64      	ldr	r3, [pc, #400]	@ (8005478 <HAL_ADC_ConfigChannel+0x7dc>)
 80052e6:	e090      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80052e8:	4b64      	ldr	r3, [pc, #400]	@ (800547c <HAL_ADC_ConfigChannel+0x7e0>)
 80052ea:	e08e      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e08c      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4962      	ldr	r1, [pc, #392]	@ (8005480 <HAL_ADC_ConfigChannel+0x7e4>)
 80052f6:	428b      	cmp	r3, r1
 80052f8:	d140      	bne.n	800537c <HAL_ADC_ConfigChannel+0x6e0>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	494f      	ldr	r1, [pc, #316]	@ (800543c <HAL_ADC_ConfigChannel+0x7a0>)
 8005300:	428b      	cmp	r3, r1
 8005302:	d039      	beq.n	8005378 <HAL_ADC_ConfigChannel+0x6dc>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	494d      	ldr	r1, [pc, #308]	@ (8005440 <HAL_ADC_ConfigChannel+0x7a4>)
 800530a:	428b      	cmp	r3, r1
 800530c:	d032      	beq.n	8005374 <HAL_ADC_ConfigChannel+0x6d8>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	494c      	ldr	r1, [pc, #304]	@ (8005444 <HAL_ADC_ConfigChannel+0x7a8>)
 8005314:	428b      	cmp	r3, r1
 8005316:	d02b      	beq.n	8005370 <HAL_ADC_ConfigChannel+0x6d4>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	494a      	ldr	r1, [pc, #296]	@ (8005448 <HAL_ADC_ConfigChannel+0x7ac>)
 800531e:	428b      	cmp	r3, r1
 8005320:	d024      	beq.n	800536c <HAL_ADC_ConfigChannel+0x6d0>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4949      	ldr	r1, [pc, #292]	@ (800544c <HAL_ADC_ConfigChannel+0x7b0>)
 8005328:	428b      	cmp	r3, r1
 800532a:	d01d      	beq.n	8005368 <HAL_ADC_ConfigChannel+0x6cc>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4947      	ldr	r1, [pc, #284]	@ (8005450 <HAL_ADC_ConfigChannel+0x7b4>)
 8005332:	428b      	cmp	r3, r1
 8005334:	d016      	beq.n	8005364 <HAL_ADC_ConfigChannel+0x6c8>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4946      	ldr	r1, [pc, #280]	@ (8005454 <HAL_ADC_ConfigChannel+0x7b8>)
 800533c:	428b      	cmp	r3, r1
 800533e:	d00f      	beq.n	8005360 <HAL_ADC_ConfigChannel+0x6c4>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4944      	ldr	r1, [pc, #272]	@ (8005458 <HAL_ADC_ConfigChannel+0x7bc>)
 8005346:	428b      	cmp	r3, r1
 8005348:	d008      	beq.n	800535c <HAL_ADC_ConfigChannel+0x6c0>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4944      	ldr	r1, [pc, #272]	@ (8005460 <HAL_ADC_ConfigChannel+0x7c4>)
 8005350:	428b      	cmp	r3, r1
 8005352:	d101      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x6bc>
 8005354:	4b43      	ldr	r3, [pc, #268]	@ (8005464 <HAL_ADC_ConfigChannel+0x7c8>)
 8005356:	e058      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 8005358:	2300      	movs	r3, #0
 800535a:	e056      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 800535c:	4b43      	ldr	r3, [pc, #268]	@ (800546c <HAL_ADC_ConfigChannel+0x7d0>)
 800535e:	e054      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 8005360:	4b3d      	ldr	r3, [pc, #244]	@ (8005458 <HAL_ADC_ConfigChannel+0x7bc>)
 8005362:	e052      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 8005364:	4b3b      	ldr	r3, [pc, #236]	@ (8005454 <HAL_ADC_ConfigChannel+0x7b8>)
 8005366:	e050      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 8005368:	4b41      	ldr	r3, [pc, #260]	@ (8005470 <HAL_ADC_ConfigChannel+0x7d4>)
 800536a:	e04e      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 800536c:	4b41      	ldr	r3, [pc, #260]	@ (8005474 <HAL_ADC_ConfigChannel+0x7d8>)
 800536e:	e04c      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 8005370:	4b41      	ldr	r3, [pc, #260]	@ (8005478 <HAL_ADC_ConfigChannel+0x7dc>)
 8005372:	e04a      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 8005374:	4b41      	ldr	r3, [pc, #260]	@ (800547c <HAL_ADC_ConfigChannel+0x7e0>)
 8005376:	e048      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 8005378:	2301      	movs	r3, #1
 800537a:	e046      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4940      	ldr	r1, [pc, #256]	@ (8005484 <HAL_ADC_ConfigChannel+0x7e8>)
 8005382:	428b      	cmp	r3, r1
 8005384:	d140      	bne.n	8005408 <HAL_ADC_ConfigChannel+0x76c>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	492c      	ldr	r1, [pc, #176]	@ (800543c <HAL_ADC_ConfigChannel+0x7a0>)
 800538c:	428b      	cmp	r3, r1
 800538e:	d039      	beq.n	8005404 <HAL_ADC_ConfigChannel+0x768>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	492a      	ldr	r1, [pc, #168]	@ (8005440 <HAL_ADC_ConfigChannel+0x7a4>)
 8005396:	428b      	cmp	r3, r1
 8005398:	d032      	beq.n	8005400 <HAL_ADC_ConfigChannel+0x764>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4929      	ldr	r1, [pc, #164]	@ (8005444 <HAL_ADC_ConfigChannel+0x7a8>)
 80053a0:	428b      	cmp	r3, r1
 80053a2:	d02b      	beq.n	80053fc <HAL_ADC_ConfigChannel+0x760>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4927      	ldr	r1, [pc, #156]	@ (8005448 <HAL_ADC_ConfigChannel+0x7ac>)
 80053aa:	428b      	cmp	r3, r1
 80053ac:	d024      	beq.n	80053f8 <HAL_ADC_ConfigChannel+0x75c>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4926      	ldr	r1, [pc, #152]	@ (800544c <HAL_ADC_ConfigChannel+0x7b0>)
 80053b4:	428b      	cmp	r3, r1
 80053b6:	d01d      	beq.n	80053f4 <HAL_ADC_ConfigChannel+0x758>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4924      	ldr	r1, [pc, #144]	@ (8005450 <HAL_ADC_ConfigChannel+0x7b4>)
 80053be:	428b      	cmp	r3, r1
 80053c0:	d016      	beq.n	80053f0 <HAL_ADC_ConfigChannel+0x754>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4923      	ldr	r1, [pc, #140]	@ (8005454 <HAL_ADC_ConfigChannel+0x7b8>)
 80053c8:	428b      	cmp	r3, r1
 80053ca:	d00f      	beq.n	80053ec <HAL_ADC_ConfigChannel+0x750>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4926      	ldr	r1, [pc, #152]	@ (800546c <HAL_ADC_ConfigChannel+0x7d0>)
 80053d2:	428b      	cmp	r3, r1
 80053d4:	d008      	beq.n	80053e8 <HAL_ADC_ConfigChannel+0x74c>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	492b      	ldr	r1, [pc, #172]	@ (8005488 <HAL_ADC_ConfigChannel+0x7ec>)
 80053dc:	428b      	cmp	r3, r1
 80053de:	d101      	bne.n	80053e4 <HAL_ADC_ConfigChannel+0x748>
 80053e0:	4b2a      	ldr	r3, [pc, #168]	@ (800548c <HAL_ADC_ConfigChannel+0x7f0>)
 80053e2:	e012      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80053e4:	2300      	movs	r3, #0
 80053e6:	e010      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80053e8:	4b27      	ldr	r3, [pc, #156]	@ (8005488 <HAL_ADC_ConfigChannel+0x7ec>)
 80053ea:	e00e      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80053ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005458 <HAL_ADC_ConfigChannel+0x7bc>)
 80053ee:	e00c      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80053f0:	4b18      	ldr	r3, [pc, #96]	@ (8005454 <HAL_ADC_ConfigChannel+0x7b8>)
 80053f2:	e00a      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80053f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005470 <HAL_ADC_ConfigChannel+0x7d4>)
 80053f6:	e008      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80053f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <HAL_ADC_ConfigChannel+0x7d8>)
 80053fa:	e006      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 80053fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005478 <HAL_ADC_ConfigChannel+0x7dc>)
 80053fe:	e004      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 8005400:	4b1e      	ldr	r3, [pc, #120]	@ (800547c <HAL_ADC_ConfigChannel+0x7e0>)
 8005402:	e002      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_ADC_ConfigChannel+0x76e>
 8005408:	2300      	movs	r3, #0
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f7fe fc17 	bl	8003c40 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f280 80f6 	bge.w	8005608 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a05      	ldr	r2, [pc, #20]	@ (8005438 <HAL_ADC_ConfigChannel+0x79c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <HAL_ADC_ConfigChannel+0x794>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a15      	ldr	r2, [pc, #84]	@ (8005480 <HAL_ADC_ConfigChannel+0x7e4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d131      	bne.n	8005494 <HAL_ADC_ConfigChannel+0x7f8>
 8005430:	4b17      	ldr	r3, [pc, #92]	@ (8005490 <HAL_ADC_ConfigChannel+0x7f4>)
 8005432:	e030      	b.n	8005496 <HAL_ADC_ConfigChannel+0x7fa>
 8005434:	47ff0000 	.word	0x47ff0000
 8005438:	40022000 	.word	0x40022000
 800543c:	04300002 	.word	0x04300002
 8005440:	08600004 	.word	0x08600004
 8005444:	0c900008 	.word	0x0c900008
 8005448:	10c00010 	.word	0x10c00010
 800544c:	14f00020 	.word	0x14f00020
 8005450:	2a000400 	.word	0x2a000400
 8005454:	2e300800 	.word	0x2e300800
 8005458:	32601000 	.word	0x32601000
 800545c:	43210000 	.word	0x43210000
 8005460:	4b840000 	.word	0x4b840000
 8005464:	4fb80000 	.word	0x4fb80000
 8005468:	47520000 	.word	0x47520000
 800546c:	36902000 	.word	0x36902000
 8005470:	25b00200 	.word	0x25b00200
 8005474:	21800100 	.word	0x21800100
 8005478:	1d500080 	.word	0x1d500080
 800547c:	19200040 	.word	0x19200040
 8005480:	40022100 	.word	0x40022100
 8005484:	58026000 	.word	0x58026000
 8005488:	3ac04000 	.word	0x3ac04000
 800548c:	3ef08000 	.word	0x3ef08000
 8005490:	40022300 	.word	0x40022300
 8005494:	4b61      	ldr	r3, [pc, #388]	@ (800561c <HAL_ADC_ConfigChannel+0x980>)
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe fbc4 	bl	8003c24 <LL_ADC_GetCommonPathInternalCh>
 800549c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a5f      	ldr	r2, [pc, #380]	@ (8005620 <HAL_ADC_ConfigChannel+0x984>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_ADC_ConfigChannel+0x816>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a5d      	ldr	r2, [pc, #372]	@ (8005624 <HAL_ADC_ConfigChannel+0x988>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d10e      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x834>
 80054b2:	485b      	ldr	r0, [pc, #364]	@ (8005620 <HAL_ADC_ConfigChannel+0x984>)
 80054b4:	f7fe fe68 	bl	8004188 <LL_ADC_IsEnabled>
 80054b8:	4604      	mov	r4, r0
 80054ba:	485a      	ldr	r0, [pc, #360]	@ (8005624 <HAL_ADC_ConfigChannel+0x988>)
 80054bc:	f7fe fe64 	bl	8004188 <LL_ADC_IsEnabled>
 80054c0:	4603      	mov	r3, r0
 80054c2:	4323      	orrs	r3, r4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e008      	b.n	80054e2 <HAL_ADC_ConfigChannel+0x846>
 80054d0:	4855      	ldr	r0, [pc, #340]	@ (8005628 <HAL_ADC_ConfigChannel+0x98c>)
 80054d2:	f7fe fe59 	bl	8004188 <LL_ADC_IsEnabled>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bf0c      	ite	eq
 80054dc:	2301      	moveq	r3, #1
 80054de:	2300      	movne	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d07d      	beq.n	80055e2 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a50      	ldr	r2, [pc, #320]	@ (800562c <HAL_ADC_ConfigChannel+0x990>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d130      	bne.n	8005552 <HAL_ADC_ConfigChannel+0x8b6>
 80054f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d12b      	bne.n	8005552 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a4a      	ldr	r2, [pc, #296]	@ (8005628 <HAL_ADC_ConfigChannel+0x98c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	f040 8081 	bne.w	8005608 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a45      	ldr	r2, [pc, #276]	@ (8005620 <HAL_ADC_ConfigChannel+0x984>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d004      	beq.n	800551a <HAL_ADC_ConfigChannel+0x87e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a43      	ldr	r2, [pc, #268]	@ (8005624 <HAL_ADC_ConfigChannel+0x988>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d101      	bne.n	800551e <HAL_ADC_ConfigChannel+0x882>
 800551a:	4a45      	ldr	r2, [pc, #276]	@ (8005630 <HAL_ADC_ConfigChannel+0x994>)
 800551c:	e000      	b.n	8005520 <HAL_ADC_ConfigChannel+0x884>
 800551e:	4a3f      	ldr	r2, [pc, #252]	@ (800561c <HAL_ADC_ConfigChannel+0x980>)
 8005520:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005522:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f7fe fb68 	bl	8003bfe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800552e:	4b41      	ldr	r3, [pc, #260]	@ (8005634 <HAL_ADC_ConfigChannel+0x998>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	099b      	lsrs	r3, r3, #6
 8005534:	4a40      	ldr	r2, [pc, #256]	@ (8005638 <HAL_ADC_ConfigChannel+0x99c>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	099b      	lsrs	r3, r3, #6
 800553c:	3301      	adds	r3, #1
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8005542:	e002      	b.n	800554a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3b01      	subs	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f9      	bne.n	8005544 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005550:	e05a      	b.n	8005608 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a39      	ldr	r2, [pc, #228]	@ (800563c <HAL_ADC_ConfigChannel+0x9a0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d11e      	bne.n	800559a <HAL_ADC_ConfigChannel+0x8fe>
 800555c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800555e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d119      	bne.n	800559a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2f      	ldr	r2, [pc, #188]	@ (8005628 <HAL_ADC_ConfigChannel+0x98c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d14b      	bne.n	8005608 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2a      	ldr	r2, [pc, #168]	@ (8005620 <HAL_ADC_ConfigChannel+0x984>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_ADC_ConfigChannel+0x8e8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a29      	ldr	r2, [pc, #164]	@ (8005624 <HAL_ADC_ConfigChannel+0x988>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x8ec>
 8005584:	4a2a      	ldr	r2, [pc, #168]	@ (8005630 <HAL_ADC_ConfigChannel+0x994>)
 8005586:	e000      	b.n	800558a <HAL_ADC_ConfigChannel+0x8ee>
 8005588:	4a24      	ldr	r2, [pc, #144]	@ (800561c <HAL_ADC_ConfigChannel+0x980>)
 800558a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800558c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f7fe fb33 	bl	8003bfe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005598:	e036      	b.n	8005608 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a28      	ldr	r2, [pc, #160]	@ (8005640 <HAL_ADC_ConfigChannel+0x9a4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d131      	bne.n	8005608 <HAL_ADC_ConfigChannel+0x96c>
 80055a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d12c      	bne.n	8005608 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005628 <HAL_ADC_ConfigChannel+0x98c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d127      	bne.n	8005608 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a18      	ldr	r2, [pc, #96]	@ (8005620 <HAL_ADC_ConfigChannel+0x984>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_ADC_ConfigChannel+0x930>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a17      	ldr	r2, [pc, #92]	@ (8005624 <HAL_ADC_ConfigChannel+0x988>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d101      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x934>
 80055cc:	4a18      	ldr	r2, [pc, #96]	@ (8005630 <HAL_ADC_ConfigChannel+0x994>)
 80055ce:	e000      	b.n	80055d2 <HAL_ADC_ConfigChannel+0x936>
 80055d0:	4a12      	ldr	r2, [pc, #72]	@ (800561c <HAL_ADC_ConfigChannel+0x980>)
 80055d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f7fe fb0f 	bl	8003bfe <LL_ADC_SetCommonPathInternalCh>
 80055e0:	e012      	b.n	8005608 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e6:	f043 0220 	orr.w	r2, r3, #32
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80055f4:	e008      	b.n	8005608 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055fa:	f043 0220 	orr.w	r2, r3, #32
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005610:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8005614:	4618      	mov	r0, r3
 8005616:	3794      	adds	r7, #148	@ 0x94
 8005618:	46bd      	mov	sp, r7
 800561a:	bd90      	pop	{r4, r7, pc}
 800561c:	58026300 	.word	0x58026300
 8005620:	40022000 	.word	0x40022000
 8005624:	40022100 	.word	0x40022100
 8005628:	58026000 	.word	0x58026000
 800562c:	c7520000 	.word	0xc7520000
 8005630:	40022300 	.word	0x40022300
 8005634:	24000018 	.word	0x24000018
 8005638:	053e2d63 	.word	0x053e2d63
 800563c:	c3210000 	.word	0xc3210000
 8005640:	cb840000 	.word	0xcb840000

08005644 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f7fe fd99 	bl	8004188 <LL_ADC_IsEnabled>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d16e      	bne.n	800573a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	4b38      	ldr	r3, [pc, #224]	@ (8005744 <ADC_Enable+0x100>)
 8005664:	4013      	ands	r3, r2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566e:	f043 0210 	orr.w	r2, r3, #16
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e05a      	b.n	800573c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7fe fd68 	bl	8004160 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005690:	f7fe fa80 	bl	8003b94 <HAL_GetTick>
 8005694:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a2b      	ldr	r2, [pc, #172]	@ (8005748 <ADC_Enable+0x104>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d004      	beq.n	80056aa <ADC_Enable+0x66>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a29      	ldr	r2, [pc, #164]	@ (800574c <ADC_Enable+0x108>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d101      	bne.n	80056ae <ADC_Enable+0x6a>
 80056aa:	4b29      	ldr	r3, [pc, #164]	@ (8005750 <ADC_Enable+0x10c>)
 80056ac:	e000      	b.n	80056b0 <ADC_Enable+0x6c>
 80056ae:	4b29      	ldr	r3, [pc, #164]	@ (8005754 <ADC_Enable+0x110>)
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fe fceb 	bl	800408c <LL_ADC_GetMultimode>
 80056b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a23      	ldr	r2, [pc, #140]	@ (800574c <ADC_Enable+0x108>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d002      	beq.n	80056c8 <ADC_Enable+0x84>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	e000      	b.n	80056ca <ADC_Enable+0x86>
 80056c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005748 <ADC_Enable+0x104>)
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d02c      	beq.n	800572c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d130      	bne.n	800573a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056d8:	e028      	b.n	800572c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fd52 	bl	8004188 <LL_ADC_IsEnabled>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fd36 	bl	8004160 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80056f4:	f7fe fa4e 	bl	8003b94 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d914      	bls.n	800572c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b01      	cmp	r3, #1
 800570e:	d00d      	beq.n	800572c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005714:	f043 0210 	orr.w	r2, r3, #16
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005720:	f043 0201 	orr.w	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e007      	b.n	800573c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b01      	cmp	r3, #1
 8005738:	d1cf      	bne.n	80056da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	8000003f 	.word	0x8000003f
 8005748:	40022000 	.word	0x40022000
 800574c:	40022100 	.word	0x40022100
 8005750:	40022300 	.word	0x40022300
 8005754:	58026300 	.word	0x58026300

08005758 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005764:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800576a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800576e:	2b00      	cmp	r3, #0
 8005770:	d14b      	bne.n	800580a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005776:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d021      	beq.n	80057d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f7fe fb81 	bl	8003e98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d032      	beq.n	8005802 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d12b      	bne.n	8005802 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d11f      	bne.n	8005802 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c6:	f043 0201 	orr.w	r2, r3, #1
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80057ce:	e018      	b.n	8005802 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d111      	bne.n	8005802 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d105      	bne.n	8005802 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057fa:	f043 0201 	orr.w	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7fc ffd2 	bl	80027ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005808:	e00e      	b.n	8005828 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff fa36 	bl	8004c88 <HAL_ADC_ErrorCallback>
}
 800581c:	e004      	b.n	8005828 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	4798      	blx	r3
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fa0e 	bl	8004c60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005858:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800585e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800586a:	f043 0204 	orr.w	r2, r3, #4
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff fa08 	bl	8004c88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a6c      	ldr	r2, [pc, #432]	@ (8005a40 <ADC_ConfigureBoostMode+0x1c0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <ADC_ConfigureBoostMode+0x1c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a6b      	ldr	r2, [pc, #428]	@ (8005a44 <ADC_ConfigureBoostMode+0x1c4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d109      	bne.n	80058b0 <ADC_ConfigureBoostMode+0x30>
 800589c:	4b6a      	ldr	r3, [pc, #424]	@ (8005a48 <ADC_ConfigureBoostMode+0x1c8>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	e008      	b.n	80058c2 <ADC_ConfigureBoostMode+0x42>
 80058b0:	4b66      	ldr	r3, [pc, #408]	@ (8005a4c <ADC_ConfigureBoostMode+0x1cc>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01c      	beq.n	8005900 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80058c6:	f004 fb85 	bl	8009fd4 <HAL_RCC_GetHCLKFreq>
 80058ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058d4:	d010      	beq.n	80058f8 <ADC_ConfigureBoostMode+0x78>
 80058d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058da:	d873      	bhi.n	80059c4 <ADC_ConfigureBoostMode+0x144>
 80058dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e0:	d002      	beq.n	80058e8 <ADC_ConfigureBoostMode+0x68>
 80058e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058e6:	d16d      	bne.n	80059c4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	0c1b      	lsrs	r3, r3, #16
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	60fb      	str	r3, [r7, #12]
        break;
 80058f6:	e068      	b.n	80059ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	089b      	lsrs	r3, r3, #2
 80058fc:	60fb      	str	r3, [r7, #12]
        break;
 80058fe:	e064      	b.n	80059ca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005900:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005904:	f04f 0100 	mov.w	r1, #0
 8005908:	f005 fd60 	bl	800b3cc <HAL_RCCEx_GetPeriphCLKFreq>
 800590c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005916:	d051      	beq.n	80059bc <ADC_ConfigureBoostMode+0x13c>
 8005918:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800591c:	d854      	bhi.n	80059c8 <ADC_ConfigureBoostMode+0x148>
 800591e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005922:	d047      	beq.n	80059b4 <ADC_ConfigureBoostMode+0x134>
 8005924:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005928:	d84e      	bhi.n	80059c8 <ADC_ConfigureBoostMode+0x148>
 800592a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800592e:	d03d      	beq.n	80059ac <ADC_ConfigureBoostMode+0x12c>
 8005930:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005934:	d848      	bhi.n	80059c8 <ADC_ConfigureBoostMode+0x148>
 8005936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800593a:	d033      	beq.n	80059a4 <ADC_ConfigureBoostMode+0x124>
 800593c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005940:	d842      	bhi.n	80059c8 <ADC_ConfigureBoostMode+0x148>
 8005942:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005946:	d029      	beq.n	800599c <ADC_ConfigureBoostMode+0x11c>
 8005948:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800594c:	d83c      	bhi.n	80059c8 <ADC_ConfigureBoostMode+0x148>
 800594e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005952:	d01a      	beq.n	800598a <ADC_ConfigureBoostMode+0x10a>
 8005954:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005958:	d836      	bhi.n	80059c8 <ADC_ConfigureBoostMode+0x148>
 800595a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800595e:	d014      	beq.n	800598a <ADC_ConfigureBoostMode+0x10a>
 8005960:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005964:	d830      	bhi.n	80059c8 <ADC_ConfigureBoostMode+0x148>
 8005966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800596a:	d00e      	beq.n	800598a <ADC_ConfigureBoostMode+0x10a>
 800596c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005970:	d82a      	bhi.n	80059c8 <ADC_ConfigureBoostMode+0x148>
 8005972:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005976:	d008      	beq.n	800598a <ADC_ConfigureBoostMode+0x10a>
 8005978:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800597c:	d824      	bhi.n	80059c8 <ADC_ConfigureBoostMode+0x148>
 800597e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005982:	d002      	beq.n	800598a <ADC_ConfigureBoostMode+0x10a>
 8005984:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005988:	d11e      	bne.n	80059c8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	0c9b      	lsrs	r3, r3, #18
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	fbb2 f3f3 	udiv	r3, r2, r3
 8005998:	60fb      	str	r3, [r7, #12]
        break;
 800599a:	e016      	b.n	80059ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	60fb      	str	r3, [r7, #12]
        break;
 80059a2:	e012      	b.n	80059ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	60fb      	str	r3, [r7, #12]
        break;
 80059aa:	e00e      	b.n	80059ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	099b      	lsrs	r3, r3, #6
 80059b0:	60fb      	str	r3, [r7, #12]
        break;
 80059b2:	e00a      	b.n	80059ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	09db      	lsrs	r3, r3, #7
 80059b8:	60fb      	str	r3, [r7, #12]
        break;
 80059ba:	e006      	b.n	80059ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	0a1b      	lsrs	r3, r3, #8
 80059c0:	60fb      	str	r3, [r7, #12]
        break;
 80059c2:	e002      	b.n	80059ca <ADC_ConfigureBoostMode+0x14a>
        break;
 80059c4:	bf00      	nop
 80059c6:	e000      	b.n	80059ca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80059c8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005a50 <ADC_ConfigureBoostMode+0x1d0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d808      	bhi.n	80059ea <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80059e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80059e8:	e025      	b.n	8005a36 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4a19      	ldr	r2, [pc, #100]	@ (8005a54 <ADC_ConfigureBoostMode+0x1d4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d80a      	bhi.n	8005a08 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a04:	609a      	str	r2, [r3, #8]
}
 8005a06:	e016      	b.n	8005a36 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a13      	ldr	r2, [pc, #76]	@ (8005a58 <ADC_ConfigureBoostMode+0x1d8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d80a      	bhi.n	8005a26 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a22:	609a      	str	r2, [r3, #8]
}
 8005a24:	e007      	b.n	8005a36 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005a34:	609a      	str	r2, [r3, #8]
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40022000 	.word	0x40022000
 8005a44:	40022100 	.word	0x40022100
 8005a48:	40022300 	.word	0x40022300
 8005a4c:	58026300 	.word	0x58026300
 8005a50:	005f5e10 	.word	0x005f5e10
 8005a54:	00bebc20 	.word	0x00bebc20
 8005a58:	017d7840 	.word	0x017d7840

08005a5c <LL_ADC_IsEnabled>:
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <LL_ADC_IsEnabled+0x18>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <LL_ADC_IsEnabled+0x1a>
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <LL_ADC_REG_IsConversionOngoing>:
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d101      	bne.n	8005a9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005b0c:	b590      	push	{r4, r7, lr}
 8005b0e:	b0a3      	sub	sp, #140	@ 0x8c
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e0c1      	b.n	8005cae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005b32:	2300      	movs	r3, #0
 8005b34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d102      	bne.n	8005b4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005b44:	4b5d      	ldr	r3, [pc, #372]	@ (8005cbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	e001      	b.n	8005b4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10b      	bne.n	8005b6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b58:	f043 0220 	orr.w	r2, r3, #32
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0a0      	b.n	8005cae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff ff87 	bl	8005a82 <LL_ADC_REG_IsConversionOngoing>
 8005b74:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ff80 	bl	8005a82 <LL_ADC_REG_IsConversionOngoing>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 8081 	bne.w	8005c8c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d17c      	bne.n	8005c8c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a48      	ldr	r2, [pc, #288]	@ (8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d004      	beq.n	8005ba6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a46      	ldr	r2, [pc, #280]	@ (8005cbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d101      	bne.n	8005baa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005ba6:	4b46      	ldr	r3, [pc, #280]	@ (8005cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005ba8:	e000      	b.n	8005bac <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005baa:	4b46      	ldr	r3, [pc, #280]	@ (8005cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005bac:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d039      	beq.n	8005c2a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005bb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a3a      	ldr	r2, [pc, #232]	@ (8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a39      	ldr	r2, [pc, #228]	@ (8005cbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d10e      	bne.n	8005bfa <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005bdc:	4836      	ldr	r0, [pc, #216]	@ (8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005bde:	f7ff ff3d 	bl	8005a5c <LL_ADC_IsEnabled>
 8005be2:	4604      	mov	r4, r0
 8005be4:	4835      	ldr	r0, [pc, #212]	@ (8005cbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005be6:	f7ff ff39 	bl	8005a5c <LL_ADC_IsEnabled>
 8005bea:	4603      	mov	r3, r0
 8005bec:	4323      	orrs	r3, r4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bf0c      	ite	eq
 8005bf2:	2301      	moveq	r3, #1
 8005bf4:	2300      	movne	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	e008      	b.n	8005c0c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005bfa:	4833      	ldr	r0, [pc, #204]	@ (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005bfc:	f7ff ff2e 	bl	8005a5c <LL_ADC_IsEnabled>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bf0c      	ite	eq
 8005c06:	2301      	moveq	r3, #1
 8005c08:	2300      	movne	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d047      	beq.n	8005ca0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005c10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	4b2d      	ldr	r3, [pc, #180]	@ (8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	6811      	ldr	r1, [r2, #0]
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	6892      	ldr	r2, [r2, #8]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	431a      	orrs	r2, r3
 8005c24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c26:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c28:	e03a      	b.n	8005ca0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005c2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c34:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d004      	beq.n	8005c4a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1d      	ldr	r2, [pc, #116]	@ (8005cbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d10e      	bne.n	8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005c4a:	481b      	ldr	r0, [pc, #108]	@ (8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005c4c:	f7ff ff06 	bl	8005a5c <LL_ADC_IsEnabled>
 8005c50:	4604      	mov	r4, r0
 8005c52:	481a      	ldr	r0, [pc, #104]	@ (8005cbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005c54:	f7ff ff02 	bl	8005a5c <LL_ADC_IsEnabled>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	4323      	orrs	r3, r4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	e008      	b.n	8005c7a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005c68:	4817      	ldr	r0, [pc, #92]	@ (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005c6a:	f7ff fef7 	bl	8005a5c <LL_ADC_IsEnabled>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bf0c      	ite	eq
 8005c74:	2301      	moveq	r3, #1
 8005c76:	2300      	movne	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d010      	beq.n	8005ca0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	4b12      	ldr	r3, [pc, #72]	@ (8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005c88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c8a:	e009      	b.n	8005ca0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c90:	f043 0220 	orr.w	r2, r3, #32
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005c9e:	e000      	b.n	8005ca2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ca0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005caa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	378c      	adds	r7, #140	@ 0x8c
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd90      	pop	{r4, r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40022000 	.word	0x40022000
 8005cbc:	40022100 	.word	0x40022100
 8005cc0:	40022300 	.word	0x40022300
 8005cc4:	58026300 	.word	0x58026300
 8005cc8:	58026000 	.word	0x58026000
 8005ccc:	fffff0e0 	.word	0xfffff0e0

08005cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d10 <__NVIC_SetPriorityGrouping+0x40>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005cec:	4013      	ands	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005cf8:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <__NVIC_SetPriorityGrouping+0x44>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cfe:	4a04      	ldr	r2, [pc, #16]	@ (8005d10 <__NVIC_SetPriorityGrouping+0x40>)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	60d3      	str	r3, [r2, #12]
}
 8005d04:	bf00      	nop
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	e000ed00 	.word	0xe000ed00
 8005d14:	05fa0000 	.word	0x05fa0000

08005d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d1c:	4b04      	ldr	r3, [pc, #16]	@ (8005d30 <__NVIC_GetPriorityGrouping+0x18>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	0a1b      	lsrs	r3, r3, #8
 8005d22:	f003 0307 	and.w	r3, r3, #7
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	e000ed00 	.word	0xe000ed00

08005d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	db0b      	blt.n	8005d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	f003 021f 	and.w	r2, r3, #31
 8005d4c:	4907      	ldr	r1, [pc, #28]	@ (8005d6c <__NVIC_EnableIRQ+0x38>)
 8005d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	2001      	movs	r0, #1
 8005d56:	fa00 f202 	lsl.w	r2, r0, r2
 8005d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	e000e100 	.word	0xe000e100

08005d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	6039      	str	r1, [r7, #0]
 8005d7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	db0a      	blt.n	8005d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	490c      	ldr	r1, [pc, #48]	@ (8005dbc <__NVIC_SetPriority+0x4c>)
 8005d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d8e:	0112      	lsls	r2, r2, #4
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	440b      	add	r3, r1
 8005d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d98:	e00a      	b.n	8005db0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	4908      	ldr	r1, [pc, #32]	@ (8005dc0 <__NVIC_SetPriority+0x50>)
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	3b04      	subs	r3, #4
 8005da8:	0112      	lsls	r2, r2, #4
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	440b      	add	r3, r1
 8005dae:	761a      	strb	r2, [r3, #24]
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	e000e100 	.word	0xe000e100
 8005dc0:	e000ed00 	.word	0xe000ed00

08005dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b089      	sub	sp, #36	@ 0x24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f1c3 0307 	rsb	r3, r3, #7
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	bf28      	it	cs
 8005de2:	2304      	movcs	r3, #4
 8005de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	3304      	adds	r3, #4
 8005dea:	2b06      	cmp	r3, #6
 8005dec:	d902      	bls.n	8005df4 <NVIC_EncodePriority+0x30>
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	3b03      	subs	r3, #3
 8005df2:	e000      	b.n	8005df6 <NVIC_EncodePriority+0x32>
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43da      	mvns	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	401a      	ands	r2, r3
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	fa01 f303 	lsl.w	r3, r1, r3
 8005e16:	43d9      	mvns	r1, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e1c:	4313      	orrs	r3, r2
         );
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3724      	adds	r7, #36	@ 0x24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
	...

08005e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e3c:	d301      	bcc.n	8005e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e00f      	b.n	8005e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e42:	4a0a      	ldr	r2, [pc, #40]	@ (8005e6c <SysTick_Config+0x40>)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e4a:	210f      	movs	r1, #15
 8005e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e50:	f7ff ff8e 	bl	8005d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e54:	4b05      	ldr	r3, [pc, #20]	@ (8005e6c <SysTick_Config+0x40>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e5a:	4b04      	ldr	r3, [pc, #16]	@ (8005e6c <SysTick_Config+0x40>)
 8005e5c:	2207      	movs	r2, #7
 8005e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	e000e010 	.word	0xe000e010

08005e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff ff29 	bl	8005cd0 <__NVIC_SetPriorityGrouping>
}
 8005e7e:	bf00      	nop
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b086      	sub	sp, #24
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607a      	str	r2, [r7, #4]
 8005e92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e94:	f7ff ff40 	bl	8005d18 <__NVIC_GetPriorityGrouping>
 8005e98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	6978      	ldr	r0, [r7, #20]
 8005ea0:	f7ff ff90 	bl	8005dc4 <NVIC_EncodePriority>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005eaa:	4611      	mov	r1, r2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff ff5f 	bl	8005d70 <__NVIC_SetPriority>
}
 8005eb2:	bf00      	nop
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff ff33 	bl	8005d34 <__NVIC_EnableIRQ>
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff ffa4 	bl	8005e2c <SysTick_Config>
 8005ee4:	4603      	mov	r3, r0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005ef8:	f7fd fe4c 	bl	8003b94 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e312      	b.n	800652e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a66      	ldr	r2, [pc, #408]	@ (80060a8 <HAL_DMA_Init+0x1b8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d04a      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a65      	ldr	r2, [pc, #404]	@ (80060ac <HAL_DMA_Init+0x1bc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d045      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a63      	ldr	r2, [pc, #396]	@ (80060b0 <HAL_DMA_Init+0x1c0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d040      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a62      	ldr	r2, [pc, #392]	@ (80060b4 <HAL_DMA_Init+0x1c4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d03b      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a60      	ldr	r2, [pc, #384]	@ (80060b8 <HAL_DMA_Init+0x1c8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d036      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a5f      	ldr	r2, [pc, #380]	@ (80060bc <HAL_DMA_Init+0x1cc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d031      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a5d      	ldr	r2, [pc, #372]	@ (80060c0 <HAL_DMA_Init+0x1d0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d02c      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a5c      	ldr	r2, [pc, #368]	@ (80060c4 <HAL_DMA_Init+0x1d4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d027      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a5a      	ldr	r2, [pc, #360]	@ (80060c8 <HAL_DMA_Init+0x1d8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d022      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a59      	ldr	r2, [pc, #356]	@ (80060cc <HAL_DMA_Init+0x1dc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d01d      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a57      	ldr	r2, [pc, #348]	@ (80060d0 <HAL_DMA_Init+0x1e0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d018      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a56      	ldr	r2, [pc, #344]	@ (80060d4 <HAL_DMA_Init+0x1e4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a54      	ldr	r2, [pc, #336]	@ (80060d8 <HAL_DMA_Init+0x1e8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00e      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a53      	ldr	r2, [pc, #332]	@ (80060dc <HAL_DMA_Init+0x1ec>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d009      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a51      	ldr	r2, [pc, #324]	@ (80060e0 <HAL_DMA_Init+0x1f0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a50      	ldr	r2, [pc, #320]	@ (80060e4 <HAL_DMA_Init+0x1f4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d101      	bne.n	8005fac <HAL_DMA_Init+0xbc>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <HAL_DMA_Init+0xbe>
 8005fac:	2300      	movs	r3, #0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 813c 	beq.w	800622c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a37      	ldr	r2, [pc, #220]	@ (80060a8 <HAL_DMA_Init+0x1b8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d04a      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a36      	ldr	r2, [pc, #216]	@ (80060ac <HAL_DMA_Init+0x1bc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d045      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a34      	ldr	r2, [pc, #208]	@ (80060b0 <HAL_DMA_Init+0x1c0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d040      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a33      	ldr	r2, [pc, #204]	@ (80060b4 <HAL_DMA_Init+0x1c4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d03b      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a31      	ldr	r2, [pc, #196]	@ (80060b8 <HAL_DMA_Init+0x1c8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d036      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a30      	ldr	r2, [pc, #192]	@ (80060bc <HAL_DMA_Init+0x1cc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d031      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2e      	ldr	r2, [pc, #184]	@ (80060c0 <HAL_DMA_Init+0x1d0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d02c      	beq.n	8006064 <HAL_DMA_Init+0x174>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2d      	ldr	r2, [pc, #180]	@ (80060c4 <HAL_DMA_Init+0x1d4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d027      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2b      	ldr	r2, [pc, #172]	@ (80060c8 <HAL_DMA_Init+0x1d8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d022      	beq.n	8006064 <HAL_DMA_Init+0x174>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a2a      	ldr	r2, [pc, #168]	@ (80060cc <HAL_DMA_Init+0x1dc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d01d      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a28      	ldr	r2, [pc, #160]	@ (80060d0 <HAL_DMA_Init+0x1e0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d018      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a27      	ldr	r2, [pc, #156]	@ (80060d4 <HAL_DMA_Init+0x1e4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <HAL_DMA_Init+0x174>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a25      	ldr	r2, [pc, #148]	@ (80060d8 <HAL_DMA_Init+0x1e8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a24      	ldr	r2, [pc, #144]	@ (80060dc <HAL_DMA_Init+0x1ec>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a22      	ldr	r2, [pc, #136]	@ (80060e0 <HAL_DMA_Init+0x1f0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_DMA_Init+0x174>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a21      	ldr	r2, [pc, #132]	@ (80060e4 <HAL_DMA_Init+0x1f4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d108      	bne.n	8006076 <HAL_DMA_Init+0x186>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	e007      	b.n	8006086 <HAL_DMA_Init+0x196>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006086:	e02f      	b.n	80060e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006088:	f7fd fd84 	bl	8003b94 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b05      	cmp	r3, #5
 8006094:	d928      	bls.n	80060e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2203      	movs	r2, #3
 80060a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e242      	b.n	800652e <HAL_DMA_Init+0x63e>
 80060a8:	40020010 	.word	0x40020010
 80060ac:	40020028 	.word	0x40020028
 80060b0:	40020040 	.word	0x40020040
 80060b4:	40020058 	.word	0x40020058
 80060b8:	40020070 	.word	0x40020070
 80060bc:	40020088 	.word	0x40020088
 80060c0:	400200a0 	.word	0x400200a0
 80060c4:	400200b8 	.word	0x400200b8
 80060c8:	40020410 	.word	0x40020410
 80060cc:	40020428 	.word	0x40020428
 80060d0:	40020440 	.word	0x40020440
 80060d4:	40020458 	.word	0x40020458
 80060d8:	40020470 	.word	0x40020470
 80060dc:	40020488 	.word	0x40020488
 80060e0:	400204a0 	.word	0x400204a0
 80060e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1c8      	bne.n	8006088 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4b83      	ldr	r3, [pc, #524]	@ (8006310 <HAL_DMA_Init+0x420>)
 8006102:	4013      	ands	r3, r2
 8006104:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800610e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800611a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006126:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006138:	2b04      	cmp	r3, #4
 800613a:	d107      	bne.n	800614c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006144:	4313      	orrs	r3, r2
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b28      	cmp	r3, #40	@ 0x28
 8006152:	d903      	bls.n	800615c <HAL_DMA_Init+0x26c>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b2e      	cmp	r3, #46	@ 0x2e
 800615a:	d91f      	bls.n	800619c <HAL_DMA_Init+0x2ac>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b3e      	cmp	r3, #62	@ 0x3e
 8006162:	d903      	bls.n	800616c <HAL_DMA_Init+0x27c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2b42      	cmp	r3, #66	@ 0x42
 800616a:	d917      	bls.n	800619c <HAL_DMA_Init+0x2ac>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b46      	cmp	r3, #70	@ 0x46
 8006172:	d903      	bls.n	800617c <HAL_DMA_Init+0x28c>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b48      	cmp	r3, #72	@ 0x48
 800617a:	d90f      	bls.n	800619c <HAL_DMA_Init+0x2ac>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b4e      	cmp	r3, #78	@ 0x4e
 8006182:	d903      	bls.n	800618c <HAL_DMA_Init+0x29c>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b52      	cmp	r3, #82	@ 0x52
 800618a:	d907      	bls.n	800619c <HAL_DMA_Init+0x2ac>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b73      	cmp	r3, #115	@ 0x73
 8006192:	d905      	bls.n	80061a0 <HAL_DMA_Init+0x2b0>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b77      	cmp	r3, #119	@ 0x77
 800619a:	d801      	bhi.n	80061a0 <HAL_DMA_Init+0x2b0>
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <HAL_DMA_Init+0x2b2>
 80061a0:	2300      	movs	r3, #0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061ac:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f023 0307 	bic.w	r3, r3, #7
 80061c4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d117      	bne.n	8006208 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00e      	beq.n	8006208 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f002 fb2e 	bl	800884c <DMA_CheckFifoParam>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2240      	movs	r2, #64	@ 0x40
 80061fa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e192      	b.n	800652e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f002 fa69 	bl	80086e8 <DMA_CalcBaseAndBitshift>
 8006216:	4603      	mov	r3, r0
 8006218:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	223f      	movs	r2, #63	@ 0x3f
 8006224:	409a      	lsls	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	609a      	str	r2, [r3, #8]
 800622a:	e0c8      	b.n	80063be <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a38      	ldr	r2, [pc, #224]	@ (8006314 <HAL_DMA_Init+0x424>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d022      	beq.n	800627c <HAL_DMA_Init+0x38c>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a37      	ldr	r2, [pc, #220]	@ (8006318 <HAL_DMA_Init+0x428>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d01d      	beq.n	800627c <HAL_DMA_Init+0x38c>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a35      	ldr	r2, [pc, #212]	@ (800631c <HAL_DMA_Init+0x42c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d018      	beq.n	800627c <HAL_DMA_Init+0x38c>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a34      	ldr	r2, [pc, #208]	@ (8006320 <HAL_DMA_Init+0x430>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d013      	beq.n	800627c <HAL_DMA_Init+0x38c>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a32      	ldr	r2, [pc, #200]	@ (8006324 <HAL_DMA_Init+0x434>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00e      	beq.n	800627c <HAL_DMA_Init+0x38c>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a31      	ldr	r2, [pc, #196]	@ (8006328 <HAL_DMA_Init+0x438>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d009      	beq.n	800627c <HAL_DMA_Init+0x38c>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2f      	ldr	r2, [pc, #188]	@ (800632c <HAL_DMA_Init+0x43c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d004      	beq.n	800627c <HAL_DMA_Init+0x38c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2e      	ldr	r2, [pc, #184]	@ (8006330 <HAL_DMA_Init+0x440>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d101      	bne.n	8006280 <HAL_DMA_Init+0x390>
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <HAL_DMA_Init+0x392>
 8006280:	2300      	movs	r3, #0
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8092 	beq.w	80063ac <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a21      	ldr	r2, [pc, #132]	@ (8006314 <HAL_DMA_Init+0x424>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d021      	beq.n	80062d6 <HAL_DMA_Init+0x3e6>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a20      	ldr	r2, [pc, #128]	@ (8006318 <HAL_DMA_Init+0x428>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d01c      	beq.n	80062d6 <HAL_DMA_Init+0x3e6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1e      	ldr	r2, [pc, #120]	@ (800631c <HAL_DMA_Init+0x42c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d017      	beq.n	80062d6 <HAL_DMA_Init+0x3e6>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006320 <HAL_DMA_Init+0x430>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d012      	beq.n	80062d6 <HAL_DMA_Init+0x3e6>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006324 <HAL_DMA_Init+0x434>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00d      	beq.n	80062d6 <HAL_DMA_Init+0x3e6>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1a      	ldr	r2, [pc, #104]	@ (8006328 <HAL_DMA_Init+0x438>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d008      	beq.n	80062d6 <HAL_DMA_Init+0x3e6>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a18      	ldr	r2, [pc, #96]	@ (800632c <HAL_DMA_Init+0x43c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d003      	beq.n	80062d6 <HAL_DMA_Init+0x3e6>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a17      	ldr	r2, [pc, #92]	@ (8006330 <HAL_DMA_Init+0x440>)
 80062d4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2202      	movs	r2, #2
 80062da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4b10      	ldr	r3, [pc, #64]	@ (8006334 <HAL_DMA_Init+0x444>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b40      	cmp	r3, #64	@ 0x40
 80062fc:	d01c      	beq.n	8006338 <HAL_DMA_Init+0x448>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2b80      	cmp	r3, #128	@ 0x80
 8006304:	d102      	bne.n	800630c <HAL_DMA_Init+0x41c>
 8006306:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800630a:	e016      	b.n	800633a <HAL_DMA_Init+0x44a>
 800630c:	2300      	movs	r3, #0
 800630e:	e014      	b.n	800633a <HAL_DMA_Init+0x44a>
 8006310:	fe10803f 	.word	0xfe10803f
 8006314:	58025408 	.word	0x58025408
 8006318:	5802541c 	.word	0x5802541c
 800631c:	58025430 	.word	0x58025430
 8006320:	58025444 	.word	0x58025444
 8006324:	58025458 	.word	0x58025458
 8006328:	5802546c 	.word	0x5802546c
 800632c:	58025480 	.word	0x58025480
 8006330:	58025494 	.word	0x58025494
 8006334:	fffe000f 	.word	0xfffe000f
 8006338:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68d2      	ldr	r2, [r2, #12]
 800633e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006340:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006348:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006350:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006368:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	4b6e      	ldr	r3, [pc, #440]	@ (8006538 <HAL_DMA_Init+0x648>)
 8006380:	4413      	add	r3, r2
 8006382:	4a6e      	ldr	r2, [pc, #440]	@ (800653c <HAL_DMA_Init+0x64c>)
 8006384:	fba2 2303 	umull	r2, r3, r2, r3
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	009a      	lsls	r2, r3, #2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f002 f9a9 	bl	80086e8 <DMA_CalcBaseAndBitshift>
 8006396:	4603      	mov	r3, r0
 8006398:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639e:	f003 031f 	and.w	r3, r3, #31
 80063a2:	2201      	movs	r2, #1
 80063a4:	409a      	lsls	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	605a      	str	r2, [r3, #4]
 80063aa:	e008      	b.n	80063be <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2240      	movs	r2, #64	@ 0x40
 80063b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2203      	movs	r2, #3
 80063b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e0b7      	b.n	800652e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a5f      	ldr	r2, [pc, #380]	@ (8006540 <HAL_DMA_Init+0x650>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d072      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5d      	ldr	r2, [pc, #372]	@ (8006544 <HAL_DMA_Init+0x654>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d06d      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a5c      	ldr	r2, [pc, #368]	@ (8006548 <HAL_DMA_Init+0x658>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d068      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a5a      	ldr	r2, [pc, #360]	@ (800654c <HAL_DMA_Init+0x65c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d063      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a59      	ldr	r2, [pc, #356]	@ (8006550 <HAL_DMA_Init+0x660>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d05e      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a57      	ldr	r2, [pc, #348]	@ (8006554 <HAL_DMA_Init+0x664>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d059      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a56      	ldr	r2, [pc, #344]	@ (8006558 <HAL_DMA_Init+0x668>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d054      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a54      	ldr	r2, [pc, #336]	@ (800655c <HAL_DMA_Init+0x66c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d04f      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a53      	ldr	r2, [pc, #332]	@ (8006560 <HAL_DMA_Init+0x670>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d04a      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a51      	ldr	r2, [pc, #324]	@ (8006564 <HAL_DMA_Init+0x674>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d045      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a50      	ldr	r2, [pc, #320]	@ (8006568 <HAL_DMA_Init+0x678>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d040      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a4e      	ldr	r2, [pc, #312]	@ (800656c <HAL_DMA_Init+0x67c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d03b      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a4d      	ldr	r2, [pc, #308]	@ (8006570 <HAL_DMA_Init+0x680>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d036      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a4b      	ldr	r2, [pc, #300]	@ (8006574 <HAL_DMA_Init+0x684>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d031      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a4a      	ldr	r2, [pc, #296]	@ (8006578 <HAL_DMA_Init+0x688>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d02c      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a48      	ldr	r2, [pc, #288]	@ (800657c <HAL_DMA_Init+0x68c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d027      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a47      	ldr	r2, [pc, #284]	@ (8006580 <HAL_DMA_Init+0x690>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a45      	ldr	r2, [pc, #276]	@ (8006584 <HAL_DMA_Init+0x694>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01d      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a44      	ldr	r2, [pc, #272]	@ (8006588 <HAL_DMA_Init+0x698>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a42      	ldr	r2, [pc, #264]	@ (800658c <HAL_DMA_Init+0x69c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a41      	ldr	r2, [pc, #260]	@ (8006590 <HAL_DMA_Init+0x6a0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a3f      	ldr	r2, [pc, #252]	@ (8006594 <HAL_DMA_Init+0x6a4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a3e      	ldr	r2, [pc, #248]	@ (8006598 <HAL_DMA_Init+0x6a8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_DMA_Init+0x5be>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a3c      	ldr	r2, [pc, #240]	@ (800659c <HAL_DMA_Init+0x6ac>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d101      	bne.n	80064b2 <HAL_DMA_Init+0x5c2>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_DMA_Init+0x5c4>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d032      	beq.n	800651e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f002 fa43 	bl	8008944 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b80      	cmp	r3, #128	@ 0x80
 80064c4:	d102      	bne.n	80064cc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80064e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d010      	beq.n	800650c <HAL_DMA_Init+0x61c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b08      	cmp	r3, #8
 80064f0:	d80c      	bhi.n	800650c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f002 fac0 	bl	8008a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	e008      	b.n	800651e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	a7fdabf8 	.word	0xa7fdabf8
 800653c:	cccccccd 	.word	0xcccccccd
 8006540:	40020010 	.word	0x40020010
 8006544:	40020028 	.word	0x40020028
 8006548:	40020040 	.word	0x40020040
 800654c:	40020058 	.word	0x40020058
 8006550:	40020070 	.word	0x40020070
 8006554:	40020088 	.word	0x40020088
 8006558:	400200a0 	.word	0x400200a0
 800655c:	400200b8 	.word	0x400200b8
 8006560:	40020410 	.word	0x40020410
 8006564:	40020428 	.word	0x40020428
 8006568:	40020440 	.word	0x40020440
 800656c:	40020458 	.word	0x40020458
 8006570:	40020470 	.word	0x40020470
 8006574:	40020488 	.word	0x40020488
 8006578:	400204a0 	.word	0x400204a0
 800657c:	400204b8 	.word	0x400204b8
 8006580:	58025408 	.word	0x58025408
 8006584:	5802541c 	.word	0x5802541c
 8006588:	58025430 	.word	0x58025430
 800658c:	58025444 	.word	0x58025444
 8006590:	58025458 	.word	0x58025458
 8006594:	5802546c 	.word	0x5802546c
 8006598:	58025480 	.word	0x58025480
 800659c:	58025494 	.word	0x58025494

080065a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e226      	b.n	8006a0a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_DMA_Start_IT+0x2a>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e21f      	b.n	8006a0a <HAL_DMA_Start_IT+0x46a>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b01      	cmp	r3, #1
 80065dc:	f040 820a 	bne.w	80069f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a68      	ldr	r2, [pc, #416]	@ (8006794 <HAL_DMA_Start_IT+0x1f4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d04a      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a66      	ldr	r2, [pc, #408]	@ (8006798 <HAL_DMA_Start_IT+0x1f8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d045      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a65      	ldr	r2, [pc, #404]	@ (800679c <HAL_DMA_Start_IT+0x1fc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d040      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a63      	ldr	r2, [pc, #396]	@ (80067a0 <HAL_DMA_Start_IT+0x200>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d03b      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a62      	ldr	r2, [pc, #392]	@ (80067a4 <HAL_DMA_Start_IT+0x204>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d036      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a60      	ldr	r2, [pc, #384]	@ (80067a8 <HAL_DMA_Start_IT+0x208>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d031      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a5f      	ldr	r2, [pc, #380]	@ (80067ac <HAL_DMA_Start_IT+0x20c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d02c      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a5d      	ldr	r2, [pc, #372]	@ (80067b0 <HAL_DMA_Start_IT+0x210>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d027      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a5c      	ldr	r2, [pc, #368]	@ (80067b4 <HAL_DMA_Start_IT+0x214>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d022      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a5a      	ldr	r2, [pc, #360]	@ (80067b8 <HAL_DMA_Start_IT+0x218>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01d      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a59      	ldr	r2, [pc, #356]	@ (80067bc <HAL_DMA_Start_IT+0x21c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d018      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a57      	ldr	r2, [pc, #348]	@ (80067c0 <HAL_DMA_Start_IT+0x220>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a56      	ldr	r2, [pc, #344]	@ (80067c4 <HAL_DMA_Start_IT+0x224>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a54      	ldr	r2, [pc, #336]	@ (80067c8 <HAL_DMA_Start_IT+0x228>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a53      	ldr	r2, [pc, #332]	@ (80067cc <HAL_DMA_Start_IT+0x22c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <HAL_DMA_Start_IT+0xee>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a51      	ldr	r2, [pc, #324]	@ (80067d0 <HAL_DMA_Start_IT+0x230>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d108      	bne.n	80066a0 <HAL_DMA_Start_IT+0x100>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e007      	b.n	80066b0 <HAL_DMA_Start_IT+0x110>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f001 fe6a 	bl	8008390 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a34      	ldr	r2, [pc, #208]	@ (8006794 <HAL_DMA_Start_IT+0x1f4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d04a      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a33      	ldr	r2, [pc, #204]	@ (8006798 <HAL_DMA_Start_IT+0x1f8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d045      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a31      	ldr	r2, [pc, #196]	@ (800679c <HAL_DMA_Start_IT+0x1fc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d040      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a30      	ldr	r2, [pc, #192]	@ (80067a0 <HAL_DMA_Start_IT+0x200>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d03b      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2e      	ldr	r2, [pc, #184]	@ (80067a4 <HAL_DMA_Start_IT+0x204>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d036      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2d      	ldr	r2, [pc, #180]	@ (80067a8 <HAL_DMA_Start_IT+0x208>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d031      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a2b      	ldr	r2, [pc, #172]	@ (80067ac <HAL_DMA_Start_IT+0x20c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d02c      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a2a      	ldr	r2, [pc, #168]	@ (80067b0 <HAL_DMA_Start_IT+0x210>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d027      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a28      	ldr	r2, [pc, #160]	@ (80067b4 <HAL_DMA_Start_IT+0x214>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d022      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a27      	ldr	r2, [pc, #156]	@ (80067b8 <HAL_DMA_Start_IT+0x218>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d01d      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a25      	ldr	r2, [pc, #148]	@ (80067bc <HAL_DMA_Start_IT+0x21c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d018      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a24      	ldr	r2, [pc, #144]	@ (80067c0 <HAL_DMA_Start_IT+0x220>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d013      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a22      	ldr	r2, [pc, #136]	@ (80067c4 <HAL_DMA_Start_IT+0x224>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00e      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a21      	ldr	r2, [pc, #132]	@ (80067c8 <HAL_DMA_Start_IT+0x228>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d009      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1f      	ldr	r2, [pc, #124]	@ (80067cc <HAL_DMA_Start_IT+0x22c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d004      	beq.n	800675c <HAL_DMA_Start_IT+0x1bc>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1e      	ldr	r2, [pc, #120]	@ (80067d0 <HAL_DMA_Start_IT+0x230>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d101      	bne.n	8006760 <HAL_DMA_Start_IT+0x1c0>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <HAL_DMA_Start_IT+0x1c2>
 8006760:	2300      	movs	r3, #0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d036      	beq.n	80067d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f023 021e 	bic.w	r2, r3, #30
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0216 	orr.w	r2, r2, #22
 8006778:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d03e      	beq.n	8006800 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0208 	orr.w	r2, r2, #8
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e035      	b.n	8006800 <HAL_DMA_Start_IT+0x260>
 8006794:	40020010 	.word	0x40020010
 8006798:	40020028 	.word	0x40020028
 800679c:	40020040 	.word	0x40020040
 80067a0:	40020058 	.word	0x40020058
 80067a4:	40020070 	.word	0x40020070
 80067a8:	40020088 	.word	0x40020088
 80067ac:	400200a0 	.word	0x400200a0
 80067b0:	400200b8 	.word	0x400200b8
 80067b4:	40020410 	.word	0x40020410
 80067b8:	40020428 	.word	0x40020428
 80067bc:	40020440 	.word	0x40020440
 80067c0:	40020458 	.word	0x40020458
 80067c4:	40020470 	.word	0x40020470
 80067c8:	40020488 	.word	0x40020488
 80067cc:	400204a0 	.word	0x400204a0
 80067d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f023 020e 	bic.w	r2, r3, #14
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 020a 	orr.w	r2, r2, #10
 80067e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d007      	beq.n	8006800 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0204 	orr.w	r2, r2, #4
 80067fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a83      	ldr	r2, [pc, #524]	@ (8006a14 <HAL_DMA_Start_IT+0x474>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d072      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a82      	ldr	r2, [pc, #520]	@ (8006a18 <HAL_DMA_Start_IT+0x478>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d06d      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a80      	ldr	r2, [pc, #512]	@ (8006a1c <HAL_DMA_Start_IT+0x47c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d068      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a7f      	ldr	r2, [pc, #508]	@ (8006a20 <HAL_DMA_Start_IT+0x480>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d063      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a7d      	ldr	r2, [pc, #500]	@ (8006a24 <HAL_DMA_Start_IT+0x484>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d05e      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a7c      	ldr	r2, [pc, #496]	@ (8006a28 <HAL_DMA_Start_IT+0x488>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d059      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a7a      	ldr	r2, [pc, #488]	@ (8006a2c <HAL_DMA_Start_IT+0x48c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d054      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a79      	ldr	r2, [pc, #484]	@ (8006a30 <HAL_DMA_Start_IT+0x490>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d04f      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a77      	ldr	r2, [pc, #476]	@ (8006a34 <HAL_DMA_Start_IT+0x494>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d04a      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a76      	ldr	r2, [pc, #472]	@ (8006a38 <HAL_DMA_Start_IT+0x498>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d045      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a74      	ldr	r2, [pc, #464]	@ (8006a3c <HAL_DMA_Start_IT+0x49c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d040      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a73      	ldr	r2, [pc, #460]	@ (8006a40 <HAL_DMA_Start_IT+0x4a0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d03b      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a71      	ldr	r2, [pc, #452]	@ (8006a44 <HAL_DMA_Start_IT+0x4a4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d036      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a70      	ldr	r2, [pc, #448]	@ (8006a48 <HAL_DMA_Start_IT+0x4a8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d031      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a6e      	ldr	r2, [pc, #440]	@ (8006a4c <HAL_DMA_Start_IT+0x4ac>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d02c      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a6d      	ldr	r2, [pc, #436]	@ (8006a50 <HAL_DMA_Start_IT+0x4b0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d027      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a6b      	ldr	r2, [pc, #428]	@ (8006a54 <HAL_DMA_Start_IT+0x4b4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d022      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a6a      	ldr	r2, [pc, #424]	@ (8006a58 <HAL_DMA_Start_IT+0x4b8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d01d      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a68      	ldr	r2, [pc, #416]	@ (8006a5c <HAL_DMA_Start_IT+0x4bc>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d018      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a67      	ldr	r2, [pc, #412]	@ (8006a60 <HAL_DMA_Start_IT+0x4c0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d013      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a65      	ldr	r2, [pc, #404]	@ (8006a64 <HAL_DMA_Start_IT+0x4c4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00e      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a64      	ldr	r2, [pc, #400]	@ (8006a68 <HAL_DMA_Start_IT+0x4c8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d009      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a62      	ldr	r2, [pc, #392]	@ (8006a6c <HAL_DMA_Start_IT+0x4cc>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d004      	beq.n	80068f0 <HAL_DMA_Start_IT+0x350>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a61      	ldr	r2, [pc, #388]	@ (8006a70 <HAL_DMA_Start_IT+0x4d0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d101      	bne.n	80068f4 <HAL_DMA_Start_IT+0x354>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e000      	b.n	80068f6 <HAL_DMA_Start_IT+0x356>
 80068f4:	2300      	movs	r3, #0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d01a      	beq.n	8006930 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d007      	beq.n	8006918 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006916:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800692a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800692e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a37      	ldr	r2, [pc, #220]	@ (8006a14 <HAL_DMA_Start_IT+0x474>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d04a      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a36      	ldr	r2, [pc, #216]	@ (8006a18 <HAL_DMA_Start_IT+0x478>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d045      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a34      	ldr	r2, [pc, #208]	@ (8006a1c <HAL_DMA_Start_IT+0x47c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d040      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a33      	ldr	r2, [pc, #204]	@ (8006a20 <HAL_DMA_Start_IT+0x480>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d03b      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a31      	ldr	r2, [pc, #196]	@ (8006a24 <HAL_DMA_Start_IT+0x484>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d036      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a30      	ldr	r2, [pc, #192]	@ (8006a28 <HAL_DMA_Start_IT+0x488>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d031      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a2e      	ldr	r2, [pc, #184]	@ (8006a2c <HAL_DMA_Start_IT+0x48c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d02c      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a2d      	ldr	r2, [pc, #180]	@ (8006a30 <HAL_DMA_Start_IT+0x490>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d027      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a2b      	ldr	r2, [pc, #172]	@ (8006a34 <HAL_DMA_Start_IT+0x494>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d022      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a2a      	ldr	r2, [pc, #168]	@ (8006a38 <HAL_DMA_Start_IT+0x498>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d01d      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a28      	ldr	r2, [pc, #160]	@ (8006a3c <HAL_DMA_Start_IT+0x49c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d018      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a27      	ldr	r2, [pc, #156]	@ (8006a40 <HAL_DMA_Start_IT+0x4a0>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d013      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a25      	ldr	r2, [pc, #148]	@ (8006a44 <HAL_DMA_Start_IT+0x4a4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00e      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a24      	ldr	r2, [pc, #144]	@ (8006a48 <HAL_DMA_Start_IT+0x4a8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d009      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a22      	ldr	r2, [pc, #136]	@ (8006a4c <HAL_DMA_Start_IT+0x4ac>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d004      	beq.n	80069d0 <HAL_DMA_Start_IT+0x430>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a21      	ldr	r2, [pc, #132]	@ (8006a50 <HAL_DMA_Start_IT+0x4b0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d108      	bne.n	80069e2 <HAL_DMA_Start_IT+0x442>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	e012      	b.n	8006a08 <HAL_DMA_Start_IT+0x468>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0201 	orr.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e009      	b.n	8006a08 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40020010 	.word	0x40020010
 8006a18:	40020028 	.word	0x40020028
 8006a1c:	40020040 	.word	0x40020040
 8006a20:	40020058 	.word	0x40020058
 8006a24:	40020070 	.word	0x40020070
 8006a28:	40020088 	.word	0x40020088
 8006a2c:	400200a0 	.word	0x400200a0
 8006a30:	400200b8 	.word	0x400200b8
 8006a34:	40020410 	.word	0x40020410
 8006a38:	40020428 	.word	0x40020428
 8006a3c:	40020440 	.word	0x40020440
 8006a40:	40020458 	.word	0x40020458
 8006a44:	40020470 	.word	0x40020470
 8006a48:	40020488 	.word	0x40020488
 8006a4c:	400204a0 	.word	0x400204a0
 8006a50:	400204b8 	.word	0x400204b8
 8006a54:	58025408 	.word	0x58025408
 8006a58:	5802541c 	.word	0x5802541c
 8006a5c:	58025430 	.word	0x58025430
 8006a60:	58025444 	.word	0x58025444
 8006a64:	58025458 	.word	0x58025458
 8006a68:	5802546c 	.word	0x5802546c
 8006a6c:	58025480 	.word	0x58025480
 8006a70:	58025494 	.word	0x58025494

08006a74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006a7c:	f7fd f88a 	bl	8003b94 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e2dc      	b.n	8007046 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d008      	beq.n	8006aaa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2280      	movs	r2, #128	@ 0x80
 8006a9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e2cd      	b.n	8007046 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a76      	ldr	r2, [pc, #472]	@ (8006c88 <HAL_DMA_Abort+0x214>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d04a      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a74      	ldr	r2, [pc, #464]	@ (8006c8c <HAL_DMA_Abort+0x218>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d045      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a73      	ldr	r2, [pc, #460]	@ (8006c90 <HAL_DMA_Abort+0x21c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d040      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a71      	ldr	r2, [pc, #452]	@ (8006c94 <HAL_DMA_Abort+0x220>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d03b      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a70      	ldr	r2, [pc, #448]	@ (8006c98 <HAL_DMA_Abort+0x224>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d036      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a6e      	ldr	r2, [pc, #440]	@ (8006c9c <HAL_DMA_Abort+0x228>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d031      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a6d      	ldr	r2, [pc, #436]	@ (8006ca0 <HAL_DMA_Abort+0x22c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d02c      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a6b      	ldr	r2, [pc, #428]	@ (8006ca4 <HAL_DMA_Abort+0x230>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d027      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a6a      	ldr	r2, [pc, #424]	@ (8006ca8 <HAL_DMA_Abort+0x234>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d022      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a68      	ldr	r2, [pc, #416]	@ (8006cac <HAL_DMA_Abort+0x238>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d01d      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a67      	ldr	r2, [pc, #412]	@ (8006cb0 <HAL_DMA_Abort+0x23c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d018      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a65      	ldr	r2, [pc, #404]	@ (8006cb4 <HAL_DMA_Abort+0x240>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a64      	ldr	r2, [pc, #400]	@ (8006cb8 <HAL_DMA_Abort+0x244>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00e      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a62      	ldr	r2, [pc, #392]	@ (8006cbc <HAL_DMA_Abort+0x248>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d009      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a61      	ldr	r2, [pc, #388]	@ (8006cc0 <HAL_DMA_Abort+0x24c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d004      	beq.n	8006b4a <HAL_DMA_Abort+0xd6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a5f      	ldr	r2, [pc, #380]	@ (8006cc4 <HAL_DMA_Abort+0x250>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d101      	bne.n	8006b4e <HAL_DMA_Abort+0xda>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e000      	b.n	8006b50 <HAL_DMA_Abort+0xdc>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d013      	beq.n	8006b7c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 021e 	bic.w	r2, r2, #30
 8006b62:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b72:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e00a      	b.n	8006b92 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 020e 	bic.w	r2, r2, #14
 8006b8a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a3c      	ldr	r2, [pc, #240]	@ (8006c88 <HAL_DMA_Abort+0x214>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d072      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8006c8c <HAL_DMA_Abort+0x218>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d06d      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a39      	ldr	r2, [pc, #228]	@ (8006c90 <HAL_DMA_Abort+0x21c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d068      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a37      	ldr	r2, [pc, #220]	@ (8006c94 <HAL_DMA_Abort+0x220>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d063      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a36      	ldr	r2, [pc, #216]	@ (8006c98 <HAL_DMA_Abort+0x224>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d05e      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a34      	ldr	r2, [pc, #208]	@ (8006c9c <HAL_DMA_Abort+0x228>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d059      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a33      	ldr	r2, [pc, #204]	@ (8006ca0 <HAL_DMA_Abort+0x22c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d054      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a31      	ldr	r2, [pc, #196]	@ (8006ca4 <HAL_DMA_Abort+0x230>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d04f      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a30      	ldr	r2, [pc, #192]	@ (8006ca8 <HAL_DMA_Abort+0x234>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d04a      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8006cac <HAL_DMA_Abort+0x238>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d045      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8006cb0 <HAL_DMA_Abort+0x23c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d040      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a2b      	ldr	r2, [pc, #172]	@ (8006cb4 <HAL_DMA_Abort+0x240>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d03b      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8006cb8 <HAL_DMA_Abort+0x244>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d036      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a28      	ldr	r2, [pc, #160]	@ (8006cbc <HAL_DMA_Abort+0x248>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d031      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a27      	ldr	r2, [pc, #156]	@ (8006cc0 <HAL_DMA_Abort+0x24c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d02c      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a25      	ldr	r2, [pc, #148]	@ (8006cc4 <HAL_DMA_Abort+0x250>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d027      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a24      	ldr	r2, [pc, #144]	@ (8006cc8 <HAL_DMA_Abort+0x254>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d022      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a22      	ldr	r2, [pc, #136]	@ (8006ccc <HAL_DMA_Abort+0x258>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d01d      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a21      	ldr	r2, [pc, #132]	@ (8006cd0 <HAL_DMA_Abort+0x25c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d018      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a1f      	ldr	r2, [pc, #124]	@ (8006cd4 <HAL_DMA_Abort+0x260>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d013      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006cd8 <HAL_DMA_Abort+0x264>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00e      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1c      	ldr	r2, [pc, #112]	@ (8006cdc <HAL_DMA_Abort+0x268>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d009      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a1b      	ldr	r2, [pc, #108]	@ (8006ce0 <HAL_DMA_Abort+0x26c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d004      	beq.n	8006c82 <HAL_DMA_Abort+0x20e>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a19      	ldr	r2, [pc, #100]	@ (8006ce4 <HAL_DMA_Abort+0x270>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d132      	bne.n	8006ce8 <HAL_DMA_Abort+0x274>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e031      	b.n	8006cea <HAL_DMA_Abort+0x276>
 8006c86:	bf00      	nop
 8006c88:	40020010 	.word	0x40020010
 8006c8c:	40020028 	.word	0x40020028
 8006c90:	40020040 	.word	0x40020040
 8006c94:	40020058 	.word	0x40020058
 8006c98:	40020070 	.word	0x40020070
 8006c9c:	40020088 	.word	0x40020088
 8006ca0:	400200a0 	.word	0x400200a0
 8006ca4:	400200b8 	.word	0x400200b8
 8006ca8:	40020410 	.word	0x40020410
 8006cac:	40020428 	.word	0x40020428
 8006cb0:	40020440 	.word	0x40020440
 8006cb4:	40020458 	.word	0x40020458
 8006cb8:	40020470 	.word	0x40020470
 8006cbc:	40020488 	.word	0x40020488
 8006cc0:	400204a0 	.word	0x400204a0
 8006cc4:	400204b8 	.word	0x400204b8
 8006cc8:	58025408 	.word	0x58025408
 8006ccc:	5802541c 	.word	0x5802541c
 8006cd0:	58025430 	.word	0x58025430
 8006cd4:	58025444 	.word	0x58025444
 8006cd8:	58025458 	.word	0x58025458
 8006cdc:	5802546c 	.word	0x5802546c
 8006ce0:	58025480 	.word	0x58025480
 8006ce4:	58025494 	.word	0x58025494
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d007      	beq.n	8006cfe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a6d      	ldr	r2, [pc, #436]	@ (8006eb8 <HAL_DMA_Abort+0x444>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d04a      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a6b      	ldr	r2, [pc, #428]	@ (8006ebc <HAL_DMA_Abort+0x448>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d045      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a6a      	ldr	r2, [pc, #424]	@ (8006ec0 <HAL_DMA_Abort+0x44c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d040      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a68      	ldr	r2, [pc, #416]	@ (8006ec4 <HAL_DMA_Abort+0x450>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d03b      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a67      	ldr	r2, [pc, #412]	@ (8006ec8 <HAL_DMA_Abort+0x454>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d036      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a65      	ldr	r2, [pc, #404]	@ (8006ecc <HAL_DMA_Abort+0x458>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d031      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a64      	ldr	r2, [pc, #400]	@ (8006ed0 <HAL_DMA_Abort+0x45c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d02c      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a62      	ldr	r2, [pc, #392]	@ (8006ed4 <HAL_DMA_Abort+0x460>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d027      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a61      	ldr	r2, [pc, #388]	@ (8006ed8 <HAL_DMA_Abort+0x464>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d022      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a5f      	ldr	r2, [pc, #380]	@ (8006edc <HAL_DMA_Abort+0x468>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d01d      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a5e      	ldr	r2, [pc, #376]	@ (8006ee0 <HAL_DMA_Abort+0x46c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d018      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a5c      	ldr	r2, [pc, #368]	@ (8006ee4 <HAL_DMA_Abort+0x470>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a5b      	ldr	r2, [pc, #364]	@ (8006ee8 <HAL_DMA_Abort+0x474>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00e      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a59      	ldr	r2, [pc, #356]	@ (8006eec <HAL_DMA_Abort+0x478>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d009      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a58      	ldr	r2, [pc, #352]	@ (8006ef0 <HAL_DMA_Abort+0x47c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d004      	beq.n	8006d9e <HAL_DMA_Abort+0x32a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a56      	ldr	r2, [pc, #344]	@ (8006ef4 <HAL_DMA_Abort+0x480>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d108      	bne.n	8006db0 <HAL_DMA_Abort+0x33c>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0201 	bic.w	r2, r2, #1
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	e007      	b.n	8006dc0 <HAL_DMA_Abort+0x34c>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0201 	bic.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006dc0:	e013      	b.n	8006dea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006dc2:	f7fc fee7 	bl	8003b94 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b05      	cmp	r3, #5
 8006dce:	d90c      	bls.n	8006dea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2203      	movs	r2, #3
 8006dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e12d      	b.n	8007046 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e5      	bne.n	8006dc2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8006eb8 <HAL_DMA_Abort+0x444>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d04a      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a2d      	ldr	r2, [pc, #180]	@ (8006ebc <HAL_DMA_Abort+0x448>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d045      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ec0 <HAL_DMA_Abort+0x44c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d040      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a2a      	ldr	r2, [pc, #168]	@ (8006ec4 <HAL_DMA_Abort+0x450>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d03b      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a29      	ldr	r2, [pc, #164]	@ (8006ec8 <HAL_DMA_Abort+0x454>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d036      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a27      	ldr	r2, [pc, #156]	@ (8006ecc <HAL_DMA_Abort+0x458>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d031      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a26      	ldr	r2, [pc, #152]	@ (8006ed0 <HAL_DMA_Abort+0x45c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d02c      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a24      	ldr	r2, [pc, #144]	@ (8006ed4 <HAL_DMA_Abort+0x460>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d027      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a23      	ldr	r2, [pc, #140]	@ (8006ed8 <HAL_DMA_Abort+0x464>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d022      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a21      	ldr	r2, [pc, #132]	@ (8006edc <HAL_DMA_Abort+0x468>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d01d      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a20      	ldr	r2, [pc, #128]	@ (8006ee0 <HAL_DMA_Abort+0x46c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d018      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a1e      	ldr	r2, [pc, #120]	@ (8006ee4 <HAL_DMA_Abort+0x470>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d013      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee8 <HAL_DMA_Abort+0x474>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00e      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006eec <HAL_DMA_Abort+0x478>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d009      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a1a      	ldr	r2, [pc, #104]	@ (8006ef0 <HAL_DMA_Abort+0x47c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d004      	beq.n	8006e96 <HAL_DMA_Abort+0x422>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a18      	ldr	r2, [pc, #96]	@ (8006ef4 <HAL_DMA_Abort+0x480>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d101      	bne.n	8006e9a <HAL_DMA_Abort+0x426>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <HAL_DMA_Abort+0x428>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d02b      	beq.n	8006ef8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eaa:	f003 031f 	and.w	r3, r3, #31
 8006eae:	223f      	movs	r2, #63	@ 0x3f
 8006eb0:	409a      	lsls	r2, r3
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	609a      	str	r2, [r3, #8]
 8006eb6:	e02a      	b.n	8006f0e <HAL_DMA_Abort+0x49a>
 8006eb8:	40020010 	.word	0x40020010
 8006ebc:	40020028 	.word	0x40020028
 8006ec0:	40020040 	.word	0x40020040
 8006ec4:	40020058 	.word	0x40020058
 8006ec8:	40020070 	.word	0x40020070
 8006ecc:	40020088 	.word	0x40020088
 8006ed0:	400200a0 	.word	0x400200a0
 8006ed4:	400200b8 	.word	0x400200b8
 8006ed8:	40020410 	.word	0x40020410
 8006edc:	40020428 	.word	0x40020428
 8006ee0:	40020440 	.word	0x40020440
 8006ee4:	40020458 	.word	0x40020458
 8006ee8:	40020470 	.word	0x40020470
 8006eec:	40020488 	.word	0x40020488
 8006ef0:	400204a0 	.word	0x400204a0
 8006ef4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006efc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f02:	f003 031f 	and.w	r3, r3, #31
 8006f06:	2201      	movs	r2, #1
 8006f08:	409a      	lsls	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a4f      	ldr	r2, [pc, #316]	@ (8007050 <HAL_DMA_Abort+0x5dc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d072      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a4d      	ldr	r2, [pc, #308]	@ (8007054 <HAL_DMA_Abort+0x5e0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d06d      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a4c      	ldr	r2, [pc, #304]	@ (8007058 <HAL_DMA_Abort+0x5e4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d068      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a4a      	ldr	r2, [pc, #296]	@ (800705c <HAL_DMA_Abort+0x5e8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d063      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a49      	ldr	r2, [pc, #292]	@ (8007060 <HAL_DMA_Abort+0x5ec>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d05e      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a47      	ldr	r2, [pc, #284]	@ (8007064 <HAL_DMA_Abort+0x5f0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d059      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a46      	ldr	r2, [pc, #280]	@ (8007068 <HAL_DMA_Abort+0x5f4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d054      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a44      	ldr	r2, [pc, #272]	@ (800706c <HAL_DMA_Abort+0x5f8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d04f      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a43      	ldr	r2, [pc, #268]	@ (8007070 <HAL_DMA_Abort+0x5fc>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d04a      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a41      	ldr	r2, [pc, #260]	@ (8007074 <HAL_DMA_Abort+0x600>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d045      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a40      	ldr	r2, [pc, #256]	@ (8007078 <HAL_DMA_Abort+0x604>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d040      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a3e      	ldr	r2, [pc, #248]	@ (800707c <HAL_DMA_Abort+0x608>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d03b      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a3d      	ldr	r2, [pc, #244]	@ (8007080 <HAL_DMA_Abort+0x60c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d036      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a3b      	ldr	r2, [pc, #236]	@ (8007084 <HAL_DMA_Abort+0x610>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d031      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a3a      	ldr	r2, [pc, #232]	@ (8007088 <HAL_DMA_Abort+0x614>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d02c      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a38      	ldr	r2, [pc, #224]	@ (800708c <HAL_DMA_Abort+0x618>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d027      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a37      	ldr	r2, [pc, #220]	@ (8007090 <HAL_DMA_Abort+0x61c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d022      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a35      	ldr	r2, [pc, #212]	@ (8007094 <HAL_DMA_Abort+0x620>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01d      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a34      	ldr	r2, [pc, #208]	@ (8007098 <HAL_DMA_Abort+0x624>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d018      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a32      	ldr	r2, [pc, #200]	@ (800709c <HAL_DMA_Abort+0x628>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d013      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a31      	ldr	r2, [pc, #196]	@ (80070a0 <HAL_DMA_Abort+0x62c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80070a4 <HAL_DMA_Abort+0x630>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a2e      	ldr	r2, [pc, #184]	@ (80070a8 <HAL_DMA_Abort+0x634>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <HAL_DMA_Abort+0x58a>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80070ac <HAL_DMA_Abort+0x638>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d101      	bne.n	8007002 <HAL_DMA_Abort+0x58e>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <HAL_DMA_Abort+0x590>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d015      	beq.n	8007034 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007010:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00c      	beq.n	8007034 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007024:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007028:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007032:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	40020010 	.word	0x40020010
 8007054:	40020028 	.word	0x40020028
 8007058:	40020040 	.word	0x40020040
 800705c:	40020058 	.word	0x40020058
 8007060:	40020070 	.word	0x40020070
 8007064:	40020088 	.word	0x40020088
 8007068:	400200a0 	.word	0x400200a0
 800706c:	400200b8 	.word	0x400200b8
 8007070:	40020410 	.word	0x40020410
 8007074:	40020428 	.word	0x40020428
 8007078:	40020440 	.word	0x40020440
 800707c:	40020458 	.word	0x40020458
 8007080:	40020470 	.word	0x40020470
 8007084:	40020488 	.word	0x40020488
 8007088:	400204a0 	.word	0x400204a0
 800708c:	400204b8 	.word	0x400204b8
 8007090:	58025408 	.word	0x58025408
 8007094:	5802541c 	.word	0x5802541c
 8007098:	58025430 	.word	0x58025430
 800709c:	58025444 	.word	0x58025444
 80070a0:	58025458 	.word	0x58025458
 80070a4:	5802546c 	.word	0x5802546c
 80070a8:	58025480 	.word	0x58025480
 80070ac:	58025494 	.word	0x58025494

080070b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e237      	b.n	8007532 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d004      	beq.n	80070d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2280      	movs	r2, #128	@ 0x80
 80070d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e22c      	b.n	8007532 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a5c      	ldr	r2, [pc, #368]	@ (8007250 <HAL_DMA_Abort_IT+0x1a0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d04a      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a5b      	ldr	r2, [pc, #364]	@ (8007254 <HAL_DMA_Abort_IT+0x1a4>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d045      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a59      	ldr	r2, [pc, #356]	@ (8007258 <HAL_DMA_Abort_IT+0x1a8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d040      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a58      	ldr	r2, [pc, #352]	@ (800725c <HAL_DMA_Abort_IT+0x1ac>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d03b      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a56      	ldr	r2, [pc, #344]	@ (8007260 <HAL_DMA_Abort_IT+0x1b0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d036      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a55      	ldr	r2, [pc, #340]	@ (8007264 <HAL_DMA_Abort_IT+0x1b4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d031      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a53      	ldr	r2, [pc, #332]	@ (8007268 <HAL_DMA_Abort_IT+0x1b8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d02c      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a52      	ldr	r2, [pc, #328]	@ (800726c <HAL_DMA_Abort_IT+0x1bc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d027      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a50      	ldr	r2, [pc, #320]	@ (8007270 <HAL_DMA_Abort_IT+0x1c0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d022      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a4f      	ldr	r2, [pc, #316]	@ (8007274 <HAL_DMA_Abort_IT+0x1c4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d01d      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a4d      	ldr	r2, [pc, #308]	@ (8007278 <HAL_DMA_Abort_IT+0x1c8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d018      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a4c      	ldr	r2, [pc, #304]	@ (800727c <HAL_DMA_Abort_IT+0x1cc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d013      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a4a      	ldr	r2, [pc, #296]	@ (8007280 <HAL_DMA_Abort_IT+0x1d0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00e      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a49      	ldr	r2, [pc, #292]	@ (8007284 <HAL_DMA_Abort_IT+0x1d4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d009      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a47      	ldr	r2, [pc, #284]	@ (8007288 <HAL_DMA_Abort_IT+0x1d8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d004      	beq.n	8007178 <HAL_DMA_Abort_IT+0xc8>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a46      	ldr	r2, [pc, #280]	@ (800728c <HAL_DMA_Abort_IT+0x1dc>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d101      	bne.n	800717c <HAL_DMA_Abort_IT+0xcc>
 8007178:	2301      	movs	r3, #1
 800717a:	e000      	b.n	800717e <HAL_DMA_Abort_IT+0xce>
 800717c:	2300      	movs	r3, #0
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 8086 	beq.w	8007290 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2204      	movs	r2, #4
 8007188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a2f      	ldr	r2, [pc, #188]	@ (8007250 <HAL_DMA_Abort_IT+0x1a0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d04a      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a2e      	ldr	r2, [pc, #184]	@ (8007254 <HAL_DMA_Abort_IT+0x1a4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d045      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007258 <HAL_DMA_Abort_IT+0x1a8>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d040      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2b      	ldr	r2, [pc, #172]	@ (800725c <HAL_DMA_Abort_IT+0x1ac>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d03b      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a29      	ldr	r2, [pc, #164]	@ (8007260 <HAL_DMA_Abort_IT+0x1b0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d036      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a28      	ldr	r2, [pc, #160]	@ (8007264 <HAL_DMA_Abort_IT+0x1b4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d031      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a26      	ldr	r2, [pc, #152]	@ (8007268 <HAL_DMA_Abort_IT+0x1b8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d02c      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a25      	ldr	r2, [pc, #148]	@ (800726c <HAL_DMA_Abort_IT+0x1bc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d027      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a23      	ldr	r2, [pc, #140]	@ (8007270 <HAL_DMA_Abort_IT+0x1c0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d022      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a22      	ldr	r2, [pc, #136]	@ (8007274 <HAL_DMA_Abort_IT+0x1c4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d01d      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a20      	ldr	r2, [pc, #128]	@ (8007278 <HAL_DMA_Abort_IT+0x1c8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d018      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a1f      	ldr	r2, [pc, #124]	@ (800727c <HAL_DMA_Abort_IT+0x1cc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d013      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1d      	ldr	r2, [pc, #116]	@ (8007280 <HAL_DMA_Abort_IT+0x1d0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00e      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a1c      	ldr	r2, [pc, #112]	@ (8007284 <HAL_DMA_Abort_IT+0x1d4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d009      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a1a      	ldr	r2, [pc, #104]	@ (8007288 <HAL_DMA_Abort_IT+0x1d8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d004      	beq.n	800722c <HAL_DMA_Abort_IT+0x17c>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a19      	ldr	r2, [pc, #100]	@ (800728c <HAL_DMA_Abort_IT+0x1dc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d108      	bne.n	800723e <HAL_DMA_Abort_IT+0x18e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0201 	bic.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	e178      	b.n	8007530 <HAL_DMA_Abort_IT+0x480>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0201 	bic.w	r2, r2, #1
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	e16f      	b.n	8007530 <HAL_DMA_Abort_IT+0x480>
 8007250:	40020010 	.word	0x40020010
 8007254:	40020028 	.word	0x40020028
 8007258:	40020040 	.word	0x40020040
 800725c:	40020058 	.word	0x40020058
 8007260:	40020070 	.word	0x40020070
 8007264:	40020088 	.word	0x40020088
 8007268:	400200a0 	.word	0x400200a0
 800726c:	400200b8 	.word	0x400200b8
 8007270:	40020410 	.word	0x40020410
 8007274:	40020428 	.word	0x40020428
 8007278:	40020440 	.word	0x40020440
 800727c:	40020458 	.word	0x40020458
 8007280:	40020470 	.word	0x40020470
 8007284:	40020488 	.word	0x40020488
 8007288:	400204a0 	.word	0x400204a0
 800728c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 020e 	bic.w	r2, r2, #14
 800729e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a6c      	ldr	r2, [pc, #432]	@ (8007458 <HAL_DMA_Abort_IT+0x3a8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d04a      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a6b      	ldr	r2, [pc, #428]	@ (800745c <HAL_DMA_Abort_IT+0x3ac>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d045      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a69      	ldr	r2, [pc, #420]	@ (8007460 <HAL_DMA_Abort_IT+0x3b0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d040      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a68      	ldr	r2, [pc, #416]	@ (8007464 <HAL_DMA_Abort_IT+0x3b4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d03b      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a66      	ldr	r2, [pc, #408]	@ (8007468 <HAL_DMA_Abort_IT+0x3b8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d036      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a65      	ldr	r2, [pc, #404]	@ (800746c <HAL_DMA_Abort_IT+0x3bc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d031      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a63      	ldr	r2, [pc, #396]	@ (8007470 <HAL_DMA_Abort_IT+0x3c0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d02c      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a62      	ldr	r2, [pc, #392]	@ (8007474 <HAL_DMA_Abort_IT+0x3c4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d027      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a60      	ldr	r2, [pc, #384]	@ (8007478 <HAL_DMA_Abort_IT+0x3c8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d022      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a5f      	ldr	r2, [pc, #380]	@ (800747c <HAL_DMA_Abort_IT+0x3cc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d01d      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a5d      	ldr	r2, [pc, #372]	@ (8007480 <HAL_DMA_Abort_IT+0x3d0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d018      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a5c      	ldr	r2, [pc, #368]	@ (8007484 <HAL_DMA_Abort_IT+0x3d4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d013      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a5a      	ldr	r2, [pc, #360]	@ (8007488 <HAL_DMA_Abort_IT+0x3d8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d00e      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a59      	ldr	r2, [pc, #356]	@ (800748c <HAL_DMA_Abort_IT+0x3dc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d009      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a57      	ldr	r2, [pc, #348]	@ (8007490 <HAL_DMA_Abort_IT+0x3e0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d004      	beq.n	8007340 <HAL_DMA_Abort_IT+0x290>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a56      	ldr	r2, [pc, #344]	@ (8007494 <HAL_DMA_Abort_IT+0x3e4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d108      	bne.n	8007352 <HAL_DMA_Abort_IT+0x2a2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 0201 	bic.w	r2, r2, #1
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e007      	b.n	8007362 <HAL_DMA_Abort_IT+0x2b2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0201 	bic.w	r2, r2, #1
 8007360:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a3c      	ldr	r2, [pc, #240]	@ (8007458 <HAL_DMA_Abort_IT+0x3a8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d072      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a3a      	ldr	r2, [pc, #232]	@ (800745c <HAL_DMA_Abort_IT+0x3ac>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d06d      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a39      	ldr	r2, [pc, #228]	@ (8007460 <HAL_DMA_Abort_IT+0x3b0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d068      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a37      	ldr	r2, [pc, #220]	@ (8007464 <HAL_DMA_Abort_IT+0x3b4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d063      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a36      	ldr	r2, [pc, #216]	@ (8007468 <HAL_DMA_Abort_IT+0x3b8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d05e      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a34      	ldr	r2, [pc, #208]	@ (800746c <HAL_DMA_Abort_IT+0x3bc>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d059      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a33      	ldr	r2, [pc, #204]	@ (8007470 <HAL_DMA_Abort_IT+0x3c0>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d054      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a31      	ldr	r2, [pc, #196]	@ (8007474 <HAL_DMA_Abort_IT+0x3c4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d04f      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a30      	ldr	r2, [pc, #192]	@ (8007478 <HAL_DMA_Abort_IT+0x3c8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d04a      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a2e      	ldr	r2, [pc, #184]	@ (800747c <HAL_DMA_Abort_IT+0x3cc>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d045      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a2d      	ldr	r2, [pc, #180]	@ (8007480 <HAL_DMA_Abort_IT+0x3d0>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d040      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a2b      	ldr	r2, [pc, #172]	@ (8007484 <HAL_DMA_Abort_IT+0x3d4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d03b      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a2a      	ldr	r2, [pc, #168]	@ (8007488 <HAL_DMA_Abort_IT+0x3d8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d036      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a28      	ldr	r2, [pc, #160]	@ (800748c <HAL_DMA_Abort_IT+0x3dc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d031      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a27      	ldr	r2, [pc, #156]	@ (8007490 <HAL_DMA_Abort_IT+0x3e0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d02c      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a25      	ldr	r2, [pc, #148]	@ (8007494 <HAL_DMA_Abort_IT+0x3e4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d027      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a24      	ldr	r2, [pc, #144]	@ (8007498 <HAL_DMA_Abort_IT+0x3e8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d022      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a22      	ldr	r2, [pc, #136]	@ (800749c <HAL_DMA_Abort_IT+0x3ec>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d01d      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a21      	ldr	r2, [pc, #132]	@ (80074a0 <HAL_DMA_Abort_IT+0x3f0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d018      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1f      	ldr	r2, [pc, #124]	@ (80074a4 <HAL_DMA_Abort_IT+0x3f4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1e      	ldr	r2, [pc, #120]	@ (80074a8 <HAL_DMA_Abort_IT+0x3f8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00e      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1c      	ldr	r2, [pc, #112]	@ (80074ac <HAL_DMA_Abort_IT+0x3fc>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d009      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a1b      	ldr	r2, [pc, #108]	@ (80074b0 <HAL_DMA_Abort_IT+0x400>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d004      	beq.n	8007452 <HAL_DMA_Abort_IT+0x3a2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a19      	ldr	r2, [pc, #100]	@ (80074b4 <HAL_DMA_Abort_IT+0x404>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d132      	bne.n	80074b8 <HAL_DMA_Abort_IT+0x408>
 8007452:	2301      	movs	r3, #1
 8007454:	e031      	b.n	80074ba <HAL_DMA_Abort_IT+0x40a>
 8007456:	bf00      	nop
 8007458:	40020010 	.word	0x40020010
 800745c:	40020028 	.word	0x40020028
 8007460:	40020040 	.word	0x40020040
 8007464:	40020058 	.word	0x40020058
 8007468:	40020070 	.word	0x40020070
 800746c:	40020088 	.word	0x40020088
 8007470:	400200a0 	.word	0x400200a0
 8007474:	400200b8 	.word	0x400200b8
 8007478:	40020410 	.word	0x40020410
 800747c:	40020428 	.word	0x40020428
 8007480:	40020440 	.word	0x40020440
 8007484:	40020458 	.word	0x40020458
 8007488:	40020470 	.word	0x40020470
 800748c:	40020488 	.word	0x40020488
 8007490:	400204a0 	.word	0x400204a0
 8007494:	400204b8 	.word	0x400204b8
 8007498:	58025408 	.word	0x58025408
 800749c:	5802541c 	.word	0x5802541c
 80074a0:	58025430 	.word	0x58025430
 80074a4:	58025444 	.word	0x58025444
 80074a8:	58025458 	.word	0x58025458
 80074ac:	5802546c 	.word	0x5802546c
 80074b0:	58025480 	.word	0x58025480
 80074b4:	58025494 	.word	0x58025494
 80074b8:	2300      	movs	r3, #0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d028      	beq.n	8007510 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d8:	f003 031f 	and.w	r3, r3, #31
 80074dc:	2201      	movs	r2, #1
 80074de:	409a      	lsls	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80074ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00c      	beq.n	8007510 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007504:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800750e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop

0800753c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	@ 0x28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007548:	4b67      	ldr	r3, [pc, #412]	@ (80076e8 <HAL_DMA_IRQHandler+0x1ac>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a67      	ldr	r2, [pc, #412]	@ (80076ec <HAL_DMA_IRQHandler+0x1b0>)
 800754e:	fba2 2303 	umull	r2, r3, r2, r3
 8007552:	0a9b      	lsrs	r3, r3, #10
 8007554:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800755a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007560:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a5f      	ldr	r2, [pc, #380]	@ (80076f0 <HAL_DMA_IRQHandler+0x1b4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d04a      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a5d      	ldr	r2, [pc, #372]	@ (80076f4 <HAL_DMA_IRQHandler+0x1b8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d045      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a5c      	ldr	r2, [pc, #368]	@ (80076f8 <HAL_DMA_IRQHandler+0x1bc>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d040      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a5a      	ldr	r2, [pc, #360]	@ (80076fc <HAL_DMA_IRQHandler+0x1c0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d03b      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a59      	ldr	r2, [pc, #356]	@ (8007700 <HAL_DMA_IRQHandler+0x1c4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d036      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a57      	ldr	r2, [pc, #348]	@ (8007704 <HAL_DMA_IRQHandler+0x1c8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d031      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a56      	ldr	r2, [pc, #344]	@ (8007708 <HAL_DMA_IRQHandler+0x1cc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d02c      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a54      	ldr	r2, [pc, #336]	@ (800770c <HAL_DMA_IRQHandler+0x1d0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d027      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a53      	ldr	r2, [pc, #332]	@ (8007710 <HAL_DMA_IRQHandler+0x1d4>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d022      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a51      	ldr	r2, [pc, #324]	@ (8007714 <HAL_DMA_IRQHandler+0x1d8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d01d      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a50      	ldr	r2, [pc, #320]	@ (8007718 <HAL_DMA_IRQHandler+0x1dc>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d018      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a4e      	ldr	r2, [pc, #312]	@ (800771c <HAL_DMA_IRQHandler+0x1e0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d013      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a4d      	ldr	r2, [pc, #308]	@ (8007720 <HAL_DMA_IRQHandler+0x1e4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d00e      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a4b      	ldr	r2, [pc, #300]	@ (8007724 <HAL_DMA_IRQHandler+0x1e8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d009      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a4a      	ldr	r2, [pc, #296]	@ (8007728 <HAL_DMA_IRQHandler+0x1ec>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d004      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a48      	ldr	r2, [pc, #288]	@ (800772c <HAL_DMA_IRQHandler+0x1f0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d101      	bne.n	8007612 <HAL_DMA_IRQHandler+0xd6>
 800760e:	2301      	movs	r3, #1
 8007610:	e000      	b.n	8007614 <HAL_DMA_IRQHandler+0xd8>
 8007612:	2300      	movs	r3, #0
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 842b 	beq.w	8007e70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800761e:	f003 031f 	and.w	r3, r3, #31
 8007622:	2208      	movs	r2, #8
 8007624:	409a      	lsls	r2, r3
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	4013      	ands	r3, r2
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80a2 	beq.w	8007774 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a2e      	ldr	r2, [pc, #184]	@ (80076f0 <HAL_DMA_IRQHandler+0x1b4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d04a      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a2d      	ldr	r2, [pc, #180]	@ (80076f4 <HAL_DMA_IRQHandler+0x1b8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d045      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a2b      	ldr	r2, [pc, #172]	@ (80076f8 <HAL_DMA_IRQHandler+0x1bc>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d040      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a2a      	ldr	r2, [pc, #168]	@ (80076fc <HAL_DMA_IRQHandler+0x1c0>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d03b      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a28      	ldr	r2, [pc, #160]	@ (8007700 <HAL_DMA_IRQHandler+0x1c4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d036      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a27      	ldr	r2, [pc, #156]	@ (8007704 <HAL_DMA_IRQHandler+0x1c8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d031      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a25      	ldr	r2, [pc, #148]	@ (8007708 <HAL_DMA_IRQHandler+0x1cc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d02c      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a24      	ldr	r2, [pc, #144]	@ (800770c <HAL_DMA_IRQHandler+0x1d0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d027      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a22      	ldr	r2, [pc, #136]	@ (8007710 <HAL_DMA_IRQHandler+0x1d4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d022      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a21      	ldr	r2, [pc, #132]	@ (8007714 <HAL_DMA_IRQHandler+0x1d8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d01d      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a1f      	ldr	r2, [pc, #124]	@ (8007718 <HAL_DMA_IRQHandler+0x1dc>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d018      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a1e      	ldr	r2, [pc, #120]	@ (800771c <HAL_DMA_IRQHandler+0x1e0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d013      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007720 <HAL_DMA_IRQHandler+0x1e4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00e      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007724 <HAL_DMA_IRQHandler+0x1e8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d009      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a19      	ldr	r2, [pc, #100]	@ (8007728 <HAL_DMA_IRQHandler+0x1ec>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d004      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a18      	ldr	r2, [pc, #96]	@ (800772c <HAL_DMA_IRQHandler+0x1f0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d12f      	bne.n	8007730 <HAL_DMA_IRQHandler+0x1f4>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bf14      	ite	ne
 80076de:	2301      	movne	r3, #1
 80076e0:	2300      	moveq	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	e02e      	b.n	8007744 <HAL_DMA_IRQHandler+0x208>
 80076e6:	bf00      	nop
 80076e8:	24000018 	.word	0x24000018
 80076ec:	1b4e81b5 	.word	0x1b4e81b5
 80076f0:	40020010 	.word	0x40020010
 80076f4:	40020028 	.word	0x40020028
 80076f8:	40020040 	.word	0x40020040
 80076fc:	40020058 	.word	0x40020058
 8007700:	40020070 	.word	0x40020070
 8007704:	40020088 	.word	0x40020088
 8007708:	400200a0 	.word	0x400200a0
 800770c:	400200b8 	.word	0x400200b8
 8007710:	40020410 	.word	0x40020410
 8007714:	40020428 	.word	0x40020428
 8007718:	40020440 	.word	0x40020440
 800771c:	40020458 	.word	0x40020458
 8007720:	40020470 	.word	0x40020470
 8007724:	40020488 	.word	0x40020488
 8007728:	400204a0 	.word	0x400204a0
 800772c:	400204b8 	.word	0x400204b8
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	bf14      	ite	ne
 800773e:	2301      	movne	r3, #1
 8007740:	2300      	moveq	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d015      	beq.n	8007774 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0204 	bic.w	r2, r2, #4
 8007756:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800775c:	f003 031f 	and.w	r3, r3, #31
 8007760:	2208      	movs	r2, #8
 8007762:	409a      	lsls	r2, r3
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800776c:	f043 0201 	orr.w	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	fa22 f303 	lsr.w	r3, r2, r3
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d06e      	beq.n	8007868 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a69      	ldr	r2, [pc, #420]	@ (8007934 <HAL_DMA_IRQHandler+0x3f8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d04a      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a67      	ldr	r2, [pc, #412]	@ (8007938 <HAL_DMA_IRQHandler+0x3fc>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d045      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a66      	ldr	r2, [pc, #408]	@ (800793c <HAL_DMA_IRQHandler+0x400>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d040      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a64      	ldr	r2, [pc, #400]	@ (8007940 <HAL_DMA_IRQHandler+0x404>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d03b      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a63      	ldr	r2, [pc, #396]	@ (8007944 <HAL_DMA_IRQHandler+0x408>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d036      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a61      	ldr	r2, [pc, #388]	@ (8007948 <HAL_DMA_IRQHandler+0x40c>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d031      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a60      	ldr	r2, [pc, #384]	@ (800794c <HAL_DMA_IRQHandler+0x410>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d02c      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a5e      	ldr	r2, [pc, #376]	@ (8007950 <HAL_DMA_IRQHandler+0x414>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d027      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a5d      	ldr	r2, [pc, #372]	@ (8007954 <HAL_DMA_IRQHandler+0x418>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d022      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a5b      	ldr	r2, [pc, #364]	@ (8007958 <HAL_DMA_IRQHandler+0x41c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d01d      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a5a      	ldr	r2, [pc, #360]	@ (800795c <HAL_DMA_IRQHandler+0x420>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d018      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a58      	ldr	r2, [pc, #352]	@ (8007960 <HAL_DMA_IRQHandler+0x424>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a57      	ldr	r2, [pc, #348]	@ (8007964 <HAL_DMA_IRQHandler+0x428>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00e      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a55      	ldr	r2, [pc, #340]	@ (8007968 <HAL_DMA_IRQHandler+0x42c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d009      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a54      	ldr	r2, [pc, #336]	@ (800796c <HAL_DMA_IRQHandler+0x430>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d004      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a52      	ldr	r2, [pc, #328]	@ (8007970 <HAL_DMA_IRQHandler+0x434>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d10a      	bne.n	8007840 <HAL_DMA_IRQHandler+0x304>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007834:	2b00      	cmp	r3, #0
 8007836:	bf14      	ite	ne
 8007838:	2301      	movne	r3, #1
 800783a:	2300      	moveq	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	e003      	b.n	8007848 <HAL_DMA_IRQHandler+0x30c>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2300      	movs	r3, #0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00d      	beq.n	8007868 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007850:	f003 031f 	and.w	r3, r3, #31
 8007854:	2201      	movs	r2, #1
 8007856:	409a      	lsls	r2, r3
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007860:	f043 0202 	orr.w	r2, r3, #2
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800786c:	f003 031f 	and.w	r3, r3, #31
 8007870:	2204      	movs	r2, #4
 8007872:	409a      	lsls	r2, r3
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	4013      	ands	r3, r2
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 808f 	beq.w	800799c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a2c      	ldr	r2, [pc, #176]	@ (8007934 <HAL_DMA_IRQHandler+0x3f8>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d04a      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a2a      	ldr	r2, [pc, #168]	@ (8007938 <HAL_DMA_IRQHandler+0x3fc>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d045      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a29      	ldr	r2, [pc, #164]	@ (800793c <HAL_DMA_IRQHandler+0x400>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d040      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a27      	ldr	r2, [pc, #156]	@ (8007940 <HAL_DMA_IRQHandler+0x404>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d03b      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a26      	ldr	r2, [pc, #152]	@ (8007944 <HAL_DMA_IRQHandler+0x408>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d036      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a24      	ldr	r2, [pc, #144]	@ (8007948 <HAL_DMA_IRQHandler+0x40c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d031      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a23      	ldr	r2, [pc, #140]	@ (800794c <HAL_DMA_IRQHandler+0x410>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d02c      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a21      	ldr	r2, [pc, #132]	@ (8007950 <HAL_DMA_IRQHandler+0x414>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d027      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a20      	ldr	r2, [pc, #128]	@ (8007954 <HAL_DMA_IRQHandler+0x418>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d022      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007958 <HAL_DMA_IRQHandler+0x41c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01d      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1d      	ldr	r2, [pc, #116]	@ (800795c <HAL_DMA_IRQHandler+0x420>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d018      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007960 <HAL_DMA_IRQHandler+0x424>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007964 <HAL_DMA_IRQHandler+0x428>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00e      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a18      	ldr	r2, [pc, #96]	@ (8007968 <HAL_DMA_IRQHandler+0x42c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d009      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a17      	ldr	r2, [pc, #92]	@ (800796c <HAL_DMA_IRQHandler+0x430>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d004      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a15      	ldr	r2, [pc, #84]	@ (8007970 <HAL_DMA_IRQHandler+0x434>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d12a      	bne.n	8007974 <HAL_DMA_IRQHandler+0x438>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	bf14      	ite	ne
 800792c:	2301      	movne	r3, #1
 800792e:	2300      	moveq	r3, #0
 8007930:	b2db      	uxtb	r3, r3
 8007932:	e023      	b.n	800797c <HAL_DMA_IRQHandler+0x440>
 8007934:	40020010 	.word	0x40020010
 8007938:	40020028 	.word	0x40020028
 800793c:	40020040 	.word	0x40020040
 8007940:	40020058 	.word	0x40020058
 8007944:	40020070 	.word	0x40020070
 8007948:	40020088 	.word	0x40020088
 800794c:	400200a0 	.word	0x400200a0
 8007950:	400200b8 	.word	0x400200b8
 8007954:	40020410 	.word	0x40020410
 8007958:	40020428 	.word	0x40020428
 800795c:	40020440 	.word	0x40020440
 8007960:	40020458 	.word	0x40020458
 8007964:	40020470 	.word	0x40020470
 8007968:	40020488 	.word	0x40020488
 800796c:	400204a0 	.word	0x400204a0
 8007970:	400204b8 	.word	0x400204b8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2300      	movs	r3, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00d      	beq.n	800799c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	2204      	movs	r2, #4
 800798a:	409a      	lsls	r2, r3
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007994:	f043 0204 	orr.w	r2, r3, #4
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079a0:	f003 031f 	and.w	r3, r3, #31
 80079a4:	2210      	movs	r2, #16
 80079a6:	409a      	lsls	r2, r3
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	4013      	ands	r3, r2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80a6 	beq.w	8007afe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a85      	ldr	r2, [pc, #532]	@ (8007bcc <HAL_DMA_IRQHandler+0x690>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d04a      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a83      	ldr	r2, [pc, #524]	@ (8007bd0 <HAL_DMA_IRQHandler+0x694>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d045      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a82      	ldr	r2, [pc, #520]	@ (8007bd4 <HAL_DMA_IRQHandler+0x698>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d040      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a80      	ldr	r2, [pc, #512]	@ (8007bd8 <HAL_DMA_IRQHandler+0x69c>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d03b      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a7f      	ldr	r2, [pc, #508]	@ (8007bdc <HAL_DMA_IRQHandler+0x6a0>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d036      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a7d      	ldr	r2, [pc, #500]	@ (8007be0 <HAL_DMA_IRQHandler+0x6a4>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d031      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a7c      	ldr	r2, [pc, #496]	@ (8007be4 <HAL_DMA_IRQHandler+0x6a8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d02c      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a7a      	ldr	r2, [pc, #488]	@ (8007be8 <HAL_DMA_IRQHandler+0x6ac>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d027      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a79      	ldr	r2, [pc, #484]	@ (8007bec <HAL_DMA_IRQHandler+0x6b0>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d022      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a77      	ldr	r2, [pc, #476]	@ (8007bf0 <HAL_DMA_IRQHandler+0x6b4>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d01d      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a76      	ldr	r2, [pc, #472]	@ (8007bf4 <HAL_DMA_IRQHandler+0x6b8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d018      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a74      	ldr	r2, [pc, #464]	@ (8007bf8 <HAL_DMA_IRQHandler+0x6bc>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d013      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a73      	ldr	r2, [pc, #460]	@ (8007bfc <HAL_DMA_IRQHandler+0x6c0>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d00e      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a71      	ldr	r2, [pc, #452]	@ (8007c00 <HAL_DMA_IRQHandler+0x6c4>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d009      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a70      	ldr	r2, [pc, #448]	@ (8007c04 <HAL_DMA_IRQHandler+0x6c8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d004      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8007c08 <HAL_DMA_IRQHandler+0x6cc>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d10a      	bne.n	8007a68 <HAL_DMA_IRQHandler+0x52c>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bf14      	ite	ne
 8007a60:	2301      	movne	r3, #1
 8007a62:	2300      	moveq	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	e009      	b.n	8007a7c <HAL_DMA_IRQHandler+0x540>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bf14      	ite	ne
 8007a76:	2301      	movne	r3, #1
 8007a78:	2300      	moveq	r3, #0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d03e      	beq.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a84:	f003 031f 	and.w	r3, r3, #31
 8007a88:	2210      	movs	r2, #16
 8007a8a:	409a      	lsls	r2, r3
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d018      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d108      	bne.n	8007abe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d024      	beq.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	4798      	blx	r3
 8007abc:	e01f      	b.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01b      	beq.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
 8007ace:	e016      	b.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d107      	bne.n	8007aee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0208 	bic.w	r2, r2, #8
 8007aec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	2220      	movs	r2, #32
 8007b08:	409a      	lsls	r2, r3
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 8110 	beq.w	8007d34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a2c      	ldr	r2, [pc, #176]	@ (8007bcc <HAL_DMA_IRQHandler+0x690>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d04a      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a2b      	ldr	r2, [pc, #172]	@ (8007bd0 <HAL_DMA_IRQHandler+0x694>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d045      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a29      	ldr	r2, [pc, #164]	@ (8007bd4 <HAL_DMA_IRQHandler+0x698>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d040      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a28      	ldr	r2, [pc, #160]	@ (8007bd8 <HAL_DMA_IRQHandler+0x69c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d03b      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a26      	ldr	r2, [pc, #152]	@ (8007bdc <HAL_DMA_IRQHandler+0x6a0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d036      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a25      	ldr	r2, [pc, #148]	@ (8007be0 <HAL_DMA_IRQHandler+0x6a4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d031      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a23      	ldr	r2, [pc, #140]	@ (8007be4 <HAL_DMA_IRQHandler+0x6a8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d02c      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a22      	ldr	r2, [pc, #136]	@ (8007be8 <HAL_DMA_IRQHandler+0x6ac>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d027      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a20      	ldr	r2, [pc, #128]	@ (8007bec <HAL_DMA_IRQHandler+0x6b0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d022      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a1f      	ldr	r2, [pc, #124]	@ (8007bf0 <HAL_DMA_IRQHandler+0x6b4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d01d      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf4 <HAL_DMA_IRQHandler+0x6b8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d018      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a1c      	ldr	r2, [pc, #112]	@ (8007bf8 <HAL_DMA_IRQHandler+0x6bc>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d013      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1a      	ldr	r2, [pc, #104]	@ (8007bfc <HAL_DMA_IRQHandler+0x6c0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00e      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a19      	ldr	r2, [pc, #100]	@ (8007c00 <HAL_DMA_IRQHandler+0x6c4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d009      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a17      	ldr	r2, [pc, #92]	@ (8007c04 <HAL_DMA_IRQHandler+0x6c8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d004      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a16      	ldr	r2, [pc, #88]	@ (8007c08 <HAL_DMA_IRQHandler+0x6cc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d12b      	bne.n	8007c0c <HAL_DMA_IRQHandler+0x6d0>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0310 	and.w	r3, r3, #16
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bf14      	ite	ne
 8007bc2:	2301      	movne	r3, #1
 8007bc4:	2300      	moveq	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	e02a      	b.n	8007c20 <HAL_DMA_IRQHandler+0x6e4>
 8007bca:	bf00      	nop
 8007bcc:	40020010 	.word	0x40020010
 8007bd0:	40020028 	.word	0x40020028
 8007bd4:	40020040 	.word	0x40020040
 8007bd8:	40020058 	.word	0x40020058
 8007bdc:	40020070 	.word	0x40020070
 8007be0:	40020088 	.word	0x40020088
 8007be4:	400200a0 	.word	0x400200a0
 8007be8:	400200b8 	.word	0x400200b8
 8007bec:	40020410 	.word	0x40020410
 8007bf0:	40020428 	.word	0x40020428
 8007bf4:	40020440 	.word	0x40020440
 8007bf8:	40020458 	.word	0x40020458
 8007bfc:	40020470 	.word	0x40020470
 8007c00:	40020488 	.word	0x40020488
 8007c04:	400204a0 	.word	0x400204a0
 8007c08:	400204b8 	.word	0x400204b8
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bf14      	ite	ne
 8007c1a:	2301      	movne	r3, #1
 8007c1c:	2300      	moveq	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 8087 	beq.w	8007d34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c2a:	f003 031f 	and.w	r3, r3, #31
 8007c2e:	2220      	movs	r2, #32
 8007c30:	409a      	lsls	r2, r3
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d139      	bne.n	8007cb6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0216 	bic.w	r2, r2, #22
 8007c50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	695a      	ldr	r2, [r3, #20]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <HAL_DMA_IRQHandler+0x736>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0208 	bic.w	r2, r2, #8
 8007c80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	223f      	movs	r2, #63	@ 0x3f
 8007c8c:	409a      	lsls	r2, r3
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 834a 	beq.w	8008340 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	4798      	blx	r3
          }
          return;
 8007cb4:	e344      	b.n	8008340 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d018      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d108      	bne.n	8007ce4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d02c      	beq.n	8007d34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
 8007ce2:	e027      	b.n	8007d34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d023      	beq.n	8007d34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
 8007cf4:	e01e      	b.n	8007d34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10f      	bne.n	8007d24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0210 	bic.w	r2, r2, #16
 8007d12:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 8306 	beq.w	800834a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 8088 	beq.w	8007e5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a7a      	ldr	r2, [pc, #488]	@ (8007f44 <HAL_DMA_IRQHandler+0xa08>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d04a      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a79      	ldr	r2, [pc, #484]	@ (8007f48 <HAL_DMA_IRQHandler+0xa0c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d045      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a77      	ldr	r2, [pc, #476]	@ (8007f4c <HAL_DMA_IRQHandler+0xa10>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d040      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a76      	ldr	r2, [pc, #472]	@ (8007f50 <HAL_DMA_IRQHandler+0xa14>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d03b      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a74      	ldr	r2, [pc, #464]	@ (8007f54 <HAL_DMA_IRQHandler+0xa18>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d036      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a73      	ldr	r2, [pc, #460]	@ (8007f58 <HAL_DMA_IRQHandler+0xa1c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d031      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a71      	ldr	r2, [pc, #452]	@ (8007f5c <HAL_DMA_IRQHandler+0xa20>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d02c      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a70      	ldr	r2, [pc, #448]	@ (8007f60 <HAL_DMA_IRQHandler+0xa24>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d027      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a6e      	ldr	r2, [pc, #440]	@ (8007f64 <HAL_DMA_IRQHandler+0xa28>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d022      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a6d      	ldr	r2, [pc, #436]	@ (8007f68 <HAL_DMA_IRQHandler+0xa2c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d01d      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8007f6c <HAL_DMA_IRQHandler+0xa30>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d018      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a6a      	ldr	r2, [pc, #424]	@ (8007f70 <HAL_DMA_IRQHandler+0xa34>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d013      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a68      	ldr	r2, [pc, #416]	@ (8007f74 <HAL_DMA_IRQHandler+0xa38>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00e      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a67      	ldr	r2, [pc, #412]	@ (8007f78 <HAL_DMA_IRQHandler+0xa3c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d009      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a65      	ldr	r2, [pc, #404]	@ (8007f7c <HAL_DMA_IRQHandler+0xa40>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d004      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a64      	ldr	r2, [pc, #400]	@ (8007f80 <HAL_DMA_IRQHandler+0xa44>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d108      	bne.n	8007e06 <HAL_DMA_IRQHandler+0x8ca>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0201 	bic.w	r2, r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	e007      	b.n	8007e16 <HAL_DMA_IRQHandler+0x8da>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0201 	bic.w	r2, r2, #1
 8007e14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d307      	bcc.n	8007e32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1f2      	bne.n	8007e16 <HAL_DMA_IRQHandler+0x8da>
 8007e30:	e000      	b.n	8007e34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007e32:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d004      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2203      	movs	r2, #3
 8007e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007e4a:	e003      	b.n	8007e54 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 8272 	beq.w	800834a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	4798      	blx	r3
 8007e6e:	e26c      	b.n	800834a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a43      	ldr	r2, [pc, #268]	@ (8007f84 <HAL_DMA_IRQHandler+0xa48>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d022      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a42      	ldr	r2, [pc, #264]	@ (8007f88 <HAL_DMA_IRQHandler+0xa4c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d01d      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a40      	ldr	r2, [pc, #256]	@ (8007f8c <HAL_DMA_IRQHandler+0xa50>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d018      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a3f      	ldr	r2, [pc, #252]	@ (8007f90 <HAL_DMA_IRQHandler+0xa54>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f94 <HAL_DMA_IRQHandler+0xa58>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00e      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8007f98 <HAL_DMA_IRQHandler+0xa5c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d009      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8007f9c <HAL_DMA_IRQHandler+0xa60>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a39      	ldr	r2, [pc, #228]	@ (8007fa0 <HAL_DMA_IRQHandler+0xa64>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d101      	bne.n	8007ec4 <HAL_DMA_IRQHandler+0x988>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <HAL_DMA_IRQHandler+0x98a>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 823f 	beq.w	800834a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed8:	f003 031f 	and.w	r3, r3, #31
 8007edc:	2204      	movs	r2, #4
 8007ede:	409a      	lsls	r2, r3
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80cd 	beq.w	8008084 <HAL_DMA_IRQHandler+0xb48>
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 80c7 	beq.w	8008084 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007efa:	f003 031f 	and.w	r3, r3, #31
 8007efe:	2204      	movs	r2, #4
 8007f00:	409a      	lsls	r2, r3
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d049      	beq.n	8007fa4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8210 	beq.w	8008344 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f2c:	e20a      	b.n	8008344 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8206 	beq.w	8008344 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f40:	e200      	b.n	8008344 <HAL_DMA_IRQHandler+0xe08>
 8007f42:	bf00      	nop
 8007f44:	40020010 	.word	0x40020010
 8007f48:	40020028 	.word	0x40020028
 8007f4c:	40020040 	.word	0x40020040
 8007f50:	40020058 	.word	0x40020058
 8007f54:	40020070 	.word	0x40020070
 8007f58:	40020088 	.word	0x40020088
 8007f5c:	400200a0 	.word	0x400200a0
 8007f60:	400200b8 	.word	0x400200b8
 8007f64:	40020410 	.word	0x40020410
 8007f68:	40020428 	.word	0x40020428
 8007f6c:	40020440 	.word	0x40020440
 8007f70:	40020458 	.word	0x40020458
 8007f74:	40020470 	.word	0x40020470
 8007f78:	40020488 	.word	0x40020488
 8007f7c:	400204a0 	.word	0x400204a0
 8007f80:	400204b8 	.word	0x400204b8
 8007f84:	58025408 	.word	0x58025408
 8007f88:	5802541c 	.word	0x5802541c
 8007f8c:	58025430 	.word	0x58025430
 8007f90:	58025444 	.word	0x58025444
 8007f94:	58025458 	.word	0x58025458
 8007f98:	5802546c 	.word	0x5802546c
 8007f9c:	58025480 	.word	0x58025480
 8007fa0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d160      	bne.n	8008070 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a7f      	ldr	r2, [pc, #508]	@ (80081b0 <HAL_DMA_IRQHandler+0xc74>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d04a      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a7d      	ldr	r2, [pc, #500]	@ (80081b4 <HAL_DMA_IRQHandler+0xc78>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d045      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a7c      	ldr	r2, [pc, #496]	@ (80081b8 <HAL_DMA_IRQHandler+0xc7c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d040      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a7a      	ldr	r2, [pc, #488]	@ (80081bc <HAL_DMA_IRQHandler+0xc80>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d03b      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a79      	ldr	r2, [pc, #484]	@ (80081c0 <HAL_DMA_IRQHandler+0xc84>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d036      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a77      	ldr	r2, [pc, #476]	@ (80081c4 <HAL_DMA_IRQHandler+0xc88>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d031      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a76      	ldr	r2, [pc, #472]	@ (80081c8 <HAL_DMA_IRQHandler+0xc8c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d02c      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a74      	ldr	r2, [pc, #464]	@ (80081cc <HAL_DMA_IRQHandler+0xc90>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d027      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a73      	ldr	r2, [pc, #460]	@ (80081d0 <HAL_DMA_IRQHandler+0xc94>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d022      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a71      	ldr	r2, [pc, #452]	@ (80081d4 <HAL_DMA_IRQHandler+0xc98>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d01d      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a70      	ldr	r2, [pc, #448]	@ (80081d8 <HAL_DMA_IRQHandler+0xc9c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d018      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a6e      	ldr	r2, [pc, #440]	@ (80081dc <HAL_DMA_IRQHandler+0xca0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d013      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a6d      	ldr	r2, [pc, #436]	@ (80081e0 <HAL_DMA_IRQHandler+0xca4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00e      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a6b      	ldr	r2, [pc, #428]	@ (80081e4 <HAL_DMA_IRQHandler+0xca8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d009      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a6a      	ldr	r2, [pc, #424]	@ (80081e8 <HAL_DMA_IRQHandler+0xcac>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d004      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a68      	ldr	r2, [pc, #416]	@ (80081ec <HAL_DMA_IRQHandler+0xcb0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d108      	bne.n	8008060 <HAL_DMA_IRQHandler+0xb24>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0208 	bic.w	r2, r2, #8
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	e007      	b.n	8008070 <HAL_DMA_IRQHandler+0xb34>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0204 	bic.w	r2, r2, #4
 800806e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8165 	beq.w	8008344 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008082:	e15f      	b.n	8008344 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008088:	f003 031f 	and.w	r3, r3, #31
 800808c:	2202      	movs	r2, #2
 800808e:	409a      	lsls	r2, r3
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	4013      	ands	r3, r2
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 80c5 	beq.w	8008224 <HAL_DMA_IRQHandler+0xce8>
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80bf 	beq.w	8008224 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080aa:	f003 031f 	and.w	r3, r3, #31
 80080ae:	2202      	movs	r2, #2
 80080b0:	409a      	lsls	r2, r3
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d018      	beq.n	80080f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 813a 	beq.w	8008348 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080dc:	e134      	b.n	8008348 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 8130 	beq.w	8008348 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080f0:	e12a      	b.n	8008348 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f040 8089 	bne.w	8008210 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a2b      	ldr	r2, [pc, #172]	@ (80081b0 <HAL_DMA_IRQHandler+0xc74>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d04a      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a29      	ldr	r2, [pc, #164]	@ (80081b4 <HAL_DMA_IRQHandler+0xc78>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d045      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a28      	ldr	r2, [pc, #160]	@ (80081b8 <HAL_DMA_IRQHandler+0xc7c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d040      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a26      	ldr	r2, [pc, #152]	@ (80081bc <HAL_DMA_IRQHandler+0xc80>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d03b      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a25      	ldr	r2, [pc, #148]	@ (80081c0 <HAL_DMA_IRQHandler+0xc84>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d036      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a23      	ldr	r2, [pc, #140]	@ (80081c4 <HAL_DMA_IRQHandler+0xc88>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d031      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a22      	ldr	r2, [pc, #136]	@ (80081c8 <HAL_DMA_IRQHandler+0xc8c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d02c      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a20      	ldr	r2, [pc, #128]	@ (80081cc <HAL_DMA_IRQHandler+0xc90>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d027      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a1f      	ldr	r2, [pc, #124]	@ (80081d0 <HAL_DMA_IRQHandler+0xc94>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d022      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1d      	ldr	r2, [pc, #116]	@ (80081d4 <HAL_DMA_IRQHandler+0xc98>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d01d      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a1c      	ldr	r2, [pc, #112]	@ (80081d8 <HAL_DMA_IRQHandler+0xc9c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d018      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a1a      	ldr	r2, [pc, #104]	@ (80081dc <HAL_DMA_IRQHandler+0xca0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d013      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a19      	ldr	r2, [pc, #100]	@ (80081e0 <HAL_DMA_IRQHandler+0xca4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00e      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a17      	ldr	r2, [pc, #92]	@ (80081e4 <HAL_DMA_IRQHandler+0xca8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d009      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a16      	ldr	r2, [pc, #88]	@ (80081e8 <HAL_DMA_IRQHandler+0xcac>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d004      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a14      	ldr	r2, [pc, #80]	@ (80081ec <HAL_DMA_IRQHandler+0xcb0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d128      	bne.n	80081f0 <HAL_DMA_IRQHandler+0xcb4>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0214 	bic.w	r2, r2, #20
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	e027      	b.n	8008200 <HAL_DMA_IRQHandler+0xcc4>
 80081b0:	40020010 	.word	0x40020010
 80081b4:	40020028 	.word	0x40020028
 80081b8:	40020040 	.word	0x40020040
 80081bc:	40020058 	.word	0x40020058
 80081c0:	40020070 	.word	0x40020070
 80081c4:	40020088 	.word	0x40020088
 80081c8:	400200a0 	.word	0x400200a0
 80081cc:	400200b8 	.word	0x400200b8
 80081d0:	40020410 	.word	0x40020410
 80081d4:	40020428 	.word	0x40020428
 80081d8:	40020440 	.word	0x40020440
 80081dc:	40020458 	.word	0x40020458
 80081e0:	40020470 	.word	0x40020470
 80081e4:	40020488 	.word	0x40020488
 80081e8:	400204a0 	.word	0x400204a0
 80081ec:	400204b8 	.word	0x400204b8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 020a 	bic.w	r2, r2, #10
 80081fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8097 	beq.w	8008348 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008222:	e091      	b.n	8008348 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008228:	f003 031f 	and.w	r3, r3, #31
 800822c:	2208      	movs	r2, #8
 800822e:	409a      	lsls	r2, r3
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	4013      	ands	r3, r2
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8088 	beq.w	800834a <HAL_DMA_IRQHandler+0xe0e>
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f003 0308 	and.w	r3, r3, #8
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 8082 	beq.w	800834a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a41      	ldr	r2, [pc, #260]	@ (8008350 <HAL_DMA_IRQHandler+0xe14>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d04a      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a3f      	ldr	r2, [pc, #252]	@ (8008354 <HAL_DMA_IRQHandler+0xe18>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d045      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a3e      	ldr	r2, [pc, #248]	@ (8008358 <HAL_DMA_IRQHandler+0xe1c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d040      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a3c      	ldr	r2, [pc, #240]	@ (800835c <HAL_DMA_IRQHandler+0xe20>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d03b      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a3b      	ldr	r2, [pc, #236]	@ (8008360 <HAL_DMA_IRQHandler+0xe24>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d036      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a39      	ldr	r2, [pc, #228]	@ (8008364 <HAL_DMA_IRQHandler+0xe28>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d031      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a38      	ldr	r2, [pc, #224]	@ (8008368 <HAL_DMA_IRQHandler+0xe2c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d02c      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a36      	ldr	r2, [pc, #216]	@ (800836c <HAL_DMA_IRQHandler+0xe30>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d027      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a35      	ldr	r2, [pc, #212]	@ (8008370 <HAL_DMA_IRQHandler+0xe34>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d022      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a33      	ldr	r2, [pc, #204]	@ (8008374 <HAL_DMA_IRQHandler+0xe38>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d01d      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a32      	ldr	r2, [pc, #200]	@ (8008378 <HAL_DMA_IRQHandler+0xe3c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d018      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a30      	ldr	r2, [pc, #192]	@ (800837c <HAL_DMA_IRQHandler+0xe40>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d013      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a2f      	ldr	r2, [pc, #188]	@ (8008380 <HAL_DMA_IRQHandler+0xe44>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00e      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a2d      	ldr	r2, [pc, #180]	@ (8008384 <HAL_DMA_IRQHandler+0xe48>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d009      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008388 <HAL_DMA_IRQHandler+0xe4c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d004      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a2a      	ldr	r2, [pc, #168]	@ (800838c <HAL_DMA_IRQHandler+0xe50>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d108      	bne.n	80082f8 <HAL_DMA_IRQHandler+0xdbc>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 021c 	bic.w	r2, r2, #28
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	e007      	b.n	8008308 <HAL_DMA_IRQHandler+0xdcc>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 020e 	bic.w	r2, r2, #14
 8008306:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800830c:	f003 031f 	and.w	r3, r3, #31
 8008310:	2201      	movs	r2, #1
 8008312:	409a      	lsls	r2, r3
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	4798      	blx	r3
 800833e:	e004      	b.n	800834a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008340:	bf00      	nop
 8008342:	e002      	b.n	800834a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008344:	bf00      	nop
 8008346:	e000      	b.n	800834a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008348:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800834a:	3728      	adds	r7, #40	@ 0x28
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	40020010 	.word	0x40020010
 8008354:	40020028 	.word	0x40020028
 8008358:	40020040 	.word	0x40020040
 800835c:	40020058 	.word	0x40020058
 8008360:	40020070 	.word	0x40020070
 8008364:	40020088 	.word	0x40020088
 8008368:	400200a0 	.word	0x400200a0
 800836c:	400200b8 	.word	0x400200b8
 8008370:	40020410 	.word	0x40020410
 8008374:	40020428 	.word	0x40020428
 8008378:	40020440 	.word	0x40020440
 800837c:	40020458 	.word	0x40020458
 8008380:	40020470 	.word	0x40020470
 8008384:	40020488 	.word	0x40020488
 8008388:	400204a0 	.word	0x400204a0
 800838c:	400204b8 	.word	0x400204b8

08008390 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a7f      	ldr	r2, [pc, #508]	@ (80085ac <DMA_SetConfig+0x21c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d072      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a7d      	ldr	r2, [pc, #500]	@ (80085b0 <DMA_SetConfig+0x220>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d06d      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a7c      	ldr	r2, [pc, #496]	@ (80085b4 <DMA_SetConfig+0x224>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d068      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a7a      	ldr	r2, [pc, #488]	@ (80085b8 <DMA_SetConfig+0x228>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d063      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a79      	ldr	r2, [pc, #484]	@ (80085bc <DMA_SetConfig+0x22c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d05e      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a77      	ldr	r2, [pc, #476]	@ (80085c0 <DMA_SetConfig+0x230>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d059      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a76      	ldr	r2, [pc, #472]	@ (80085c4 <DMA_SetConfig+0x234>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d054      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a74      	ldr	r2, [pc, #464]	@ (80085c8 <DMA_SetConfig+0x238>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d04f      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a73      	ldr	r2, [pc, #460]	@ (80085cc <DMA_SetConfig+0x23c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d04a      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a71      	ldr	r2, [pc, #452]	@ (80085d0 <DMA_SetConfig+0x240>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d045      	beq.n	800849a <DMA_SetConfig+0x10a>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a70      	ldr	r2, [pc, #448]	@ (80085d4 <DMA_SetConfig+0x244>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d040      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a6e      	ldr	r2, [pc, #440]	@ (80085d8 <DMA_SetConfig+0x248>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d03b      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a6d      	ldr	r2, [pc, #436]	@ (80085dc <DMA_SetConfig+0x24c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d036      	beq.n	800849a <DMA_SetConfig+0x10a>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a6b      	ldr	r2, [pc, #428]	@ (80085e0 <DMA_SetConfig+0x250>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d031      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a6a      	ldr	r2, [pc, #424]	@ (80085e4 <DMA_SetConfig+0x254>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d02c      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a68      	ldr	r2, [pc, #416]	@ (80085e8 <DMA_SetConfig+0x258>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d027      	beq.n	800849a <DMA_SetConfig+0x10a>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a67      	ldr	r2, [pc, #412]	@ (80085ec <DMA_SetConfig+0x25c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d022      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a65      	ldr	r2, [pc, #404]	@ (80085f0 <DMA_SetConfig+0x260>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d01d      	beq.n	800849a <DMA_SetConfig+0x10a>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a64      	ldr	r2, [pc, #400]	@ (80085f4 <DMA_SetConfig+0x264>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d018      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a62      	ldr	r2, [pc, #392]	@ (80085f8 <DMA_SetConfig+0x268>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d013      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a61      	ldr	r2, [pc, #388]	@ (80085fc <DMA_SetConfig+0x26c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00e      	beq.n	800849a <DMA_SetConfig+0x10a>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a5f      	ldr	r2, [pc, #380]	@ (8008600 <DMA_SetConfig+0x270>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d009      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a5e      	ldr	r2, [pc, #376]	@ (8008604 <DMA_SetConfig+0x274>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d004      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a5c      	ldr	r2, [pc, #368]	@ (8008608 <DMA_SetConfig+0x278>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d101      	bne.n	800849e <DMA_SetConfig+0x10e>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <DMA_SetConfig+0x110>
 800849e:	2300      	movs	r3, #0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00d      	beq.n	80084c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80084ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80084be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a39      	ldr	r2, [pc, #228]	@ (80085ac <DMA_SetConfig+0x21c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d04a      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a38      	ldr	r2, [pc, #224]	@ (80085b0 <DMA_SetConfig+0x220>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d045      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a36      	ldr	r2, [pc, #216]	@ (80085b4 <DMA_SetConfig+0x224>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d040      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a35      	ldr	r2, [pc, #212]	@ (80085b8 <DMA_SetConfig+0x228>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d03b      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a33      	ldr	r2, [pc, #204]	@ (80085bc <DMA_SetConfig+0x22c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d036      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a32      	ldr	r2, [pc, #200]	@ (80085c0 <DMA_SetConfig+0x230>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d031      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a30      	ldr	r2, [pc, #192]	@ (80085c4 <DMA_SetConfig+0x234>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d02c      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a2f      	ldr	r2, [pc, #188]	@ (80085c8 <DMA_SetConfig+0x238>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d027      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a2d      	ldr	r2, [pc, #180]	@ (80085cc <DMA_SetConfig+0x23c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d022      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a2c      	ldr	r2, [pc, #176]	@ (80085d0 <DMA_SetConfig+0x240>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d01d      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a2a      	ldr	r2, [pc, #168]	@ (80085d4 <DMA_SetConfig+0x244>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d018      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a29      	ldr	r2, [pc, #164]	@ (80085d8 <DMA_SetConfig+0x248>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d013      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a27      	ldr	r2, [pc, #156]	@ (80085dc <DMA_SetConfig+0x24c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d00e      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a26      	ldr	r2, [pc, #152]	@ (80085e0 <DMA_SetConfig+0x250>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d009      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a24      	ldr	r2, [pc, #144]	@ (80085e4 <DMA_SetConfig+0x254>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d004      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a23      	ldr	r2, [pc, #140]	@ (80085e8 <DMA_SetConfig+0x258>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d101      	bne.n	8008564 <DMA_SetConfig+0x1d4>
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <DMA_SetConfig+0x1d6>
 8008564:	2300      	movs	r3, #0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d059      	beq.n	800861e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800856e:	f003 031f 	and.w	r3, r3, #31
 8008572:	223f      	movs	r2, #63	@ 0x3f
 8008574:	409a      	lsls	r2, r3
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008588:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b40      	cmp	r3, #64	@ 0x40
 8008598:	d138      	bne.n	800860c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80085aa:	e086      	b.n	80086ba <DMA_SetConfig+0x32a>
 80085ac:	40020010 	.word	0x40020010
 80085b0:	40020028 	.word	0x40020028
 80085b4:	40020040 	.word	0x40020040
 80085b8:	40020058 	.word	0x40020058
 80085bc:	40020070 	.word	0x40020070
 80085c0:	40020088 	.word	0x40020088
 80085c4:	400200a0 	.word	0x400200a0
 80085c8:	400200b8 	.word	0x400200b8
 80085cc:	40020410 	.word	0x40020410
 80085d0:	40020428 	.word	0x40020428
 80085d4:	40020440 	.word	0x40020440
 80085d8:	40020458 	.word	0x40020458
 80085dc:	40020470 	.word	0x40020470
 80085e0:	40020488 	.word	0x40020488
 80085e4:	400204a0 	.word	0x400204a0
 80085e8:	400204b8 	.word	0x400204b8
 80085ec:	58025408 	.word	0x58025408
 80085f0:	5802541c 	.word	0x5802541c
 80085f4:	58025430 	.word	0x58025430
 80085f8:	58025444 	.word	0x58025444
 80085fc:	58025458 	.word	0x58025458
 8008600:	5802546c 	.word	0x5802546c
 8008604:	58025480 	.word	0x58025480
 8008608:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	60da      	str	r2, [r3, #12]
}
 800861c:	e04d      	b.n	80086ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a29      	ldr	r2, [pc, #164]	@ (80086c8 <DMA_SetConfig+0x338>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d022      	beq.n	800866e <DMA_SetConfig+0x2de>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a27      	ldr	r2, [pc, #156]	@ (80086cc <DMA_SetConfig+0x33c>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d01d      	beq.n	800866e <DMA_SetConfig+0x2de>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a26      	ldr	r2, [pc, #152]	@ (80086d0 <DMA_SetConfig+0x340>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d018      	beq.n	800866e <DMA_SetConfig+0x2de>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a24      	ldr	r2, [pc, #144]	@ (80086d4 <DMA_SetConfig+0x344>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d013      	beq.n	800866e <DMA_SetConfig+0x2de>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a23      	ldr	r2, [pc, #140]	@ (80086d8 <DMA_SetConfig+0x348>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00e      	beq.n	800866e <DMA_SetConfig+0x2de>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a21      	ldr	r2, [pc, #132]	@ (80086dc <DMA_SetConfig+0x34c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d009      	beq.n	800866e <DMA_SetConfig+0x2de>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a20      	ldr	r2, [pc, #128]	@ (80086e0 <DMA_SetConfig+0x350>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d004      	beq.n	800866e <DMA_SetConfig+0x2de>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a1e      	ldr	r2, [pc, #120]	@ (80086e4 <DMA_SetConfig+0x354>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d101      	bne.n	8008672 <DMA_SetConfig+0x2e2>
 800866e:	2301      	movs	r3, #1
 8008670:	e000      	b.n	8008674 <DMA_SetConfig+0x2e4>
 8008672:	2300      	movs	r3, #0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d020      	beq.n	80086ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800867c:	f003 031f 	and.w	r3, r3, #31
 8008680:	2201      	movs	r2, #1
 8008682:	409a      	lsls	r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	2b40      	cmp	r3, #64	@ 0x40
 8008696:	d108      	bne.n	80086aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	60da      	str	r2, [r3, #12]
}
 80086a8:	e007      	b.n	80086ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	60da      	str	r2, [r3, #12]
}
 80086ba:	bf00      	nop
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	58025408 	.word	0x58025408
 80086cc:	5802541c 	.word	0x5802541c
 80086d0:	58025430 	.word	0x58025430
 80086d4:	58025444 	.word	0x58025444
 80086d8:	58025458 	.word	0x58025458
 80086dc:	5802546c 	.word	0x5802546c
 80086e0:	58025480 	.word	0x58025480
 80086e4:	58025494 	.word	0x58025494

080086e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a42      	ldr	r2, [pc, #264]	@ (8008800 <DMA_CalcBaseAndBitshift+0x118>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d04a      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a41      	ldr	r2, [pc, #260]	@ (8008804 <DMA_CalcBaseAndBitshift+0x11c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d045      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a3f      	ldr	r2, [pc, #252]	@ (8008808 <DMA_CalcBaseAndBitshift+0x120>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d040      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a3e      	ldr	r2, [pc, #248]	@ (800880c <DMA_CalcBaseAndBitshift+0x124>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d03b      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a3c      	ldr	r2, [pc, #240]	@ (8008810 <DMA_CalcBaseAndBitshift+0x128>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d036      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a3b      	ldr	r2, [pc, #236]	@ (8008814 <DMA_CalcBaseAndBitshift+0x12c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d031      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a39      	ldr	r2, [pc, #228]	@ (8008818 <DMA_CalcBaseAndBitshift+0x130>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d02c      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a38      	ldr	r2, [pc, #224]	@ (800881c <DMA_CalcBaseAndBitshift+0x134>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d027      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a36      	ldr	r2, [pc, #216]	@ (8008820 <DMA_CalcBaseAndBitshift+0x138>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d022      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a35      	ldr	r2, [pc, #212]	@ (8008824 <DMA_CalcBaseAndBitshift+0x13c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d01d      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a33      	ldr	r2, [pc, #204]	@ (8008828 <DMA_CalcBaseAndBitshift+0x140>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d018      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a32      	ldr	r2, [pc, #200]	@ (800882c <DMA_CalcBaseAndBitshift+0x144>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d013      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a30      	ldr	r2, [pc, #192]	@ (8008830 <DMA_CalcBaseAndBitshift+0x148>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00e      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a2f      	ldr	r2, [pc, #188]	@ (8008834 <DMA_CalcBaseAndBitshift+0x14c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d009      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a2d      	ldr	r2, [pc, #180]	@ (8008838 <DMA_CalcBaseAndBitshift+0x150>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d004      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a2c      	ldr	r2, [pc, #176]	@ (800883c <DMA_CalcBaseAndBitshift+0x154>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d101      	bne.n	8008794 <DMA_CalcBaseAndBitshift+0xac>
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <DMA_CalcBaseAndBitshift+0xae>
 8008794:	2300      	movs	r3, #0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d024      	beq.n	80087e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	3b10      	subs	r3, #16
 80087a2:	4a27      	ldr	r2, [pc, #156]	@ (8008840 <DMA_CalcBaseAndBitshift+0x158>)
 80087a4:	fba2 2303 	umull	r2, r3, r2, r3
 80087a8:	091b      	lsrs	r3, r3, #4
 80087aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	4a24      	ldr	r2, [pc, #144]	@ (8008844 <DMA_CalcBaseAndBitshift+0x15c>)
 80087b4:	5cd3      	ldrb	r3, [r2, r3]
 80087b6:	461a      	mov	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d908      	bls.n	80087d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008848 <DMA_CalcBaseAndBitshift+0x160>)
 80087ca:	4013      	ands	r3, r2
 80087cc:	1d1a      	adds	r2, r3, #4
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80087d2:	e00d      	b.n	80087f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	4b1b      	ldr	r3, [pc, #108]	@ (8008848 <DMA_CalcBaseAndBitshift+0x160>)
 80087dc:	4013      	ands	r3, r2
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80087e2:	e005      	b.n	80087f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	40020010 	.word	0x40020010
 8008804:	40020028 	.word	0x40020028
 8008808:	40020040 	.word	0x40020040
 800880c:	40020058 	.word	0x40020058
 8008810:	40020070 	.word	0x40020070
 8008814:	40020088 	.word	0x40020088
 8008818:	400200a0 	.word	0x400200a0
 800881c:	400200b8 	.word	0x400200b8
 8008820:	40020410 	.word	0x40020410
 8008824:	40020428 	.word	0x40020428
 8008828:	40020440 	.word	0x40020440
 800882c:	40020458 	.word	0x40020458
 8008830:	40020470 	.word	0x40020470
 8008834:	40020488 	.word	0x40020488
 8008838:	400204a0 	.word	0x400204a0
 800883c:	400204b8 	.word	0x400204b8
 8008840:	aaaaaaab 	.word	0xaaaaaaab
 8008844:	08015440 	.word	0x08015440
 8008848:	fffffc00 	.word	0xfffffc00

0800884c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d120      	bne.n	80088a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008864:	2b03      	cmp	r3, #3
 8008866:	d858      	bhi.n	800891a <DMA_CheckFifoParam+0xce>
 8008868:	a201      	add	r2, pc, #4	@ (adr r2, 8008870 <DMA_CheckFifoParam+0x24>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	08008881 	.word	0x08008881
 8008874:	08008893 	.word	0x08008893
 8008878:	08008881 	.word	0x08008881
 800887c:	0800891b 	.word	0x0800891b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d048      	beq.n	800891e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008890:	e045      	b.n	800891e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008896:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800889a:	d142      	bne.n	8008922 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088a0:	e03f      	b.n	8008922 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088aa:	d123      	bne.n	80088f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d838      	bhi.n	8008926 <DMA_CheckFifoParam+0xda>
 80088b4:	a201      	add	r2, pc, #4	@ (adr r2, 80088bc <DMA_CheckFifoParam+0x70>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	080088cd 	.word	0x080088cd
 80088c0:	080088d3 	.word	0x080088d3
 80088c4:	080088cd 	.word	0x080088cd
 80088c8:	080088e5 	.word	0x080088e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	73fb      	strb	r3, [r7, #15]
        break;
 80088d0:	e030      	b.n	8008934 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d025      	beq.n	800892a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088e2:	e022      	b.n	800892a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80088ec:	d11f      	bne.n	800892e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088f2:	e01c      	b.n	800892e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d902      	bls.n	8008902 <DMA_CheckFifoParam+0xb6>
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d003      	beq.n	8008908 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008900:	e018      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	73fb      	strb	r3, [r7, #15]
        break;
 8008906:	e015      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00e      	beq.n	8008932 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
    break;
 8008918:	e00b      	b.n	8008932 <DMA_CheckFifoParam+0xe6>
        break;
 800891a:	bf00      	nop
 800891c:	e00a      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        break;
 800891e:	bf00      	nop
 8008920:	e008      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        break;
 8008922:	bf00      	nop
 8008924:	e006      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        break;
 8008926:	bf00      	nop
 8008928:	e004      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        break;
 800892a:	bf00      	nop
 800892c:	e002      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        break;
 800892e:	bf00      	nop
 8008930:	e000      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
    break;
 8008932:	bf00      	nop
    }
  }

  return status;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop

08008944 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a38      	ldr	r2, [pc, #224]	@ (8008a38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d022      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a36      	ldr	r2, [pc, #216]	@ (8008a3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01d      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a35      	ldr	r2, [pc, #212]	@ (8008a40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d018      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a33      	ldr	r2, [pc, #204]	@ (8008a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d013      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a32      	ldr	r2, [pc, #200]	@ (8008a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00e      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a30      	ldr	r2, [pc, #192]	@ (8008a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d009      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a2f      	ldr	r2, [pc, #188]	@ (8008a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a2d      	ldr	r2, [pc, #180]	@ (8008a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d101      	bne.n	80089a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80089a6:	2300      	movs	r3, #0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01a      	beq.n	80089e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	3b08      	subs	r3, #8
 80089b4:	4a28      	ldr	r2, [pc, #160]	@ (8008a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80089b6:	fba2 2303 	umull	r2, r3, r2, r3
 80089ba:	091b      	lsrs	r3, r3, #4
 80089bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4b26      	ldr	r3, [pc, #152]	@ (8008a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	461a      	mov	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a24      	ldr	r2, [pc, #144]	@ (8008a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80089d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f003 031f 	and.w	r3, r3, #31
 80089d8:	2201      	movs	r2, #1
 80089da:	409a      	lsls	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80089e0:	e024      	b.n	8008a2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	3b10      	subs	r3, #16
 80089ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80089ec:	fba2 2303 	umull	r2, r3, r2, r3
 80089f0:	091b      	lsrs	r3, r3, #4
 80089f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d806      	bhi.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4a1b      	ldr	r2, [pc, #108]	@ (8008a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d902      	bls.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3308      	adds	r3, #8
 8008a08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	4b18      	ldr	r3, [pc, #96]	@ (8008a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	461a      	mov	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a16      	ldr	r2, [pc, #88]	@ (8008a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008a1c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f003 031f 	and.w	r3, r3, #31
 8008a24:	2201      	movs	r2, #1
 8008a26:	409a      	lsls	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008a2c:	bf00      	nop
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	58025408 	.word	0x58025408
 8008a3c:	5802541c 	.word	0x5802541c
 8008a40:	58025430 	.word	0x58025430
 8008a44:	58025444 	.word	0x58025444
 8008a48:	58025458 	.word	0x58025458
 8008a4c:	5802546c 	.word	0x5802546c
 8008a50:	58025480 	.word	0x58025480
 8008a54:	58025494 	.word	0x58025494
 8008a58:	cccccccd 	.word	0xcccccccd
 8008a5c:	16009600 	.word	0x16009600
 8008a60:	58025880 	.word	0x58025880
 8008a64:	aaaaaaab 	.word	0xaaaaaaab
 8008a68:	400204b8 	.word	0x400204b8
 8008a6c:	4002040f 	.word	0x4002040f
 8008a70:	10008200 	.word	0x10008200
 8008a74:	40020880 	.word	0x40020880

08008a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d04a      	beq.n	8008b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d847      	bhi.n	8008b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a25      	ldr	r2, [pc, #148]	@ (8008b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d022      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a24      	ldr	r2, [pc, #144]	@ (8008b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d01d      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a22      	ldr	r2, [pc, #136]	@ (8008b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d018      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a21      	ldr	r2, [pc, #132]	@ (8008b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d013      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8008b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00e      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a1e      	ldr	r2, [pc, #120]	@ (8008b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d009      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8008b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a1b      	ldr	r2, [pc, #108]	@ (8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d101      	bne.n	8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e000      	b.n	8008aea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	4b17      	ldr	r3, [pc, #92]	@ (8008b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	461a      	mov	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a15      	ldr	r2, [pc, #84]	@ (8008b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008b00:	671a      	str	r2, [r3, #112]	@ 0x70
 8008b02:	e009      	b.n	8008b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	4b14      	ldr	r3, [pc, #80]	@ (8008b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008b08:	4413      	add	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a11      	ldr	r2, [pc, #68]	@ (8008b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008b16:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	409a      	lsls	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008b24:	bf00      	nop
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	58025408 	.word	0x58025408
 8008b34:	5802541c 	.word	0x5802541c
 8008b38:	58025430 	.word	0x58025430
 8008b3c:	58025444 	.word	0x58025444
 8008b40:	58025458 	.word	0x58025458
 8008b44:	5802546c 	.word	0x5802546c
 8008b48:	58025480 	.word	0x58025480
 8008b4c:	58025494 	.word	0x58025494
 8008b50:	1600963f 	.word	0x1600963f
 8008b54:	58025940 	.word	0x58025940
 8008b58:	1000823f 	.word	0x1000823f
 8008b5c:	40020940 	.word	0x40020940

08008b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b089      	sub	sp, #36	@ 0x24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b6e:	4b86      	ldr	r3, [pc, #536]	@ (8008d88 <HAL_GPIO_Init+0x228>)
 8008b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b72:	e18c      	b.n	8008e8e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	2101      	movs	r1, #1
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b80:	4013      	ands	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 817e 	beq.w	8008e88 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d005      	beq.n	8008ba4 <HAL_GPIO_Init+0x44>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f003 0303 	and.w	r3, r3, #3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d130      	bne.n	8008c06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	2203      	movs	r2, #3
 8008bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb4:	43db      	mvns	r3, r3
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bda:	2201      	movs	r2, #1
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	43db      	mvns	r3, r3
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	4013      	ands	r3, r2
 8008be8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	091b      	lsrs	r3, r3, #4
 8008bf0:	f003 0201 	and.w	r2, r3, #1
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d017      	beq.n	8008c42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	2203      	movs	r2, #3
 8008c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c22:	43db      	mvns	r3, r3
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	4013      	ands	r3, r2
 8008c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	fa02 f303 	lsl.w	r3, r2, r3
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d123      	bne.n	8008c96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	08da      	lsrs	r2, r3, #3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3208      	adds	r2, #8
 8008c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	220f      	movs	r2, #15
 8008c66:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	691a      	ldr	r2, [r3, #16]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	08da      	lsrs	r2, r3, #3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3208      	adds	r2, #8
 8008c90:	69b9      	ldr	r1, [r7, #24]
 8008c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	2203      	movs	r2, #3
 8008ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca6:	43db      	mvns	r3, r3
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	4013      	ands	r3, r2
 8008cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f003 0203 	and.w	r2, r3, #3
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80d8 	beq.w	8008e88 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8008d8c <HAL_GPIO_Init+0x22c>)
 8008cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008cde:	4a2b      	ldr	r2, [pc, #172]	@ (8008d8c <HAL_GPIO_Init+0x22c>)
 8008ce0:	f043 0302 	orr.w	r3, r3, #2
 8008ce4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008ce8:	4b28      	ldr	r3, [pc, #160]	@ (8008d8c <HAL_GPIO_Init+0x22c>)
 8008cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cf6:	4a26      	ldr	r2, [pc, #152]	@ (8008d90 <HAL_GPIO_Init+0x230>)
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	089b      	lsrs	r3, r3, #2
 8008cfc:	3302      	adds	r3, #2
 8008cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	220f      	movs	r2, #15
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	43db      	mvns	r3, r3
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	4013      	ands	r3, r2
 8008d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008d94 <HAL_GPIO_Init+0x234>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d04a      	beq.n	8008db8 <HAL_GPIO_Init+0x258>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a1c      	ldr	r2, [pc, #112]	@ (8008d98 <HAL_GPIO_Init+0x238>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d02b      	beq.n	8008d82 <HAL_GPIO_Init+0x222>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8008d9c <HAL_GPIO_Init+0x23c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d025      	beq.n	8008d7e <HAL_GPIO_Init+0x21e>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a1a      	ldr	r2, [pc, #104]	@ (8008da0 <HAL_GPIO_Init+0x240>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d01f      	beq.n	8008d7a <HAL_GPIO_Init+0x21a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a19      	ldr	r2, [pc, #100]	@ (8008da4 <HAL_GPIO_Init+0x244>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d019      	beq.n	8008d76 <HAL_GPIO_Init+0x216>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a18      	ldr	r2, [pc, #96]	@ (8008da8 <HAL_GPIO_Init+0x248>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d013      	beq.n	8008d72 <HAL_GPIO_Init+0x212>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a17      	ldr	r2, [pc, #92]	@ (8008dac <HAL_GPIO_Init+0x24c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00d      	beq.n	8008d6e <HAL_GPIO_Init+0x20e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a16      	ldr	r2, [pc, #88]	@ (8008db0 <HAL_GPIO_Init+0x250>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d007      	beq.n	8008d6a <HAL_GPIO_Init+0x20a>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a15      	ldr	r2, [pc, #84]	@ (8008db4 <HAL_GPIO_Init+0x254>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d101      	bne.n	8008d66 <HAL_GPIO_Init+0x206>
 8008d62:	2309      	movs	r3, #9
 8008d64:	e029      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d66:	230a      	movs	r3, #10
 8008d68:	e027      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d6a:	2307      	movs	r3, #7
 8008d6c:	e025      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d6e:	2306      	movs	r3, #6
 8008d70:	e023      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d72:	2305      	movs	r3, #5
 8008d74:	e021      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d76:	2304      	movs	r3, #4
 8008d78:	e01f      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e01d      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	e01b      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e019      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d86:	bf00      	nop
 8008d88:	58000080 	.word	0x58000080
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	58000400 	.word	0x58000400
 8008d94:	58020000 	.word	0x58020000
 8008d98:	58020400 	.word	0x58020400
 8008d9c:	58020800 	.word	0x58020800
 8008da0:	58020c00 	.word	0x58020c00
 8008da4:	58021000 	.word	0x58021000
 8008da8:	58021400 	.word	0x58021400
 8008dac:	58021800 	.word	0x58021800
 8008db0:	58021c00 	.word	0x58021c00
 8008db4:	58022400 	.word	0x58022400
 8008db8:	2300      	movs	r3, #0
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	f002 0203 	and.w	r2, r2, #3
 8008dc0:	0092      	lsls	r2, r2, #2
 8008dc2:	4093      	lsls	r3, r2
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008dca:	4938      	ldr	r1, [pc, #224]	@ (8008eac <HAL_GPIO_Init+0x34c>)
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	089b      	lsrs	r3, r3, #2
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	43db      	mvns	r3, r3
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	4013      	ands	r3, r2
 8008de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008dfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	43db      	mvns	r3, r3
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	4013      	ands	r3, r2
 8008e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d003      	beq.n	8008e2c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008e24:	69ba      	ldr	r2, [r7, #24]
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	43db      	mvns	r3, r3
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	4013      	ands	r3, r2
 8008e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	43db      	mvns	r3, r3
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	fa22 f303 	lsr.w	r3, r2, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f47f ae6b 	bne.w	8008b74 <HAL_GPIO_Init+0x14>
  }
}
 8008e9e:	bf00      	nop
 8008ea0:	bf00      	nop
 8008ea2:	3724      	adds	r7, #36	@ 0x24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	58000400 	.word	0x58000400

08008eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	807b      	strh	r3, [r7, #2]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ec0:	787b      	ldrb	r3, [r7, #1]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ec6:	887a      	ldrh	r2, [r7, #2]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008ecc:	e003      	b.n	8008ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008ece:	887b      	ldrh	r3, [r7, #2]
 8008ed0:	041a      	lsls	r2, r3, #16
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	619a      	str	r2, [r3, #24]
}
 8008ed6:	bf00      	nop
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
	...

08008ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e08b      	b.n	800900e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d106      	bne.n	8008f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7f9 fe1a 	bl	8002b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2224      	movs	r2, #36	@ 0x24
 8008f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f022 0201 	bic.w	r2, r2, #1
 8008f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008f34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d107      	bne.n	8008f5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689a      	ldr	r2, [r3, #8]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f5a:	609a      	str	r2, [r3, #8]
 8008f5c:	e006      	b.n	8008f6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689a      	ldr	r2, [r3, #8]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008f6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d108      	bne.n	8008f86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f82:	605a      	str	r2, [r3, #4]
 8008f84:	e007      	b.n	8008f96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6859      	ldr	r1, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8009018 <HAL_I2C_Init+0x134>)
 8008fa2:	430b      	orrs	r3, r1
 8008fa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008fb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	691a      	ldr	r2, [r3, #16]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	69d9      	ldr	r1, [r3, #28]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a1a      	ldr	r2, [r3, #32]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	02008000 	.word	0x02008000

0800901c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b20      	cmp	r3, #32
 8009030:	d138      	bne.n	80090a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009038:	2b01      	cmp	r3, #1
 800903a:	d101      	bne.n	8009040 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800903c:	2302      	movs	r3, #2
 800903e:	e032      	b.n	80090a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2224      	movs	r2, #36	@ 0x24
 800904c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f022 0201 	bic.w	r2, r2, #1
 800905e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800906e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6819      	ldr	r1, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0201 	orr.w	r2, r2, #1
 800908e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2220      	movs	r2, #32
 8009094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	e000      	b.n	80090a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80090a4:	2302      	movs	r3, #2
  }
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	d139      	bne.n	800913c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e033      	b.n	800913e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2224      	movs	r2, #36	@ 0x24
 80090e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 0201 	bic.w	r2, r2, #1
 80090f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009104:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0201 	orr.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2220      	movs	r2, #32
 800912c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	e000      	b.n	800913e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800913c:	2302      	movs	r3, #2
  }
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
	...

0800914c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009154:	4b19      	ldr	r3, [pc, #100]	@ (80091bc <HAL_PWREx_ConfigSupply+0x70>)
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b04      	cmp	r3, #4
 800915e:	d00a      	beq.n	8009176 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009160:	4b16      	ldr	r3, [pc, #88]	@ (80091bc <HAL_PWREx_ConfigSupply+0x70>)
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f003 0307 	and.w	r3, r3, #7
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	429a      	cmp	r2, r3
 800916c:	d001      	beq.n	8009172 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e01f      	b.n	80091b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	e01d      	b.n	80091b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009176:	4b11      	ldr	r3, [pc, #68]	@ (80091bc <HAL_PWREx_ConfigSupply+0x70>)
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f023 0207 	bic.w	r2, r3, #7
 800917e:	490f      	ldr	r1, [pc, #60]	@ (80091bc <HAL_PWREx_ConfigSupply+0x70>)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4313      	orrs	r3, r2
 8009184:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009186:	f7fa fd05 	bl	8003b94 <HAL_GetTick>
 800918a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800918c:	e009      	b.n	80091a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800918e:	f7fa fd01 	bl	8003b94 <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800919c:	d901      	bls.n	80091a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e007      	b.n	80091b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80091a2:	4b06      	ldr	r3, [pc, #24]	@ (80091bc <HAL_PWREx_ConfigSupply+0x70>)
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ae:	d1ee      	bne.n	800918e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	58024800 	.word	0x58024800

080091c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08c      	sub	sp, #48	@ 0x30
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e3c8      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 8087 	beq.w	80092ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091e0:	4b88      	ldr	r3, [pc, #544]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80091ea:	4b86      	ldr	r3, [pc, #536]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 80091ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80091f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f2:	2b10      	cmp	r3, #16
 80091f4:	d007      	beq.n	8009206 <HAL_RCC_OscConfig+0x46>
 80091f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f8:	2b18      	cmp	r3, #24
 80091fa:	d110      	bne.n	800921e <HAL_RCC_OscConfig+0x5e>
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	f003 0303 	and.w	r3, r3, #3
 8009202:	2b02      	cmp	r3, #2
 8009204:	d10b      	bne.n	800921e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009206:	4b7f      	ldr	r3, [pc, #508]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d06c      	beq.n	80092ec <HAL_RCC_OscConfig+0x12c>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d168      	bne.n	80092ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e3a2      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009226:	d106      	bne.n	8009236 <HAL_RCC_OscConfig+0x76>
 8009228:	4b76      	ldr	r3, [pc, #472]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a75      	ldr	r2, [pc, #468]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 800922e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	e02e      	b.n	8009294 <HAL_RCC_OscConfig+0xd4>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10c      	bne.n	8009258 <HAL_RCC_OscConfig+0x98>
 800923e:	4b71      	ldr	r3, [pc, #452]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a70      	ldr	r2, [pc, #448]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009248:	6013      	str	r3, [r2, #0]
 800924a:	4b6e      	ldr	r3, [pc, #440]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a6d      	ldr	r2, [pc, #436]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	e01d      	b.n	8009294 <HAL_RCC_OscConfig+0xd4>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009260:	d10c      	bne.n	800927c <HAL_RCC_OscConfig+0xbc>
 8009262:	4b68      	ldr	r3, [pc, #416]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a67      	ldr	r2, [pc, #412]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800926c:	6013      	str	r3, [r2, #0]
 800926e:	4b65      	ldr	r3, [pc, #404]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a64      	ldr	r2, [pc, #400]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009278:	6013      	str	r3, [r2, #0]
 800927a:	e00b      	b.n	8009294 <HAL_RCC_OscConfig+0xd4>
 800927c:	4b61      	ldr	r3, [pc, #388]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a60      	ldr	r2, [pc, #384]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009286:	6013      	str	r3, [r2, #0]
 8009288:	4b5e      	ldr	r3, [pc, #376]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a5d      	ldr	r2, [pc, #372]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 800928e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d013      	beq.n	80092c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800929c:	f7fa fc7a 	bl	8003b94 <HAL_GetTick>
 80092a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092a2:	e008      	b.n	80092b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092a4:	f7fa fc76 	bl	8003b94 <HAL_GetTick>
 80092a8:	4602      	mov	r2, r0
 80092aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	2b64      	cmp	r3, #100	@ 0x64
 80092b0:	d901      	bls.n	80092b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e356      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092b6:	4b53      	ldr	r3, [pc, #332]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0f0      	beq.n	80092a4 <HAL_RCC_OscConfig+0xe4>
 80092c2:	e014      	b.n	80092ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c4:	f7fa fc66 	bl	8003b94 <HAL_GetTick>
 80092c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80092ca:	e008      	b.n	80092de <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092cc:	f7fa fc62 	bl	8003b94 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b64      	cmp	r3, #100	@ 0x64
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e342      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80092de:	4b49      	ldr	r3, [pc, #292]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1f0      	bne.n	80092cc <HAL_RCC_OscConfig+0x10c>
 80092ea:	e000      	b.n	80092ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 808c 	beq.w	8009414 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092fc:	4b41      	ldr	r3, [pc, #260]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009304:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009306:	4b3f      	ldr	r3, [pc, #252]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800930a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d007      	beq.n	8009322 <HAL_RCC_OscConfig+0x162>
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	2b18      	cmp	r3, #24
 8009316:	d137      	bne.n	8009388 <HAL_RCC_OscConfig+0x1c8>
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	f003 0303 	and.w	r3, r3, #3
 800931e:	2b00      	cmp	r3, #0
 8009320:	d132      	bne.n	8009388 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009322:	4b38      	ldr	r3, [pc, #224]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0304 	and.w	r3, r3, #4
 800932a:	2b00      	cmp	r3, #0
 800932c:	d005      	beq.n	800933a <HAL_RCC_OscConfig+0x17a>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e314      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800933a:	4b32      	ldr	r3, [pc, #200]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f023 0219 	bic.w	r2, r3, #25
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	492f      	ldr	r1, [pc, #188]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009348:	4313      	orrs	r3, r2
 800934a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800934c:	f7fa fc22 	bl	8003b94 <HAL_GetTick>
 8009350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009352:	e008      	b.n	8009366 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009354:	f7fa fc1e 	bl	8003b94 <HAL_GetTick>
 8009358:	4602      	mov	r2, r0
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	2b02      	cmp	r3, #2
 8009360:	d901      	bls.n	8009366 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e2fe      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009366:	4b27      	ldr	r3, [pc, #156]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0f0      	beq.n	8009354 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009372:	4b24      	ldr	r3, [pc, #144]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	061b      	lsls	r3, r3, #24
 8009380:	4920      	ldr	r1, [pc, #128]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009382:	4313      	orrs	r3, r2
 8009384:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009386:	e045      	b.n	8009414 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d026      	beq.n	80093de <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009390:	4b1c      	ldr	r3, [pc, #112]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f023 0219 	bic.w	r2, r3, #25
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	4919      	ldr	r1, [pc, #100]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a2:	f7fa fbf7 	bl	8003b94 <HAL_GetTick>
 80093a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093a8:	e008      	b.n	80093bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093aa:	f7fa fbf3 	bl	8003b94 <HAL_GetTick>
 80093ae:	4602      	mov	r2, r0
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d901      	bls.n	80093bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e2d3      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093bc:	4b11      	ldr	r3, [pc, #68]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0304 	and.w	r3, r3, #4
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0f0      	beq.n	80093aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	061b      	lsls	r3, r3, #24
 80093d6:	490b      	ldr	r1, [pc, #44]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	604b      	str	r3, [r1, #4]
 80093dc:	e01a      	b.n	8009414 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093de:	4b09      	ldr	r3, [pc, #36]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a08      	ldr	r2, [pc, #32]	@ (8009404 <HAL_RCC_OscConfig+0x244>)
 80093e4:	f023 0301 	bic.w	r3, r3, #1
 80093e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ea:	f7fa fbd3 	bl	8003b94 <HAL_GetTick>
 80093ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80093f0:	e00a      	b.n	8009408 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093f2:	f7fa fbcf 	bl	8003b94 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d903      	bls.n	8009408 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e2af      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
 8009404:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009408:	4b96      	ldr	r3, [pc, #600]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1ee      	bne.n	80093f2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 0310 	and.w	r3, r3, #16
 800941c:	2b00      	cmp	r3, #0
 800941e:	d06a      	beq.n	80094f6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009420:	4b90      	ldr	r3, [pc, #576]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009428:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800942a:	4b8e      	ldr	r3, [pc, #568]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 800942c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	2b08      	cmp	r3, #8
 8009434:	d007      	beq.n	8009446 <HAL_RCC_OscConfig+0x286>
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	2b18      	cmp	r3, #24
 800943a:	d11b      	bne.n	8009474 <HAL_RCC_OscConfig+0x2b4>
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f003 0303 	and.w	r3, r3, #3
 8009442:	2b01      	cmp	r3, #1
 8009444:	d116      	bne.n	8009474 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009446:	4b87      	ldr	r3, [pc, #540]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800944e:	2b00      	cmp	r3, #0
 8009450:	d005      	beq.n	800945e <HAL_RCC_OscConfig+0x29e>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	2b80      	cmp	r3, #128	@ 0x80
 8009458:	d001      	beq.n	800945e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e282      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800945e:	4b81      	ldr	r3, [pc, #516]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	061b      	lsls	r3, r3, #24
 800946c:	497d      	ldr	r1, [pc, #500]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 800946e:	4313      	orrs	r3, r2
 8009470:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009472:	e040      	b.n	80094f6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d023      	beq.n	80094c4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800947c:	4b79      	ldr	r3, [pc, #484]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a78      	ldr	r2, [pc, #480]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009488:	f7fa fb84 	bl	8003b94 <HAL_GetTick>
 800948c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800948e:	e008      	b.n	80094a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009490:	f7fa fb80 	bl	8003b94 <HAL_GetTick>
 8009494:	4602      	mov	r2, r0
 8009496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	2b02      	cmp	r3, #2
 800949c:	d901      	bls.n	80094a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e260      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094a2:	4b70      	ldr	r3, [pc, #448]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0f0      	beq.n	8009490 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094ae:	4b6d      	ldr	r3, [pc, #436]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	061b      	lsls	r3, r3, #24
 80094bc:	4969      	ldr	r1, [pc, #420]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	60cb      	str	r3, [r1, #12]
 80094c2:	e018      	b.n	80094f6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80094c4:	4b67      	ldr	r3, [pc, #412]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a66      	ldr	r2, [pc, #408]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 80094ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094d0:	f7fa fb60 	bl	8003b94 <HAL_GetTick>
 80094d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80094d6:	e008      	b.n	80094ea <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80094d8:	f7fa fb5c 	bl	8003b94 <HAL_GetTick>
 80094dc:	4602      	mov	r2, r0
 80094de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d901      	bls.n	80094ea <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e23c      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80094ea:	4b5e      	ldr	r3, [pc, #376]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1f0      	bne.n	80094d8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0308 	and.w	r3, r3, #8
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d036      	beq.n	8009570 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d019      	beq.n	800953e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800950a:	4b56      	ldr	r3, [pc, #344]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 800950c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800950e:	4a55      	ldr	r2, [pc, #340]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009510:	f043 0301 	orr.w	r3, r3, #1
 8009514:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009516:	f7fa fb3d 	bl	8003b94 <HAL_GetTick>
 800951a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800951c:	e008      	b.n	8009530 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800951e:	f7fa fb39 	bl	8003b94 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	2b02      	cmp	r3, #2
 800952a:	d901      	bls.n	8009530 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e219      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009530:	4b4c      	ldr	r3, [pc, #304]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0f0      	beq.n	800951e <HAL_RCC_OscConfig+0x35e>
 800953c:	e018      	b.n	8009570 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800953e:	4b49      	ldr	r3, [pc, #292]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009542:	4a48      	ldr	r2, [pc, #288]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009544:	f023 0301 	bic.w	r3, r3, #1
 8009548:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800954a:	f7fa fb23 	bl	8003b94 <HAL_GetTick>
 800954e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009550:	e008      	b.n	8009564 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009552:	f7fa fb1f 	bl	8003b94 <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	2b02      	cmp	r3, #2
 800955e:	d901      	bls.n	8009564 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e1ff      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009564:	4b3f      	ldr	r3, [pc, #252]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1f0      	bne.n	8009552 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0320 	and.w	r3, r3, #32
 8009578:	2b00      	cmp	r3, #0
 800957a:	d036      	beq.n	80095ea <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d019      	beq.n	80095b8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009584:	4b37      	ldr	r3, [pc, #220]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a36      	ldr	r2, [pc, #216]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 800958a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800958e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009590:	f7fa fb00 	bl	8003b94 <HAL_GetTick>
 8009594:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009596:	e008      	b.n	80095aa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009598:	f7fa fafc 	bl	8003b94 <HAL_GetTick>
 800959c:	4602      	mov	r2, r0
 800959e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d901      	bls.n	80095aa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e1dc      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095aa:	4b2e      	ldr	r3, [pc, #184]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0f0      	beq.n	8009598 <HAL_RCC_OscConfig+0x3d8>
 80095b6:	e018      	b.n	80095ea <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80095b8:	4b2a      	ldr	r3, [pc, #168]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a29      	ldr	r2, [pc, #164]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 80095be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80095c4:	f7fa fae6 	bl	8003b94 <HAL_GetTick>
 80095c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80095ca:	e008      	b.n	80095de <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095cc:	f7fa fae2 	bl	8003b94 <HAL_GetTick>
 80095d0:	4602      	mov	r2, r0
 80095d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d901      	bls.n	80095de <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80095da:	2303      	movs	r3, #3
 80095dc:	e1c2      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80095de:	4b21      	ldr	r3, [pc, #132]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1f0      	bne.n	80095cc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0304 	and.w	r3, r3, #4
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 8086 	beq.w	8009704 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80095f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009668 <HAL_RCC_OscConfig+0x4a8>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009668 <HAL_RCC_OscConfig+0x4a8>)
 80095fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009602:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009604:	f7fa fac6 	bl	8003b94 <HAL_GetTick>
 8009608:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800960a:	e008      	b.n	800961e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800960c:	f7fa fac2 	bl	8003b94 <HAL_GetTick>
 8009610:	4602      	mov	r2, r0
 8009612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	2b64      	cmp	r3, #100	@ 0x64
 8009618:	d901      	bls.n	800961e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	e1a2      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800961e:	4b12      	ldr	r3, [pc, #72]	@ (8009668 <HAL_RCC_OscConfig+0x4a8>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0f0      	beq.n	800960c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d106      	bne.n	8009640 <HAL_RCC_OscConfig+0x480>
 8009632:	4b0c      	ldr	r3, [pc, #48]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009636:	4a0b      	ldr	r2, [pc, #44]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009638:	f043 0301 	orr.w	r3, r3, #1
 800963c:	6713      	str	r3, [r2, #112]	@ 0x70
 800963e:	e032      	b.n	80096a6 <HAL_RCC_OscConfig+0x4e6>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d111      	bne.n	800966c <HAL_RCC_OscConfig+0x4ac>
 8009648:	4b06      	ldr	r3, [pc, #24]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 800964a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800964c:	4a05      	ldr	r2, [pc, #20]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 800964e:	f023 0301 	bic.w	r3, r3, #1
 8009652:	6713      	str	r3, [r2, #112]	@ 0x70
 8009654:	4b03      	ldr	r3, [pc, #12]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 8009656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009658:	4a02      	ldr	r2, [pc, #8]	@ (8009664 <HAL_RCC_OscConfig+0x4a4>)
 800965a:	f023 0304 	bic.w	r3, r3, #4
 800965e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009660:	e021      	b.n	80096a6 <HAL_RCC_OscConfig+0x4e6>
 8009662:	bf00      	nop
 8009664:	58024400 	.word	0x58024400
 8009668:	58024800 	.word	0x58024800
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	2b05      	cmp	r3, #5
 8009672:	d10c      	bne.n	800968e <HAL_RCC_OscConfig+0x4ce>
 8009674:	4b83      	ldr	r3, [pc, #524]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009678:	4a82      	ldr	r2, [pc, #520]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 800967a:	f043 0304 	orr.w	r3, r3, #4
 800967e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009680:	4b80      	ldr	r3, [pc, #512]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009684:	4a7f      	ldr	r2, [pc, #508]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	6713      	str	r3, [r2, #112]	@ 0x70
 800968c:	e00b      	b.n	80096a6 <HAL_RCC_OscConfig+0x4e6>
 800968e:	4b7d      	ldr	r3, [pc, #500]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009692:	4a7c      	ldr	r2, [pc, #496]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009694:	f023 0301 	bic.w	r3, r3, #1
 8009698:	6713      	str	r3, [r2, #112]	@ 0x70
 800969a:	4b7a      	ldr	r3, [pc, #488]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 800969c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800969e:	4a79      	ldr	r2, [pc, #484]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80096a0:	f023 0304 	bic.w	r3, r3, #4
 80096a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d015      	beq.n	80096da <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096ae:	f7fa fa71 	bl	8003b94 <HAL_GetTick>
 80096b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096b4:	e00a      	b.n	80096cc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096b6:	f7fa fa6d 	bl	8003b94 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d901      	bls.n	80096cc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e14b      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096cc:	4b6d      	ldr	r3, [pc, #436]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80096ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0ee      	beq.n	80096b6 <HAL_RCC_OscConfig+0x4f6>
 80096d8:	e014      	b.n	8009704 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096da:	f7fa fa5b 	bl	8003b94 <HAL_GetTick>
 80096de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80096e0:	e00a      	b.n	80096f8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096e2:	f7fa fa57 	bl	8003b94 <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d901      	bls.n	80096f8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e135      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80096f8:	4b62      	ldr	r3, [pc, #392]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80096fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096fc:	f003 0302 	and.w	r3, r3, #2
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1ee      	bne.n	80096e2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 812a 	beq.w	8009962 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800970e:	4b5d      	ldr	r3, [pc, #372]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009716:	2b18      	cmp	r3, #24
 8009718:	f000 80ba 	beq.w	8009890 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009720:	2b02      	cmp	r3, #2
 8009722:	f040 8095 	bne.w	8009850 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009726:	4b57      	ldr	r3, [pc, #348]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a56      	ldr	r2, [pc, #344]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 800972c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009732:	f7fa fa2f 	bl	8003b94 <HAL_GetTick>
 8009736:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009738:	e008      	b.n	800974c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800973a:	f7fa fa2b 	bl	8003b94 <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	2b02      	cmp	r3, #2
 8009746:	d901      	bls.n	800974c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e10b      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800974c:	4b4d      	ldr	r3, [pc, #308]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1f0      	bne.n	800973a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009758:	4b4a      	ldr	r3, [pc, #296]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 800975a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800975c:	4b4a      	ldr	r3, [pc, #296]	@ (8009888 <HAL_RCC_OscConfig+0x6c8>)
 800975e:	4013      	ands	r3, r2
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009768:	0112      	lsls	r2, r2, #4
 800976a:	430a      	orrs	r2, r1
 800976c:	4945      	ldr	r1, [pc, #276]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 800976e:	4313      	orrs	r3, r2
 8009770:	628b      	str	r3, [r1, #40]	@ 0x28
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009776:	3b01      	subs	r3, #1
 8009778:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009780:	3b01      	subs	r3, #1
 8009782:	025b      	lsls	r3, r3, #9
 8009784:	b29b      	uxth	r3, r3
 8009786:	431a      	orrs	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800978c:	3b01      	subs	r3, #1
 800978e:	041b      	lsls	r3, r3, #16
 8009790:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009794:	431a      	orrs	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800979a:	3b01      	subs	r3, #1
 800979c:	061b      	lsls	r3, r3, #24
 800979e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80097a2:	4938      	ldr	r1, [pc, #224]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80097a8:	4b36      	ldr	r3, [pc, #216]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ac:	4a35      	ldr	r2, [pc, #212]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097ae:	f023 0301 	bic.w	r3, r3, #1
 80097b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80097b4:	4b33      	ldr	r3, [pc, #204]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097b8:	4b34      	ldr	r3, [pc, #208]	@ (800988c <HAL_RCC_OscConfig+0x6cc>)
 80097ba:	4013      	ands	r3, r2
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80097c0:	00d2      	lsls	r2, r2, #3
 80097c2:	4930      	ldr	r1, [pc, #192]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80097c8:	4b2e      	ldr	r3, [pc, #184]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097cc:	f023 020c 	bic.w	r2, r3, #12
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d4:	492b      	ldr	r1, [pc, #172]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097d6:	4313      	orrs	r3, r2
 80097d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80097da:	4b2a      	ldr	r3, [pc, #168]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097de:	f023 0202 	bic.w	r2, r3, #2
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097e6:	4927      	ldr	r1, [pc, #156]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097e8:	4313      	orrs	r3, r2
 80097ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80097ec:	4b25      	ldr	r3, [pc, #148]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f0:	4a24      	ldr	r2, [pc, #144]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f8:	4b22      	ldr	r3, [pc, #136]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fc:	4a21      	ldr	r2, [pc, #132]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 80097fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009804:	4b1f      	ldr	r3, [pc, #124]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009808:	4a1e      	ldr	r2, [pc, #120]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 800980a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800980e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009810:	4b1c      	ldr	r3, [pc, #112]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009814:	4a1b      	ldr	r2, [pc, #108]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009816:	f043 0301 	orr.w	r3, r3, #1
 800981a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800981c:	4b19      	ldr	r3, [pc, #100]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a18      	ldr	r2, [pc, #96]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009822:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009828:	f7fa f9b4 	bl	8003b94 <HAL_GetTick>
 800982c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800982e:	e008      	b.n	8009842 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009830:	f7fa f9b0 	bl	8003b94 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b02      	cmp	r3, #2
 800983c:	d901      	bls.n	8009842 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e090      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009842:	4b10      	ldr	r3, [pc, #64]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0f0      	beq.n	8009830 <HAL_RCC_OscConfig+0x670>
 800984e:	e088      	b.n	8009962 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009850:	4b0c      	ldr	r3, [pc, #48]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a0b      	ldr	r2, [pc, #44]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800985a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800985c:	f7fa f99a 	bl	8003b94 <HAL_GetTick>
 8009860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009862:	e008      	b.n	8009876 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009864:	f7fa f996 	bl	8003b94 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	2b02      	cmp	r3, #2
 8009870:	d901      	bls.n	8009876 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e076      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009876:	4b03      	ldr	r3, [pc, #12]	@ (8009884 <HAL_RCC_OscConfig+0x6c4>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1f0      	bne.n	8009864 <HAL_RCC_OscConfig+0x6a4>
 8009882:	e06e      	b.n	8009962 <HAL_RCC_OscConfig+0x7a2>
 8009884:	58024400 	.word	0x58024400
 8009888:	fffffc0c 	.word	0xfffffc0c
 800988c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009890:	4b36      	ldr	r3, [pc, #216]	@ (800996c <HAL_RCC_OscConfig+0x7ac>)
 8009892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009894:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009896:	4b35      	ldr	r3, [pc, #212]	@ (800996c <HAL_RCC_OscConfig+0x7ac>)
 8009898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800989a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d031      	beq.n	8009908 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f003 0203 	and.w	r2, r3, #3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d12a      	bne.n	8009908 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	091b      	lsrs	r3, r3, #4
 80098b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098be:	429a      	cmp	r2, r3
 80098c0:	d122      	bne.n	8009908 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d11a      	bne.n	8009908 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	0a5b      	lsrs	r3, r3, #9
 80098d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d111      	bne.n	8009908 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	0c1b      	lsrs	r3, r3, #16
 80098e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d108      	bne.n	8009908 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	0e1b      	lsrs	r3, r3, #24
 80098fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009902:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009904:	429a      	cmp	r2, r3
 8009906:	d001      	beq.n	800990c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e02b      	b.n	8009964 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800990c:	4b17      	ldr	r3, [pc, #92]	@ (800996c <HAL_RCC_OscConfig+0x7ac>)
 800990e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009910:	08db      	lsrs	r3, r3, #3
 8009912:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009916:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	429a      	cmp	r2, r3
 8009920:	d01f      	beq.n	8009962 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009922:	4b12      	ldr	r3, [pc, #72]	@ (800996c <HAL_RCC_OscConfig+0x7ac>)
 8009924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009926:	4a11      	ldr	r2, [pc, #68]	@ (800996c <HAL_RCC_OscConfig+0x7ac>)
 8009928:	f023 0301 	bic.w	r3, r3, #1
 800992c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800992e:	f7fa f931 	bl	8003b94 <HAL_GetTick>
 8009932:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009934:	bf00      	nop
 8009936:	f7fa f92d 	bl	8003b94 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993e:	4293      	cmp	r3, r2
 8009940:	d0f9      	beq.n	8009936 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009942:	4b0a      	ldr	r3, [pc, #40]	@ (800996c <HAL_RCC_OscConfig+0x7ac>)
 8009944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009946:	4b0a      	ldr	r3, [pc, #40]	@ (8009970 <HAL_RCC_OscConfig+0x7b0>)
 8009948:	4013      	ands	r3, r2
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800994e:	00d2      	lsls	r2, r2, #3
 8009950:	4906      	ldr	r1, [pc, #24]	@ (800996c <HAL_RCC_OscConfig+0x7ac>)
 8009952:	4313      	orrs	r3, r2
 8009954:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009956:	4b05      	ldr	r3, [pc, #20]	@ (800996c <HAL_RCC_OscConfig+0x7ac>)
 8009958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995a:	4a04      	ldr	r2, [pc, #16]	@ (800996c <HAL_RCC_OscConfig+0x7ac>)
 800995c:	f043 0301 	orr.w	r3, r3, #1
 8009960:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3730      	adds	r7, #48	@ 0x30
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	58024400 	.word	0x58024400
 8009970:	ffff0007 	.word	0xffff0007

08009974 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e19c      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009988:	4b8a      	ldr	r3, [pc, #552]	@ (8009bb4 <HAL_RCC_ClockConfig+0x240>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 030f 	and.w	r3, r3, #15
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	429a      	cmp	r2, r3
 8009994:	d910      	bls.n	80099b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009996:	4b87      	ldr	r3, [pc, #540]	@ (8009bb4 <HAL_RCC_ClockConfig+0x240>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f023 020f 	bic.w	r2, r3, #15
 800999e:	4985      	ldr	r1, [pc, #532]	@ (8009bb4 <HAL_RCC_ClockConfig+0x240>)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099a6:	4b83      	ldr	r3, [pc, #524]	@ (8009bb4 <HAL_RCC_ClockConfig+0x240>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 030f 	and.w	r3, r3, #15
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d001      	beq.n	80099b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e184      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 0304 	and.w	r3, r3, #4
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d010      	beq.n	80099e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	691a      	ldr	r2, [r3, #16]
 80099c8:	4b7b      	ldr	r3, [pc, #492]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d908      	bls.n	80099e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80099d4:	4b78      	ldr	r3, [pc, #480]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	4975      	ldr	r1, [pc, #468]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0308 	and.w	r3, r3, #8
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d010      	beq.n	8009a14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	695a      	ldr	r2, [r3, #20]
 80099f6:	4b70      	ldr	r3, [pc, #448]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d908      	bls.n	8009a14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a02:	4b6d      	ldr	r3, [pc, #436]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	496a      	ldr	r1, [pc, #424]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0310 	and.w	r3, r3, #16
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d010      	beq.n	8009a42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	699a      	ldr	r2, [r3, #24]
 8009a24:	4b64      	ldr	r3, [pc, #400]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d908      	bls.n	8009a42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a30:	4b61      	ldr	r3, [pc, #388]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009a32:	69db      	ldr	r3, [r3, #28]
 8009a34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	495e      	ldr	r1, [pc, #376]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0320 	and.w	r3, r3, #32
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d010      	beq.n	8009a70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	69da      	ldr	r2, [r3, #28]
 8009a52:	4b59      	ldr	r3, [pc, #356]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d908      	bls.n	8009a70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009a5e:	4b56      	ldr	r3, [pc, #344]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	69db      	ldr	r3, [r3, #28]
 8009a6a:	4953      	ldr	r1, [pc, #332]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 0302 	and.w	r3, r3, #2
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d010      	beq.n	8009a9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	4b4d      	ldr	r3, [pc, #308]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	f003 030f 	and.w	r3, r3, #15
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d908      	bls.n	8009a9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	f023 020f 	bic.w	r2, r3, #15
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	4947      	ldr	r1, [pc, #284]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d055      	beq.n	8009b56 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009aaa:	4b43      	ldr	r3, [pc, #268]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	4940      	ldr	r1, [pc, #256]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d107      	bne.n	8009ad4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d121      	bne.n	8009b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e0f6      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d107      	bne.n	8009aec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009adc:	4b36      	ldr	r3, [pc, #216]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d115      	bne.n	8009b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e0ea      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d107      	bne.n	8009b04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009af4:	4b30      	ldr	r3, [pc, #192]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d109      	bne.n	8009b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e0de      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b04:	4b2c      	ldr	r3, [pc, #176]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0304 	and.w	r3, r3, #4
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e0d6      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b14:	4b28      	ldr	r3, [pc, #160]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f023 0207 	bic.w	r2, r3, #7
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	4925      	ldr	r1, [pc, #148]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b26:	f7fa f835 	bl	8003b94 <HAL_GetTick>
 8009b2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b2c:	e00a      	b.n	8009b44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b2e:	f7fa f831 	bl	8003b94 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d901      	bls.n	8009b44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e0be      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b44:	4b1c      	ldr	r3, [pc, #112]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	00db      	lsls	r3, r3, #3
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d1eb      	bne.n	8009b2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d010      	beq.n	8009b84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68da      	ldr	r2, [r3, #12]
 8009b66:	4b14      	ldr	r3, [pc, #80]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	f003 030f 	and.w	r3, r3, #15
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d208      	bcs.n	8009b84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b72:	4b11      	ldr	r3, [pc, #68]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	f023 020f 	bic.w	r2, r3, #15
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	490e      	ldr	r1, [pc, #56]	@ (8009bb8 <HAL_RCC_ClockConfig+0x244>)
 8009b80:	4313      	orrs	r3, r2
 8009b82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009b84:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb4 <HAL_RCC_ClockConfig+0x240>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 030f 	and.w	r3, r3, #15
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d214      	bcs.n	8009bbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b92:	4b08      	ldr	r3, [pc, #32]	@ (8009bb4 <HAL_RCC_ClockConfig+0x240>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f023 020f 	bic.w	r2, r3, #15
 8009b9a:	4906      	ldr	r1, [pc, #24]	@ (8009bb4 <HAL_RCC_ClockConfig+0x240>)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ba2:	4b04      	ldr	r3, [pc, #16]	@ (8009bb4 <HAL_RCC_ClockConfig+0x240>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 030f 	and.w	r3, r3, #15
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d005      	beq.n	8009bbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e086      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x34e>
 8009bb4:	52002000 	.word	0x52002000
 8009bb8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 0304 	and.w	r3, r3, #4
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d010      	beq.n	8009bea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d208      	bcs.n	8009bea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	4939      	ldr	r1, [pc, #228]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0308 	and.w	r3, r3, #8
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d010      	beq.n	8009c18 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695a      	ldr	r2, [r3, #20]
 8009bfa:	4b34      	ldr	r3, [pc, #208]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d208      	bcs.n	8009c18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c06:	4b31      	ldr	r3, [pc, #196]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	492e      	ldr	r1, [pc, #184]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0310 	and.w	r3, r3, #16
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d010      	beq.n	8009c46 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	699a      	ldr	r2, [r3, #24]
 8009c28:	4b28      	ldr	r3, [pc, #160]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d208      	bcs.n	8009c46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c34:	4b25      	ldr	r3, [pc, #148]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	4922      	ldr	r1, [pc, #136]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d010      	beq.n	8009c74 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	69da      	ldr	r2, [r3, #28]
 8009c56:	4b1d      	ldr	r3, [pc, #116]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d208      	bcs.n	8009c74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009c62:	4b1a      	ldr	r3, [pc, #104]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	69db      	ldr	r3, [r3, #28]
 8009c6e:	4917      	ldr	r1, [pc, #92]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009c70:	4313      	orrs	r3, r2
 8009c72:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009c74:	f000 f834 	bl	8009ce0 <HAL_RCC_GetSysClockFreq>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	4b14      	ldr	r3, [pc, #80]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	0a1b      	lsrs	r3, r3, #8
 8009c80:	f003 030f 	and.w	r3, r3, #15
 8009c84:	4912      	ldr	r1, [pc, #72]	@ (8009cd0 <HAL_RCC_ClockConfig+0x35c>)
 8009c86:	5ccb      	ldrb	r3, [r1, r3]
 8009c88:	f003 031f 	and.w	r3, r3, #31
 8009c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c92:	4b0e      	ldr	r3, [pc, #56]	@ (8009ccc <HAL_RCC_ClockConfig+0x358>)
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	f003 030f 	and.w	r3, r3, #15
 8009c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8009cd0 <HAL_RCC_ClockConfig+0x35c>)
 8009c9c:	5cd3      	ldrb	r3, [r2, r3]
 8009c9e:	f003 031f 	and.w	r3, r3, #31
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8009cd4 <HAL_RCC_ClockConfig+0x360>)
 8009caa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cac:	4a0a      	ldr	r2, [pc, #40]	@ (8009cd8 <HAL_RCC_ClockConfig+0x364>)
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009cdc <HAL_RCC_ClockConfig+0x368>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7f9 ff22 	bl	8003b00 <HAL_InitTick>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	58024400 	.word	0x58024400
 8009cd0:	08015430 	.word	0x08015430
 8009cd4:	2400001c 	.word	0x2400001c
 8009cd8:	24000018 	.word	0x24000018
 8009cdc:	24000020 	.word	0x24000020

08009ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b089      	sub	sp, #36	@ 0x24
 8009ce4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ce6:	4bb3      	ldr	r3, [pc, #716]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009cee:	2b18      	cmp	r3, #24
 8009cf0:	f200 8155 	bhi.w	8009f9e <HAL_RCC_GetSysClockFreq+0x2be>
 8009cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8009cfc <HAL_RCC_GetSysClockFreq+0x1c>)
 8009cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfa:	bf00      	nop
 8009cfc:	08009d61 	.word	0x08009d61
 8009d00:	08009f9f 	.word	0x08009f9f
 8009d04:	08009f9f 	.word	0x08009f9f
 8009d08:	08009f9f 	.word	0x08009f9f
 8009d0c:	08009f9f 	.word	0x08009f9f
 8009d10:	08009f9f 	.word	0x08009f9f
 8009d14:	08009f9f 	.word	0x08009f9f
 8009d18:	08009f9f 	.word	0x08009f9f
 8009d1c:	08009d87 	.word	0x08009d87
 8009d20:	08009f9f 	.word	0x08009f9f
 8009d24:	08009f9f 	.word	0x08009f9f
 8009d28:	08009f9f 	.word	0x08009f9f
 8009d2c:	08009f9f 	.word	0x08009f9f
 8009d30:	08009f9f 	.word	0x08009f9f
 8009d34:	08009f9f 	.word	0x08009f9f
 8009d38:	08009f9f 	.word	0x08009f9f
 8009d3c:	08009d8d 	.word	0x08009d8d
 8009d40:	08009f9f 	.word	0x08009f9f
 8009d44:	08009f9f 	.word	0x08009f9f
 8009d48:	08009f9f 	.word	0x08009f9f
 8009d4c:	08009f9f 	.word	0x08009f9f
 8009d50:	08009f9f 	.word	0x08009f9f
 8009d54:	08009f9f 	.word	0x08009f9f
 8009d58:	08009f9f 	.word	0x08009f9f
 8009d5c:	08009d93 	.word	0x08009d93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d60:	4b94      	ldr	r3, [pc, #592]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0320 	and.w	r3, r3, #32
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d009      	beq.n	8009d80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d6c:	4b91      	ldr	r3, [pc, #580]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	08db      	lsrs	r3, r3, #3
 8009d72:	f003 0303 	and.w	r3, r3, #3
 8009d76:	4a90      	ldr	r2, [pc, #576]	@ (8009fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009d78:	fa22 f303 	lsr.w	r3, r2, r3
 8009d7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009d7e:	e111      	b.n	8009fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009d80:	4b8d      	ldr	r3, [pc, #564]	@ (8009fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009d82:	61bb      	str	r3, [r7, #24]
      break;
 8009d84:	e10e      	b.n	8009fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009d86:	4b8d      	ldr	r3, [pc, #564]	@ (8009fbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d88:	61bb      	str	r3, [r7, #24]
      break;
 8009d8a:	e10b      	b.n	8009fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009d8c:	4b8c      	ldr	r3, [pc, #560]	@ (8009fc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009d8e:	61bb      	str	r3, [r7, #24]
      break;
 8009d90:	e108      	b.n	8009fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d92:	4b88      	ldr	r3, [pc, #544]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009d9c:	4b85      	ldr	r3, [pc, #532]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da0:	091b      	lsrs	r3, r3, #4
 8009da2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009da6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009da8:	4b82      	ldr	r3, [pc, #520]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dac:	f003 0301 	and.w	r3, r3, #1
 8009db0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009db2:	4b80      	ldr	r3, [pc, #512]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009db6:	08db      	lsrs	r3, r3, #3
 8009db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	fb02 f303 	mul.w	r3, r2, r3
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f000 80e1 	beq.w	8009f98 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	f000 8083 	beq.w	8009ee4 <HAL_RCC_GetSysClockFreq+0x204>
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	f200 80a1 	bhi.w	8009f28 <HAL_RCC_GetSysClockFreq+0x248>
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <HAL_RCC_GetSysClockFreq+0x114>
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d056      	beq.n	8009ea0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009df2:	e099      	b.n	8009f28 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009df4:	4b6f      	ldr	r3, [pc, #444]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 0320 	and.w	r3, r3, #32
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d02d      	beq.n	8009e5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e00:	4b6c      	ldr	r3, [pc, #432]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	08db      	lsrs	r3, r3, #3
 8009e06:	f003 0303 	and.w	r3, r3, #3
 8009e0a:	4a6b      	ldr	r2, [pc, #428]	@ (8009fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	ee07 3a90 	vmov	s15, r3
 8009e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e2a:	4b62      	ldr	r3, [pc, #392]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e32:	ee07 3a90 	vmov	s15, r3
 8009e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e3e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009e5a:	e087      	b.n	8009f6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	ee07 3a90 	vmov	s15, r3
 8009e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e66:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009fc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e6e:	4b51      	ldr	r3, [pc, #324]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e76:	ee07 3a90 	vmov	s15, r3
 8009e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e82:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009e9e:	e065      	b.n	8009f6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	ee07 3a90 	vmov	s15, r3
 8009ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eaa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009fcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eb2:	4b40      	ldr	r3, [pc, #256]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eba:	ee07 3a90 	vmov	s15, r3
 8009ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ec6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ede:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009ee2:	e043      	b.n	8009f6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	ee07 3a90 	vmov	s15, r3
 8009eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009fd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f0a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009f26:	e021      	b.n	8009f6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009fcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f4e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009f6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009f6c:	4b11      	ldr	r3, [pc, #68]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f70:	0a5b      	lsrs	r3, r3, #9
 8009f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f76:	3301      	adds	r3, #1
 8009f78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	ee07 3a90 	vmov	s15, r3
 8009f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f90:	ee17 3a90 	vmov	r3, s15
 8009f94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009f96:	e005      	b.n	8009fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	61bb      	str	r3, [r7, #24]
      break;
 8009f9c:	e002      	b.n	8009fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009f9e:	4b07      	ldr	r3, [pc, #28]	@ (8009fbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009fa0:	61bb      	str	r3, [r7, #24]
      break;
 8009fa2:	bf00      	nop
  }

  return sysclockfreq;
 8009fa4:	69bb      	ldr	r3, [r7, #24]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3724      	adds	r7, #36	@ 0x24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	58024400 	.word	0x58024400
 8009fb8:	03d09000 	.word	0x03d09000
 8009fbc:	003d0900 	.word	0x003d0900
 8009fc0:	007a1200 	.word	0x007a1200
 8009fc4:	46000000 	.word	0x46000000
 8009fc8:	4c742400 	.word	0x4c742400
 8009fcc:	4a742400 	.word	0x4a742400
 8009fd0:	4af42400 	.word	0x4af42400

08009fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009fda:	f7ff fe81 	bl	8009ce0 <HAL_RCC_GetSysClockFreq>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	4b10      	ldr	r3, [pc, #64]	@ (800a024 <HAL_RCC_GetHCLKFreq+0x50>)
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	0a1b      	lsrs	r3, r3, #8
 8009fe6:	f003 030f 	and.w	r3, r3, #15
 8009fea:	490f      	ldr	r1, [pc, #60]	@ (800a028 <HAL_RCC_GetHCLKFreq+0x54>)
 8009fec:	5ccb      	ldrb	r3, [r1, r3]
 8009fee:	f003 031f 	and.w	r3, r3, #31
 8009ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ff8:	4b0a      	ldr	r3, [pc, #40]	@ (800a024 <HAL_RCC_GetHCLKFreq+0x50>)
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	f003 030f 	and.w	r3, r3, #15
 800a000:	4a09      	ldr	r2, [pc, #36]	@ (800a028 <HAL_RCC_GetHCLKFreq+0x54>)
 800a002:	5cd3      	ldrb	r3, [r2, r3]
 800a004:	f003 031f 	and.w	r3, r3, #31
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	fa22 f303 	lsr.w	r3, r2, r3
 800a00e:	4a07      	ldr	r2, [pc, #28]	@ (800a02c <HAL_RCC_GetHCLKFreq+0x58>)
 800a010:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a012:	4a07      	ldr	r2, [pc, #28]	@ (800a030 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a018:	4b04      	ldr	r3, [pc, #16]	@ (800a02c <HAL_RCC_GetHCLKFreq+0x58>)
 800a01a:	681b      	ldr	r3, [r3, #0]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	58024400 	.word	0x58024400
 800a028:	08015430 	.word	0x08015430
 800a02c:	2400001c 	.word	0x2400001c
 800a030:	24000018 	.word	0x24000018

0800a034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a038:	f7ff ffcc 	bl	8009fd4 <HAL_RCC_GetHCLKFreq>
 800a03c:	4602      	mov	r2, r0
 800a03e:	4b06      	ldr	r3, [pc, #24]	@ (800a058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	091b      	lsrs	r3, r3, #4
 800a044:	f003 0307 	and.w	r3, r3, #7
 800a048:	4904      	ldr	r1, [pc, #16]	@ (800a05c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a04a:	5ccb      	ldrb	r3, [r1, r3]
 800a04c:	f003 031f 	and.w	r3, r3, #31
 800a050:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a054:	4618      	mov	r0, r3
 800a056:	bd80      	pop	{r7, pc}
 800a058:	58024400 	.word	0x58024400
 800a05c:	08015430 	.word	0x08015430

0800a060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a064:	f7ff ffb6 	bl	8009fd4 <HAL_RCC_GetHCLKFreq>
 800a068:	4602      	mov	r2, r0
 800a06a:	4b06      	ldr	r3, [pc, #24]	@ (800a084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	0a1b      	lsrs	r3, r3, #8
 800a070:	f003 0307 	and.w	r3, r3, #7
 800a074:	4904      	ldr	r1, [pc, #16]	@ (800a088 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a076:	5ccb      	ldrb	r3, [r1, r3]
 800a078:	f003 031f 	and.w	r3, r3, #31
 800a07c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a080:	4618      	mov	r0, r3
 800a082:	bd80      	pop	{r7, pc}
 800a084:	58024400 	.word	0x58024400
 800a088:	08015430 	.word	0x08015430

0800a08c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a08c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a090:	b0c6      	sub	sp, #280	@ 0x118
 800a092:	af00      	add	r7, sp, #0
 800a094:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a098:	2300      	movs	r3, #0
 800a09a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a0b0:	2500      	movs	r5, #0
 800a0b2:	ea54 0305 	orrs.w	r3, r4, r5
 800a0b6:	d049      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a0c2:	d02f      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a0c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a0c8:	d828      	bhi.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a0ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0ce:	d01a      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a0d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0d4:	d822      	bhi.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a0da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0de:	d007      	beq.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a0e0:	e01c      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0e2:	4bab      	ldr	r3, [pc, #684]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e6:	4aaa      	ldr	r2, [pc, #680]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a0ee:	e01a      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	2102      	movs	r1, #2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f002 fa49 	bl	800c590 <RCCEx_PLL2_Config>
 800a0fe:	4603      	mov	r3, r0
 800a100:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a104:	e00f      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a10a:	3328      	adds	r3, #40	@ 0x28
 800a10c:	2102      	movs	r1, #2
 800a10e:	4618      	mov	r0, r3
 800a110:	f002 faf0 	bl	800c6f4 <RCCEx_PLL3_Config>
 800a114:	4603      	mov	r3, r0
 800a116:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a11a:	e004      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a122:	e000      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a124:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a126:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10a      	bne.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a12e:	4b98      	ldr	r3, [pc, #608]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a132:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a13a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a13c:	4a94      	ldr	r2, [pc, #592]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a13e:	430b      	orrs	r3, r1
 800a140:	6513      	str	r3, [r2, #80]	@ 0x50
 800a142:	e003      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a148:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a158:	f04f 0900 	mov.w	r9, #0
 800a15c:	ea58 0309 	orrs.w	r3, r8, r9
 800a160:	d047      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a168:	2b04      	cmp	r3, #4
 800a16a:	d82a      	bhi.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a16c:	a201      	add	r2, pc, #4	@ (adr r2, 800a174 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a172:	bf00      	nop
 800a174:	0800a189 	.word	0x0800a189
 800a178:	0800a197 	.word	0x0800a197
 800a17c:	0800a1ad 	.word	0x0800a1ad
 800a180:	0800a1cb 	.word	0x0800a1cb
 800a184:	0800a1cb 	.word	0x0800a1cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a188:	4b81      	ldr	r3, [pc, #516]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18c:	4a80      	ldr	r2, [pc, #512]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a18e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a194:	e01a      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a19a:	3308      	adds	r3, #8
 800a19c:	2100      	movs	r1, #0
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f002 f9f6 	bl	800c590 <RCCEx_PLL2_Config>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1aa:	e00f      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b0:	3328      	adds	r3, #40	@ 0x28
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f002 fa9d 	bl	800c6f4 <RCCEx_PLL3_Config>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1c0:	e004      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1c8:	e000      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a1ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1d4:	4b6e      	ldr	r3, [pc, #440]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1d8:	f023 0107 	bic.w	r1, r3, #7
 800a1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1e2:	4a6b      	ldr	r2, [pc, #428]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1e4:	430b      	orrs	r3, r1
 800a1e6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a1e8:	e003      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800a1fe:	f04f 0b00 	mov.w	fp, #0
 800a202:	ea5a 030b 	orrs.w	r3, sl, fp
 800a206:	d05b      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a20c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a210:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a214:	d03b      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a216:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a21a:	d834      	bhi.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a21c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a220:	d037      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a222:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a226:	d82e      	bhi.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a228:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a22c:	d033      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a22e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a232:	d828      	bhi.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a238:	d01a      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a23a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a23e:	d822      	bhi.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a244:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a248:	d007      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a24a:	e01c      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a24c:	4b50      	ldr	r3, [pc, #320]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a250:	4a4f      	ldr	r2, [pc, #316]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a258:	e01e      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a25e:	3308      	adds	r3, #8
 800a260:	2100      	movs	r1, #0
 800a262:	4618      	mov	r0, r3
 800a264:	f002 f994 	bl	800c590 <RCCEx_PLL2_Config>
 800a268:	4603      	mov	r3, r0
 800a26a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a26e:	e013      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a274:	3328      	adds	r3, #40	@ 0x28
 800a276:	2100      	movs	r1, #0
 800a278:	4618      	mov	r0, r3
 800a27a:	f002 fa3b 	bl	800c6f4 <RCCEx_PLL3_Config>
 800a27e:	4603      	mov	r3, r0
 800a280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a284:	e008      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a28c:	e004      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a28e:	bf00      	nop
 800a290:	e002      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a292:	bf00      	nop
 800a294:	e000      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a296:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10b      	bne.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a2a0:	4b3b      	ldr	r3, [pc, #236]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2a4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a2b0:	4a37      	ldr	r2, [pc, #220]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2b2:	430b      	orrs	r3, r1
 800a2b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2b6:	e003      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a2cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a2d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	d05d      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a2e8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a2ec:	d03b      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a2ee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a2f2:	d834      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a2f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2f8:	d037      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a2fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2fe:	d82e      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a300:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a304:	d033      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a306:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a30a:	d828      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a30c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a310:	d01a      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a312:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a316:	d822      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d003      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a31c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a320:	d007      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a322:	e01c      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a324:	4b1a      	ldr	r3, [pc, #104]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a328:	4a19      	ldr	r2, [pc, #100]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a32a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a32e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a330:	e01e      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a336:	3308      	adds	r3, #8
 800a338:	2100      	movs	r1, #0
 800a33a:	4618      	mov	r0, r3
 800a33c:	f002 f928 	bl	800c590 <RCCEx_PLL2_Config>
 800a340:	4603      	mov	r3, r0
 800a342:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a346:	e013      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a34c:	3328      	adds	r3, #40	@ 0x28
 800a34e:	2100      	movs	r1, #0
 800a350:	4618      	mov	r0, r3
 800a352:	f002 f9cf 	bl	800c6f4 <RCCEx_PLL3_Config>
 800a356:	4603      	mov	r3, r0
 800a358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a35c:	e008      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a364:	e004      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a366:	bf00      	nop
 800a368:	e002      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a36a:	bf00      	nop
 800a36c:	e000      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a36e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10d      	bne.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a378:	4b05      	ldr	r3, [pc, #20]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a37a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a37c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a384:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a388:	4a01      	ldr	r2, [pc, #4]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a38a:	430b      	orrs	r3, r1
 800a38c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a38e:	e005      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a394:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a398:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a3a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a3b2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	d03a      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3c2:	2b30      	cmp	r3, #48	@ 0x30
 800a3c4:	d01f      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a3c6:	2b30      	cmp	r3, #48	@ 0x30
 800a3c8:	d819      	bhi.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a3ca:	2b20      	cmp	r3, #32
 800a3cc:	d00c      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a3ce:	2b20      	cmp	r3, #32
 800a3d0:	d815      	bhi.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d019      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a3d6:	2b10      	cmp	r3, #16
 800a3d8:	d111      	bne.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3da:	4baa      	ldr	r3, [pc, #680]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3de:	4aa9      	ldr	r2, [pc, #676]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a3e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a3e6:	e011      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ec:	3308      	adds	r3, #8
 800a3ee:	2102      	movs	r1, #2
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f002 f8cd 	bl	800c590 <RCCEx_PLL2_Config>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a3fc:	e006      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a404:	e002      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a406:	bf00      	nop
 800a408:	e000      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a40a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a40c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10a      	bne.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a414:	4b9b      	ldr	r3, [pc, #620]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a418:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a422:	4a98      	ldr	r2, [pc, #608]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a424:	430b      	orrs	r3, r1
 800a426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a428:	e003      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a42a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a42e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a43e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a442:	2300      	movs	r3, #0
 800a444:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a448:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a44c:	460b      	mov	r3, r1
 800a44e:	4313      	orrs	r3, r2
 800a450:	d051      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a45c:	d035      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a45e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a462:	d82e      	bhi.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a464:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a468:	d031      	beq.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a46a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a46e:	d828      	bhi.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a474:	d01a      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a476:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a47a:	d822      	bhi.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d003      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a484:	d007      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a486:	e01c      	b.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a488:	4b7e      	ldr	r3, [pc, #504]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a48c:	4a7d      	ldr	r2, [pc, #500]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a48e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a494:	e01c      	b.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a49a:	3308      	adds	r3, #8
 800a49c:	2100      	movs	r1, #0
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f002 f876 	bl	800c590 <RCCEx_PLL2_Config>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a4aa:	e011      	b.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4b0:	3328      	adds	r3, #40	@ 0x28
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f002 f91d 	bl	800c6f4 <RCCEx_PLL3_Config>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a4c0:	e006      	b.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4c8:	e002      	b.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a4ca:	bf00      	nop
 800a4cc:	e000      	b.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a4ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10a      	bne.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a4d8:	4b6a      	ldr	r3, [pc, #424]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4e6:	4a67      	ldr	r2, [pc, #412]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4e8:	430b      	orrs	r3, r1
 800a4ea:	6513      	str	r3, [r2, #80]	@ 0x50
 800a4ec:	e003      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a502:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a506:	2300      	movs	r3, #0
 800a508:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a50c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a510:	460b      	mov	r3, r1
 800a512:	4313      	orrs	r3, r2
 800a514:	d053      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a51a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a51c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a520:	d033      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a522:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a526:	d82c      	bhi.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a528:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a52c:	d02f      	beq.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a52e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a532:	d826      	bhi.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a534:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a538:	d02b      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a53a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a53e:	d820      	bhi.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a540:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a544:	d012      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a54a:	d81a      	bhi.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d022      	beq.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a554:	d115      	bne.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a55a:	3308      	adds	r3, #8
 800a55c:	2101      	movs	r1, #1
 800a55e:	4618      	mov	r0, r3
 800a560:	f002 f816 	bl	800c590 <RCCEx_PLL2_Config>
 800a564:	4603      	mov	r3, r0
 800a566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a56a:	e015      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a570:	3328      	adds	r3, #40	@ 0x28
 800a572:	2101      	movs	r1, #1
 800a574:	4618      	mov	r0, r3
 800a576:	f002 f8bd 	bl	800c6f4 <RCCEx_PLL3_Config>
 800a57a:	4603      	mov	r3, r0
 800a57c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a580:	e00a      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a588:	e006      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a58a:	bf00      	nop
 800a58c:	e004      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a58e:	bf00      	nop
 800a590:	e002      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a592:	bf00      	nop
 800a594:	e000      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a596:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10a      	bne.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a5a0:	4b38      	ldr	r3, [pc, #224]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5ae:	4a35      	ldr	r2, [pc, #212]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5b0:	430b      	orrs	r3, r1
 800a5b2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a5b4:	e003      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a5ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a5d4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	d058      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a5e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5ea:	d033      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a5ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5f0:	d82c      	bhi.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5f6:	d02f      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a5f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5fc:	d826      	bhi.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a5fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a602:	d02b      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a604:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a608:	d820      	bhi.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a60a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a60e:	d012      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a610:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a614:	d81a      	bhi.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d022      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a61a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a61e:	d115      	bne.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a624:	3308      	adds	r3, #8
 800a626:	2101      	movs	r1, #1
 800a628:	4618      	mov	r0, r3
 800a62a:	f001 ffb1 	bl	800c590 <RCCEx_PLL2_Config>
 800a62e:	4603      	mov	r3, r0
 800a630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a634:	e015      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a63a:	3328      	adds	r3, #40	@ 0x28
 800a63c:	2101      	movs	r1, #1
 800a63e:	4618      	mov	r0, r3
 800a640:	f002 f858 	bl	800c6f4 <RCCEx_PLL3_Config>
 800a644:	4603      	mov	r3, r0
 800a646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a64a:	e00a      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a652:	e006      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a654:	bf00      	nop
 800a656:	e004      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a658:	bf00      	nop
 800a65a:	e002      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a65c:	bf00      	nop
 800a65e:	e000      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a660:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10e      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a66a:	4b06      	ldr	r3, [pc, #24]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a66c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a66e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a676:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a67a:	4a02      	ldr	r2, [pc, #8]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a67c:	430b      	orrs	r3, r1
 800a67e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a680:	e006      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a682:	bf00      	nop
 800a684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a68c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a69c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a6a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	d037      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6ba:	d00e      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a6bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6c0:	d816      	bhi.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d018      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a6c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6ca:	d111      	bne.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6cc:	4bc4      	ldr	r3, [pc, #784]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d0:	4ac3      	ldr	r2, [pc, #780]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a6d8:	e00f      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6de:	3308      	adds	r3, #8
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 ff54 	bl	800c590 <RCCEx_PLL2_Config>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a6ee:	e004      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a6f6:	e000      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a6f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10a      	bne.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a702:	4bb7      	ldr	r3, [pc, #732]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a706:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a70e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a710:	4ab3      	ldr	r2, [pc, #716]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a712:	430b      	orrs	r3, r1
 800a714:	6513      	str	r3, [r2, #80]	@ 0x50
 800a716:	e003      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a71c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a72c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a730:	2300      	movs	r3, #0
 800a732:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a736:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a73a:	460b      	mov	r3, r1
 800a73c:	4313      	orrs	r3, r2
 800a73e:	d039      	beq.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a746:	2b03      	cmp	r3, #3
 800a748:	d81c      	bhi.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a74a:	a201      	add	r2, pc, #4	@ (adr r2, 800a750 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a750:	0800a78d 	.word	0x0800a78d
 800a754:	0800a761 	.word	0x0800a761
 800a758:	0800a76f 	.word	0x0800a76f
 800a75c:	0800a78d 	.word	0x0800a78d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a760:	4b9f      	ldr	r3, [pc, #636]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a764:	4a9e      	ldr	r2, [pc, #632]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a76a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a76c:	e00f      	b.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a772:	3308      	adds	r3, #8
 800a774:	2102      	movs	r1, #2
 800a776:	4618      	mov	r0, r3
 800a778:	f001 ff0a 	bl	800c590 <RCCEx_PLL2_Config>
 800a77c:	4603      	mov	r3, r0
 800a77e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a782:	e004      	b.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a78a:	e000      	b.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a78c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a78e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10a      	bne.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a796:	4b92      	ldr	r3, [pc, #584]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a79a:	f023 0103 	bic.w	r1, r3, #3
 800a79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7a4:	4a8e      	ldr	r2, [pc, #568]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a7a6:	430b      	orrs	r3, r1
 800a7a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a7aa:	e003      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a7c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a7ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	f000 8099 	beq.w	800a908 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7d6:	4b83      	ldr	r3, [pc, #524]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a82      	ldr	r2, [pc, #520]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a7dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7e2:	f7f9 f9d7 	bl	8003b94 <HAL_GetTick>
 800a7e6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7ea:	e00b      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7ec:	f7f9 f9d2 	bl	8003b94 <HAL_GetTick>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	2b64      	cmp	r3, #100	@ 0x64
 800a7fa:	d903      	bls.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a802:	e005      	b.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a804:	4b77      	ldr	r3, [pc, #476]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d0ed      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a814:	2b00      	cmp	r3, #0
 800a816:	d173      	bne.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a818:	4b71      	ldr	r3, [pc, #452]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a81a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a820:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a824:	4053      	eors	r3, r2
 800a826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d015      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a82e:	4b6c      	ldr	r3, [pc, #432]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a836:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a83a:	4b69      	ldr	r3, [pc, #420]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a83c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a83e:	4a68      	ldr	r2, [pc, #416]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a844:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a846:	4b66      	ldr	r3, [pc, #408]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a84a:	4a65      	ldr	r2, [pc, #404]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a84c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a850:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a852:	4a63      	ldr	r2, [pc, #396]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a858:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a85e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a866:	d118      	bne.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a868:	f7f9 f994 	bl	8003b94 <HAL_GetTick>
 800a86c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a870:	e00d      	b.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a872:	f7f9 f98f 	bl	8003b94 <HAL_GetTick>
 800a876:	4602      	mov	r2, r0
 800a878:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a87c:	1ad2      	subs	r2, r2, r3
 800a87e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a882:	429a      	cmp	r2, r3
 800a884:	d903      	bls.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a886:	2303      	movs	r3, #3
 800a888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a88c:	e005      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a88e:	4b54      	ldr	r3, [pc, #336]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b00      	cmp	r3, #0
 800a898:	d0eb      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a89a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d129      	bne.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8b2:	d10e      	bne.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a8b4:	4b4a      	ldr	r3, [pc, #296]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8c4:	091a      	lsrs	r2, r3, #4
 800a8c6:	4b48      	ldr	r3, [pc, #288]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	4a45      	ldr	r2, [pc, #276]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8cc:	430b      	orrs	r3, r1
 800a8ce:	6113      	str	r3, [r2, #16]
 800a8d0:	e005      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a8d2:	4b43      	ldr	r3, [pc, #268]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	4a42      	ldr	r2, [pc, #264]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a8dc:	6113      	str	r3, [r2, #16]
 800a8de:	4b40      	ldr	r3, [pc, #256]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8ee:	4a3c      	ldr	r2, [pc, #240]	@ (800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a8f4:	e008      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a8f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a8fe:	e003      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a904:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	f002 0301 	and.w	r3, r2, #1
 800a914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a918:	2300      	movs	r3, #0
 800a91a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a91e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a922:	460b      	mov	r3, r1
 800a924:	4313      	orrs	r3, r2
 800a926:	f000 808f 	beq.w	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a92e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a930:	2b28      	cmp	r3, #40	@ 0x28
 800a932:	d871      	bhi.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a934:	a201      	add	r2, pc, #4	@ (adr r2, 800a93c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93a:	bf00      	nop
 800a93c:	0800aa21 	.word	0x0800aa21
 800a940:	0800aa19 	.word	0x0800aa19
 800a944:	0800aa19 	.word	0x0800aa19
 800a948:	0800aa19 	.word	0x0800aa19
 800a94c:	0800aa19 	.word	0x0800aa19
 800a950:	0800aa19 	.word	0x0800aa19
 800a954:	0800aa19 	.word	0x0800aa19
 800a958:	0800aa19 	.word	0x0800aa19
 800a95c:	0800a9ed 	.word	0x0800a9ed
 800a960:	0800aa19 	.word	0x0800aa19
 800a964:	0800aa19 	.word	0x0800aa19
 800a968:	0800aa19 	.word	0x0800aa19
 800a96c:	0800aa19 	.word	0x0800aa19
 800a970:	0800aa19 	.word	0x0800aa19
 800a974:	0800aa19 	.word	0x0800aa19
 800a978:	0800aa19 	.word	0x0800aa19
 800a97c:	0800aa03 	.word	0x0800aa03
 800a980:	0800aa19 	.word	0x0800aa19
 800a984:	0800aa19 	.word	0x0800aa19
 800a988:	0800aa19 	.word	0x0800aa19
 800a98c:	0800aa19 	.word	0x0800aa19
 800a990:	0800aa19 	.word	0x0800aa19
 800a994:	0800aa19 	.word	0x0800aa19
 800a998:	0800aa19 	.word	0x0800aa19
 800a99c:	0800aa21 	.word	0x0800aa21
 800a9a0:	0800aa19 	.word	0x0800aa19
 800a9a4:	0800aa19 	.word	0x0800aa19
 800a9a8:	0800aa19 	.word	0x0800aa19
 800a9ac:	0800aa19 	.word	0x0800aa19
 800a9b0:	0800aa19 	.word	0x0800aa19
 800a9b4:	0800aa19 	.word	0x0800aa19
 800a9b8:	0800aa19 	.word	0x0800aa19
 800a9bc:	0800aa21 	.word	0x0800aa21
 800a9c0:	0800aa19 	.word	0x0800aa19
 800a9c4:	0800aa19 	.word	0x0800aa19
 800a9c8:	0800aa19 	.word	0x0800aa19
 800a9cc:	0800aa19 	.word	0x0800aa19
 800a9d0:	0800aa19 	.word	0x0800aa19
 800a9d4:	0800aa19 	.word	0x0800aa19
 800a9d8:	0800aa19 	.word	0x0800aa19
 800a9dc:	0800aa21 	.word	0x0800aa21
 800a9e0:	58024400 	.word	0x58024400
 800a9e4:	58024800 	.word	0x58024800
 800a9e8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f0:	3308      	adds	r3, #8
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f001 fdcb 	bl	800c590 <RCCEx_PLL2_Config>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aa00:	e00f      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa06:	3328      	adds	r3, #40	@ 0x28
 800aa08:	2101      	movs	r1, #1
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f001 fe72 	bl	800c6f4 <RCCEx_PLL3_Config>
 800aa10:	4603      	mov	r3, r0
 800aa12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aa16:	e004      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa1e:	e000      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800aa20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10a      	bne.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aa2a:	4bbf      	ldr	r3, [pc, #764]	@ (800ad28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa2e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800aa32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa38:	4abb      	ldr	r2, [pc, #748]	@ (800ad28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa3a:	430b      	orrs	r3, r1
 800aa3c:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa3e:	e003      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aa48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	f002 0302 	and.w	r3, r2, #2
 800aa54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800aa62:	460b      	mov	r3, r1
 800aa64:	4313      	orrs	r3, r2
 800aa66:	d041      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800aa68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa6e:	2b05      	cmp	r3, #5
 800aa70:	d824      	bhi.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800aa72:	a201      	add	r2, pc, #4	@ (adr r2, 800aa78 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800aa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa78:	0800aac5 	.word	0x0800aac5
 800aa7c:	0800aa91 	.word	0x0800aa91
 800aa80:	0800aaa7 	.word	0x0800aaa7
 800aa84:	0800aac5 	.word	0x0800aac5
 800aa88:	0800aac5 	.word	0x0800aac5
 800aa8c:	0800aac5 	.word	0x0800aac5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa94:	3308      	adds	r3, #8
 800aa96:	2101      	movs	r1, #1
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f001 fd79 	bl	800c590 <RCCEx_PLL2_Config>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aaa4:	e00f      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aaa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaaa:	3328      	adds	r3, #40	@ 0x28
 800aaac:	2101      	movs	r1, #1
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 fe20 	bl	800c6f4 <RCCEx_PLL3_Config>
 800aab4:	4603      	mov	r3, r0
 800aab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aaba:	e004      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aac2:	e000      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800aac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aac6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10a      	bne.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aace:	4b96      	ldr	r3, [pc, #600]	@ (800ad28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aad2:	f023 0107 	bic.w	r1, r3, #7
 800aad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aadc:	4a92      	ldr	r2, [pc, #584]	@ (800ad28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aade:	430b      	orrs	r3, r1
 800aae0:	6553      	str	r3, [r2, #84]	@ 0x54
 800aae2:	e003      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aae8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aaec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	f002 0304 	and.w	r3, r2, #4
 800aaf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aafc:	2300      	movs	r3, #0
 800aafe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ab02:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ab06:	460b      	mov	r3, r1
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	d044      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ab0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab14:	2b05      	cmp	r3, #5
 800ab16:	d825      	bhi.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800ab18:	a201      	add	r2, pc, #4	@ (adr r2, 800ab20 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800ab1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1e:	bf00      	nop
 800ab20:	0800ab6d 	.word	0x0800ab6d
 800ab24:	0800ab39 	.word	0x0800ab39
 800ab28:	0800ab4f 	.word	0x0800ab4f
 800ab2c:	0800ab6d 	.word	0x0800ab6d
 800ab30:	0800ab6d 	.word	0x0800ab6d
 800ab34:	0800ab6d 	.word	0x0800ab6d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	2101      	movs	r1, #1
 800ab40:	4618      	mov	r0, r3
 800ab42:	f001 fd25 	bl	800c590 <RCCEx_PLL2_Config>
 800ab46:	4603      	mov	r3, r0
 800ab48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ab4c:	e00f      	b.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab52:	3328      	adds	r3, #40	@ 0x28
 800ab54:	2101      	movs	r1, #1
 800ab56:	4618      	mov	r0, r3
 800ab58:	f001 fdcc 	bl	800c6f4 <RCCEx_PLL3_Config>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ab62:	e004      	b.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab6a:	e000      	b.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800ab6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10b      	bne.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ab76:	4b6c      	ldr	r3, [pc, #432]	@ (800ad28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab7a:	f023 0107 	bic.w	r1, r3, #7
 800ab7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab86:	4a68      	ldr	r2, [pc, #416]	@ (800ad28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab88:	430b      	orrs	r3, r1
 800ab8a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab8c:	e003      	b.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ab96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f002 0320 	and.w	r3, r2, #32
 800aba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aba6:	2300      	movs	r3, #0
 800aba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800abac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800abb0:	460b      	mov	r3, r1
 800abb2:	4313      	orrs	r3, r2
 800abb4:	d055      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800abb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abc2:	d033      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800abc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abc8:	d82c      	bhi.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800abca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abce:	d02f      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800abd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abd4:	d826      	bhi.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800abd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abda:	d02b      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800abdc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abe0:	d820      	bhi.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800abe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abe6:	d012      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800abe8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abec:	d81a      	bhi.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d022      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800abf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abf6:	d115      	bne.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfc:	3308      	adds	r3, #8
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f001 fcc5 	bl	800c590 <RCCEx_PLL2_Config>
 800ac06:	4603      	mov	r3, r0
 800ac08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ac0c:	e015      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac12:	3328      	adds	r3, #40	@ 0x28
 800ac14:	2102      	movs	r1, #2
 800ac16:	4618      	mov	r0, r3
 800ac18:	f001 fd6c 	bl	800c6f4 <RCCEx_PLL3_Config>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ac22:	e00a      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac2a:	e006      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac2c:	bf00      	nop
 800ac2e:	e004      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac30:	bf00      	nop
 800ac32:	e002      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac34:	bf00      	nop
 800ac36:	e000      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10b      	bne.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac42:	4b39      	ldr	r3, [pc, #228]	@ (800ad28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ac4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac52:	4a35      	ldr	r2, [pc, #212]	@ (800ad28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac54:	430b      	orrs	r3, r1
 800ac56:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac58:	e003      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ac62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ac6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac72:	2300      	movs	r3, #0
 800ac74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ac78:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	d058      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ac82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac8a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ac8e:	d033      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ac90:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ac94:	d82c      	bhi.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ac96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac9a:	d02f      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ac9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aca0:	d826      	bhi.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aca2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aca6:	d02b      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800aca8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acac:	d820      	bhi.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800acae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acb2:	d012      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800acb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acb8:	d81a      	bhi.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d022      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800acbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acc2:	d115      	bne.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acc8:	3308      	adds	r3, #8
 800acca:	2100      	movs	r1, #0
 800accc:	4618      	mov	r0, r3
 800acce:	f001 fc5f 	bl	800c590 <RCCEx_PLL2_Config>
 800acd2:	4603      	mov	r3, r0
 800acd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800acd8:	e015      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800acda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acde:	3328      	adds	r3, #40	@ 0x28
 800ace0:	2102      	movs	r1, #2
 800ace2:	4618      	mov	r0, r3
 800ace4:	f001 fd06 	bl	800c6f4 <RCCEx_PLL3_Config>
 800ace8:	4603      	mov	r3, r0
 800acea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800acee:	e00a      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800acf6:	e006      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800acf8:	bf00      	nop
 800acfa:	e004      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800acfc:	bf00      	nop
 800acfe:	e002      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad00:	bf00      	nop
 800ad02:	e000      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10e      	bne.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ad0e:	4b06      	ldr	r3, [pc, #24]	@ (800ad28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ad16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad1e:	4a02      	ldr	r2, [pc, #8]	@ (800ad28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad20:	430b      	orrs	r3, r1
 800ad22:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad24:	e006      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ad26:	bf00      	nop
 800ad28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ad34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ad40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad44:	2300      	movs	r3, #0
 800ad46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4313      	orrs	r3, r2
 800ad52:	d055      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ad54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ad60:	d033      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ad62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ad66:	d82c      	bhi.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ad68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad6c:	d02f      	beq.n	800adce <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ad6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad72:	d826      	bhi.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ad74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ad78:	d02b      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ad7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ad7e:	d820      	bhi.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ad80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad84:	d012      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ad86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad8a:	d81a      	bhi.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d022      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ad90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad94:	d115      	bne.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad9a:	3308      	adds	r3, #8
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f001 fbf6 	bl	800c590 <RCCEx_PLL2_Config>
 800ada4:	4603      	mov	r3, r0
 800ada6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800adaa:	e015      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb0:	3328      	adds	r3, #40	@ 0x28
 800adb2:	2102      	movs	r1, #2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f001 fc9d 	bl	800c6f4 <RCCEx_PLL3_Config>
 800adba:	4603      	mov	r3, r0
 800adbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800adc0:	e00a      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800adc8:	e006      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800adca:	bf00      	nop
 800adcc:	e004      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800adce:	bf00      	nop
 800add0:	e002      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800add2:	bf00      	nop
 800add4:	e000      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800add6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800add8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10b      	bne.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ade0:	4ba0      	ldr	r3, [pc, #640]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ade2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ade4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ade8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800adf0:	4a9c      	ldr	r2, [pc, #624]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adf2:	430b      	orrs	r3, r1
 800adf4:	6593      	str	r3, [r2, #88]	@ 0x58
 800adf6:	e003      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800adfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ae00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae08:	f002 0308 	and.w	r3, r2, #8
 800ae0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ae10:	2300      	movs	r3, #0
 800ae12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ae16:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	d01e      	beq.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ae20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae2c:	d10c      	bne.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae32:	3328      	adds	r3, #40	@ 0x28
 800ae34:	2102      	movs	r1, #2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f001 fc5c 	bl	800c6f4 <RCCEx_PLL3_Config>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d002      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ae48:	4b86      	ldr	r3, [pc, #536]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae58:	4a82      	ldr	r2, [pc, #520]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae5a:	430b      	orrs	r3, r1
 800ae5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ae5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	f002 0310 	and.w	r3, r2, #16
 800ae6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae6e:	2300      	movs	r3, #0
 800ae70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae74:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	d01e      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ae7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae8a:	d10c      	bne.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae90:	3328      	adds	r3, #40	@ 0x28
 800ae92:	2102      	movs	r1, #2
 800ae94:	4618      	mov	r0, r3
 800ae96:	f001 fc2d 	bl	800c6f4 <RCCEx_PLL3_Config>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aea6:	4b6f      	ldr	r3, [pc, #444]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aeae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aeb6:	4a6b      	ldr	r2, [pc, #428]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800aec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aeca:	2300      	movs	r3, #0
 800aecc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aece:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800aed2:	460b      	mov	r3, r1
 800aed4:	4313      	orrs	r3, r2
 800aed6:	d03e      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aedc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aee4:	d022      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800aee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeea:	d81b      	bhi.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800aef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aef4:	d00b      	beq.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800aef6:	e015      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aefc:	3308      	adds	r3, #8
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f001 fb45 	bl	800c590 <RCCEx_PLL2_Config>
 800af06:	4603      	mov	r3, r0
 800af08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800af0c:	e00f      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af12:	3328      	adds	r3, #40	@ 0x28
 800af14:	2102      	movs	r1, #2
 800af16:	4618      	mov	r0, r3
 800af18:	f001 fbec 	bl	800c6f4 <RCCEx_PLL3_Config>
 800af1c:	4603      	mov	r3, r0
 800af1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800af22:	e004      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800af2a:	e000      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800af2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10b      	bne.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af36:	4b4b      	ldr	r3, [pc, #300]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800af3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800af46:	4a47      	ldr	r2, [pc, #284]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af48:	430b      	orrs	r3, r1
 800af4a:	6593      	str	r3, [r2, #88]	@ 0x58
 800af4c:	e003      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800af56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800af62:	673b      	str	r3, [r7, #112]	@ 0x70
 800af64:	2300      	movs	r3, #0
 800af66:	677b      	str	r3, [r7, #116]	@ 0x74
 800af68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800af6c:	460b      	mov	r3, r1
 800af6e:	4313      	orrs	r3, r2
 800af70:	d03b      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800af72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800af7e:	d01f      	beq.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800af80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800af84:	d818      	bhi.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800af86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af8a:	d003      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800af8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af90:	d007      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800af92:	e011      	b.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af94:	4b33      	ldr	r3, [pc, #204]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af98:	4a32      	ldr	r2, [pc, #200]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800afa0:	e00f      	b.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afa6:	3328      	adds	r3, #40	@ 0x28
 800afa8:	2101      	movs	r1, #1
 800afaa:	4618      	mov	r0, r3
 800afac:	f001 fba2 	bl	800c6f4 <RCCEx_PLL3_Config>
 800afb0:	4603      	mov	r3, r0
 800afb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800afb6:	e004      	b.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800afbe:	e000      	b.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800afc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10b      	bne.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800afca:	4b26      	ldr	r3, [pc, #152]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800afd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afda:	4a22      	ldr	r2, [pc, #136]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afdc:	430b      	orrs	r3, r1
 800afde:	6553      	str	r3, [r2, #84]	@ 0x54
 800afe0:	e003      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afe2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afe6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800afea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800aff6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aff8:	2300      	movs	r3, #0
 800affa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800affc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b000:	460b      	mov	r3, r1
 800b002:	4313      	orrs	r3, r2
 800b004:	d034      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b00a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d003      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b014:	d007      	beq.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b016:	e011      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b018:	4b12      	ldr	r3, [pc, #72]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01c:	4a11      	ldr	r2, [pc, #68]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b01e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b024:	e00e      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b02a:	3308      	adds	r3, #8
 800b02c:	2102      	movs	r1, #2
 800b02e:	4618      	mov	r0, r3
 800b030:	f001 faae 	bl	800c590 <RCCEx_PLL2_Config>
 800b034:	4603      	mov	r3, r0
 800b036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b03a:	e003      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b042:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10d      	bne.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b04c:	4b05      	ldr	r3, [pc, #20]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b04e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b050:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b05a:	4a02      	ldr	r2, [pc, #8]	@ (800b064 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b05c:	430b      	orrs	r3, r1
 800b05e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b060:	e006      	b.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b062:	bf00      	nop
 800b064:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b06c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b078:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b07c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b07e:	2300      	movs	r3, #0
 800b080:	667b      	str	r3, [r7, #100]	@ 0x64
 800b082:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b086:	460b      	mov	r3, r1
 800b088:	4313      	orrs	r3, r2
 800b08a:	d00c      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b090:	3328      	adds	r3, #40	@ 0x28
 800b092:	2102      	movs	r1, #2
 800b094:	4618      	mov	r0, r3
 800b096:	f001 fb2d 	bl	800c6f4 <RCCEx_PLL3_Config>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d002      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b0b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0b8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b0bc:	460b      	mov	r3, r1
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	d036      	beq.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0cc:	d018      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b0ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0d2:	d811      	bhi.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b0d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0d8:	d014      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b0da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0de:	d80b      	bhi.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d011      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b0e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0e8:	d106      	bne.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0ea:	4bb7      	ldr	r3, [pc, #732]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ee:	4ab6      	ldr	r2, [pc, #728]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b0f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b0f6:	e008      	b.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b0fe:	e004      	b.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b100:	bf00      	nop
 800b102:	e002      	b.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b104:	bf00      	nop
 800b106:	e000      	b.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b10a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10a      	bne.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b112:	4bad      	ldr	r3, [pc, #692]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b116:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b11e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b120:	4aa9      	ldr	r2, [pc, #676]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b122:	430b      	orrs	r3, r1
 800b124:	6553      	str	r3, [r2, #84]	@ 0x54
 800b126:	e003      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b12c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b138:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b13c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b13e:	2300      	movs	r3, #0
 800b140:	657b      	str	r3, [r7, #84]	@ 0x54
 800b142:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b146:	460b      	mov	r3, r1
 800b148:	4313      	orrs	r3, r2
 800b14a:	d009      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b14c:	4b9e      	ldr	r3, [pc, #632]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b14e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b150:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b15a:	4a9b      	ldr	r2, [pc, #620]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b15c:	430b      	orrs	r3, r1
 800b15e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b168:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b16c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b16e:	2300      	movs	r3, #0
 800b170:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b172:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b176:	460b      	mov	r3, r1
 800b178:	4313      	orrs	r3, r2
 800b17a:	d009      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b17c:	4b92      	ldr	r3, [pc, #584]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b17e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b180:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b18a:	4a8f      	ldr	r2, [pc, #572]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b18c:	430b      	orrs	r3, r1
 800b18e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b19c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b19e:	2300      	movs	r3, #0
 800b1a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1a2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	d00e      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b1ac:	4b86      	ldr	r3, [pc, #536]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	4a85      	ldr	r2, [pc, #532]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b1b6:	6113      	str	r3, [r2, #16]
 800b1b8:	4b83      	ldr	r3, [pc, #524]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1ba:	6919      	ldr	r1, [r3, #16]
 800b1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b1c4:	4a80      	ldr	r2, [pc, #512]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1c6:	430b      	orrs	r3, r1
 800b1c8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b1d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1d8:	2300      	movs	r3, #0
 800b1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1dc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	d009      	beq.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b1e6:	4b78      	ldr	r3, [pc, #480]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1f4:	4a74      	ldr	r2, [pc, #464]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1f6:	430b      	orrs	r3, r1
 800b1f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b202:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b206:	633b      	str	r3, [r7, #48]	@ 0x30
 800b208:	2300      	movs	r3, #0
 800b20a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b20c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b210:	460b      	mov	r3, r1
 800b212:	4313      	orrs	r3, r2
 800b214:	d00a      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b216:	4b6c      	ldr	r3, [pc, #432]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b21a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b226:	4a68      	ldr	r2, [pc, #416]	@ (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b228:	430b      	orrs	r3, r1
 800b22a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	2100      	movs	r1, #0
 800b236:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b238:	f003 0301 	and.w	r3, r3, #1
 800b23c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b23e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b242:	460b      	mov	r3, r1
 800b244:	4313      	orrs	r3, r2
 800b246:	d011      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b24c:	3308      	adds	r3, #8
 800b24e:	2100      	movs	r1, #0
 800b250:	4618      	mov	r0, r3
 800b252:	f001 f99d 	bl	800c590 <RCCEx_PLL2_Config>
 800b256:	4603      	mov	r3, r0
 800b258:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b25c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b260:	2b00      	cmp	r3, #0
 800b262:	d003      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b268:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	2100      	movs	r1, #0
 800b276:	6239      	str	r1, [r7, #32]
 800b278:	f003 0302 	and.w	r3, r3, #2
 800b27c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b27e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b282:	460b      	mov	r3, r1
 800b284:	4313      	orrs	r3, r2
 800b286:	d011      	beq.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b28c:	3308      	adds	r3, #8
 800b28e:	2101      	movs	r1, #1
 800b290:	4618      	mov	r0, r3
 800b292:	f001 f97d 	bl	800c590 <RCCEx_PLL2_Config>
 800b296:	4603      	mov	r3, r0
 800b298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b29c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d003      	beq.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	61b9      	str	r1, [r7, #24]
 800b2b8:	f003 0304 	and.w	r3, r3, #4
 800b2bc:	61fb      	str	r3, [r7, #28]
 800b2be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	d011      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2cc:	3308      	adds	r3, #8
 800b2ce:	2102      	movs	r1, #2
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f001 f95d 	bl	800c590 <RCCEx_PLL2_Config>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b2dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d003      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	6139      	str	r1, [r7, #16]
 800b2f8:	f003 0308 	and.w	r3, r3, #8
 800b2fc:	617b      	str	r3, [r7, #20]
 800b2fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b302:	460b      	mov	r3, r1
 800b304:	4313      	orrs	r3, r2
 800b306:	d011      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b30c:	3328      	adds	r3, #40	@ 0x28
 800b30e:	2100      	movs	r1, #0
 800b310:	4618      	mov	r0, r3
 800b312:	f001 f9ef 	bl	800c6f4 <RCCEx_PLL3_Config>
 800b316:	4603      	mov	r3, r0
 800b318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800b31c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b320:	2b00      	cmp	r3, #0
 800b322:	d003      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b334:	2100      	movs	r1, #0
 800b336:	60b9      	str	r1, [r7, #8]
 800b338:	f003 0310 	and.w	r3, r3, #16
 800b33c:	60fb      	str	r3, [r7, #12]
 800b33e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b342:	460b      	mov	r3, r1
 800b344:	4313      	orrs	r3, r2
 800b346:	d011      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b34c:	3328      	adds	r3, #40	@ 0x28
 800b34e:	2101      	movs	r1, #1
 800b350:	4618      	mov	r0, r3
 800b352:	f001 f9cf 	bl	800c6f4 <RCCEx_PLL3_Config>
 800b356:	4603      	mov	r3, r0
 800b358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b35c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b368:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	2100      	movs	r1, #0
 800b376:	6039      	str	r1, [r7, #0]
 800b378:	f003 0320 	and.w	r3, r3, #32
 800b37c:	607b      	str	r3, [r7, #4]
 800b37e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b382:	460b      	mov	r3, r1
 800b384:	4313      	orrs	r3, r2
 800b386:	d011      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b38c:	3328      	adds	r3, #40	@ 0x28
 800b38e:	2102      	movs	r1, #2
 800b390:	4618      	mov	r0, r3
 800b392:	f001 f9af 	bl	800c6f4 <RCCEx_PLL3_Config>
 800b396:	4603      	mov	r3, r0
 800b398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b39c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d003      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b3ac:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	e000      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3c6:	bf00      	nop
 800b3c8:	58024400 	.word	0x58024400

0800b3cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b090      	sub	sp, #64	@ 0x40
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b3d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3da:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b3de:	430b      	orrs	r3, r1
 800b3e0:	f040 8094 	bne.w	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b3e4:	4b9b      	ldr	r3, [pc, #620]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3e8:	f003 0307 	and.w	r3, r3, #7
 800b3ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f0:	2b04      	cmp	r3, #4
 800b3f2:	f200 8087 	bhi.w	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b3f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fc:	0800b411 	.word	0x0800b411
 800b400:	0800b439 	.word	0x0800b439
 800b404:	0800b461 	.word	0x0800b461
 800b408:	0800b4fd 	.word	0x0800b4fd
 800b40c:	0800b489 	.word	0x0800b489
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b410:	4b90      	ldr	r3, [pc, #576]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b418:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b41c:	d108      	bne.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b41e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b422:	4618      	mov	r0, r3
 800b424:	f000 ff62 	bl	800c2ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b42c:	f000 bc93 	b.w	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b430:	2300      	movs	r3, #0
 800b432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b434:	f000 bc8f 	b.w	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b438:	4b86      	ldr	r3, [pc, #536]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b440:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b444:	d108      	bne.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b446:	f107 0318 	add.w	r3, r7, #24
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 fca6 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b454:	f000 bc7f 	b.w	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b458:	2300      	movs	r3, #0
 800b45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b45c:	f000 bc7b 	b.w	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b460:	4b7c      	ldr	r3, [pc, #496]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b46c:	d108      	bne.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b46e:	f107 030c 	add.w	r3, r7, #12
 800b472:	4618      	mov	r0, r3
 800b474:	f000 fde6 	bl	800c044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b47c:	f000 bc6b 	b.w	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b484:	f000 bc67 	b.w	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b488:	4b72      	ldr	r3, [pc, #456]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b48a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b48c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b490:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b492:	4b70      	ldr	r3, [pc, #448]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0304 	and.w	r3, r3, #4
 800b49a:	2b04      	cmp	r3, #4
 800b49c:	d10c      	bne.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b49e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d109      	bne.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4a4:	4b6b      	ldr	r3, [pc, #428]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	08db      	lsrs	r3, r3, #3
 800b4aa:	f003 0303 	and.w	r3, r3, #3
 800b4ae:	4a6a      	ldr	r2, [pc, #424]	@ (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4b6:	e01f      	b.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4b8:	4b66      	ldr	r3, [pc, #408]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4c4:	d106      	bne.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b4c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4cc:	d102      	bne.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4ce:	4b63      	ldr	r3, [pc, #396]	@ (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4d2:	e011      	b.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4d4:	4b5f      	ldr	r3, [pc, #380]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4e0:	d106      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4e8:	d102      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4ea:	4b5d      	ldr	r3, [pc, #372]	@ (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4ee:	e003      	b.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b4f4:	f000 bc2f 	b.w	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b4f8:	f000 bc2d 	b.w	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4fc:	4b59      	ldr	r3, [pc, #356]	@ (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b500:	f000 bc29 	b.w	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b508:	f000 bc25 	b.w	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b50c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b510:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b514:	430b      	orrs	r3, r1
 800b516:	f040 80a7 	bne.w	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b51a:	4b4e      	ldr	r3, [pc, #312]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b51e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b522:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b526:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b52a:	d054      	beq.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b532:	f200 808b 	bhi.w	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b538:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b53c:	f000 8083 	beq.w	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b542:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b546:	f200 8081 	bhi.w	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b550:	d02f      	beq.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b554:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b558:	d878      	bhi.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d004      	beq.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b562:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b566:	d012      	beq.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b568:	e070      	b.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b56a:	4b3a      	ldr	r3, [pc, #232]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b572:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b576:	d107      	bne.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 feb5 	bl	800c2ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b586:	e3e6      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b588:	2300      	movs	r3, #0
 800b58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b58c:	e3e3      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b58e:	4b31      	ldr	r3, [pc, #196]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b596:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b59a:	d107      	bne.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b59c:	f107 0318 	add.w	r3, r7, #24
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f000 fbfb 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5aa:	e3d4      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5b0:	e3d1      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5b2:	4b28      	ldr	r3, [pc, #160]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5be:	d107      	bne.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5c0:	f107 030c 	add.w	r3, r7, #12
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 fd3d 	bl	800c044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5ce:	e3c2      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5d4:	e3bf      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5d6:	4b1f      	ldr	r3, [pc, #124]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b5de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5e0:	4b1c      	ldr	r3, [pc, #112]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 0304 	and.w	r3, r3, #4
 800b5e8:	2b04      	cmp	r3, #4
 800b5ea:	d10c      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b5ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d109      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5f2:	4b18      	ldr	r3, [pc, #96]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	08db      	lsrs	r3, r3, #3
 800b5f8:	f003 0303 	and.w	r3, r3, #3
 800b5fc:	4a16      	ldr	r2, [pc, #88]	@ (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b604:	e01e      	b.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b606:	4b13      	ldr	r3, [pc, #76]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b60e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b612:	d106      	bne.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b61a:	d102      	bne.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b61c:	4b0f      	ldr	r3, [pc, #60]	@ (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b620:	e010      	b.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b622:	4b0c      	ldr	r3, [pc, #48]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b62a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b62e:	d106      	bne.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b636:	d102      	bne.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b638:	4b09      	ldr	r3, [pc, #36]	@ (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b63c:	e002      	b.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b63e:	2300      	movs	r3, #0
 800b640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b642:	e388      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b644:	e387      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b646:	4b07      	ldr	r3, [pc, #28]	@ (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b64a:	e384      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b650:	e381      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b652:	bf00      	nop
 800b654:	58024400 	.word	0x58024400
 800b658:	03d09000 	.word	0x03d09000
 800b65c:	003d0900 	.word	0x003d0900
 800b660:	007a1200 	.word	0x007a1200
 800b664:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b66c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b670:	430b      	orrs	r3, r1
 800b672:	f040 809c 	bne.w	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b676:	4b9e      	ldr	r3, [pc, #632]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b67a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b67e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b682:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b686:	d054      	beq.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b68a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b68e:	f200 808b 	bhi.w	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b694:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b698:	f000 8083 	beq.w	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b69e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b6a2:	f200 8081 	bhi.w	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6ac:	d02f      	beq.n	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6b4:	d878      	bhi.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d004      	beq.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6c2:	d012      	beq.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b6c4:	e070      	b.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6c6:	4b8a      	ldr	r3, [pc, #552]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6d2:	d107      	bne.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 fe07 	bl	800c2ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6e2:	e338      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6e8:	e335      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6ea:	4b81      	ldr	r3, [pc, #516]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6f6:	d107      	bne.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6f8:	f107 0318 	add.w	r3, r7, #24
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 fb4d 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b706:	e326      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b708:	2300      	movs	r3, #0
 800b70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b70c:	e323      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b70e:	4b78      	ldr	r3, [pc, #480]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b71a:	d107      	bne.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b71c:	f107 030c 	add.w	r3, r7, #12
 800b720:	4618      	mov	r0, r3
 800b722:	f000 fc8f 	bl	800c044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b72a:	e314      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b72c:	2300      	movs	r3, #0
 800b72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b730:	e311      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b732:	4b6f      	ldr	r3, [pc, #444]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b736:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b73a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b73c:	4b6c      	ldr	r3, [pc, #432]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 0304 	and.w	r3, r3, #4
 800b744:	2b04      	cmp	r3, #4
 800b746:	d10c      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d109      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b74e:	4b68      	ldr	r3, [pc, #416]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	08db      	lsrs	r3, r3, #3
 800b754:	f003 0303 	and.w	r3, r3, #3
 800b758:	4a66      	ldr	r2, [pc, #408]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b75a:	fa22 f303 	lsr.w	r3, r2, r3
 800b75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b760:	e01e      	b.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b762:	4b63      	ldr	r3, [pc, #396]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b76a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b76e:	d106      	bne.n	800b77e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b776:	d102      	bne.n	800b77e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b778:	4b5f      	ldr	r3, [pc, #380]	@ (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b77c:	e010      	b.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b77e:	4b5c      	ldr	r3, [pc, #368]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b78a:	d106      	bne.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b78e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b792:	d102      	bne.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b794:	4b59      	ldr	r3, [pc, #356]	@ (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b798:	e002      	b.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b79e:	e2da      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7a0:	e2d9      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b7a2:	4b57      	ldr	r3, [pc, #348]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7a6:	e2d6      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7ac:	e2d3      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b7ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7b2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b7b6:	430b      	orrs	r3, r1
 800b7b8:	f040 80a7 	bne.w	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b7bc:	4b4c      	ldr	r3, [pc, #304]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b7be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7c0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b7c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7cc:	d055      	beq.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7d4:	f200 8096 	bhi.w	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b7de:	f000 8084 	beq.w	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b7e8:	f200 808c 	bhi.w	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7f2:	d030      	beq.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7fa:	f200 8083 	bhi.w	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b800:	2b00      	cmp	r3, #0
 800b802:	d004      	beq.n	800b80e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b80a:	d012      	beq.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b80c:	e07a      	b.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b80e:	4b38      	ldr	r3, [pc, #224]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b81a:	d107      	bne.n	800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b81c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b820:	4618      	mov	r0, r3
 800b822:	f000 fd63 	bl	800c2ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b82a:	e294      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b82c:	2300      	movs	r3, #0
 800b82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b830:	e291      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b832:	4b2f      	ldr	r3, [pc, #188]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b83a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b83e:	d107      	bne.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b840:	f107 0318 	add.w	r3, r7, #24
 800b844:	4618      	mov	r0, r3
 800b846:	f000 faa9 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b84e:	e282      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b850:	2300      	movs	r3, #0
 800b852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b854:	e27f      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b856:	4b26      	ldr	r3, [pc, #152]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b85e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b862:	d107      	bne.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b864:	f107 030c 	add.w	r3, r7, #12
 800b868:	4618      	mov	r0, r3
 800b86a:	f000 fbeb 	bl	800c044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b872:	e270      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b878:	e26d      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b87a:	4b1d      	ldr	r3, [pc, #116]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b87c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b87e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b882:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b884:	4b1a      	ldr	r3, [pc, #104]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 0304 	and.w	r3, r3, #4
 800b88c:	2b04      	cmp	r3, #4
 800b88e:	d10c      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b892:	2b00      	cmp	r3, #0
 800b894:	d109      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b896:	4b16      	ldr	r3, [pc, #88]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	08db      	lsrs	r3, r3, #3
 800b89c:	f003 0303 	and.w	r3, r3, #3
 800b8a0:	4a14      	ldr	r2, [pc, #80]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8a8:	e01e      	b.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8aa:	4b11      	ldr	r3, [pc, #68]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8b6:	d106      	bne.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8be:	d102      	bne.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8c0:	4b0d      	ldr	r3, [pc, #52]	@ (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8c4:	e010      	b.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8c6:	4b0a      	ldr	r3, [pc, #40]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8d2:	d106      	bne.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b8d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8da:	d102      	bne.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8dc:	4b07      	ldr	r3, [pc, #28]	@ (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8e0:	e002      	b.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b8e6:	e236      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b8e8:	e235      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b8ea:	4b05      	ldr	r3, [pc, #20]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ee:	e232      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b8f0:	58024400 	.word	0x58024400
 800b8f4:	03d09000 	.word	0x03d09000
 800b8f8:	003d0900 	.word	0x003d0900
 800b8fc:	007a1200 	.word	0x007a1200
 800b900:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b904:	2300      	movs	r3, #0
 800b906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b908:	e225      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b90a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b90e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b912:	430b      	orrs	r3, r1
 800b914:	f040 8085 	bne.w	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b918:	4b9c      	ldr	r3, [pc, #624]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b91a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b91c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b920:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b924:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b928:	d06b      	beq.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b930:	d874      	bhi.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b934:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b938:	d056      	beq.n	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b940:	d86c      	bhi.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b944:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b948:	d03b      	beq.n	800b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b950:	d864      	bhi.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b954:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b958:	d021      	beq.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b960:	d85c      	bhi.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b964:	2b00      	cmp	r3, #0
 800b966:	d004      	beq.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b96e:	d004      	beq.n	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b970:	e054      	b.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b972:	f7fe fb5f 	bl	800a034 <HAL_RCC_GetPCLK1Freq>
 800b976:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b978:	e1ed      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b97a:	4b84      	ldr	r3, [pc, #528]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b986:	d107      	bne.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b988:	f107 0318 	add.w	r3, r7, #24
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 fa05 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b996:	e1de      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b99c:	e1db      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b99e:	4b7b      	ldr	r3, [pc, #492]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9aa:	d107      	bne.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9ac:	f107 030c 	add.w	r3, r7, #12
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 fb47 	bl	800c044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9ba:	e1cc      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9c0:	e1c9      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9c2:	4b72      	ldr	r3, [pc, #456]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f003 0304 	and.w	r3, r3, #4
 800b9ca:	2b04      	cmp	r3, #4
 800b9cc:	d109      	bne.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9ce:	4b6f      	ldr	r3, [pc, #444]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	08db      	lsrs	r3, r3, #3
 800b9d4:	f003 0303 	and.w	r3, r3, #3
 800b9d8:	4a6d      	ldr	r2, [pc, #436]	@ (800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b9da:	fa22 f303 	lsr.w	r3, r2, r3
 800b9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9e0:	e1b9      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9e6:	e1b6      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b9e8:	4b68      	ldr	r3, [pc, #416]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9f4:	d102      	bne.n	800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b9f6:	4b67      	ldr	r3, [pc, #412]	@ (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9fa:	e1ac      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba00:	e1a9      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba02:	4b62      	ldr	r3, [pc, #392]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba0e:	d102      	bne.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ba10:	4b61      	ldr	r3, [pc, #388]	@ (800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ba12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba14:	e19f      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba16:	2300      	movs	r3, #0
 800ba18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba1a:	e19c      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba20:	e199      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ba22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba26:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ba2a:	430b      	orrs	r3, r1
 800ba2c:	d173      	bne.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ba2e:	4b57      	ldr	r3, [pc, #348]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ba36:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ba38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba3e:	d02f      	beq.n	800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ba40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba46:	d863      	bhi.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ba48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d004      	beq.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba54:	d012      	beq.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ba56:	e05b      	b.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba58:	4b4c      	ldr	r3, [pc, #304]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba64:	d107      	bne.n	800ba76 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba66:	f107 0318 	add.w	r3, r7, #24
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 f996 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba74:	e16f      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba7a:	e16c      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba7c:	4b43      	ldr	r3, [pc, #268]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba88:	d107      	bne.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba8a:	f107 030c 	add.w	r3, r7, #12
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 fad8 	bl	800c044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba98:	e15d      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba9e:	e15a      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baa0:	4b3a      	ldr	r3, [pc, #232]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baa4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800baa8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800baaa:	4b38      	ldr	r3, [pc, #224]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 0304 	and.w	r3, r3, #4
 800bab2:	2b04      	cmp	r3, #4
 800bab4:	d10c      	bne.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800bab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d109      	bne.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800babc:	4b33      	ldr	r3, [pc, #204]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	08db      	lsrs	r3, r3, #3
 800bac2:	f003 0303 	and.w	r3, r3, #3
 800bac6:	4a32      	ldr	r2, [pc, #200]	@ (800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bac8:	fa22 f303 	lsr.w	r3, r2, r3
 800bacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bace:	e01e      	b.n	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bad0:	4b2e      	ldr	r3, [pc, #184]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800badc:	d106      	bne.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800bade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bae4:	d102      	bne.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bae6:	4b2b      	ldr	r3, [pc, #172]	@ (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baea:	e010      	b.n	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800baec:	4b27      	ldr	r3, [pc, #156]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800baf8:	d106      	bne.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800bafa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bafc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb00:	d102      	bne.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb02:	4b25      	ldr	r3, [pc, #148]	@ (800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bb04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb06:	e002      	b.n	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bb0c:	e123      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb0e:	e122      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb10:	2300      	movs	r3, #0
 800bb12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb14:	e11f      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bb16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb1a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800bb1e:	430b      	orrs	r3, r1
 800bb20:	d13c      	bne.n	800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bb22:	4b1a      	ldr	r3, [pc, #104]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb2a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d004      	beq.n	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800bb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb38:	d012      	beq.n	800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800bb3a:	e023      	b.n	800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb3c:	4b13      	ldr	r3, [pc, #76]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb48:	d107      	bne.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f000 fbcc 	bl	800c2ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb58:	e0fd      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb5e:	e0fa      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb60:	4b0a      	ldr	r3, [pc, #40]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb6c:	d107      	bne.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb6e:	f107 0318 	add.w	r3, r7, #24
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 f912 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb7c:	e0eb      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb82:	e0e8      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb88:	e0e5      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb8a:	bf00      	nop
 800bb8c:	58024400 	.word	0x58024400
 800bb90:	03d09000 	.word	0x03d09000
 800bb94:	003d0900 	.word	0x003d0900
 800bb98:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bb9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bba0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bba4:	430b      	orrs	r3, r1
 800bba6:	f040 8085 	bne.w	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bbaa:	4b6d      	ldr	r3, [pc, #436]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bbac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800bbb2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbba:	d06b      	beq.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbc2:	d874      	bhi.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbca:	d056      	beq.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbd2:	d86c      	bhi.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bbda:	d03b      	beq.n	800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bbe2:	d864      	bhi.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbea:	d021      	beq.n	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800bbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbf2:	d85c      	bhi.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d004      	beq.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc00:	d004      	beq.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800bc02:	e054      	b.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bc04:	f000 f8b4 	bl	800bd70 <HAL_RCCEx_GetD3PCLK1Freq>
 800bc08:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc0a:	e0a4      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc0c:	4b54      	ldr	r3, [pc, #336]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc18:	d107      	bne.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc1a:	f107 0318 	add.w	r3, r7, #24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f000 f8bc 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc28:	e095      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc2e:	e092      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc30:	4b4b      	ldr	r3, [pc, #300]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc3c:	d107      	bne.n	800bc4e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc3e:	f107 030c 	add.w	r3, r7, #12
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 f9fe 	bl	800c044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc4c:	e083      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc52:	e080      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc54:	4b42      	ldr	r3, [pc, #264]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 0304 	and.w	r3, r3, #4
 800bc5c:	2b04      	cmp	r3, #4
 800bc5e:	d109      	bne.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc60:	4b3f      	ldr	r3, [pc, #252]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	08db      	lsrs	r3, r3, #3
 800bc66:	f003 0303 	and.w	r3, r3, #3
 800bc6a:	4a3e      	ldr	r2, [pc, #248]	@ (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bc6c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc72:	e070      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc78:	e06d      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bc7a:	4b39      	ldr	r3, [pc, #228]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc86:	d102      	bne.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800bc88:	4b37      	ldr	r3, [pc, #220]	@ (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bc8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc8c:	e063      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc92:	e060      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc94:	4b32      	ldr	r3, [pc, #200]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bca0:	d102      	bne.n	800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800bca2:	4b32      	ldr	r3, [pc, #200]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bca6:	e056      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcac:	e053      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcb2:	e050      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bcb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcb8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800bcbc:	430b      	orrs	r3, r1
 800bcbe:	d148      	bne.n	800bd52 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bcc0:	4b27      	ldr	r3, [pc, #156]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bcc8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcd0:	d02a      	beq.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcd8:	d838      	bhi.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bcda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d004      	beq.n	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800bce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bce6:	d00d      	beq.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bce8:	e030      	b.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bcea:	4b1d      	ldr	r3, [pc, #116]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bcf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bcf6:	d102      	bne.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800bcf8:	4b1c      	ldr	r3, [pc, #112]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bcfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcfc:	e02b      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd02:	e028      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd04:	4b16      	ldr	r3, [pc, #88]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd10:	d107      	bne.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd16:	4618      	mov	r0, r3
 800bd18:	f000 fae8 	bl	800c2ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd20:	e019      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd26:	e016      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd28:	4b0d      	ldr	r3, [pc, #52]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd34:	d107      	bne.n	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd36:	f107 0318 	add.w	r3, r7, #24
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 f82e 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd44:	e007      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd4a:	e004      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd50:	e001      	b.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bd56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3740      	adds	r7, #64	@ 0x40
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	58024400 	.word	0x58024400
 800bd64:	03d09000 	.word	0x03d09000
 800bd68:	003d0900 	.word	0x003d0900
 800bd6c:	007a1200 	.word	0x007a1200

0800bd70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bd74:	f7fe f92e 	bl	8009fd4 <HAL_RCC_GetHCLKFreq>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	4b06      	ldr	r3, [pc, #24]	@ (800bd94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	091b      	lsrs	r3, r3, #4
 800bd80:	f003 0307 	and.w	r3, r3, #7
 800bd84:	4904      	ldr	r1, [pc, #16]	@ (800bd98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bd86:	5ccb      	ldrb	r3, [r1, r3]
 800bd88:	f003 031f 	and.w	r3, r3, #31
 800bd8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	58024400 	.word	0x58024400
 800bd98:	08015430 	.word	0x08015430

0800bd9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b089      	sub	sp, #36	@ 0x24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bda4:	4ba1      	ldr	r3, [pc, #644]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda8:	f003 0303 	and.w	r3, r3, #3
 800bdac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bdae:	4b9f      	ldr	r3, [pc, #636]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb2:	0b1b      	lsrs	r3, r3, #12
 800bdb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bdb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bdba:	4b9c      	ldr	r3, [pc, #624]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdbe:	091b      	lsrs	r3, r3, #4
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bdc6:	4b99      	ldr	r3, [pc, #612]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdca:	08db      	lsrs	r3, r3, #3
 800bdcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdd0:	693a      	ldr	r2, [r7, #16]
 800bdd2:	fb02 f303 	mul.w	r3, r2, r3
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 8111 	beq.w	800c00c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	f000 8083 	beq.w	800bef8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	f200 80a1 	bhi.w	800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d003      	beq.n	800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	2b01      	cmp	r3, #1
 800be04:	d056      	beq.n	800beb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800be06:	e099      	b.n	800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be08:	4b88      	ldr	r3, [pc, #544]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 0320 	and.w	r3, r3, #32
 800be10:	2b00      	cmp	r3, #0
 800be12:	d02d      	beq.n	800be70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be14:	4b85      	ldr	r3, [pc, #532]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	08db      	lsrs	r3, r3, #3
 800be1a:	f003 0303 	and.w	r3, r3, #3
 800be1e:	4a84      	ldr	r2, [pc, #528]	@ (800c030 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800be20:	fa22 f303 	lsr.w	r3, r2, r3
 800be24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	ee07 3a90 	vmov	s15, r3
 800be2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	ee07 3a90 	vmov	s15, r3
 800be36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be3e:	4b7b      	ldr	r3, [pc, #492]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be46:	ee07 3a90 	vmov	s15, r3
 800be4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be6e:	e087      	b.n	800bf80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	ee07 3a90 	vmov	s15, r3
 800be76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c038 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800be7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be82:	4b6a      	ldr	r3, [pc, #424]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be8a:	ee07 3a90 	vmov	s15, r3
 800be8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be92:	ed97 6a03 	vldr	s12, [r7, #12]
 800be96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beb2:	e065      	b.n	800bf80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	ee07 3a90 	vmov	s15, r3
 800beba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bebe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c03c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bec6:	4b59      	ldr	r3, [pc, #356]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bece:	ee07 3a90 	vmov	s15, r3
 800bed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bed6:	ed97 6a03 	vldr	s12, [r7, #12]
 800beda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800beea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bef6:	e043      	b.n	800bf80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	ee07 3a90 	vmov	s15, r3
 800befe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bf06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf0a:	4b48      	ldr	r3, [pc, #288]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf12:	ee07 3a90 	vmov	s15, r3
 800bf16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf3a:	e021      	b.n	800bf80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	ee07 3a90 	vmov	s15, r3
 800bf42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c03c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf4e:	4b37      	ldr	r3, [pc, #220]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf56:	ee07 3a90 	vmov	s15, r3
 800bf5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bf80:	4b2a      	ldr	r3, [pc, #168]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf84:	0a5b      	lsrs	r3, r3, #9
 800bf86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf8a:	ee07 3a90 	vmov	s15, r3
 800bf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfa6:	ee17 2a90 	vmov	r2, s15
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bfae:	4b1f      	ldr	r3, [pc, #124]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfb2:	0c1b      	lsrs	r3, r3, #16
 800bfb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfb8:	ee07 3a90 	vmov	s15, r3
 800bfbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfd4:	ee17 2a90 	vmov	r2, s15
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bfdc:	4b13      	ldr	r3, [pc, #76]	@ (800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe0:	0e1b      	lsrs	r3, r3, #24
 800bfe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfe6:	ee07 3a90 	vmov	s15, r3
 800bfea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bff6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c002:	ee17 2a90 	vmov	r2, s15
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c00a:	e008      	b.n	800c01e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	609a      	str	r2, [r3, #8]
}
 800c01e:	bf00      	nop
 800c020:	3724      	adds	r7, #36	@ 0x24
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	58024400 	.word	0x58024400
 800c030:	03d09000 	.word	0x03d09000
 800c034:	46000000 	.word	0x46000000
 800c038:	4c742400 	.word	0x4c742400
 800c03c:	4a742400 	.word	0x4a742400
 800c040:	4af42400 	.word	0x4af42400

0800c044 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c044:	b480      	push	{r7}
 800c046:	b089      	sub	sp, #36	@ 0x24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c04c:	4ba1      	ldr	r3, [pc, #644]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c050:	f003 0303 	and.w	r3, r3, #3
 800c054:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c056:	4b9f      	ldr	r3, [pc, #636]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c05a:	0d1b      	lsrs	r3, r3, #20
 800c05c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c060:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c062:	4b9c      	ldr	r3, [pc, #624]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c066:	0a1b      	lsrs	r3, r3, #8
 800c068:	f003 0301 	and.w	r3, r3, #1
 800c06c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c06e:	4b99      	ldr	r3, [pc, #612]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c072:	08db      	lsrs	r3, r3, #3
 800c074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	fb02 f303 	mul.w	r3, r2, r3
 800c07e:	ee07 3a90 	vmov	s15, r3
 800c082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c086:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f000 8111 	beq.w	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	2b02      	cmp	r3, #2
 800c096:	f000 8083 	beq.w	800c1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	f200 80a1 	bhi.w	800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d003      	beq.n	800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d056      	beq.n	800c15c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c0ae:	e099      	b.n	800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0b0:	4b88      	ldr	r3, [pc, #544]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 0320 	and.w	r3, r3, #32
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d02d      	beq.n	800c118 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0bc:	4b85      	ldr	r3, [pc, #532]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	08db      	lsrs	r3, r3, #3
 800c0c2:	f003 0303 	and.w	r3, r3, #3
 800c0c6:	4a84      	ldr	r2, [pc, #528]	@ (800c2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c0c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	ee07 3a90 	vmov	s15, r3
 800c0d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	ee07 3a90 	vmov	s15, r3
 800c0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0e6:	4b7b      	ldr	r3, [pc, #492]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ee:	ee07 3a90 	vmov	s15, r3
 800c0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c112:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c116:	e087      	b.n	800c228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	ee07 3a90 	vmov	s15, r3
 800c11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c122:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c12a:	4b6a      	ldr	r3, [pc, #424]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c12c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c132:	ee07 3a90 	vmov	s15, r3
 800c136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c13a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c13e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c14a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c14e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c152:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c15a:	e065      	b.n	800c228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	ee07 3a90 	vmov	s15, r3
 800c162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c166:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c2e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c16e:	4b59      	ldr	r3, [pc, #356]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c176:	ee07 3a90 	vmov	s15, r3
 800c17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c17e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c182:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c18e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c19a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c19e:	e043      	b.n	800c228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	ee07 3a90 	vmov	s15, r3
 800c1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1b2:	4b48      	ldr	r3, [pc, #288]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ba:	ee07 3a90 	vmov	s15, r3
 800c1be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1e2:	e021      	b.n	800c228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	ee07 3a90 	vmov	s15, r3
 800c1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c2e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c1f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1f6:	4b37      	ldr	r3, [pc, #220]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1fe:	ee07 3a90 	vmov	s15, r3
 800c202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c206:	ed97 6a03 	vldr	s12, [r7, #12]
 800c20a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c20e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c21a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c226:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c228:	4b2a      	ldr	r3, [pc, #168]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c22a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c22c:	0a5b      	lsrs	r3, r3, #9
 800c22e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c232:	ee07 3a90 	vmov	s15, r3
 800c236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c23a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c23e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c242:	edd7 6a07 	vldr	s13, [r7, #28]
 800c246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c24a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c24e:	ee17 2a90 	vmov	r2, s15
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c256:	4b1f      	ldr	r3, [pc, #124]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c25a:	0c1b      	lsrs	r3, r3, #16
 800c25c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c260:	ee07 3a90 	vmov	s15, r3
 800c264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c268:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c26c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c270:	edd7 6a07 	vldr	s13, [r7, #28]
 800c274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c27c:	ee17 2a90 	vmov	r2, s15
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c284:	4b13      	ldr	r3, [pc, #76]	@ (800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c288:	0e1b      	lsrs	r3, r3, #24
 800c28a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c28e:	ee07 3a90 	vmov	s15, r3
 800c292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c29a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c29e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2aa:	ee17 2a90 	vmov	r2, s15
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c2b2:	e008      	b.n	800c2c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	609a      	str	r2, [r3, #8]
}
 800c2c6:	bf00      	nop
 800c2c8:	3724      	adds	r7, #36	@ 0x24
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	58024400 	.word	0x58024400
 800c2d8:	03d09000 	.word	0x03d09000
 800c2dc:	46000000 	.word	0x46000000
 800c2e0:	4c742400 	.word	0x4c742400
 800c2e4:	4a742400 	.word	0x4a742400
 800c2e8:	4af42400 	.word	0x4af42400

0800c2ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b089      	sub	sp, #36	@ 0x24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2f4:	4ba0      	ldr	r3, [pc, #640]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2f8:	f003 0303 	and.w	r3, r3, #3
 800c2fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c2fe:	4b9e      	ldr	r3, [pc, #632]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c302:	091b      	lsrs	r3, r3, #4
 800c304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c308:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c30a:	4b9b      	ldr	r3, [pc, #620]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c314:	4b98      	ldr	r3, [pc, #608]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c318:	08db      	lsrs	r3, r3, #3
 800c31a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c31e:	693a      	ldr	r2, [r7, #16]
 800c320:	fb02 f303 	mul.w	r3, r2, r3
 800c324:	ee07 3a90 	vmov	s15, r3
 800c328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c32c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	2b00      	cmp	r3, #0
 800c334:	f000 8111 	beq.w	800c55a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	f000 8083 	beq.w	800c446 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	2b02      	cmp	r3, #2
 800c344:	f200 80a1 	bhi.w	800c48a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d056      	beq.n	800c402 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c354:	e099      	b.n	800c48a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c356:	4b88      	ldr	r3, [pc, #544]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f003 0320 	and.w	r3, r3, #32
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d02d      	beq.n	800c3be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c362:	4b85      	ldr	r3, [pc, #532]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	08db      	lsrs	r3, r3, #3
 800c368:	f003 0303 	and.w	r3, r3, #3
 800c36c:	4a83      	ldr	r2, [pc, #524]	@ (800c57c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c36e:	fa22 f303 	lsr.w	r3, r2, r3
 800c372:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	ee07 3a90 	vmov	s15, r3
 800c37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	ee07 3a90 	vmov	s15, r3
 800c384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c38c:	4b7a      	ldr	r3, [pc, #488]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c394:	ee07 3a90 	vmov	s15, r3
 800c398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c39c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3a0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c3bc:	e087      	b.n	800c4ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	ee07 3a90 	vmov	s15, r3
 800c3c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c584 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3d0:	4b69      	ldr	r3, [pc, #420]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d8:	ee07 3a90 	vmov	s15, r3
 800c3dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3e4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c400:	e065      	b.n	800c4ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	ee07 3a90 	vmov	s15, r3
 800c408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c40c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c588 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c414:	4b58      	ldr	r3, [pc, #352]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c41c:	ee07 3a90 	vmov	s15, r3
 800c420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c424:	ed97 6a03 	vldr	s12, [r7, #12]
 800c428:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c42c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c434:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c43c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c440:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c444:	e043      	b.n	800c4ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	ee07 3a90 	vmov	s15, r3
 800c44c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c450:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c458:	4b47      	ldr	r3, [pc, #284]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c45a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c45c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c460:	ee07 3a90 	vmov	s15, r3
 800c464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c468:	ed97 6a03 	vldr	s12, [r7, #12]
 800c46c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c478:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c47c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c480:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c484:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c488:	e021      	b.n	800c4ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	ee07 3a90 	vmov	s15, r3
 800c490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c494:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c584 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c49c:	4b36      	ldr	r3, [pc, #216]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c49e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4a4:	ee07 3a90 	vmov	s15, r3
 800c4a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4b0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c4b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c4ce:	4b2a      	ldr	r3, [pc, #168]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4d2:	0a5b      	lsrs	r3, r3, #9
 800c4d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4d8:	ee07 3a90 	vmov	s15, r3
 800c4dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4f4:	ee17 2a90 	vmov	r2, s15
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c4fc:	4b1e      	ldr	r3, [pc, #120]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c500:	0c1b      	lsrs	r3, r3, #16
 800c502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c506:	ee07 3a90 	vmov	s15, r3
 800c50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c50e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c512:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c516:	edd7 6a07 	vldr	s13, [r7, #28]
 800c51a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c51e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c522:	ee17 2a90 	vmov	r2, s15
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c52a:	4b13      	ldr	r3, [pc, #76]	@ (800c578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c52e:	0e1b      	lsrs	r3, r3, #24
 800c530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c534:	ee07 3a90 	vmov	s15, r3
 800c538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c53c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c540:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c544:	edd7 6a07 	vldr	s13, [r7, #28]
 800c548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c54c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c550:	ee17 2a90 	vmov	r2, s15
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c558:	e008      	b.n	800c56c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	609a      	str	r2, [r3, #8]
}
 800c56c:	bf00      	nop
 800c56e:	3724      	adds	r7, #36	@ 0x24
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	58024400 	.word	0x58024400
 800c57c:	03d09000 	.word	0x03d09000
 800c580:	46000000 	.word	0x46000000
 800c584:	4c742400 	.word	0x4c742400
 800c588:	4a742400 	.word	0x4a742400
 800c58c:	4af42400 	.word	0x4af42400

0800c590 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c59a:	2300      	movs	r3, #0
 800c59c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c59e:	4b53      	ldr	r3, [pc, #332]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5a2:	f003 0303 	and.w	r3, r3, #3
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	d101      	bne.n	800c5ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e099      	b.n	800c6e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c5ae:	4b4f      	ldr	r3, [pc, #316]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a4e      	ldr	r2, [pc, #312]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c5b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c5b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5ba:	f7f7 faeb 	bl	8003b94 <HAL_GetTick>
 800c5be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5c0:	e008      	b.n	800c5d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c5c2:	f7f7 fae7 	bl	8003b94 <HAL_GetTick>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d901      	bls.n	800c5d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e086      	b.n	800c6e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5d4:	4b45      	ldr	r3, [pc, #276]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1f0      	bne.n	800c5c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c5e0:	4b42      	ldr	r3, [pc, #264]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	031b      	lsls	r3, r3, #12
 800c5ee:	493f      	ldr	r1, [pc, #252]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	628b      	str	r3, [r1, #40]	@ 0x28
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	3b01      	subs	r3, #1
 800c604:	025b      	lsls	r3, r3, #9
 800c606:	b29b      	uxth	r3, r3
 800c608:	431a      	orrs	r2, r3
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	3b01      	subs	r3, #1
 800c610:	041b      	lsls	r3, r3, #16
 800c612:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c616:	431a      	orrs	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	061b      	lsls	r3, r3, #24
 800c620:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c624:	4931      	ldr	r1, [pc, #196]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c626:	4313      	orrs	r3, r2
 800c628:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c62a:	4b30      	ldr	r3, [pc, #192]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c62e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	695b      	ldr	r3, [r3, #20]
 800c636:	492d      	ldr	r1, [pc, #180]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c638:	4313      	orrs	r3, r2
 800c63a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c63c:	4b2b      	ldr	r3, [pc, #172]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c640:	f023 0220 	bic.w	r2, r3, #32
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	699b      	ldr	r3, [r3, #24]
 800c648:	4928      	ldr	r1, [pc, #160]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c64a:	4313      	orrs	r3, r2
 800c64c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c64e:	4b27      	ldr	r3, [pc, #156]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c652:	4a26      	ldr	r2, [pc, #152]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c654:	f023 0310 	bic.w	r3, r3, #16
 800c658:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c65a:	4b24      	ldr	r3, [pc, #144]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c65c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c65e:	4b24      	ldr	r3, [pc, #144]	@ (800c6f0 <RCCEx_PLL2_Config+0x160>)
 800c660:	4013      	ands	r3, r2
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	69d2      	ldr	r2, [r2, #28]
 800c666:	00d2      	lsls	r2, r2, #3
 800c668:	4920      	ldr	r1, [pc, #128]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c66a:	4313      	orrs	r3, r2
 800c66c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c66e:	4b1f      	ldr	r3, [pc, #124]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c672:	4a1e      	ldr	r2, [pc, #120]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c674:	f043 0310 	orr.w	r3, r3, #16
 800c678:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d106      	bne.n	800c68e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c680:	4b1a      	ldr	r3, [pc, #104]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c684:	4a19      	ldr	r2, [pc, #100]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c686:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c68a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c68c:	e00f      	b.n	800c6ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d106      	bne.n	800c6a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c694:	4b15      	ldr	r3, [pc, #84]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c698:	4a14      	ldr	r2, [pc, #80]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c69a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c69e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c6a0:	e005      	b.n	800c6ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6a2:	4b12      	ldr	r3, [pc, #72]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a6:	4a11      	ldr	r2, [pc, #68]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c6a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c6ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c6ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a0e      	ldr	r2, [pc, #56]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c6b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c6b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6ba:	f7f7 fa6b 	bl	8003b94 <HAL_GetTick>
 800c6be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6c0:	e008      	b.n	800c6d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c6c2:	f7f7 fa67 	bl	8003b94 <HAL_GetTick>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d901      	bls.n	800c6d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6d0:	2303      	movs	r3, #3
 800c6d2:	e006      	b.n	800c6e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6d4:	4b05      	ldr	r3, [pc, #20]	@ (800c6ec <RCCEx_PLL2_Config+0x15c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d0f0      	beq.n	800c6c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	58024400 	.word	0x58024400
 800c6f0:	ffff0007 	.word	0xffff0007

0800c6f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c702:	4b53      	ldr	r3, [pc, #332]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c706:	f003 0303 	and.w	r3, r3, #3
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	d101      	bne.n	800c712 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c70e:	2301      	movs	r3, #1
 800c710:	e099      	b.n	800c846 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c712:	4b4f      	ldr	r3, [pc, #316]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a4e      	ldr	r2, [pc, #312]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c71c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c71e:	f7f7 fa39 	bl	8003b94 <HAL_GetTick>
 800c722:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c724:	e008      	b.n	800c738 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c726:	f7f7 fa35 	bl	8003b94 <HAL_GetTick>
 800c72a:	4602      	mov	r2, r0
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	2b02      	cmp	r3, #2
 800c732:	d901      	bls.n	800c738 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c734:	2303      	movs	r3, #3
 800c736:	e086      	b.n	800c846 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c738:	4b45      	ldr	r3, [pc, #276]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1f0      	bne.n	800c726 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c744:	4b42      	ldr	r3, [pc, #264]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c748:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	051b      	lsls	r3, r3, #20
 800c752:	493f      	ldr	r1, [pc, #252]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c754:	4313      	orrs	r3, r2
 800c756:	628b      	str	r3, [r1, #40]	@ 0x28
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	3b01      	subs	r3, #1
 800c75e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	3b01      	subs	r3, #1
 800c768:	025b      	lsls	r3, r3, #9
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	431a      	orrs	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	3b01      	subs	r3, #1
 800c774:	041b      	lsls	r3, r3, #16
 800c776:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c77a:	431a      	orrs	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	3b01      	subs	r3, #1
 800c782:	061b      	lsls	r3, r3, #24
 800c784:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c788:	4931      	ldr	r1, [pc, #196]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c78a:	4313      	orrs	r3, r2
 800c78c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c78e:	4b30      	ldr	r3, [pc, #192]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c792:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	695b      	ldr	r3, [r3, #20]
 800c79a:	492d      	ldr	r1, [pc, #180]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c79c:	4313      	orrs	r3, r2
 800c79e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c7a0:	4b2b      	ldr	r3, [pc, #172]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	699b      	ldr	r3, [r3, #24]
 800c7ac:	4928      	ldr	r1, [pc, #160]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c7b2:	4b27      	ldr	r3, [pc, #156]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7b6:	4a26      	ldr	r2, [pc, #152]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7be:	4b24      	ldr	r3, [pc, #144]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7c2:	4b24      	ldr	r3, [pc, #144]	@ (800c854 <RCCEx_PLL3_Config+0x160>)
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	69d2      	ldr	r2, [r2, #28]
 800c7ca:	00d2      	lsls	r2, r2, #3
 800c7cc:	4920      	ldr	r1, [pc, #128]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c7d2:	4b1f      	ldr	r3, [pc, #124]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d6:	4a1e      	ldr	r2, [pc, #120]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c7dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d106      	bne.n	800c7f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c7e4:	4b1a      	ldr	r3, [pc, #104]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e8:	4a19      	ldr	r2, [pc, #100]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c7ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c7f0:	e00f      	b.n	800c812 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d106      	bne.n	800c806 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c7f8:	4b15      	ldr	r3, [pc, #84]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7fc:	4a14      	ldr	r2, [pc, #80]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c7fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c802:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c804:	e005      	b.n	800c812 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c806:	4b12      	ldr	r3, [pc, #72]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c80a:	4a11      	ldr	r2, [pc, #68]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c80c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c810:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c812:	4b0f      	ldr	r3, [pc, #60]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a0e      	ldr	r2, [pc, #56]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c81c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c81e:	f7f7 f9b9 	bl	8003b94 <HAL_GetTick>
 800c822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c824:	e008      	b.n	800c838 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c826:	f7f7 f9b5 	bl	8003b94 <HAL_GetTick>
 800c82a:	4602      	mov	r2, r0
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	2b02      	cmp	r3, #2
 800c832:	d901      	bls.n	800c838 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c834:	2303      	movs	r3, #3
 800c836:	e006      	b.n	800c846 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c838:	4b05      	ldr	r3, [pc, #20]	@ (800c850 <RCCEx_PLL3_Config+0x15c>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c840:	2b00      	cmp	r3, #0
 800c842:	d0f0      	beq.n	800c826 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c844:	7bfb      	ldrb	r3, [r7, #15]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	58024400 	.word	0x58024400
 800c854:	ffff0007 	.word	0xffff0007

0800c858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d101      	bne.n	800c86a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	e049      	b.n	800c8fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c870:	b2db      	uxtb	r3, r3
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7f6 fc2c 	bl	80030dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2202      	movs	r2, #2
 800c888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	3304      	adds	r3, #4
 800c894:	4619      	mov	r1, r3
 800c896:	4610      	mov	r0, r2
 800c898:	f000 fdf4 	bl	800d484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
	...

0800c908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d001      	beq.n	800c920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	e05e      	b.n	800c9de <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2202      	movs	r2, #2
 800c924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68da      	ldr	r2, [r3, #12]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f042 0201 	orr.w	r2, r2, #1
 800c936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a2b      	ldr	r2, [pc, #172]	@ (800c9ec <HAL_TIM_Base_Start_IT+0xe4>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d02c      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x94>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c94a:	d027      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x94>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a27      	ldr	r2, [pc, #156]	@ (800c9f0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d022      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x94>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a26      	ldr	r2, [pc, #152]	@ (800c9f4 <HAL_TIM_Base_Start_IT+0xec>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d01d      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x94>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a24      	ldr	r2, [pc, #144]	@ (800c9f8 <HAL_TIM_Base_Start_IT+0xf0>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d018      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x94>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a23      	ldr	r2, [pc, #140]	@ (800c9fc <HAL_TIM_Base_Start_IT+0xf4>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d013      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x94>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a21      	ldr	r2, [pc, #132]	@ (800ca00 <HAL_TIM_Base_Start_IT+0xf8>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d00e      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x94>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a20      	ldr	r2, [pc, #128]	@ (800ca04 <HAL_TIM_Base_Start_IT+0xfc>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d009      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x94>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a1e      	ldr	r2, [pc, #120]	@ (800ca08 <HAL_TIM_Base_Start_IT+0x100>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d004      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x94>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a1d      	ldr	r2, [pc, #116]	@ (800ca0c <HAL_TIM_Base_Start_IT+0x104>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d115      	bne.n	800c9c8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	689a      	ldr	r2, [r3, #8]
 800c9a2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca10 <HAL_TIM_Base_Start_IT+0x108>)
 800c9a4:	4013      	ands	r3, r2
 800c9a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b06      	cmp	r3, #6
 800c9ac:	d015      	beq.n	800c9da <HAL_TIM_Base_Start_IT+0xd2>
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9b4:	d011      	beq.n	800c9da <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f042 0201 	orr.w	r2, r2, #1
 800c9c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9c6:	e008      	b.n	800c9da <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f042 0201 	orr.w	r2, r2, #1
 800c9d6:	601a      	str	r2, [r3, #0]
 800c9d8:	e000      	b.n	800c9dc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	40010000 	.word	0x40010000
 800c9f0:	40000400 	.word	0x40000400
 800c9f4:	40000800 	.word	0x40000800
 800c9f8:	40000c00 	.word	0x40000c00
 800c9fc:	40010400 	.word	0x40010400
 800ca00:	40001800 	.word	0x40001800
 800ca04:	40014000 	.word	0x40014000
 800ca08:	4000e000 	.word	0x4000e000
 800ca0c:	4000e400 	.word	0x4000e400
 800ca10:	00010007 	.word	0x00010007

0800ca14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d101      	bne.n	800ca26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e049      	b.n	800caba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d106      	bne.n	800ca40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7f6 fafe 	bl	800303c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2202      	movs	r2, #2
 800ca44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	4619      	mov	r1, r3
 800ca52:	4610      	mov	r0, r2
 800ca54:	f000 fd16 	bl	800d484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
	...

0800cac4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cace:	2300      	movs	r3, #0
 800cad0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d109      	bne.n	800caec <HAL_TIM_PWM_Start_IT+0x28>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	bf14      	ite	ne
 800cae4:	2301      	movne	r3, #1
 800cae6:	2300      	moveq	r3, #0
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	e03c      	b.n	800cb66 <HAL_TIM_PWM_Start_IT+0xa2>
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	2b04      	cmp	r3, #4
 800caf0:	d109      	bne.n	800cb06 <HAL_TIM_PWM_Start_IT+0x42>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	bf14      	ite	ne
 800cafe:	2301      	movne	r3, #1
 800cb00:	2300      	moveq	r3, #0
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	e02f      	b.n	800cb66 <HAL_TIM_PWM_Start_IT+0xa2>
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	2b08      	cmp	r3, #8
 800cb0a:	d109      	bne.n	800cb20 <HAL_TIM_PWM_Start_IT+0x5c>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	bf14      	ite	ne
 800cb18:	2301      	movne	r3, #1
 800cb1a:	2300      	moveq	r3, #0
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	e022      	b.n	800cb66 <HAL_TIM_PWM_Start_IT+0xa2>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	2b0c      	cmp	r3, #12
 800cb24:	d109      	bne.n	800cb3a <HAL_TIM_PWM_Start_IT+0x76>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	bf14      	ite	ne
 800cb32:	2301      	movne	r3, #1
 800cb34:	2300      	moveq	r3, #0
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	e015      	b.n	800cb66 <HAL_TIM_PWM_Start_IT+0xa2>
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	2b10      	cmp	r3, #16
 800cb3e:	d109      	bne.n	800cb54 <HAL_TIM_PWM_Start_IT+0x90>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	bf14      	ite	ne
 800cb4c:	2301      	movne	r3, #1
 800cb4e:	2300      	moveq	r3, #0
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	e008      	b.n	800cb66 <HAL_TIM_PWM_Start_IT+0xa2>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	bf14      	ite	ne
 800cb60:	2301      	movne	r3, #1
 800cb62:	2300      	moveq	r3, #0
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d001      	beq.n	800cb6e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e0f6      	b.n	800cd5c <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d104      	bne.n	800cb7e <HAL_TIM_PWM_Start_IT+0xba>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2202      	movs	r2, #2
 800cb78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cb7c:	e023      	b.n	800cbc6 <HAL_TIM_PWM_Start_IT+0x102>
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	2b04      	cmp	r3, #4
 800cb82:	d104      	bne.n	800cb8e <HAL_TIM_PWM_Start_IT+0xca>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2202      	movs	r2, #2
 800cb88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cb8c:	e01b      	b.n	800cbc6 <HAL_TIM_PWM_Start_IT+0x102>
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b08      	cmp	r3, #8
 800cb92:	d104      	bne.n	800cb9e <HAL_TIM_PWM_Start_IT+0xda>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2202      	movs	r2, #2
 800cb98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cb9c:	e013      	b.n	800cbc6 <HAL_TIM_PWM_Start_IT+0x102>
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2b0c      	cmp	r3, #12
 800cba2:	d104      	bne.n	800cbae <HAL_TIM_PWM_Start_IT+0xea>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2202      	movs	r2, #2
 800cba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cbac:	e00b      	b.n	800cbc6 <HAL_TIM_PWM_Start_IT+0x102>
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	2b10      	cmp	r3, #16
 800cbb2:	d104      	bne.n	800cbbe <HAL_TIM_PWM_Start_IT+0xfa>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2202      	movs	r2, #2
 800cbb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cbbc:	e003      	b.n	800cbc6 <HAL_TIM_PWM_Start_IT+0x102>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2202      	movs	r2, #2
 800cbc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	2b0c      	cmp	r3, #12
 800cbca:	d841      	bhi.n	800cc50 <HAL_TIM_PWM_Start_IT+0x18c>
 800cbcc:	a201      	add	r2, pc, #4	@ (adr r2, 800cbd4 <HAL_TIM_PWM_Start_IT+0x110>)
 800cbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd2:	bf00      	nop
 800cbd4:	0800cc09 	.word	0x0800cc09
 800cbd8:	0800cc51 	.word	0x0800cc51
 800cbdc:	0800cc51 	.word	0x0800cc51
 800cbe0:	0800cc51 	.word	0x0800cc51
 800cbe4:	0800cc1b 	.word	0x0800cc1b
 800cbe8:	0800cc51 	.word	0x0800cc51
 800cbec:	0800cc51 	.word	0x0800cc51
 800cbf0:	0800cc51 	.word	0x0800cc51
 800cbf4:	0800cc2d 	.word	0x0800cc2d
 800cbf8:	0800cc51 	.word	0x0800cc51
 800cbfc:	0800cc51 	.word	0x0800cc51
 800cc00:	0800cc51 	.word	0x0800cc51
 800cc04:	0800cc3f 	.word	0x0800cc3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68da      	ldr	r2, [r3, #12]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f042 0202 	orr.w	r2, r2, #2
 800cc16:	60da      	str	r2, [r3, #12]
      break;
 800cc18:	e01d      	b.n	800cc56 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	68da      	ldr	r2, [r3, #12]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f042 0204 	orr.w	r2, r2, #4
 800cc28:	60da      	str	r2, [r3, #12]
      break;
 800cc2a:	e014      	b.n	800cc56 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68da      	ldr	r2, [r3, #12]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f042 0208 	orr.w	r2, r2, #8
 800cc3a:	60da      	str	r2, [r3, #12]
      break;
 800cc3c:	e00b      	b.n	800cc56 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	68da      	ldr	r2, [r3, #12]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f042 0210 	orr.w	r2, r2, #16
 800cc4c:	60da      	str	r2, [r3, #12]
      break;
 800cc4e:	e002      	b.n	800cc56 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	73fb      	strb	r3, [r7, #15]
      break;
 800cc54:	bf00      	nop
  }

  if (status == HAL_OK)
 800cc56:	7bfb      	ldrb	r3, [r7, #15]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d17e      	bne.n	800cd5a <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2201      	movs	r2, #1
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f000 ff8f 	bl	800db88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a3d      	ldr	r2, [pc, #244]	@ (800cd64 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d013      	beq.n	800cc9c <HAL_TIM_PWM_Start_IT+0x1d8>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a3b      	ldr	r2, [pc, #236]	@ (800cd68 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d00e      	beq.n	800cc9c <HAL_TIM_PWM_Start_IT+0x1d8>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a3a      	ldr	r2, [pc, #232]	@ (800cd6c <HAL_TIM_PWM_Start_IT+0x2a8>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d009      	beq.n	800cc9c <HAL_TIM_PWM_Start_IT+0x1d8>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a38      	ldr	r2, [pc, #224]	@ (800cd70 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d004      	beq.n	800cc9c <HAL_TIM_PWM_Start_IT+0x1d8>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a37      	ldr	r2, [pc, #220]	@ (800cd74 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d101      	bne.n	800cca0 <HAL_TIM_PWM_Start_IT+0x1dc>
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e000      	b.n	800cca2 <HAL_TIM_PWM_Start_IT+0x1de>
 800cca0:	2300      	movs	r3, #0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d007      	beq.n	800ccb6 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ccb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a2a      	ldr	r2, [pc, #168]	@ (800cd64 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d02c      	beq.n	800cd1a <HAL_TIM_PWM_Start_IT+0x256>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccc8:	d027      	beq.n	800cd1a <HAL_TIM_PWM_Start_IT+0x256>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a2a      	ldr	r2, [pc, #168]	@ (800cd78 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d022      	beq.n	800cd1a <HAL_TIM_PWM_Start_IT+0x256>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a28      	ldr	r2, [pc, #160]	@ (800cd7c <HAL_TIM_PWM_Start_IT+0x2b8>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d01d      	beq.n	800cd1a <HAL_TIM_PWM_Start_IT+0x256>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a27      	ldr	r2, [pc, #156]	@ (800cd80 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d018      	beq.n	800cd1a <HAL_TIM_PWM_Start_IT+0x256>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a1e      	ldr	r2, [pc, #120]	@ (800cd68 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d013      	beq.n	800cd1a <HAL_TIM_PWM_Start_IT+0x256>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a23      	ldr	r2, [pc, #140]	@ (800cd84 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d00e      	beq.n	800cd1a <HAL_TIM_PWM_Start_IT+0x256>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a1a      	ldr	r2, [pc, #104]	@ (800cd6c <HAL_TIM_PWM_Start_IT+0x2a8>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d009      	beq.n	800cd1a <HAL_TIM_PWM_Start_IT+0x256>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a1f      	ldr	r2, [pc, #124]	@ (800cd88 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d004      	beq.n	800cd1a <HAL_TIM_PWM_Start_IT+0x256>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a1d      	ldr	r2, [pc, #116]	@ (800cd8c <HAL_TIM_PWM_Start_IT+0x2c8>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d115      	bne.n	800cd46 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	689a      	ldr	r2, [r3, #8]
 800cd20:	4b1b      	ldr	r3, [pc, #108]	@ (800cd90 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800cd22:	4013      	ands	r3, r2
 800cd24:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b06      	cmp	r3, #6
 800cd2a:	d015      	beq.n	800cd58 <HAL_TIM_PWM_Start_IT+0x294>
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd32:	d011      	beq.n	800cd58 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f042 0201 	orr.w	r2, r2, #1
 800cd42:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd44:	e008      	b.n	800cd58 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f042 0201 	orr.w	r2, r2, #1
 800cd54:	601a      	str	r2, [r3, #0]
 800cd56:	e000      	b.n	800cd5a <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd58:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3710      	adds	r7, #16
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	40010000 	.word	0x40010000
 800cd68:	40010400 	.word	0x40010400
 800cd6c:	40014000 	.word	0x40014000
 800cd70:	40014400 	.word	0x40014400
 800cd74:	40014800 	.word	0x40014800
 800cd78:	40000400 	.word	0x40000400
 800cd7c:	40000800 	.word	0x40000800
 800cd80:	40000c00 	.word	0x40000c00
 800cd84:	40001800 	.word	0x40001800
 800cd88:	4000e000 	.word	0x4000e000
 800cd8c:	4000e400 	.word	0x4000e400
 800cd90:	00010007 	.word	0x00010007

0800cd94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b086      	sub	sp, #24
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cda4:	2301      	movs	r3, #1
 800cda6:	e08f      	b.n	800cec8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d106      	bne.n	800cdc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7f5 ff79 	bl	8002cb4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2202      	movs	r2, #2
 800cdc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	6899      	ldr	r1, [r3, #8]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	4b3e      	ldr	r3, [pc, #248]	@ (800ced0 <HAL_TIM_Encoder_Init+0x13c>)
 800cdd6:	400b      	ands	r3, r1
 800cdd8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	3304      	adds	r3, #4
 800cde2:	4619      	mov	r1, r3
 800cde4:	4610      	mov	r0, r2
 800cde6:	f000 fb4d 	bl	800d484 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	689b      	ldr	r3, [r3, #8]
 800cdf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	699b      	ldr	r3, [r3, #24]
 800cdf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	6a1b      	ldr	r3, [r3, #32]
 800ce00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ce0c:	693a      	ldr	r2, [r7, #16]
 800ce0e:	4b31      	ldr	r3, [pc, #196]	@ (800ced4 <HAL_TIM_Encoder_Init+0x140>)
 800ce10:	4013      	ands	r3, r2
 800ce12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	689a      	ldr	r2, [r3, #8]
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	699b      	ldr	r3, [r3, #24]
 800ce1c:	021b      	lsls	r3, r3, #8
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	693a      	ldr	r2, [r7, #16]
 800ce22:	4313      	orrs	r3, r2
 800ce24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	4b2b      	ldr	r3, [pc, #172]	@ (800ced8 <HAL_TIM_Encoder_Init+0x144>)
 800ce2a:	4013      	ands	r3, r2
 800ce2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	4b2a      	ldr	r3, [pc, #168]	@ (800cedc <HAL_TIM_Encoder_Init+0x148>)
 800ce32:	4013      	ands	r3, r2
 800ce34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	69db      	ldr	r3, [r3, #28]
 800ce3e:	021b      	lsls	r3, r3, #8
 800ce40:	4313      	orrs	r3, r2
 800ce42:	693a      	ldr	r2, [r7, #16]
 800ce44:	4313      	orrs	r3, r2
 800ce46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	011a      	lsls	r2, r3, #4
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	6a1b      	ldr	r3, [r3, #32]
 800ce52:	031b      	lsls	r3, r3, #12
 800ce54:	4313      	orrs	r3, r2
 800ce56:	693a      	ldr	r2, [r7, #16]
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800ce62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800ce6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	685a      	ldr	r2, [r3, #4]
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	695b      	ldr	r3, [r3, #20]
 800ce74:	011b      	lsls	r3, r3, #4
 800ce76:	4313      	orrs	r3, r2
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	697a      	ldr	r2, [r7, #20]
 800ce84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2201      	movs	r2, #1
 800cea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	fffebff8 	.word	0xfffebff8
 800ced4:	fffffcfc 	.word	0xfffffcfc
 800ced8:	fffff3f3 	.word	0xfffff3f3
 800cedc:	ffff0f0f 	.word	0xffff0f0f

0800cee0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cef0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cef8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf08:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d110      	bne.n	800cf32 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d102      	bne.n	800cf1c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800cf16:	7b7b      	ldrb	r3, [r7, #13]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d001      	beq.n	800cf20 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e069      	b.n	800cff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2202      	movs	r2, #2
 800cf24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2202      	movs	r2, #2
 800cf2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf30:	e031      	b.n	800cf96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	2b04      	cmp	r3, #4
 800cf36:	d110      	bne.n	800cf5a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf38:	7bbb      	ldrb	r3, [r7, #14]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d102      	bne.n	800cf44 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cf3e:	7b3b      	ldrb	r3, [r7, #12]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d001      	beq.n	800cf48 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	e055      	b.n	800cff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2202      	movs	r2, #2
 800cf54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf58:	e01d      	b.n	800cf96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d108      	bne.n	800cf72 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf60:	7bbb      	ldrb	r3, [r7, #14]
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d105      	bne.n	800cf72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf66:	7b7b      	ldrb	r3, [r7, #13]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d102      	bne.n	800cf72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cf6c:	7b3b      	ldrb	r3, [r7, #12]
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d001      	beq.n	800cf76 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e03e      	b.n	800cff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2202      	movs	r2, #2
 800cf7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2202      	movs	r2, #2
 800cf82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2202      	movs	r2, #2
 800cf8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2202      	movs	r2, #2
 800cf92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <HAL_TIM_Encoder_Start+0xc4>
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	2b04      	cmp	r3, #4
 800cfa0:	d008      	beq.n	800cfb4 <HAL_TIM_Encoder_Start+0xd4>
 800cfa2:	e00f      	b.n	800cfc4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	2100      	movs	r1, #0
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 fdeb 	bl	800db88 <TIM_CCxChannelCmd>
      break;
 800cfb2:	e016      	b.n	800cfe2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	2104      	movs	r1, #4
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f000 fde3 	bl	800db88 <TIM_CCxChannelCmd>
      break;
 800cfc2:	e00e      	b.n	800cfe2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	2100      	movs	r1, #0
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 fddb 	bl	800db88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	2104      	movs	r1, #4
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 fdd4 	bl	800db88 <TIM_CCxChannelCmd>
      break;
 800cfe0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f042 0201 	orr.w	r2, r2, #1
 800cff0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cff2:	2300      	movs	r3, #0
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3710      	adds	r7, #16
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	f003 0302 	and.w	r3, r3, #2
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d020      	beq.n	800d060 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f003 0302 	and.w	r3, r3, #2
 800d024:	2b00      	cmp	r3, #0
 800d026:	d01b      	beq.n	800d060 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f06f 0202 	mvn.w	r2, #2
 800d030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	699b      	ldr	r3, [r3, #24]
 800d03e:	f003 0303 	and.w	r3, r3, #3
 800d042:	2b00      	cmp	r3, #0
 800d044:	d003      	beq.n	800d04e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 f9fe 	bl	800d448 <HAL_TIM_IC_CaptureCallback>
 800d04c:	e005      	b.n	800d05a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 f9f0 	bl	800d434 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 fa01 	bl	800d45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	f003 0304 	and.w	r3, r3, #4
 800d066:	2b00      	cmp	r3, #0
 800d068:	d020      	beq.n	800d0ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f003 0304 	and.w	r3, r3, #4
 800d070:	2b00      	cmp	r3, #0
 800d072:	d01b      	beq.n	800d0ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f06f 0204 	mvn.w	r2, #4
 800d07c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2202      	movs	r2, #2
 800d082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	699b      	ldr	r3, [r3, #24]
 800d08a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d003      	beq.n	800d09a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f9d8 	bl	800d448 <HAL_TIM_IC_CaptureCallback>
 800d098:	e005      	b.n	800d0a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f9ca 	bl	800d434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f9db 	bl	800d45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	f003 0308 	and.w	r3, r3, #8
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d020      	beq.n	800d0f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f003 0308 	and.w	r3, r3, #8
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d01b      	beq.n	800d0f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f06f 0208 	mvn.w	r2, #8
 800d0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2204      	movs	r2, #4
 800d0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	69db      	ldr	r3, [r3, #28]
 800d0d6:	f003 0303 	and.w	r3, r3, #3
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d003      	beq.n	800d0e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 f9b2 	bl	800d448 <HAL_TIM_IC_CaptureCallback>
 800d0e4:	e005      	b.n	800d0f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 f9a4 	bl	800d434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f9b5 	bl	800d45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	f003 0310 	and.w	r3, r3, #16
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d020      	beq.n	800d144 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f003 0310 	and.w	r3, r3, #16
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d01b      	beq.n	800d144 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f06f 0210 	mvn.w	r2, #16
 800d114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2208      	movs	r2, #8
 800d11a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	69db      	ldr	r3, [r3, #28]
 800d122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d126:	2b00      	cmp	r3, #0
 800d128:	d003      	beq.n	800d132 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 f98c 	bl	800d448 <HAL_TIM_IC_CaptureCallback>
 800d130:	e005      	b.n	800d13e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 f97e 	bl	800d434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f98f 	bl	800d45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	f003 0301 	and.w	r3, r3, #1
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00c      	beq.n	800d168 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	2b00      	cmp	r3, #0
 800d156:	d007      	beq.n	800d168 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f06f 0201 	mvn.w	r2, #1
 800d160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7f5 fae0 	bl	8002728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d104      	bne.n	800d17c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00c      	beq.n	800d196 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d182:	2b00      	cmp	r3, #0
 800d184:	d007      	beq.n	800d196 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d18e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 fe51 	bl	800de38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00c      	beq.n	800d1ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d007      	beq.n	800d1ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d1b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fe49 	bl	800de4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00c      	beq.n	800d1de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d007      	beq.n	800d1de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d1d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f949 	bl	800d470 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	f003 0320 	and.w	r3, r3, #32
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00c      	beq.n	800d202 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f003 0320 	and.w	r3, r3, #32
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d007      	beq.n	800d202 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f06f 0220 	mvn.w	r2, #32
 800d1fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fe11 	bl	800de24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d202:	bf00      	nop
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
	...

0800d20c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b086      	sub	sp, #24
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d218:	2300      	movs	r3, #0
 800d21a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d222:	2b01      	cmp	r3, #1
 800d224:	d101      	bne.n	800d22a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d226:	2302      	movs	r3, #2
 800d228:	e0ff      	b.n	800d42a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2201      	movs	r2, #1
 800d22e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2b14      	cmp	r3, #20
 800d236:	f200 80f0 	bhi.w	800d41a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d23a:	a201      	add	r2, pc, #4	@ (adr r2, 800d240 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d240:	0800d295 	.word	0x0800d295
 800d244:	0800d41b 	.word	0x0800d41b
 800d248:	0800d41b 	.word	0x0800d41b
 800d24c:	0800d41b 	.word	0x0800d41b
 800d250:	0800d2d5 	.word	0x0800d2d5
 800d254:	0800d41b 	.word	0x0800d41b
 800d258:	0800d41b 	.word	0x0800d41b
 800d25c:	0800d41b 	.word	0x0800d41b
 800d260:	0800d317 	.word	0x0800d317
 800d264:	0800d41b 	.word	0x0800d41b
 800d268:	0800d41b 	.word	0x0800d41b
 800d26c:	0800d41b 	.word	0x0800d41b
 800d270:	0800d357 	.word	0x0800d357
 800d274:	0800d41b 	.word	0x0800d41b
 800d278:	0800d41b 	.word	0x0800d41b
 800d27c:	0800d41b 	.word	0x0800d41b
 800d280:	0800d399 	.word	0x0800d399
 800d284:	0800d41b 	.word	0x0800d41b
 800d288:	0800d41b 	.word	0x0800d41b
 800d28c:	0800d41b 	.word	0x0800d41b
 800d290:	0800d3d9 	.word	0x0800d3d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	68b9      	ldr	r1, [r7, #8]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f000 f99e 	bl	800d5dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	699a      	ldr	r2, [r3, #24]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f042 0208 	orr.w	r2, r2, #8
 800d2ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	699a      	ldr	r2, [r3, #24]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f022 0204 	bic.w	r2, r2, #4
 800d2be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	6999      	ldr	r1, [r3, #24]
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	691a      	ldr	r2, [r3, #16]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	430a      	orrs	r2, r1
 800d2d0:	619a      	str	r2, [r3, #24]
      break;
 800d2d2:	e0a5      	b.n	800d420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68b9      	ldr	r1, [r7, #8]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f000 fa0e 	bl	800d6fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	699a      	ldr	r2, [r3, #24]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d2ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	699a      	ldr	r2, [r3, #24]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d2fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	6999      	ldr	r1, [r3, #24]
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	021a      	lsls	r2, r3, #8
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	430a      	orrs	r2, r1
 800d312:	619a      	str	r2, [r3, #24]
      break;
 800d314:	e084      	b.n	800d420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	68b9      	ldr	r1, [r7, #8]
 800d31c:	4618      	mov	r0, r3
 800d31e:	f000 fa77 	bl	800d810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	69da      	ldr	r2, [r3, #28]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f042 0208 	orr.w	r2, r2, #8
 800d330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	69da      	ldr	r2, [r3, #28]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f022 0204 	bic.w	r2, r2, #4
 800d340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	69d9      	ldr	r1, [r3, #28]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	691a      	ldr	r2, [r3, #16]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	430a      	orrs	r2, r1
 800d352:	61da      	str	r2, [r3, #28]
      break;
 800d354:	e064      	b.n	800d420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	68b9      	ldr	r1, [r7, #8]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f000 fadf 	bl	800d920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	69da      	ldr	r2, [r3, #28]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	69da      	ldr	r2, [r3, #28]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	69d9      	ldr	r1, [r3, #28]
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	691b      	ldr	r3, [r3, #16]
 800d38c:	021a      	lsls	r2, r3, #8
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	430a      	orrs	r2, r1
 800d394:	61da      	str	r2, [r3, #28]
      break;
 800d396:	e043      	b.n	800d420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	68b9      	ldr	r1, [r7, #8]
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f000 fb28 	bl	800d9f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f042 0208 	orr.w	r2, r2, #8
 800d3b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f022 0204 	bic.w	r2, r2, #4
 800d3c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	691a      	ldr	r2, [r3, #16]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	430a      	orrs	r2, r1
 800d3d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d3d6:	e023      	b.n	800d420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	68b9      	ldr	r1, [r7, #8]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f000 fb6c 	bl	800dabc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d3f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d402:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	021a      	lsls	r2, r3, #8
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	430a      	orrs	r2, r1
 800d416:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d418:	e002      	b.n	800d420 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	75fb      	strb	r3, [r7, #23]
      break;
 800d41e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2200      	movs	r2, #0
 800d424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d428:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3718      	adds	r7, #24
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop

0800d434 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d43c:	bf00      	nop
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a47      	ldr	r2, [pc, #284]	@ (800d5b4 <TIM_Base_SetConfig+0x130>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d013      	beq.n	800d4c4 <TIM_Base_SetConfig+0x40>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4a2:	d00f      	beq.n	800d4c4 <TIM_Base_SetConfig+0x40>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4a44      	ldr	r2, [pc, #272]	@ (800d5b8 <TIM_Base_SetConfig+0x134>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d00b      	beq.n	800d4c4 <TIM_Base_SetConfig+0x40>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	4a43      	ldr	r2, [pc, #268]	@ (800d5bc <TIM_Base_SetConfig+0x138>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d007      	beq.n	800d4c4 <TIM_Base_SetConfig+0x40>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	4a42      	ldr	r2, [pc, #264]	@ (800d5c0 <TIM_Base_SetConfig+0x13c>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d003      	beq.n	800d4c4 <TIM_Base_SetConfig+0x40>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	4a41      	ldr	r2, [pc, #260]	@ (800d5c4 <TIM_Base_SetConfig+0x140>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d108      	bne.n	800d4d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	68fa      	ldr	r2, [r7, #12]
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	4a36      	ldr	r2, [pc, #216]	@ (800d5b4 <TIM_Base_SetConfig+0x130>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d027      	beq.n	800d52e <TIM_Base_SetConfig+0xaa>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4e4:	d023      	beq.n	800d52e <TIM_Base_SetConfig+0xaa>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	4a33      	ldr	r2, [pc, #204]	@ (800d5b8 <TIM_Base_SetConfig+0x134>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d01f      	beq.n	800d52e <TIM_Base_SetConfig+0xaa>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4a32      	ldr	r2, [pc, #200]	@ (800d5bc <TIM_Base_SetConfig+0x138>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d01b      	beq.n	800d52e <TIM_Base_SetConfig+0xaa>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	4a31      	ldr	r2, [pc, #196]	@ (800d5c0 <TIM_Base_SetConfig+0x13c>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d017      	beq.n	800d52e <TIM_Base_SetConfig+0xaa>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	4a30      	ldr	r2, [pc, #192]	@ (800d5c4 <TIM_Base_SetConfig+0x140>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d013      	beq.n	800d52e <TIM_Base_SetConfig+0xaa>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4a2f      	ldr	r2, [pc, #188]	@ (800d5c8 <TIM_Base_SetConfig+0x144>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d00f      	beq.n	800d52e <TIM_Base_SetConfig+0xaa>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4a2e      	ldr	r2, [pc, #184]	@ (800d5cc <TIM_Base_SetConfig+0x148>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d00b      	beq.n	800d52e <TIM_Base_SetConfig+0xaa>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	4a2d      	ldr	r2, [pc, #180]	@ (800d5d0 <TIM_Base_SetConfig+0x14c>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d007      	beq.n	800d52e <TIM_Base_SetConfig+0xaa>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4a2c      	ldr	r2, [pc, #176]	@ (800d5d4 <TIM_Base_SetConfig+0x150>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d003      	beq.n	800d52e <TIM_Base_SetConfig+0xaa>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a2b      	ldr	r2, [pc, #172]	@ (800d5d8 <TIM_Base_SetConfig+0x154>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d108      	bne.n	800d540 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	4313      	orrs	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	695b      	ldr	r3, [r3, #20]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	689a      	ldr	r2, [r3, #8]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4a14      	ldr	r2, [pc, #80]	@ (800d5b4 <TIM_Base_SetConfig+0x130>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d00f      	beq.n	800d586 <TIM_Base_SetConfig+0x102>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a16      	ldr	r2, [pc, #88]	@ (800d5c4 <TIM_Base_SetConfig+0x140>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d00b      	beq.n	800d586 <TIM_Base_SetConfig+0x102>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4a15      	ldr	r2, [pc, #84]	@ (800d5c8 <TIM_Base_SetConfig+0x144>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d007      	beq.n	800d586 <TIM_Base_SetConfig+0x102>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	4a14      	ldr	r2, [pc, #80]	@ (800d5cc <TIM_Base_SetConfig+0x148>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d003      	beq.n	800d586 <TIM_Base_SetConfig+0x102>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4a13      	ldr	r2, [pc, #76]	@ (800d5d0 <TIM_Base_SetConfig+0x14c>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d103      	bne.n	800d58e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	691a      	ldr	r2, [r3, #16]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f043 0204 	orr.w	r2, r3, #4
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2201      	movs	r2, #1
 800d59e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	601a      	str	r2, [r3, #0]
}
 800d5a6:	bf00      	nop
 800d5a8:	3714      	adds	r7, #20
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	40010000 	.word	0x40010000
 800d5b8:	40000400 	.word	0x40000400
 800d5bc:	40000800 	.word	0x40000800
 800d5c0:	40000c00 	.word	0x40000c00
 800d5c4:	40010400 	.word	0x40010400
 800d5c8:	40014000 	.word	0x40014000
 800d5cc:	40014400 	.word	0x40014400
 800d5d0:	40014800 	.word	0x40014800
 800d5d4:	4000e000 	.word	0x4000e000
 800d5d8:	4000e400 	.word	0x4000e400

0800d5dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b087      	sub	sp, #28
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6a1b      	ldr	r3, [r3, #32]
 800d5f0:	f023 0201 	bic.w	r2, r3, #1
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	4b37      	ldr	r3, [pc, #220]	@ (800d6e4 <TIM_OC1_SetConfig+0x108>)
 800d608:	4013      	ands	r3, r2
 800d60a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f023 0303 	bic.w	r3, r3, #3
 800d612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68fa      	ldr	r2, [r7, #12]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	f023 0302 	bic.w	r3, r3, #2
 800d624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	689b      	ldr	r3, [r3, #8]
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	4313      	orrs	r3, r2
 800d62e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a2d      	ldr	r2, [pc, #180]	@ (800d6e8 <TIM_OC1_SetConfig+0x10c>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d00f      	beq.n	800d658 <TIM_OC1_SetConfig+0x7c>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	4a2c      	ldr	r2, [pc, #176]	@ (800d6ec <TIM_OC1_SetConfig+0x110>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d00b      	beq.n	800d658 <TIM_OC1_SetConfig+0x7c>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	4a2b      	ldr	r2, [pc, #172]	@ (800d6f0 <TIM_OC1_SetConfig+0x114>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d007      	beq.n	800d658 <TIM_OC1_SetConfig+0x7c>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	4a2a      	ldr	r2, [pc, #168]	@ (800d6f4 <TIM_OC1_SetConfig+0x118>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d003      	beq.n	800d658 <TIM_OC1_SetConfig+0x7c>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	4a29      	ldr	r2, [pc, #164]	@ (800d6f8 <TIM_OC1_SetConfig+0x11c>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d10c      	bne.n	800d672 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	f023 0308 	bic.w	r3, r3, #8
 800d65e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	697a      	ldr	r2, [r7, #20]
 800d666:	4313      	orrs	r3, r2
 800d668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	f023 0304 	bic.w	r3, r3, #4
 800d670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a1c      	ldr	r2, [pc, #112]	@ (800d6e8 <TIM_OC1_SetConfig+0x10c>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d00f      	beq.n	800d69a <TIM_OC1_SetConfig+0xbe>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a1b      	ldr	r2, [pc, #108]	@ (800d6ec <TIM_OC1_SetConfig+0x110>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d00b      	beq.n	800d69a <TIM_OC1_SetConfig+0xbe>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a1a      	ldr	r2, [pc, #104]	@ (800d6f0 <TIM_OC1_SetConfig+0x114>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d007      	beq.n	800d69a <TIM_OC1_SetConfig+0xbe>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a19      	ldr	r2, [pc, #100]	@ (800d6f4 <TIM_OC1_SetConfig+0x118>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d003      	beq.n	800d69a <TIM_OC1_SetConfig+0xbe>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a18      	ldr	r2, [pc, #96]	@ (800d6f8 <TIM_OC1_SetConfig+0x11c>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d111      	bne.n	800d6be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d6a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d6a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	693a      	ldr	r2, [r7, #16]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	699b      	ldr	r3, [r3, #24]
 800d6b8:	693a      	ldr	r2, [r7, #16]
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	693a      	ldr	r2, [r7, #16]
 800d6c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	68fa      	ldr	r2, [r7, #12]
 800d6c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	697a      	ldr	r2, [r7, #20]
 800d6d6:	621a      	str	r2, [r3, #32]
}
 800d6d8:	bf00      	nop
 800d6da:	371c      	adds	r7, #28
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr
 800d6e4:	fffeff8f 	.word	0xfffeff8f
 800d6e8:	40010000 	.word	0x40010000
 800d6ec:	40010400 	.word	0x40010400
 800d6f0:	40014000 	.word	0x40014000
 800d6f4:	40014400 	.word	0x40014400
 800d6f8:	40014800 	.word	0x40014800

0800d6fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b087      	sub	sp, #28
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a1b      	ldr	r3, [r3, #32]
 800d70a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6a1b      	ldr	r3, [r3, #32]
 800d710:	f023 0210 	bic.w	r2, r3, #16
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	699b      	ldr	r3, [r3, #24]
 800d722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d724:	68fa      	ldr	r2, [r7, #12]
 800d726:	4b34      	ldr	r3, [pc, #208]	@ (800d7f8 <TIM_OC2_SetConfig+0xfc>)
 800d728:	4013      	ands	r3, r2
 800d72a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	021b      	lsls	r3, r3, #8
 800d73a:	68fa      	ldr	r2, [r7, #12]
 800d73c:	4313      	orrs	r3, r2
 800d73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	f023 0320 	bic.w	r3, r3, #32
 800d746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	011b      	lsls	r3, r3, #4
 800d74e:	697a      	ldr	r2, [r7, #20]
 800d750:	4313      	orrs	r3, r2
 800d752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4a29      	ldr	r2, [pc, #164]	@ (800d7fc <TIM_OC2_SetConfig+0x100>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d003      	beq.n	800d764 <TIM_OC2_SetConfig+0x68>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a28      	ldr	r2, [pc, #160]	@ (800d800 <TIM_OC2_SetConfig+0x104>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d10d      	bne.n	800d780 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d76a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	011b      	lsls	r3, r3, #4
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	4313      	orrs	r3, r2
 800d776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d77e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	4a1e      	ldr	r2, [pc, #120]	@ (800d7fc <TIM_OC2_SetConfig+0x100>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d00f      	beq.n	800d7a8 <TIM_OC2_SetConfig+0xac>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	4a1d      	ldr	r2, [pc, #116]	@ (800d800 <TIM_OC2_SetConfig+0x104>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d00b      	beq.n	800d7a8 <TIM_OC2_SetConfig+0xac>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	4a1c      	ldr	r2, [pc, #112]	@ (800d804 <TIM_OC2_SetConfig+0x108>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d007      	beq.n	800d7a8 <TIM_OC2_SetConfig+0xac>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	4a1b      	ldr	r2, [pc, #108]	@ (800d808 <TIM_OC2_SetConfig+0x10c>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d003      	beq.n	800d7a8 <TIM_OC2_SetConfig+0xac>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	4a1a      	ldr	r2, [pc, #104]	@ (800d80c <TIM_OC2_SetConfig+0x110>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d113      	bne.n	800d7d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d7ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d7b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	695b      	ldr	r3, [r3, #20]
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	693a      	ldr	r2, [r7, #16]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	699b      	ldr	r3, [r3, #24]
 800d7c8:	009b      	lsls	r3, r3, #2
 800d7ca:	693a      	ldr	r2, [r7, #16]
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	693a      	ldr	r2, [r7, #16]
 800d7d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	685a      	ldr	r2, [r3, #4]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	697a      	ldr	r2, [r7, #20]
 800d7e8:	621a      	str	r2, [r3, #32]
}
 800d7ea:	bf00      	nop
 800d7ec:	371c      	adds	r7, #28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	feff8fff 	.word	0xfeff8fff
 800d7fc:	40010000 	.word	0x40010000
 800d800:	40010400 	.word	0x40010400
 800d804:	40014000 	.word	0x40014000
 800d808:	40014400 	.word	0x40014400
 800d80c:	40014800 	.word	0x40014800

0800d810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6a1b      	ldr	r3, [r3, #32]
 800d81e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a1b      	ldr	r3, [r3, #32]
 800d824:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	69db      	ldr	r3, [r3, #28]
 800d836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	4b33      	ldr	r3, [pc, #204]	@ (800d908 <TIM_OC3_SetConfig+0xf8>)
 800d83c:	4013      	ands	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f023 0303 	bic.w	r3, r3, #3
 800d846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	4313      	orrs	r3, r2
 800d850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	021b      	lsls	r3, r3, #8
 800d860:	697a      	ldr	r2, [r7, #20]
 800d862:	4313      	orrs	r3, r2
 800d864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	4a28      	ldr	r2, [pc, #160]	@ (800d90c <TIM_OC3_SetConfig+0xfc>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d003      	beq.n	800d876 <TIM_OC3_SetConfig+0x66>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4a27      	ldr	r2, [pc, #156]	@ (800d910 <TIM_OC3_SetConfig+0x100>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d10d      	bne.n	800d892 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d87c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	021b      	lsls	r3, r3, #8
 800d884:	697a      	ldr	r2, [r7, #20]
 800d886:	4313      	orrs	r3, r2
 800d888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4a1d      	ldr	r2, [pc, #116]	@ (800d90c <TIM_OC3_SetConfig+0xfc>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d00f      	beq.n	800d8ba <TIM_OC3_SetConfig+0xaa>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4a1c      	ldr	r2, [pc, #112]	@ (800d910 <TIM_OC3_SetConfig+0x100>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d00b      	beq.n	800d8ba <TIM_OC3_SetConfig+0xaa>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a1b      	ldr	r2, [pc, #108]	@ (800d914 <TIM_OC3_SetConfig+0x104>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d007      	beq.n	800d8ba <TIM_OC3_SetConfig+0xaa>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a1a      	ldr	r2, [pc, #104]	@ (800d918 <TIM_OC3_SetConfig+0x108>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d003      	beq.n	800d8ba <TIM_OC3_SetConfig+0xaa>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a19      	ldr	r2, [pc, #100]	@ (800d91c <TIM_OC3_SetConfig+0x10c>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d113      	bne.n	800d8e2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d8c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d8c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	695b      	ldr	r3, [r3, #20]
 800d8ce:	011b      	lsls	r3, r3, #4
 800d8d0:	693a      	ldr	r2, [r7, #16]
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	011b      	lsls	r3, r3, #4
 800d8dc:	693a      	ldr	r2, [r7, #16]
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	693a      	ldr	r2, [r7, #16]
 800d8e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68fa      	ldr	r2, [r7, #12]
 800d8ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	697a      	ldr	r2, [r7, #20]
 800d8fa:	621a      	str	r2, [r3, #32]
}
 800d8fc:	bf00      	nop
 800d8fe:	371c      	adds	r7, #28
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr
 800d908:	fffeff8f 	.word	0xfffeff8f
 800d90c:	40010000 	.word	0x40010000
 800d910:	40010400 	.word	0x40010400
 800d914:	40014000 	.word	0x40014000
 800d918:	40014400 	.word	0x40014400
 800d91c:	40014800 	.word	0x40014800

0800d920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d920:	b480      	push	{r7}
 800d922:	b087      	sub	sp, #28
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6a1b      	ldr	r3, [r3, #32]
 800d92e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6a1b      	ldr	r3, [r3, #32]
 800d934:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	69db      	ldr	r3, [r3, #28]
 800d946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	4b24      	ldr	r3, [pc, #144]	@ (800d9dc <TIM_OC4_SetConfig+0xbc>)
 800d94c:	4013      	ands	r3, r2
 800d94e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	021b      	lsls	r3, r3, #8
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	4313      	orrs	r3, r2
 800d962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d96a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	031b      	lsls	r3, r3, #12
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	4313      	orrs	r3, r2
 800d976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4a19      	ldr	r2, [pc, #100]	@ (800d9e0 <TIM_OC4_SetConfig+0xc0>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d00f      	beq.n	800d9a0 <TIM_OC4_SetConfig+0x80>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	4a18      	ldr	r2, [pc, #96]	@ (800d9e4 <TIM_OC4_SetConfig+0xc4>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d00b      	beq.n	800d9a0 <TIM_OC4_SetConfig+0x80>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4a17      	ldr	r2, [pc, #92]	@ (800d9e8 <TIM_OC4_SetConfig+0xc8>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d007      	beq.n	800d9a0 <TIM_OC4_SetConfig+0x80>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a16      	ldr	r2, [pc, #88]	@ (800d9ec <TIM_OC4_SetConfig+0xcc>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d003      	beq.n	800d9a0 <TIM_OC4_SetConfig+0x80>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	4a15      	ldr	r2, [pc, #84]	@ (800d9f0 <TIM_OC4_SetConfig+0xd0>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d109      	bne.n	800d9b4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d9a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	695b      	ldr	r3, [r3, #20]
 800d9ac:	019b      	lsls	r3, r3, #6
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	68fa      	ldr	r2, [r7, #12]
 800d9be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	685a      	ldr	r2, [r3, #4]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	693a      	ldr	r2, [r7, #16]
 800d9cc:	621a      	str	r2, [r3, #32]
}
 800d9ce:	bf00      	nop
 800d9d0:	371c      	adds	r7, #28
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	feff8fff 	.word	0xfeff8fff
 800d9e0:	40010000 	.word	0x40010000
 800d9e4:	40010400 	.word	0x40010400
 800d9e8:	40014000 	.word	0x40014000
 800d9ec:	40014400 	.word	0x40014400
 800d9f0:	40014800 	.word	0x40014800

0800d9f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b087      	sub	sp, #28
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6a1b      	ldr	r3, [r3, #32]
 800da02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6a1b      	ldr	r3, [r3, #32]
 800da08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800da1c:	68fa      	ldr	r2, [r7, #12]
 800da1e:	4b21      	ldr	r3, [pc, #132]	@ (800daa4 <TIM_OC5_SetConfig+0xb0>)
 800da20:	4013      	ands	r3, r2
 800da22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800da34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	041b      	lsls	r3, r3, #16
 800da3c:	693a      	ldr	r2, [r7, #16]
 800da3e:	4313      	orrs	r3, r2
 800da40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4a18      	ldr	r2, [pc, #96]	@ (800daa8 <TIM_OC5_SetConfig+0xb4>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d00f      	beq.n	800da6a <TIM_OC5_SetConfig+0x76>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4a17      	ldr	r2, [pc, #92]	@ (800daac <TIM_OC5_SetConfig+0xb8>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d00b      	beq.n	800da6a <TIM_OC5_SetConfig+0x76>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4a16      	ldr	r2, [pc, #88]	@ (800dab0 <TIM_OC5_SetConfig+0xbc>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d007      	beq.n	800da6a <TIM_OC5_SetConfig+0x76>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4a15      	ldr	r2, [pc, #84]	@ (800dab4 <TIM_OC5_SetConfig+0xc0>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d003      	beq.n	800da6a <TIM_OC5_SetConfig+0x76>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4a14      	ldr	r2, [pc, #80]	@ (800dab8 <TIM_OC5_SetConfig+0xc4>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d109      	bne.n	800da7e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800da70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	695b      	ldr	r3, [r3, #20]
 800da76:	021b      	lsls	r3, r3, #8
 800da78:	697a      	ldr	r2, [r7, #20]
 800da7a:	4313      	orrs	r3, r2
 800da7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	697a      	ldr	r2, [r7, #20]
 800da82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	685a      	ldr	r2, [r3, #4]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	693a      	ldr	r2, [r7, #16]
 800da96:	621a      	str	r2, [r3, #32]
}
 800da98:	bf00      	nop
 800da9a:	371c      	adds	r7, #28
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr
 800daa4:	fffeff8f 	.word	0xfffeff8f
 800daa8:	40010000 	.word	0x40010000
 800daac:	40010400 	.word	0x40010400
 800dab0:	40014000 	.word	0x40014000
 800dab4:	40014400 	.word	0x40014400
 800dab8:	40014800 	.word	0x40014800

0800dabc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b087      	sub	sp, #28
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6a1b      	ldr	r3, [r3, #32]
 800daca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6a1b      	ldr	r3, [r3, #32]
 800dad0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	4b22      	ldr	r3, [pc, #136]	@ (800db70 <TIM_OC6_SetConfig+0xb4>)
 800dae8:	4013      	ands	r3, r2
 800daea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	021b      	lsls	r3, r3, #8
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	4313      	orrs	r3, r2
 800daf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dafe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	689b      	ldr	r3, [r3, #8]
 800db04:	051b      	lsls	r3, r3, #20
 800db06:	693a      	ldr	r2, [r7, #16]
 800db08:	4313      	orrs	r3, r2
 800db0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4a19      	ldr	r2, [pc, #100]	@ (800db74 <TIM_OC6_SetConfig+0xb8>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d00f      	beq.n	800db34 <TIM_OC6_SetConfig+0x78>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	4a18      	ldr	r2, [pc, #96]	@ (800db78 <TIM_OC6_SetConfig+0xbc>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d00b      	beq.n	800db34 <TIM_OC6_SetConfig+0x78>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4a17      	ldr	r2, [pc, #92]	@ (800db7c <TIM_OC6_SetConfig+0xc0>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d007      	beq.n	800db34 <TIM_OC6_SetConfig+0x78>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	4a16      	ldr	r2, [pc, #88]	@ (800db80 <TIM_OC6_SetConfig+0xc4>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d003      	beq.n	800db34 <TIM_OC6_SetConfig+0x78>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	4a15      	ldr	r2, [pc, #84]	@ (800db84 <TIM_OC6_SetConfig+0xc8>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d109      	bne.n	800db48 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800db3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	695b      	ldr	r3, [r3, #20]
 800db40:	029b      	lsls	r3, r3, #10
 800db42:	697a      	ldr	r2, [r7, #20]
 800db44:	4313      	orrs	r3, r2
 800db46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	697a      	ldr	r2, [r7, #20]
 800db4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	685a      	ldr	r2, [r3, #4]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	693a      	ldr	r2, [r7, #16]
 800db60:	621a      	str	r2, [r3, #32]
}
 800db62:	bf00      	nop
 800db64:	371c      	adds	r7, #28
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	feff8fff 	.word	0xfeff8fff
 800db74:	40010000 	.word	0x40010000
 800db78:	40010400 	.word	0x40010400
 800db7c:	40014000 	.word	0x40014000
 800db80:	40014400 	.word	0x40014400
 800db84:	40014800 	.word	0x40014800

0800db88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800db88:	b480      	push	{r7}
 800db8a:	b087      	sub	sp, #28
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	f003 031f 	and.w	r3, r3, #31
 800db9a:	2201      	movs	r2, #1
 800db9c:	fa02 f303 	lsl.w	r3, r2, r3
 800dba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6a1a      	ldr	r2, [r3, #32]
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	43db      	mvns	r3, r3
 800dbaa:	401a      	ands	r2, r3
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6a1a      	ldr	r2, [r3, #32]
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	f003 031f 	and.w	r3, r3, #31
 800dbba:	6879      	ldr	r1, [r7, #4]
 800dbbc:	fa01 f303 	lsl.w	r3, r1, r3
 800dbc0:	431a      	orrs	r2, r3
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	621a      	str	r2, [r3, #32]
}
 800dbc6:	bf00      	nop
 800dbc8:	371c      	adds	r7, #28
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr
	...

0800dbd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d101      	bne.n	800dbec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dbe8:	2302      	movs	r3, #2
 800dbea:	e077      	b.n	800dcdc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2202      	movs	r2, #2
 800dbf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a35      	ldr	r2, [pc, #212]	@ (800dce8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d004      	beq.n	800dc20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a34      	ldr	r2, [pc, #208]	@ (800dcec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d108      	bne.n	800dc32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dc26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68fa      	ldr	r2, [r7, #12]
 800dc40:	4313      	orrs	r3, r2
 800dc42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	68fa      	ldr	r2, [r7, #12]
 800dc4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a25      	ldr	r2, [pc, #148]	@ (800dce8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d02c      	beq.n	800dcb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc5e:	d027      	beq.n	800dcb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a22      	ldr	r2, [pc, #136]	@ (800dcf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d022      	beq.n	800dcb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4a21      	ldr	r2, [pc, #132]	@ (800dcf4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d01d      	beq.n	800dcb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a1f      	ldr	r2, [pc, #124]	@ (800dcf8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d018      	beq.n	800dcb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	4a1a      	ldr	r2, [pc, #104]	@ (800dcec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d013      	beq.n	800dcb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a1b      	ldr	r2, [pc, #108]	@ (800dcfc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d00e      	beq.n	800dcb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4a1a      	ldr	r2, [pc, #104]	@ (800dd00 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d009      	beq.n	800dcb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a18      	ldr	r2, [pc, #96]	@ (800dd04 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d004      	beq.n	800dcb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a17      	ldr	r2, [pc, #92]	@ (800dd08 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d10c      	bne.n	800dcca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dcb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	68ba      	ldr	r2, [r7, #8]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	68ba      	ldr	r2, [r7, #8]
 800dcc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2201      	movs	r2, #1
 800dcce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3714      	adds	r7, #20
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr
 800dce8:	40010000 	.word	0x40010000
 800dcec:	40010400 	.word	0x40010400
 800dcf0:	40000400 	.word	0x40000400
 800dcf4:	40000800 	.word	0x40000800
 800dcf8:	40000c00 	.word	0x40000c00
 800dcfc:	40001800 	.word	0x40001800
 800dd00:	40014000 	.word	0x40014000
 800dd04:	4000e000 	.word	0x4000e000
 800dd08:	4000e400 	.word	0x4000e400

0800dd0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dd16:	2300      	movs	r3, #0
 800dd18:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d101      	bne.n	800dd28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dd24:	2302      	movs	r3, #2
 800dd26:	e073      	b.n	800de10 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	4313      	orrs	r3, r2
 800dd74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	695b      	ldr	r3, [r3, #20]
 800dd80:	4313      	orrs	r3, r2
 800dd82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	699b      	ldr	r3, [r3, #24]
 800dd9c:	041b      	lsls	r3, r3, #16
 800dd9e:	4313      	orrs	r3, r2
 800dda0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	69db      	ldr	r3, [r3, #28]
 800ddac:	4313      	orrs	r3, r2
 800ddae:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a19      	ldr	r2, [pc, #100]	@ (800de1c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d004      	beq.n	800ddc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4a18      	ldr	r2, [pc, #96]	@ (800de20 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d11c      	bne.n	800ddfe <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddce:	051b      	lsls	r3, r3, #20
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	6a1b      	ldr	r3, [r3, #32]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddec:	4313      	orrs	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800de0e:	2300      	movs	r3, #0
}
 800de10:	4618      	mov	r0, r3
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr
 800de1c:	40010000 	.word	0x40010000
 800de20:	40010400 	.word	0x40010400

0800de24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de2c:	bf00      	nop
 800de2e:	370c      	adds	r7, #12
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr

0800de38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de40:	bf00      	nop
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800de54:	bf00      	nop
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d101      	bne.n	800de72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de6e:	2301      	movs	r3, #1
 800de70:	e042      	b.n	800def8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d106      	bne.n	800de8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2200      	movs	r2, #0
 800de80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7f5 fa9b 	bl	80033c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2224      	movs	r2, #36	@ 0x24
 800de8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f022 0201 	bic.w	r2, r2, #1
 800dea0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d002      	beq.n	800deb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f001 fb14 	bl	800f4d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 fca5 	bl	800e800 <UART_SetConfig>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d101      	bne.n	800dec0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800debc:	2301      	movs	r3, #1
 800debe:	e01b      	b.n	800def8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	685a      	ldr	r2, [r3, #4]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	689a      	ldr	r2, [r3, #8]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f042 0201 	orr.w	r2, r2, #1
 800deee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f001 fb93 	bl	800f61c <UART_CheckIdleState>
 800def6:	4603      	mov	r3, r0
}
 800def8:	4618      	mov	r0, r3
 800defa:	3708      	adds	r7, #8
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b08a      	sub	sp, #40	@ 0x28
 800df04:	af00      	add	r7, sp, #0
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	4613      	mov	r3, r2
 800df0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df14:	2b20      	cmp	r3, #32
 800df16:	d167      	bne.n	800dfe8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d002      	beq.n	800df24 <HAL_UART_Transmit_DMA+0x24>
 800df1e:	88fb      	ldrh	r3, [r7, #6]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800df24:	2301      	movs	r3, #1
 800df26:	e060      	b.n	800dfea <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	88fa      	ldrh	r2, [r7, #6]
 800df32:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	88fa      	ldrh	r2, [r7, #6]
 800df3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2200      	movs	r2, #0
 800df42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2221      	movs	r2, #33	@ 0x21
 800df4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df52:	2b00      	cmp	r3, #0
 800df54:	d028      	beq.n	800dfa8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df5a:	4a26      	ldr	r2, [pc, #152]	@ (800dff4 <HAL_UART_Transmit_DMA+0xf4>)
 800df5c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df62:	4a25      	ldr	r2, [pc, #148]	@ (800dff8 <HAL_UART_Transmit_DMA+0xf8>)
 800df64:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df6a:	4a24      	ldr	r2, [pc, #144]	@ (800dffc <HAL_UART_Transmit_DMA+0xfc>)
 800df6c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df72:	2200      	movs	r2, #0
 800df74:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df7e:	4619      	mov	r1, r3
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	3328      	adds	r3, #40	@ 0x28
 800df86:	461a      	mov	r2, r3
 800df88:	88fb      	ldrh	r3, [r7, #6]
 800df8a:	f7f8 fb09 	bl	80065a0 <HAL_DMA_Start_IT>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d009      	beq.n	800dfa8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2210      	movs	r2, #16
 800df98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2220      	movs	r2, #32
 800dfa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e020      	b.n	800dfea <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2240      	movs	r2, #64	@ 0x40
 800dfae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	3308      	adds	r3, #8
 800dfb6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	e853 3f00 	ldrex	r3, [r3]
 800dfbe:	613b      	str	r3, [r7, #16]
   return(result);
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfc6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	3308      	adds	r3, #8
 800dfce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfd0:	623a      	str	r2, [r7, #32]
 800dfd2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd4:	69f9      	ldr	r1, [r7, #28]
 800dfd6:	6a3a      	ldr	r2, [r7, #32]
 800dfd8:	e841 2300 	strex	r3, r2, [r1]
 800dfdc:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1e5      	bne.n	800dfb0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	e000      	b.n	800dfea <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800dfe8:	2302      	movs	r3, #2
  }
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3728      	adds	r7, #40	@ 0x28
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	0800f999 	.word	0x0800f999
 800dff8:	0800fa2f 	.word	0x0800fa2f
 800dffc:	0800fa4b 	.word	0x0800fa4b

0800e000 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b0ba      	sub	sp, #232	@ 0xe8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	69db      	ldr	r3, [r3, #28]
 800e00e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e026:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e02a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e02e:	4013      	ands	r3, r2
 800e030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d11b      	bne.n	800e074 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e03c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e040:	f003 0320 	and.w	r3, r3, #32
 800e044:	2b00      	cmp	r3, #0
 800e046:	d015      	beq.n	800e074 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e04c:	f003 0320 	and.w	r3, r3, #32
 800e050:	2b00      	cmp	r3, #0
 800e052:	d105      	bne.n	800e060 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d009      	beq.n	800e074 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e064:	2b00      	cmp	r3, #0
 800e066:	f000 8393 	beq.w	800e790 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	4798      	blx	r3
      }
      return;
 800e072:	e38d      	b.n	800e790 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 8123 	beq.w	800e2c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e07e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e082:	4b8d      	ldr	r3, [pc, #564]	@ (800e2b8 <HAL_UART_IRQHandler+0x2b8>)
 800e084:	4013      	ands	r3, r2
 800e086:	2b00      	cmp	r3, #0
 800e088:	d106      	bne.n	800e098 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e08a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e08e:	4b8b      	ldr	r3, [pc, #556]	@ (800e2bc <HAL_UART_IRQHandler+0x2bc>)
 800e090:	4013      	ands	r3, r2
 800e092:	2b00      	cmp	r3, #0
 800e094:	f000 8116 	beq.w	800e2c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e09c:	f003 0301 	and.w	r3, r3, #1
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d011      	beq.n	800e0c8 <HAL_UART_IRQHandler+0xc8>
 800e0a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d00b      	beq.n	800e0c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0be:	f043 0201 	orr.w	r2, r3, #1
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0cc:	f003 0302 	and.w	r3, r3, #2
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d011      	beq.n	800e0f8 <HAL_UART_IRQHandler+0xf8>
 800e0d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0d8:	f003 0301 	and.w	r3, r3, #1
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00b      	beq.n	800e0f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2202      	movs	r2, #2
 800e0e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0ee:	f043 0204 	orr.w	r2, r3, #4
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0fc:	f003 0304 	and.w	r3, r3, #4
 800e100:	2b00      	cmp	r3, #0
 800e102:	d011      	beq.n	800e128 <HAL_UART_IRQHandler+0x128>
 800e104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e108:	f003 0301 	and.w	r3, r3, #1
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00b      	beq.n	800e128 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2204      	movs	r2, #4
 800e116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e11e:	f043 0202 	orr.w	r2, r3, #2
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e12c:	f003 0308 	and.w	r3, r3, #8
 800e130:	2b00      	cmp	r3, #0
 800e132:	d017      	beq.n	800e164 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e138:	f003 0320 	and.w	r3, r3, #32
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d105      	bne.n	800e14c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e140:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e144:	4b5c      	ldr	r3, [pc, #368]	@ (800e2b8 <HAL_UART_IRQHandler+0x2b8>)
 800e146:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d00b      	beq.n	800e164 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2208      	movs	r2, #8
 800e152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e15a:	f043 0208 	orr.w	r2, r3, #8
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d012      	beq.n	800e196 <HAL_UART_IRQHandler+0x196>
 800e170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e174:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d00c      	beq.n	800e196 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e18c:	f043 0220 	orr.w	r2, r3, #32
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f000 82f9 	beq.w	800e794 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1a6:	f003 0320 	and.w	r3, r3, #32
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d013      	beq.n	800e1d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1b2:	f003 0320 	and.w	r3, r3, #32
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d105      	bne.n	800e1c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e1be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d007      	beq.n	800e1d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d003      	beq.n	800e1d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1ea:	2b40      	cmp	r3, #64	@ 0x40
 800e1ec:	d005      	beq.n	800e1fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e1ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e1f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d054      	beq.n	800e2a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f001 fb66 	bl	800f8cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e20a:	2b40      	cmp	r3, #64	@ 0x40
 800e20c:	d146      	bne.n	800e29c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	3308      	adds	r3, #8
 800e214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e218:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e21c:	e853 3f00 	ldrex	r3, [r3]
 800e220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e224:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e22c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	3308      	adds	r3, #8
 800e236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e23a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e23e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e24a:	e841 2300 	strex	r3, r2, [r1]
 800e24e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d1d9      	bne.n	800e20e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e260:	2b00      	cmp	r3, #0
 800e262:	d017      	beq.n	800e294 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e26a:	4a15      	ldr	r2, [pc, #84]	@ (800e2c0 <HAL_UART_IRQHandler+0x2c0>)
 800e26c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e274:	4618      	mov	r0, r3
 800e276:	f7f8 ff1b 	bl	80070b0 <HAL_DMA_Abort_IT>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d019      	beq.n	800e2b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e28e:	4610      	mov	r0, r2
 800e290:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e292:	e00f      	b.n	800e2b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 fa9d 	bl	800e7d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e29a:	e00b      	b.n	800e2b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 fa99 	bl	800e7d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2a2:	e007      	b.n	800e2b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 fa95 	bl	800e7d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e2b2:	e26f      	b.n	800e794 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2b4:	bf00      	nop
    return;
 800e2b6:	e26d      	b.n	800e794 <HAL_UART_IRQHandler+0x794>
 800e2b8:	10000001 	.word	0x10000001
 800e2bc:	04000120 	.word	0x04000120
 800e2c0:	0800facb 	.word	0x0800facb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	f040 8203 	bne.w	800e6d4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2d2:	f003 0310 	and.w	r3, r3, #16
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f000 81fc 	beq.w	800e6d4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2e0:	f003 0310 	and.w	r3, r3, #16
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 81f5 	beq.w	800e6d4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	2210      	movs	r2, #16
 800e2f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	689b      	ldr	r3, [r3, #8]
 800e2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2fc:	2b40      	cmp	r3, #64	@ 0x40
 800e2fe:	f040 816d 	bne.w	800e5dc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4aa4      	ldr	r2, [pc, #656]	@ (800e59c <HAL_UART_IRQHandler+0x59c>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d068      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4aa1      	ldr	r2, [pc, #644]	@ (800e5a0 <HAL_UART_IRQHandler+0x5a0>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d061      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a9f      	ldr	r2, [pc, #636]	@ (800e5a4 <HAL_UART_IRQHandler+0x5a4>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d05a      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a9c      	ldr	r2, [pc, #624]	@ (800e5a8 <HAL_UART_IRQHandler+0x5a8>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d053      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4a9a      	ldr	r2, [pc, #616]	@ (800e5ac <HAL_UART_IRQHandler+0x5ac>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d04c      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a97      	ldr	r2, [pc, #604]	@ (800e5b0 <HAL_UART_IRQHandler+0x5b0>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d045      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a95      	ldr	r2, [pc, #596]	@ (800e5b4 <HAL_UART_IRQHandler+0x5b4>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d03e      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a92      	ldr	r2, [pc, #584]	@ (800e5b8 <HAL_UART_IRQHandler+0x5b8>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d037      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a90      	ldr	r2, [pc, #576]	@ (800e5bc <HAL_UART_IRQHandler+0x5bc>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d030      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4a8d      	ldr	r2, [pc, #564]	@ (800e5c0 <HAL_UART_IRQHandler+0x5c0>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d029      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a8b      	ldr	r2, [pc, #556]	@ (800e5c4 <HAL_UART_IRQHandler+0x5c4>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d022      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a88      	ldr	r2, [pc, #544]	@ (800e5c8 <HAL_UART_IRQHandler+0x5c8>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d01b      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4a86      	ldr	r2, [pc, #536]	@ (800e5cc <HAL_UART_IRQHandler+0x5cc>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d014      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4a83      	ldr	r2, [pc, #524]	@ (800e5d0 <HAL_UART_IRQHandler+0x5d0>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d00d      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4a81      	ldr	r2, [pc, #516]	@ (800e5d4 <HAL_UART_IRQHandler+0x5d4>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d006      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x3e2>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a7e      	ldr	r2, [pc, #504]	@ (800e5d8 <HAL_UART_IRQHandler+0x5d8>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d106      	bne.n	800e3f0 <HAL_UART_IRQHandler+0x3f0>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	e005      	b.n	800e3fc <HAL_UART_IRQHandler+0x3fc>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e404:	2b00      	cmp	r3, #0
 800e406:	f000 80ad 	beq.w	800e564 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e410:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e414:	429a      	cmp	r2, r3
 800e416:	f080 80a5 	bcs.w	800e564 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e420:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e42a:	69db      	ldr	r3, [r3, #28]
 800e42c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e430:	f000 8087 	beq.w	800e542 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e43c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e440:	e853 3f00 	ldrex	r3, [r3]
 800e444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e448:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e44c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	461a      	mov	r2, r3
 800e45a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e45e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e462:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e466:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e46a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e46e:	e841 2300 	strex	r3, r2, [r1]
 800e472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d1da      	bne.n	800e434 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	3308      	adds	r3, #8
 800e484:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e488:	e853 3f00 	ldrex	r3, [r3]
 800e48c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e48e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e490:	f023 0301 	bic.w	r3, r3, #1
 800e494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	3308      	adds	r3, #8
 800e49e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e4a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e4a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e4aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e4ae:	e841 2300 	strex	r3, r2, [r1]
 800e4b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e4b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1e1      	bne.n	800e47e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	3308      	adds	r3, #8
 800e4c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e4c4:	e853 3f00 	ldrex	r3, [r3]
 800e4c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e4ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3308      	adds	r3, #8
 800e4da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e4de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e4e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e4e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e4e6:	e841 2300 	strex	r3, r2, [r1]
 800e4ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e4ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1e3      	bne.n	800e4ba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2220      	movs	r2, #32
 800e4f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e508:	e853 3f00 	ldrex	r3, [r3]
 800e50c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e50e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e510:	f023 0310 	bic.w	r3, r3, #16
 800e514:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	461a      	mov	r2, r3
 800e51e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e522:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e524:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e526:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e528:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e52a:	e841 2300 	strex	r3, r2, [r1]
 800e52e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1e4      	bne.n	800e500 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7f8 fa99 	bl	8006a74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2202      	movs	r2, #2
 800e546:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e554:	b29b      	uxth	r3, r3
 800e556:	1ad3      	subs	r3, r2, r3
 800e558:	b29b      	uxth	r3, r3
 800e55a:	4619      	mov	r1, r3
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 f943 	bl	800e7e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e562:	e119      	b.n	800e798 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e56a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e56e:	429a      	cmp	r2, r3
 800e570:	f040 8112 	bne.w	800e798 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e57a:	69db      	ldr	r3, [r3, #28]
 800e57c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e580:	f040 810a 	bne.w	800e798 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2202      	movs	r2, #2
 800e588:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e590:	4619      	mov	r1, r3
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 f928 	bl	800e7e8 <HAL_UARTEx_RxEventCallback>
      return;
 800e598:	e0fe      	b.n	800e798 <HAL_UART_IRQHandler+0x798>
 800e59a:	bf00      	nop
 800e59c:	40020010 	.word	0x40020010
 800e5a0:	40020028 	.word	0x40020028
 800e5a4:	40020040 	.word	0x40020040
 800e5a8:	40020058 	.word	0x40020058
 800e5ac:	40020070 	.word	0x40020070
 800e5b0:	40020088 	.word	0x40020088
 800e5b4:	400200a0 	.word	0x400200a0
 800e5b8:	400200b8 	.word	0x400200b8
 800e5bc:	40020410 	.word	0x40020410
 800e5c0:	40020428 	.word	0x40020428
 800e5c4:	40020440 	.word	0x40020440
 800e5c8:	40020458 	.word	0x40020458
 800e5cc:	40020470 	.word	0x40020470
 800e5d0:	40020488 	.word	0x40020488
 800e5d4:	400204a0 	.word	0x400204a0
 800e5d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f000 80cf 	beq.w	800e79c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800e5fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e602:	2b00      	cmp	r3, #0
 800e604:	f000 80ca 	beq.w	800e79c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e610:	e853 3f00 	ldrex	r3, [r3]
 800e614:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e618:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e61c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	461a      	mov	r2, r3
 800e626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e62a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e62c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e630:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e632:	e841 2300 	strex	r3, r2, [r1]
 800e636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1e4      	bne.n	800e608 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3308      	adds	r3, #8
 800e644:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e648:	e853 3f00 	ldrex	r3, [r3]
 800e64c:	623b      	str	r3, [r7, #32]
   return(result);
 800e64e:	6a3a      	ldr	r2, [r7, #32]
 800e650:	4b55      	ldr	r3, [pc, #340]	@ (800e7a8 <HAL_UART_IRQHandler+0x7a8>)
 800e652:	4013      	ands	r3, r2
 800e654:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	3308      	adds	r3, #8
 800e65e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e662:	633a      	str	r2, [r7, #48]	@ 0x30
 800e664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e66a:	e841 2300 	strex	r3, r2, [r1]
 800e66e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e672:	2b00      	cmp	r3, #0
 800e674:	d1e3      	bne.n	800e63e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2220      	movs	r2, #32
 800e67a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	e853 3f00 	ldrex	r3, [r3]
 800e696:	60fb      	str	r3, [r7, #12]
   return(result);
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f023 0310 	bic.w	r3, r3, #16
 800e69e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e6ac:	61fb      	str	r3, [r7, #28]
 800e6ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b0:	69b9      	ldr	r1, [r7, #24]
 800e6b2:	69fa      	ldr	r2, [r7, #28]
 800e6b4:	e841 2300 	strex	r3, r2, [r1]
 800e6b8:	617b      	str	r3, [r7, #20]
   return(result);
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1e4      	bne.n	800e68a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2202      	movs	r2, #2
 800e6c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 f88b 	bl	800e7e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6d2:	e063      	b.n	800e79c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00e      	beq.n	800e6fe <HAL_UART_IRQHandler+0x6fe>
 800e6e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d008      	beq.n	800e6fe <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e6f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f001 fa24 	bl	800fb44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6fc:	e051      	b.n	800e7a2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e6fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e706:	2b00      	cmp	r3, #0
 800e708:	d014      	beq.n	800e734 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e70a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e70e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e712:	2b00      	cmp	r3, #0
 800e714:	d105      	bne.n	800e722 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e71a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d008      	beq.n	800e734 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e726:	2b00      	cmp	r3, #0
 800e728:	d03a      	beq.n	800e7a0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	4798      	blx	r3
    }
    return;
 800e732:	e035      	b.n	800e7a0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d009      	beq.n	800e754 <HAL_UART_IRQHandler+0x754>
 800e740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d003      	beq.n	800e754 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f001 f9ce 	bl	800faee <UART_EndTransmit_IT>
    return;
 800e752:	e026      	b.n	800e7a2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e758:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d009      	beq.n	800e774 <HAL_UART_IRQHandler+0x774>
 800e760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e764:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f001 f9fd 	bl	800fb6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e772:	e016      	b.n	800e7a2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d010      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x7a2>
 800e780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e784:	2b00      	cmp	r3, #0
 800e786:	da0c      	bge.n	800e7a2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f001 f9e5 	bl	800fb58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e78e:	e008      	b.n	800e7a2 <HAL_UART_IRQHandler+0x7a2>
      return;
 800e790:	bf00      	nop
 800e792:	e006      	b.n	800e7a2 <HAL_UART_IRQHandler+0x7a2>
    return;
 800e794:	bf00      	nop
 800e796:	e004      	b.n	800e7a2 <HAL_UART_IRQHandler+0x7a2>
      return;
 800e798:	bf00      	nop
 800e79a:	e002      	b.n	800e7a2 <HAL_UART_IRQHandler+0x7a2>
      return;
 800e79c:	bf00      	nop
 800e79e:	e000      	b.n	800e7a2 <HAL_UART_IRQHandler+0x7a2>
    return;
 800e7a0:	bf00      	nop
  }
}
 800e7a2:	37e8      	adds	r7, #232	@ 0xe8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	effffffe 	.word	0xeffffffe

0800e7ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e7b4:	bf00      	nop
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e7c8:	bf00      	nop
 800e7ca:	370c      	adds	r7, #12
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b083      	sub	sp, #12
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e7dc:	bf00      	nop
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e7f4:	bf00      	nop
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr

0800e800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e804:	b092      	sub	sp, #72	@ 0x48
 800e806:	af00      	add	r7, sp, #0
 800e808:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e80a:	2300      	movs	r3, #0
 800e80c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	689a      	ldr	r2, [r3, #8]
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	431a      	orrs	r2, r3
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	695b      	ldr	r3, [r3, #20]
 800e81e:	431a      	orrs	r2, r3
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	69db      	ldr	r3, [r3, #28]
 800e824:	4313      	orrs	r3, r2
 800e826:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	4bbe      	ldr	r3, [pc, #760]	@ (800eb28 <UART_SetConfig+0x328>)
 800e830:	4013      	ands	r3, r2
 800e832:	697a      	ldr	r2, [r7, #20]
 800e834:	6812      	ldr	r2, [r2, #0]
 800e836:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e838:	430b      	orrs	r3, r1
 800e83a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	68da      	ldr	r2, [r3, #12]
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	430a      	orrs	r2, r1
 800e850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	699b      	ldr	r3, [r3, #24]
 800e856:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4ab3      	ldr	r2, [pc, #716]	@ (800eb2c <UART_SetConfig+0x32c>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d004      	beq.n	800e86c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	6a1b      	ldr	r3, [r3, #32]
 800e866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e868:	4313      	orrs	r3, r2
 800e86a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	689a      	ldr	r2, [r3, #8]
 800e872:	4baf      	ldr	r3, [pc, #700]	@ (800eb30 <UART_SetConfig+0x330>)
 800e874:	4013      	ands	r3, r2
 800e876:	697a      	ldr	r2, [r7, #20]
 800e878:	6812      	ldr	r2, [r2, #0]
 800e87a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e87c:	430b      	orrs	r3, r1
 800e87e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e886:	f023 010f 	bic.w	r1, r3, #15
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	430a      	orrs	r2, r1
 800e894:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4aa6      	ldr	r2, [pc, #664]	@ (800eb34 <UART_SetConfig+0x334>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d177      	bne.n	800e990 <UART_SetConfig+0x190>
 800e8a0:	4ba5      	ldr	r3, [pc, #660]	@ (800eb38 <UART_SetConfig+0x338>)
 800e8a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e8a8:	2b28      	cmp	r3, #40	@ 0x28
 800e8aa:	d86d      	bhi.n	800e988 <UART_SetConfig+0x188>
 800e8ac:	a201      	add	r2, pc, #4	@ (adr r2, 800e8b4 <UART_SetConfig+0xb4>)
 800e8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b2:	bf00      	nop
 800e8b4:	0800e959 	.word	0x0800e959
 800e8b8:	0800e989 	.word	0x0800e989
 800e8bc:	0800e989 	.word	0x0800e989
 800e8c0:	0800e989 	.word	0x0800e989
 800e8c4:	0800e989 	.word	0x0800e989
 800e8c8:	0800e989 	.word	0x0800e989
 800e8cc:	0800e989 	.word	0x0800e989
 800e8d0:	0800e989 	.word	0x0800e989
 800e8d4:	0800e961 	.word	0x0800e961
 800e8d8:	0800e989 	.word	0x0800e989
 800e8dc:	0800e989 	.word	0x0800e989
 800e8e0:	0800e989 	.word	0x0800e989
 800e8e4:	0800e989 	.word	0x0800e989
 800e8e8:	0800e989 	.word	0x0800e989
 800e8ec:	0800e989 	.word	0x0800e989
 800e8f0:	0800e989 	.word	0x0800e989
 800e8f4:	0800e969 	.word	0x0800e969
 800e8f8:	0800e989 	.word	0x0800e989
 800e8fc:	0800e989 	.word	0x0800e989
 800e900:	0800e989 	.word	0x0800e989
 800e904:	0800e989 	.word	0x0800e989
 800e908:	0800e989 	.word	0x0800e989
 800e90c:	0800e989 	.word	0x0800e989
 800e910:	0800e989 	.word	0x0800e989
 800e914:	0800e971 	.word	0x0800e971
 800e918:	0800e989 	.word	0x0800e989
 800e91c:	0800e989 	.word	0x0800e989
 800e920:	0800e989 	.word	0x0800e989
 800e924:	0800e989 	.word	0x0800e989
 800e928:	0800e989 	.word	0x0800e989
 800e92c:	0800e989 	.word	0x0800e989
 800e930:	0800e989 	.word	0x0800e989
 800e934:	0800e979 	.word	0x0800e979
 800e938:	0800e989 	.word	0x0800e989
 800e93c:	0800e989 	.word	0x0800e989
 800e940:	0800e989 	.word	0x0800e989
 800e944:	0800e989 	.word	0x0800e989
 800e948:	0800e989 	.word	0x0800e989
 800e94c:	0800e989 	.word	0x0800e989
 800e950:	0800e989 	.word	0x0800e989
 800e954:	0800e981 	.word	0x0800e981
 800e958:	2301      	movs	r3, #1
 800e95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e95e:	e326      	b.n	800efae <UART_SetConfig+0x7ae>
 800e960:	2304      	movs	r3, #4
 800e962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e966:	e322      	b.n	800efae <UART_SetConfig+0x7ae>
 800e968:	2308      	movs	r3, #8
 800e96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e96e:	e31e      	b.n	800efae <UART_SetConfig+0x7ae>
 800e970:	2310      	movs	r3, #16
 800e972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e976:	e31a      	b.n	800efae <UART_SetConfig+0x7ae>
 800e978:	2320      	movs	r3, #32
 800e97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e97e:	e316      	b.n	800efae <UART_SetConfig+0x7ae>
 800e980:	2340      	movs	r3, #64	@ 0x40
 800e982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e986:	e312      	b.n	800efae <UART_SetConfig+0x7ae>
 800e988:	2380      	movs	r3, #128	@ 0x80
 800e98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e98e:	e30e      	b.n	800efae <UART_SetConfig+0x7ae>
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a69      	ldr	r2, [pc, #420]	@ (800eb3c <UART_SetConfig+0x33c>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d130      	bne.n	800e9fc <UART_SetConfig+0x1fc>
 800e99a:	4b67      	ldr	r3, [pc, #412]	@ (800eb38 <UART_SetConfig+0x338>)
 800e99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e99e:	f003 0307 	and.w	r3, r3, #7
 800e9a2:	2b05      	cmp	r3, #5
 800e9a4:	d826      	bhi.n	800e9f4 <UART_SetConfig+0x1f4>
 800e9a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e9ac <UART_SetConfig+0x1ac>)
 800e9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ac:	0800e9c5 	.word	0x0800e9c5
 800e9b0:	0800e9cd 	.word	0x0800e9cd
 800e9b4:	0800e9d5 	.word	0x0800e9d5
 800e9b8:	0800e9dd 	.word	0x0800e9dd
 800e9bc:	0800e9e5 	.word	0x0800e9e5
 800e9c0:	0800e9ed 	.word	0x0800e9ed
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ca:	e2f0      	b.n	800efae <UART_SetConfig+0x7ae>
 800e9cc:	2304      	movs	r3, #4
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9d2:	e2ec      	b.n	800efae <UART_SetConfig+0x7ae>
 800e9d4:	2308      	movs	r3, #8
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9da:	e2e8      	b.n	800efae <UART_SetConfig+0x7ae>
 800e9dc:	2310      	movs	r3, #16
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9e2:	e2e4      	b.n	800efae <UART_SetConfig+0x7ae>
 800e9e4:	2320      	movs	r3, #32
 800e9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ea:	e2e0      	b.n	800efae <UART_SetConfig+0x7ae>
 800e9ec:	2340      	movs	r3, #64	@ 0x40
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9f2:	e2dc      	b.n	800efae <UART_SetConfig+0x7ae>
 800e9f4:	2380      	movs	r3, #128	@ 0x80
 800e9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9fa:	e2d8      	b.n	800efae <UART_SetConfig+0x7ae>
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a4f      	ldr	r2, [pc, #316]	@ (800eb40 <UART_SetConfig+0x340>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d130      	bne.n	800ea68 <UART_SetConfig+0x268>
 800ea06:	4b4c      	ldr	r3, [pc, #304]	@ (800eb38 <UART_SetConfig+0x338>)
 800ea08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea0a:	f003 0307 	and.w	r3, r3, #7
 800ea0e:	2b05      	cmp	r3, #5
 800ea10:	d826      	bhi.n	800ea60 <UART_SetConfig+0x260>
 800ea12:	a201      	add	r2, pc, #4	@ (adr r2, 800ea18 <UART_SetConfig+0x218>)
 800ea14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea18:	0800ea31 	.word	0x0800ea31
 800ea1c:	0800ea39 	.word	0x0800ea39
 800ea20:	0800ea41 	.word	0x0800ea41
 800ea24:	0800ea49 	.word	0x0800ea49
 800ea28:	0800ea51 	.word	0x0800ea51
 800ea2c:	0800ea59 	.word	0x0800ea59
 800ea30:	2300      	movs	r3, #0
 800ea32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea36:	e2ba      	b.n	800efae <UART_SetConfig+0x7ae>
 800ea38:	2304      	movs	r3, #4
 800ea3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea3e:	e2b6      	b.n	800efae <UART_SetConfig+0x7ae>
 800ea40:	2308      	movs	r3, #8
 800ea42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea46:	e2b2      	b.n	800efae <UART_SetConfig+0x7ae>
 800ea48:	2310      	movs	r3, #16
 800ea4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea4e:	e2ae      	b.n	800efae <UART_SetConfig+0x7ae>
 800ea50:	2320      	movs	r3, #32
 800ea52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea56:	e2aa      	b.n	800efae <UART_SetConfig+0x7ae>
 800ea58:	2340      	movs	r3, #64	@ 0x40
 800ea5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea5e:	e2a6      	b.n	800efae <UART_SetConfig+0x7ae>
 800ea60:	2380      	movs	r3, #128	@ 0x80
 800ea62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea66:	e2a2      	b.n	800efae <UART_SetConfig+0x7ae>
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4a35      	ldr	r2, [pc, #212]	@ (800eb44 <UART_SetConfig+0x344>)
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d130      	bne.n	800ead4 <UART_SetConfig+0x2d4>
 800ea72:	4b31      	ldr	r3, [pc, #196]	@ (800eb38 <UART_SetConfig+0x338>)
 800ea74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea76:	f003 0307 	and.w	r3, r3, #7
 800ea7a:	2b05      	cmp	r3, #5
 800ea7c:	d826      	bhi.n	800eacc <UART_SetConfig+0x2cc>
 800ea7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ea84 <UART_SetConfig+0x284>)
 800ea80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea84:	0800ea9d 	.word	0x0800ea9d
 800ea88:	0800eaa5 	.word	0x0800eaa5
 800ea8c:	0800eaad 	.word	0x0800eaad
 800ea90:	0800eab5 	.word	0x0800eab5
 800ea94:	0800eabd 	.word	0x0800eabd
 800ea98:	0800eac5 	.word	0x0800eac5
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaa2:	e284      	b.n	800efae <UART_SetConfig+0x7ae>
 800eaa4:	2304      	movs	r3, #4
 800eaa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaaa:	e280      	b.n	800efae <UART_SetConfig+0x7ae>
 800eaac:	2308      	movs	r3, #8
 800eaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eab2:	e27c      	b.n	800efae <UART_SetConfig+0x7ae>
 800eab4:	2310      	movs	r3, #16
 800eab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaba:	e278      	b.n	800efae <UART_SetConfig+0x7ae>
 800eabc:	2320      	movs	r3, #32
 800eabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eac2:	e274      	b.n	800efae <UART_SetConfig+0x7ae>
 800eac4:	2340      	movs	r3, #64	@ 0x40
 800eac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaca:	e270      	b.n	800efae <UART_SetConfig+0x7ae>
 800eacc:	2380      	movs	r3, #128	@ 0x80
 800eace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ead2:	e26c      	b.n	800efae <UART_SetConfig+0x7ae>
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a1b      	ldr	r2, [pc, #108]	@ (800eb48 <UART_SetConfig+0x348>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d142      	bne.n	800eb64 <UART_SetConfig+0x364>
 800eade:	4b16      	ldr	r3, [pc, #88]	@ (800eb38 <UART_SetConfig+0x338>)
 800eae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eae2:	f003 0307 	and.w	r3, r3, #7
 800eae6:	2b05      	cmp	r3, #5
 800eae8:	d838      	bhi.n	800eb5c <UART_SetConfig+0x35c>
 800eaea:	a201      	add	r2, pc, #4	@ (adr r2, 800eaf0 <UART_SetConfig+0x2f0>)
 800eaec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf0:	0800eb09 	.word	0x0800eb09
 800eaf4:	0800eb11 	.word	0x0800eb11
 800eaf8:	0800eb19 	.word	0x0800eb19
 800eafc:	0800eb21 	.word	0x0800eb21
 800eb00:	0800eb4d 	.word	0x0800eb4d
 800eb04:	0800eb55 	.word	0x0800eb55
 800eb08:	2300      	movs	r3, #0
 800eb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb0e:	e24e      	b.n	800efae <UART_SetConfig+0x7ae>
 800eb10:	2304      	movs	r3, #4
 800eb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb16:	e24a      	b.n	800efae <UART_SetConfig+0x7ae>
 800eb18:	2308      	movs	r3, #8
 800eb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb1e:	e246      	b.n	800efae <UART_SetConfig+0x7ae>
 800eb20:	2310      	movs	r3, #16
 800eb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb26:	e242      	b.n	800efae <UART_SetConfig+0x7ae>
 800eb28:	cfff69f3 	.word	0xcfff69f3
 800eb2c:	58000c00 	.word	0x58000c00
 800eb30:	11fff4ff 	.word	0x11fff4ff
 800eb34:	40011000 	.word	0x40011000
 800eb38:	58024400 	.word	0x58024400
 800eb3c:	40004400 	.word	0x40004400
 800eb40:	40004800 	.word	0x40004800
 800eb44:	40004c00 	.word	0x40004c00
 800eb48:	40005000 	.word	0x40005000
 800eb4c:	2320      	movs	r3, #32
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb52:	e22c      	b.n	800efae <UART_SetConfig+0x7ae>
 800eb54:	2340      	movs	r3, #64	@ 0x40
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb5a:	e228      	b.n	800efae <UART_SetConfig+0x7ae>
 800eb5c:	2380      	movs	r3, #128	@ 0x80
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb62:	e224      	b.n	800efae <UART_SetConfig+0x7ae>
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4ab1      	ldr	r2, [pc, #708]	@ (800ee30 <UART_SetConfig+0x630>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d176      	bne.n	800ec5c <UART_SetConfig+0x45c>
 800eb6e:	4bb1      	ldr	r3, [pc, #708]	@ (800ee34 <UART_SetConfig+0x634>)
 800eb70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eb76:	2b28      	cmp	r3, #40	@ 0x28
 800eb78:	d86c      	bhi.n	800ec54 <UART_SetConfig+0x454>
 800eb7a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb80 <UART_SetConfig+0x380>)
 800eb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb80:	0800ec25 	.word	0x0800ec25
 800eb84:	0800ec55 	.word	0x0800ec55
 800eb88:	0800ec55 	.word	0x0800ec55
 800eb8c:	0800ec55 	.word	0x0800ec55
 800eb90:	0800ec55 	.word	0x0800ec55
 800eb94:	0800ec55 	.word	0x0800ec55
 800eb98:	0800ec55 	.word	0x0800ec55
 800eb9c:	0800ec55 	.word	0x0800ec55
 800eba0:	0800ec2d 	.word	0x0800ec2d
 800eba4:	0800ec55 	.word	0x0800ec55
 800eba8:	0800ec55 	.word	0x0800ec55
 800ebac:	0800ec55 	.word	0x0800ec55
 800ebb0:	0800ec55 	.word	0x0800ec55
 800ebb4:	0800ec55 	.word	0x0800ec55
 800ebb8:	0800ec55 	.word	0x0800ec55
 800ebbc:	0800ec55 	.word	0x0800ec55
 800ebc0:	0800ec35 	.word	0x0800ec35
 800ebc4:	0800ec55 	.word	0x0800ec55
 800ebc8:	0800ec55 	.word	0x0800ec55
 800ebcc:	0800ec55 	.word	0x0800ec55
 800ebd0:	0800ec55 	.word	0x0800ec55
 800ebd4:	0800ec55 	.word	0x0800ec55
 800ebd8:	0800ec55 	.word	0x0800ec55
 800ebdc:	0800ec55 	.word	0x0800ec55
 800ebe0:	0800ec3d 	.word	0x0800ec3d
 800ebe4:	0800ec55 	.word	0x0800ec55
 800ebe8:	0800ec55 	.word	0x0800ec55
 800ebec:	0800ec55 	.word	0x0800ec55
 800ebf0:	0800ec55 	.word	0x0800ec55
 800ebf4:	0800ec55 	.word	0x0800ec55
 800ebf8:	0800ec55 	.word	0x0800ec55
 800ebfc:	0800ec55 	.word	0x0800ec55
 800ec00:	0800ec45 	.word	0x0800ec45
 800ec04:	0800ec55 	.word	0x0800ec55
 800ec08:	0800ec55 	.word	0x0800ec55
 800ec0c:	0800ec55 	.word	0x0800ec55
 800ec10:	0800ec55 	.word	0x0800ec55
 800ec14:	0800ec55 	.word	0x0800ec55
 800ec18:	0800ec55 	.word	0x0800ec55
 800ec1c:	0800ec55 	.word	0x0800ec55
 800ec20:	0800ec4d 	.word	0x0800ec4d
 800ec24:	2301      	movs	r3, #1
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec2a:	e1c0      	b.n	800efae <UART_SetConfig+0x7ae>
 800ec2c:	2304      	movs	r3, #4
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec32:	e1bc      	b.n	800efae <UART_SetConfig+0x7ae>
 800ec34:	2308      	movs	r3, #8
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec3a:	e1b8      	b.n	800efae <UART_SetConfig+0x7ae>
 800ec3c:	2310      	movs	r3, #16
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec42:	e1b4      	b.n	800efae <UART_SetConfig+0x7ae>
 800ec44:	2320      	movs	r3, #32
 800ec46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec4a:	e1b0      	b.n	800efae <UART_SetConfig+0x7ae>
 800ec4c:	2340      	movs	r3, #64	@ 0x40
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec52:	e1ac      	b.n	800efae <UART_SetConfig+0x7ae>
 800ec54:	2380      	movs	r3, #128	@ 0x80
 800ec56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec5a:	e1a8      	b.n	800efae <UART_SetConfig+0x7ae>
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a75      	ldr	r2, [pc, #468]	@ (800ee38 <UART_SetConfig+0x638>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d130      	bne.n	800ecc8 <UART_SetConfig+0x4c8>
 800ec66:	4b73      	ldr	r3, [pc, #460]	@ (800ee34 <UART_SetConfig+0x634>)
 800ec68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec6a:	f003 0307 	and.w	r3, r3, #7
 800ec6e:	2b05      	cmp	r3, #5
 800ec70:	d826      	bhi.n	800ecc0 <UART_SetConfig+0x4c0>
 800ec72:	a201      	add	r2, pc, #4	@ (adr r2, 800ec78 <UART_SetConfig+0x478>)
 800ec74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec78:	0800ec91 	.word	0x0800ec91
 800ec7c:	0800ec99 	.word	0x0800ec99
 800ec80:	0800eca1 	.word	0x0800eca1
 800ec84:	0800eca9 	.word	0x0800eca9
 800ec88:	0800ecb1 	.word	0x0800ecb1
 800ec8c:	0800ecb9 	.word	0x0800ecb9
 800ec90:	2300      	movs	r3, #0
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec96:	e18a      	b.n	800efae <UART_SetConfig+0x7ae>
 800ec98:	2304      	movs	r3, #4
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec9e:	e186      	b.n	800efae <UART_SetConfig+0x7ae>
 800eca0:	2308      	movs	r3, #8
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eca6:	e182      	b.n	800efae <UART_SetConfig+0x7ae>
 800eca8:	2310      	movs	r3, #16
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecae:	e17e      	b.n	800efae <UART_SetConfig+0x7ae>
 800ecb0:	2320      	movs	r3, #32
 800ecb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecb6:	e17a      	b.n	800efae <UART_SetConfig+0x7ae>
 800ecb8:	2340      	movs	r3, #64	@ 0x40
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecbe:	e176      	b.n	800efae <UART_SetConfig+0x7ae>
 800ecc0:	2380      	movs	r3, #128	@ 0x80
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecc6:	e172      	b.n	800efae <UART_SetConfig+0x7ae>
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a5b      	ldr	r2, [pc, #364]	@ (800ee3c <UART_SetConfig+0x63c>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d130      	bne.n	800ed34 <UART_SetConfig+0x534>
 800ecd2:	4b58      	ldr	r3, [pc, #352]	@ (800ee34 <UART_SetConfig+0x634>)
 800ecd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecd6:	f003 0307 	and.w	r3, r3, #7
 800ecda:	2b05      	cmp	r3, #5
 800ecdc:	d826      	bhi.n	800ed2c <UART_SetConfig+0x52c>
 800ecde:	a201      	add	r2, pc, #4	@ (adr r2, 800ece4 <UART_SetConfig+0x4e4>)
 800ece0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece4:	0800ecfd 	.word	0x0800ecfd
 800ece8:	0800ed05 	.word	0x0800ed05
 800ecec:	0800ed0d 	.word	0x0800ed0d
 800ecf0:	0800ed15 	.word	0x0800ed15
 800ecf4:	0800ed1d 	.word	0x0800ed1d
 800ecf8:	0800ed25 	.word	0x0800ed25
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed02:	e154      	b.n	800efae <UART_SetConfig+0x7ae>
 800ed04:	2304      	movs	r3, #4
 800ed06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed0a:	e150      	b.n	800efae <UART_SetConfig+0x7ae>
 800ed0c:	2308      	movs	r3, #8
 800ed0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed12:	e14c      	b.n	800efae <UART_SetConfig+0x7ae>
 800ed14:	2310      	movs	r3, #16
 800ed16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed1a:	e148      	b.n	800efae <UART_SetConfig+0x7ae>
 800ed1c:	2320      	movs	r3, #32
 800ed1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed22:	e144      	b.n	800efae <UART_SetConfig+0x7ae>
 800ed24:	2340      	movs	r3, #64	@ 0x40
 800ed26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed2a:	e140      	b.n	800efae <UART_SetConfig+0x7ae>
 800ed2c:	2380      	movs	r3, #128	@ 0x80
 800ed2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed32:	e13c      	b.n	800efae <UART_SetConfig+0x7ae>
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a41      	ldr	r2, [pc, #260]	@ (800ee40 <UART_SetConfig+0x640>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	f040 8082 	bne.w	800ee44 <UART_SetConfig+0x644>
 800ed40:	4b3c      	ldr	r3, [pc, #240]	@ (800ee34 <UART_SetConfig+0x634>)
 800ed42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed48:	2b28      	cmp	r3, #40	@ 0x28
 800ed4a:	d86d      	bhi.n	800ee28 <UART_SetConfig+0x628>
 800ed4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ed54 <UART_SetConfig+0x554>)
 800ed4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed52:	bf00      	nop
 800ed54:	0800edf9 	.word	0x0800edf9
 800ed58:	0800ee29 	.word	0x0800ee29
 800ed5c:	0800ee29 	.word	0x0800ee29
 800ed60:	0800ee29 	.word	0x0800ee29
 800ed64:	0800ee29 	.word	0x0800ee29
 800ed68:	0800ee29 	.word	0x0800ee29
 800ed6c:	0800ee29 	.word	0x0800ee29
 800ed70:	0800ee29 	.word	0x0800ee29
 800ed74:	0800ee01 	.word	0x0800ee01
 800ed78:	0800ee29 	.word	0x0800ee29
 800ed7c:	0800ee29 	.word	0x0800ee29
 800ed80:	0800ee29 	.word	0x0800ee29
 800ed84:	0800ee29 	.word	0x0800ee29
 800ed88:	0800ee29 	.word	0x0800ee29
 800ed8c:	0800ee29 	.word	0x0800ee29
 800ed90:	0800ee29 	.word	0x0800ee29
 800ed94:	0800ee09 	.word	0x0800ee09
 800ed98:	0800ee29 	.word	0x0800ee29
 800ed9c:	0800ee29 	.word	0x0800ee29
 800eda0:	0800ee29 	.word	0x0800ee29
 800eda4:	0800ee29 	.word	0x0800ee29
 800eda8:	0800ee29 	.word	0x0800ee29
 800edac:	0800ee29 	.word	0x0800ee29
 800edb0:	0800ee29 	.word	0x0800ee29
 800edb4:	0800ee11 	.word	0x0800ee11
 800edb8:	0800ee29 	.word	0x0800ee29
 800edbc:	0800ee29 	.word	0x0800ee29
 800edc0:	0800ee29 	.word	0x0800ee29
 800edc4:	0800ee29 	.word	0x0800ee29
 800edc8:	0800ee29 	.word	0x0800ee29
 800edcc:	0800ee29 	.word	0x0800ee29
 800edd0:	0800ee29 	.word	0x0800ee29
 800edd4:	0800ee19 	.word	0x0800ee19
 800edd8:	0800ee29 	.word	0x0800ee29
 800eddc:	0800ee29 	.word	0x0800ee29
 800ede0:	0800ee29 	.word	0x0800ee29
 800ede4:	0800ee29 	.word	0x0800ee29
 800ede8:	0800ee29 	.word	0x0800ee29
 800edec:	0800ee29 	.word	0x0800ee29
 800edf0:	0800ee29 	.word	0x0800ee29
 800edf4:	0800ee21 	.word	0x0800ee21
 800edf8:	2301      	movs	r3, #1
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edfe:	e0d6      	b.n	800efae <UART_SetConfig+0x7ae>
 800ee00:	2304      	movs	r3, #4
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee06:	e0d2      	b.n	800efae <UART_SetConfig+0x7ae>
 800ee08:	2308      	movs	r3, #8
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee0e:	e0ce      	b.n	800efae <UART_SetConfig+0x7ae>
 800ee10:	2310      	movs	r3, #16
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee16:	e0ca      	b.n	800efae <UART_SetConfig+0x7ae>
 800ee18:	2320      	movs	r3, #32
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee1e:	e0c6      	b.n	800efae <UART_SetConfig+0x7ae>
 800ee20:	2340      	movs	r3, #64	@ 0x40
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee26:	e0c2      	b.n	800efae <UART_SetConfig+0x7ae>
 800ee28:	2380      	movs	r3, #128	@ 0x80
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee2e:	e0be      	b.n	800efae <UART_SetConfig+0x7ae>
 800ee30:	40011400 	.word	0x40011400
 800ee34:	58024400 	.word	0x58024400
 800ee38:	40007800 	.word	0x40007800
 800ee3c:	40007c00 	.word	0x40007c00
 800ee40:	40011800 	.word	0x40011800
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4aad      	ldr	r2, [pc, #692]	@ (800f100 <UART_SetConfig+0x900>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d176      	bne.n	800ef3c <UART_SetConfig+0x73c>
 800ee4e:	4bad      	ldr	r3, [pc, #692]	@ (800f104 <UART_SetConfig+0x904>)
 800ee50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ee56:	2b28      	cmp	r3, #40	@ 0x28
 800ee58:	d86c      	bhi.n	800ef34 <UART_SetConfig+0x734>
 800ee5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ee60 <UART_SetConfig+0x660>)
 800ee5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee60:	0800ef05 	.word	0x0800ef05
 800ee64:	0800ef35 	.word	0x0800ef35
 800ee68:	0800ef35 	.word	0x0800ef35
 800ee6c:	0800ef35 	.word	0x0800ef35
 800ee70:	0800ef35 	.word	0x0800ef35
 800ee74:	0800ef35 	.word	0x0800ef35
 800ee78:	0800ef35 	.word	0x0800ef35
 800ee7c:	0800ef35 	.word	0x0800ef35
 800ee80:	0800ef0d 	.word	0x0800ef0d
 800ee84:	0800ef35 	.word	0x0800ef35
 800ee88:	0800ef35 	.word	0x0800ef35
 800ee8c:	0800ef35 	.word	0x0800ef35
 800ee90:	0800ef35 	.word	0x0800ef35
 800ee94:	0800ef35 	.word	0x0800ef35
 800ee98:	0800ef35 	.word	0x0800ef35
 800ee9c:	0800ef35 	.word	0x0800ef35
 800eea0:	0800ef15 	.word	0x0800ef15
 800eea4:	0800ef35 	.word	0x0800ef35
 800eea8:	0800ef35 	.word	0x0800ef35
 800eeac:	0800ef35 	.word	0x0800ef35
 800eeb0:	0800ef35 	.word	0x0800ef35
 800eeb4:	0800ef35 	.word	0x0800ef35
 800eeb8:	0800ef35 	.word	0x0800ef35
 800eebc:	0800ef35 	.word	0x0800ef35
 800eec0:	0800ef1d 	.word	0x0800ef1d
 800eec4:	0800ef35 	.word	0x0800ef35
 800eec8:	0800ef35 	.word	0x0800ef35
 800eecc:	0800ef35 	.word	0x0800ef35
 800eed0:	0800ef35 	.word	0x0800ef35
 800eed4:	0800ef35 	.word	0x0800ef35
 800eed8:	0800ef35 	.word	0x0800ef35
 800eedc:	0800ef35 	.word	0x0800ef35
 800eee0:	0800ef25 	.word	0x0800ef25
 800eee4:	0800ef35 	.word	0x0800ef35
 800eee8:	0800ef35 	.word	0x0800ef35
 800eeec:	0800ef35 	.word	0x0800ef35
 800eef0:	0800ef35 	.word	0x0800ef35
 800eef4:	0800ef35 	.word	0x0800ef35
 800eef8:	0800ef35 	.word	0x0800ef35
 800eefc:	0800ef35 	.word	0x0800ef35
 800ef00:	0800ef2d 	.word	0x0800ef2d
 800ef04:	2301      	movs	r3, #1
 800ef06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef0a:	e050      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef0c:	2304      	movs	r3, #4
 800ef0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef12:	e04c      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef14:	2308      	movs	r3, #8
 800ef16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef1a:	e048      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef1c:	2310      	movs	r3, #16
 800ef1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef22:	e044      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef24:	2320      	movs	r3, #32
 800ef26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef2a:	e040      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef2c:	2340      	movs	r3, #64	@ 0x40
 800ef2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef32:	e03c      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef34:	2380      	movs	r3, #128	@ 0x80
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3a:	e038      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a71      	ldr	r2, [pc, #452]	@ (800f108 <UART_SetConfig+0x908>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d130      	bne.n	800efa8 <UART_SetConfig+0x7a8>
 800ef46:	4b6f      	ldr	r3, [pc, #444]	@ (800f104 <UART_SetConfig+0x904>)
 800ef48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef4a:	f003 0307 	and.w	r3, r3, #7
 800ef4e:	2b05      	cmp	r3, #5
 800ef50:	d826      	bhi.n	800efa0 <UART_SetConfig+0x7a0>
 800ef52:	a201      	add	r2, pc, #4	@ (adr r2, 800ef58 <UART_SetConfig+0x758>)
 800ef54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef58:	0800ef71 	.word	0x0800ef71
 800ef5c:	0800ef79 	.word	0x0800ef79
 800ef60:	0800ef81 	.word	0x0800ef81
 800ef64:	0800ef89 	.word	0x0800ef89
 800ef68:	0800ef91 	.word	0x0800ef91
 800ef6c:	0800ef99 	.word	0x0800ef99
 800ef70:	2302      	movs	r3, #2
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef76:	e01a      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef78:	2304      	movs	r3, #4
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7e:	e016      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef80:	2308      	movs	r3, #8
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef86:	e012      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef88:	2310      	movs	r3, #16
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef8e:	e00e      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef90:	2320      	movs	r3, #32
 800ef92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef96:	e00a      	b.n	800efae <UART_SetConfig+0x7ae>
 800ef98:	2340      	movs	r3, #64	@ 0x40
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef9e:	e006      	b.n	800efae <UART_SetConfig+0x7ae>
 800efa0:	2380      	movs	r3, #128	@ 0x80
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efa6:	e002      	b.n	800efae <UART_SetConfig+0x7ae>
 800efa8:	2380      	movs	r3, #128	@ 0x80
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	4a55      	ldr	r2, [pc, #340]	@ (800f108 <UART_SetConfig+0x908>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	f040 80f8 	bne.w	800f1aa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800efba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800efbe:	2b20      	cmp	r3, #32
 800efc0:	dc46      	bgt.n	800f050 <UART_SetConfig+0x850>
 800efc2:	2b02      	cmp	r3, #2
 800efc4:	db75      	blt.n	800f0b2 <UART_SetConfig+0x8b2>
 800efc6:	3b02      	subs	r3, #2
 800efc8:	2b1e      	cmp	r3, #30
 800efca:	d872      	bhi.n	800f0b2 <UART_SetConfig+0x8b2>
 800efcc:	a201      	add	r2, pc, #4	@ (adr r2, 800efd4 <UART_SetConfig+0x7d4>)
 800efce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd2:	bf00      	nop
 800efd4:	0800f057 	.word	0x0800f057
 800efd8:	0800f0b3 	.word	0x0800f0b3
 800efdc:	0800f05f 	.word	0x0800f05f
 800efe0:	0800f0b3 	.word	0x0800f0b3
 800efe4:	0800f0b3 	.word	0x0800f0b3
 800efe8:	0800f0b3 	.word	0x0800f0b3
 800efec:	0800f06f 	.word	0x0800f06f
 800eff0:	0800f0b3 	.word	0x0800f0b3
 800eff4:	0800f0b3 	.word	0x0800f0b3
 800eff8:	0800f0b3 	.word	0x0800f0b3
 800effc:	0800f0b3 	.word	0x0800f0b3
 800f000:	0800f0b3 	.word	0x0800f0b3
 800f004:	0800f0b3 	.word	0x0800f0b3
 800f008:	0800f0b3 	.word	0x0800f0b3
 800f00c:	0800f07f 	.word	0x0800f07f
 800f010:	0800f0b3 	.word	0x0800f0b3
 800f014:	0800f0b3 	.word	0x0800f0b3
 800f018:	0800f0b3 	.word	0x0800f0b3
 800f01c:	0800f0b3 	.word	0x0800f0b3
 800f020:	0800f0b3 	.word	0x0800f0b3
 800f024:	0800f0b3 	.word	0x0800f0b3
 800f028:	0800f0b3 	.word	0x0800f0b3
 800f02c:	0800f0b3 	.word	0x0800f0b3
 800f030:	0800f0b3 	.word	0x0800f0b3
 800f034:	0800f0b3 	.word	0x0800f0b3
 800f038:	0800f0b3 	.word	0x0800f0b3
 800f03c:	0800f0b3 	.word	0x0800f0b3
 800f040:	0800f0b3 	.word	0x0800f0b3
 800f044:	0800f0b3 	.word	0x0800f0b3
 800f048:	0800f0b3 	.word	0x0800f0b3
 800f04c:	0800f0a5 	.word	0x0800f0a5
 800f050:	2b40      	cmp	r3, #64	@ 0x40
 800f052:	d02a      	beq.n	800f0aa <UART_SetConfig+0x8aa>
 800f054:	e02d      	b.n	800f0b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f056:	f7fc fe8b 	bl	800bd70 <HAL_RCCEx_GetD3PCLK1Freq>
 800f05a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f05c:	e02f      	b.n	800f0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f05e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f062:	4618      	mov	r0, r3
 800f064:	f7fc fe9a 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f06c:	e027      	b.n	800f0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f06e:	f107 0318 	add.w	r3, r7, #24
 800f072:	4618      	mov	r0, r3
 800f074:	f7fc ffe6 	bl	800c044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f07c:	e01f      	b.n	800f0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f07e:	4b21      	ldr	r3, [pc, #132]	@ (800f104 <UART_SetConfig+0x904>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f003 0320 	and.w	r3, r3, #32
 800f086:	2b00      	cmp	r3, #0
 800f088:	d009      	beq.n	800f09e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f08a:	4b1e      	ldr	r3, [pc, #120]	@ (800f104 <UART_SetConfig+0x904>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	08db      	lsrs	r3, r3, #3
 800f090:	f003 0303 	and.w	r3, r3, #3
 800f094:	4a1d      	ldr	r2, [pc, #116]	@ (800f10c <UART_SetConfig+0x90c>)
 800f096:	fa22 f303 	lsr.w	r3, r2, r3
 800f09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f09c:	e00f      	b.n	800f0be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f09e:	4b1b      	ldr	r3, [pc, #108]	@ (800f10c <UART_SetConfig+0x90c>)
 800f0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0a2:	e00c      	b.n	800f0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0a4:	4b1a      	ldr	r3, [pc, #104]	@ (800f110 <UART_SetConfig+0x910>)
 800f0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0a8:	e009      	b.n	800f0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0b0:	e005      	b.n	800f0be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f0bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	f000 81ee 	beq.w	800f4a2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0ca:	4a12      	ldr	r2, [pc, #72]	@ (800f114 <UART_SetConfig+0x914>)
 800f0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0d8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	685a      	ldr	r2, [r3, #4]
 800f0de:	4613      	mov	r3, r2
 800f0e0:	005b      	lsls	r3, r3, #1
 800f0e2:	4413      	add	r3, r2
 800f0e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d305      	bcc.n	800f0f6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d910      	bls.n	800f118 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f0fc:	e1d1      	b.n	800f4a2 <UART_SetConfig+0xca2>
 800f0fe:	bf00      	nop
 800f100:	40011c00 	.word	0x40011c00
 800f104:	58024400 	.word	0x58024400
 800f108:	58000c00 	.word	0x58000c00
 800f10c:	03d09000 	.word	0x03d09000
 800f110:	003d0900 	.word	0x003d0900
 800f114:	08015448 	.word	0x08015448
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f11a:	2200      	movs	r2, #0
 800f11c:	60bb      	str	r3, [r7, #8]
 800f11e:	60fa      	str	r2, [r7, #12]
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f124:	4ac0      	ldr	r2, [pc, #768]	@ (800f428 <UART_SetConfig+0xc28>)
 800f126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	2200      	movs	r2, #0
 800f12e:	603b      	str	r3, [r7, #0]
 800f130:	607a      	str	r2, [r7, #4]
 800f132:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f136:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f13a:	f7f1 faad 	bl	8000698 <__aeabi_uldivmod>
 800f13e:	4602      	mov	r2, r0
 800f140:	460b      	mov	r3, r1
 800f142:	4610      	mov	r0, r2
 800f144:	4619      	mov	r1, r3
 800f146:	f04f 0200 	mov.w	r2, #0
 800f14a:	f04f 0300 	mov.w	r3, #0
 800f14e:	020b      	lsls	r3, r1, #8
 800f150:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f154:	0202      	lsls	r2, r0, #8
 800f156:	6979      	ldr	r1, [r7, #20]
 800f158:	6849      	ldr	r1, [r1, #4]
 800f15a:	0849      	lsrs	r1, r1, #1
 800f15c:	2000      	movs	r0, #0
 800f15e:	460c      	mov	r4, r1
 800f160:	4605      	mov	r5, r0
 800f162:	eb12 0804 	adds.w	r8, r2, r4
 800f166:	eb43 0905 	adc.w	r9, r3, r5
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	2200      	movs	r2, #0
 800f170:	469a      	mov	sl, r3
 800f172:	4693      	mov	fp, r2
 800f174:	4652      	mov	r2, sl
 800f176:	465b      	mov	r3, fp
 800f178:	4640      	mov	r0, r8
 800f17a:	4649      	mov	r1, r9
 800f17c:	f7f1 fa8c 	bl	8000698 <__aeabi_uldivmod>
 800f180:	4602      	mov	r2, r0
 800f182:	460b      	mov	r3, r1
 800f184:	4613      	mov	r3, r2
 800f186:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f18a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f18e:	d308      	bcc.n	800f1a2 <UART_SetConfig+0x9a2>
 800f190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f196:	d204      	bcs.n	800f1a2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f19e:	60da      	str	r2, [r3, #12]
 800f1a0:	e17f      	b.n	800f4a2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f1a8:	e17b      	b.n	800f4a2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	69db      	ldr	r3, [r3, #28]
 800f1ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1b2:	f040 80bd 	bne.w	800f330 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f1b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f1ba:	2b20      	cmp	r3, #32
 800f1bc:	dc48      	bgt.n	800f250 <UART_SetConfig+0xa50>
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	db7b      	blt.n	800f2ba <UART_SetConfig+0xaba>
 800f1c2:	2b20      	cmp	r3, #32
 800f1c4:	d879      	bhi.n	800f2ba <UART_SetConfig+0xaba>
 800f1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f1cc <UART_SetConfig+0x9cc>)
 800f1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1cc:	0800f257 	.word	0x0800f257
 800f1d0:	0800f25f 	.word	0x0800f25f
 800f1d4:	0800f2bb 	.word	0x0800f2bb
 800f1d8:	0800f2bb 	.word	0x0800f2bb
 800f1dc:	0800f267 	.word	0x0800f267
 800f1e0:	0800f2bb 	.word	0x0800f2bb
 800f1e4:	0800f2bb 	.word	0x0800f2bb
 800f1e8:	0800f2bb 	.word	0x0800f2bb
 800f1ec:	0800f277 	.word	0x0800f277
 800f1f0:	0800f2bb 	.word	0x0800f2bb
 800f1f4:	0800f2bb 	.word	0x0800f2bb
 800f1f8:	0800f2bb 	.word	0x0800f2bb
 800f1fc:	0800f2bb 	.word	0x0800f2bb
 800f200:	0800f2bb 	.word	0x0800f2bb
 800f204:	0800f2bb 	.word	0x0800f2bb
 800f208:	0800f2bb 	.word	0x0800f2bb
 800f20c:	0800f287 	.word	0x0800f287
 800f210:	0800f2bb 	.word	0x0800f2bb
 800f214:	0800f2bb 	.word	0x0800f2bb
 800f218:	0800f2bb 	.word	0x0800f2bb
 800f21c:	0800f2bb 	.word	0x0800f2bb
 800f220:	0800f2bb 	.word	0x0800f2bb
 800f224:	0800f2bb 	.word	0x0800f2bb
 800f228:	0800f2bb 	.word	0x0800f2bb
 800f22c:	0800f2bb 	.word	0x0800f2bb
 800f230:	0800f2bb 	.word	0x0800f2bb
 800f234:	0800f2bb 	.word	0x0800f2bb
 800f238:	0800f2bb 	.word	0x0800f2bb
 800f23c:	0800f2bb 	.word	0x0800f2bb
 800f240:	0800f2bb 	.word	0x0800f2bb
 800f244:	0800f2bb 	.word	0x0800f2bb
 800f248:	0800f2bb 	.word	0x0800f2bb
 800f24c:	0800f2ad 	.word	0x0800f2ad
 800f250:	2b40      	cmp	r3, #64	@ 0x40
 800f252:	d02e      	beq.n	800f2b2 <UART_SetConfig+0xab2>
 800f254:	e031      	b.n	800f2ba <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f256:	f7fa feed 	bl	800a034 <HAL_RCC_GetPCLK1Freq>
 800f25a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f25c:	e033      	b.n	800f2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f25e:	f7fa feff 	bl	800a060 <HAL_RCC_GetPCLK2Freq>
 800f262:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f264:	e02f      	b.n	800f2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fc fd96 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f274:	e027      	b.n	800f2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f276:	f107 0318 	add.w	r3, r7, #24
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7fc fee2 	bl	800c044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f284:	e01f      	b.n	800f2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f286:	4b69      	ldr	r3, [pc, #420]	@ (800f42c <UART_SetConfig+0xc2c>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f003 0320 	and.w	r3, r3, #32
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d009      	beq.n	800f2a6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f292:	4b66      	ldr	r3, [pc, #408]	@ (800f42c <UART_SetConfig+0xc2c>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	08db      	lsrs	r3, r3, #3
 800f298:	f003 0303 	and.w	r3, r3, #3
 800f29c:	4a64      	ldr	r2, [pc, #400]	@ (800f430 <UART_SetConfig+0xc30>)
 800f29e:	fa22 f303 	lsr.w	r3, r2, r3
 800f2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2a4:	e00f      	b.n	800f2c6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f2a6:	4b62      	ldr	r3, [pc, #392]	@ (800f430 <UART_SetConfig+0xc30>)
 800f2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2aa:	e00c      	b.n	800f2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2ac:	4b61      	ldr	r3, [pc, #388]	@ (800f434 <UART_SetConfig+0xc34>)
 800f2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2b0:	e009      	b.n	800f2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2b8:	e005      	b.n	800f2c6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f2c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	f000 80ea 	beq.w	800f4a2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2d2:	4a55      	ldr	r2, [pc, #340]	@ (800f428 <UART_SetConfig+0xc28>)
 800f2d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2e0:	005a      	lsls	r2, r3, #1
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	085b      	lsrs	r3, r3, #1
 800f2e8:	441a      	add	r2, r3
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2f6:	2b0f      	cmp	r3, #15
 800f2f8:	d916      	bls.n	800f328 <UART_SetConfig+0xb28>
 800f2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f300:	d212      	bcs.n	800f328 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f304:	b29b      	uxth	r3, r3
 800f306:	f023 030f 	bic.w	r3, r3, #15
 800f30a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f30e:	085b      	lsrs	r3, r3, #1
 800f310:	b29b      	uxth	r3, r3
 800f312:	f003 0307 	and.w	r3, r3, #7
 800f316:	b29a      	uxth	r2, r3
 800f318:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f31a:	4313      	orrs	r3, r2
 800f31c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f324:	60da      	str	r2, [r3, #12]
 800f326:	e0bc      	b.n	800f4a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f328:	2301      	movs	r3, #1
 800f32a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f32e:	e0b8      	b.n	800f4a2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f330:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f334:	2b20      	cmp	r3, #32
 800f336:	dc4b      	bgt.n	800f3d0 <UART_SetConfig+0xbd0>
 800f338:	2b00      	cmp	r3, #0
 800f33a:	f2c0 8087 	blt.w	800f44c <UART_SetConfig+0xc4c>
 800f33e:	2b20      	cmp	r3, #32
 800f340:	f200 8084 	bhi.w	800f44c <UART_SetConfig+0xc4c>
 800f344:	a201      	add	r2, pc, #4	@ (adr r2, 800f34c <UART_SetConfig+0xb4c>)
 800f346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34a:	bf00      	nop
 800f34c:	0800f3d7 	.word	0x0800f3d7
 800f350:	0800f3df 	.word	0x0800f3df
 800f354:	0800f44d 	.word	0x0800f44d
 800f358:	0800f44d 	.word	0x0800f44d
 800f35c:	0800f3e7 	.word	0x0800f3e7
 800f360:	0800f44d 	.word	0x0800f44d
 800f364:	0800f44d 	.word	0x0800f44d
 800f368:	0800f44d 	.word	0x0800f44d
 800f36c:	0800f3f7 	.word	0x0800f3f7
 800f370:	0800f44d 	.word	0x0800f44d
 800f374:	0800f44d 	.word	0x0800f44d
 800f378:	0800f44d 	.word	0x0800f44d
 800f37c:	0800f44d 	.word	0x0800f44d
 800f380:	0800f44d 	.word	0x0800f44d
 800f384:	0800f44d 	.word	0x0800f44d
 800f388:	0800f44d 	.word	0x0800f44d
 800f38c:	0800f407 	.word	0x0800f407
 800f390:	0800f44d 	.word	0x0800f44d
 800f394:	0800f44d 	.word	0x0800f44d
 800f398:	0800f44d 	.word	0x0800f44d
 800f39c:	0800f44d 	.word	0x0800f44d
 800f3a0:	0800f44d 	.word	0x0800f44d
 800f3a4:	0800f44d 	.word	0x0800f44d
 800f3a8:	0800f44d 	.word	0x0800f44d
 800f3ac:	0800f44d 	.word	0x0800f44d
 800f3b0:	0800f44d 	.word	0x0800f44d
 800f3b4:	0800f44d 	.word	0x0800f44d
 800f3b8:	0800f44d 	.word	0x0800f44d
 800f3bc:	0800f44d 	.word	0x0800f44d
 800f3c0:	0800f44d 	.word	0x0800f44d
 800f3c4:	0800f44d 	.word	0x0800f44d
 800f3c8:	0800f44d 	.word	0x0800f44d
 800f3cc:	0800f43f 	.word	0x0800f43f
 800f3d0:	2b40      	cmp	r3, #64	@ 0x40
 800f3d2:	d037      	beq.n	800f444 <UART_SetConfig+0xc44>
 800f3d4:	e03a      	b.n	800f44c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3d6:	f7fa fe2d 	bl	800a034 <HAL_RCC_GetPCLK1Freq>
 800f3da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f3dc:	e03c      	b.n	800f458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3de:	f7fa fe3f 	bl	800a060 <HAL_RCC_GetPCLK2Freq>
 800f3e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f3e4:	e038      	b.n	800f458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fc fcd6 	bl	800bd9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3f4:	e030      	b.n	800f458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3f6:	f107 0318 	add.w	r3, r7, #24
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fc fe22 	bl	800c044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f404:	e028      	b.n	800f458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f406:	4b09      	ldr	r3, [pc, #36]	@ (800f42c <UART_SetConfig+0xc2c>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f003 0320 	and.w	r3, r3, #32
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d012      	beq.n	800f438 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f412:	4b06      	ldr	r3, [pc, #24]	@ (800f42c <UART_SetConfig+0xc2c>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	08db      	lsrs	r3, r3, #3
 800f418:	f003 0303 	and.w	r3, r3, #3
 800f41c:	4a04      	ldr	r2, [pc, #16]	@ (800f430 <UART_SetConfig+0xc30>)
 800f41e:	fa22 f303 	lsr.w	r3, r2, r3
 800f422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f424:	e018      	b.n	800f458 <UART_SetConfig+0xc58>
 800f426:	bf00      	nop
 800f428:	08015448 	.word	0x08015448
 800f42c:	58024400 	.word	0x58024400
 800f430:	03d09000 	.word	0x03d09000
 800f434:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f438:	4b24      	ldr	r3, [pc, #144]	@ (800f4cc <UART_SetConfig+0xccc>)
 800f43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f43c:	e00c      	b.n	800f458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f43e:	4b24      	ldr	r3, [pc, #144]	@ (800f4d0 <UART_SetConfig+0xcd0>)
 800f440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f442:	e009      	b.n	800f458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f44a:	e005      	b.n	800f458 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f44c:	2300      	movs	r3, #0
 800f44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f450:	2301      	movs	r3, #1
 800f452:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f456:	bf00      	nop
    }

    if (pclk != 0U)
 800f458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d021      	beq.n	800f4a2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f462:	4a1c      	ldr	r2, [pc, #112]	@ (800f4d4 <UART_SetConfig+0xcd4>)
 800f464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f468:	461a      	mov	r2, r3
 800f46a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f46c:	fbb3 f2f2 	udiv	r2, r3, r2
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	085b      	lsrs	r3, r3, #1
 800f476:	441a      	add	r2, r3
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f480:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f484:	2b0f      	cmp	r3, #15
 800f486:	d909      	bls.n	800f49c <UART_SetConfig+0xc9c>
 800f488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f48a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f48e:	d205      	bcs.n	800f49c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f492:	b29a      	uxth	r2, r3
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	60da      	str	r2, [r3, #12]
 800f49a:	e002      	b.n	800f4a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f49c:	2301      	movs	r3, #1
 800f49e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f4be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3748      	adds	r7, #72	@ 0x48
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f4cc:	03d09000 	.word	0x03d09000
 800f4d0:	003d0900 	.word	0x003d0900
 800f4d4:	08015448 	.word	0x08015448

0800f4d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4e4:	f003 0308 	and.w	r3, r3, #8
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d00a      	beq.n	800f502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	430a      	orrs	r2, r1
 800f500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f506:	f003 0301 	and.w	r3, r3, #1
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d00a      	beq.n	800f524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	430a      	orrs	r2, r1
 800f522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f528:	f003 0302 	and.w	r3, r3, #2
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00a      	beq.n	800f546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	430a      	orrs	r2, r1
 800f544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f54a:	f003 0304 	and.w	r3, r3, #4
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d00a      	beq.n	800f568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	430a      	orrs	r2, r1
 800f566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f56c:	f003 0310 	and.w	r3, r3, #16
 800f570:	2b00      	cmp	r3, #0
 800f572:	d00a      	beq.n	800f58a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	689b      	ldr	r3, [r3, #8]
 800f57a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	430a      	orrs	r2, r1
 800f588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f58e:	f003 0320 	and.w	r3, r3, #32
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00a      	beq.n	800f5ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	689b      	ldr	r3, [r3, #8]
 800f59c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	430a      	orrs	r2, r1
 800f5aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d01a      	beq.n	800f5ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	430a      	orrs	r2, r1
 800f5cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5d6:	d10a      	bne.n	800f5ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	430a      	orrs	r2, r1
 800f5ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00a      	beq.n	800f610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	430a      	orrs	r2, r1
 800f60e:	605a      	str	r2, [r3, #4]
  }
}
 800f610:	bf00      	nop
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b098      	sub	sp, #96	@ 0x60
 800f620:	af02      	add	r7, sp, #8
 800f622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2200      	movs	r2, #0
 800f628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f62c:	f7f4 fab2 	bl	8003b94 <HAL_GetTick>
 800f630:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f003 0308 	and.w	r3, r3, #8
 800f63c:	2b08      	cmp	r3, #8
 800f63e:	d12f      	bne.n	800f6a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f640:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f644:	9300      	str	r3, [sp, #0]
 800f646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f648:	2200      	movs	r2, #0
 800f64a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f000 f88e 	bl	800f770 <UART_WaitOnFlagUntilTimeout>
 800f654:	4603      	mov	r3, r0
 800f656:	2b00      	cmp	r3, #0
 800f658:	d022      	beq.n	800f6a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f662:	e853 3f00 	ldrex	r3, [r3]
 800f666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f66a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f66e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	461a      	mov	r2, r3
 800f676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f678:	647b      	str	r3, [r7, #68]	@ 0x44
 800f67a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f67c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f67e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f680:	e841 2300 	strex	r3, r2, [r1]
 800f684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d1e6      	bne.n	800f65a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2220      	movs	r2, #32
 800f690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2200      	movs	r2, #0
 800f698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f69c:	2303      	movs	r3, #3
 800f69e:	e063      	b.n	800f768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f003 0304 	and.w	r3, r3, #4
 800f6aa:	2b04      	cmp	r3, #4
 800f6ac:	d149      	bne.n	800f742 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f6ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f000 f857 	bl	800f770 <UART_WaitOnFlagUntilTimeout>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d03c      	beq.n	800f742 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d0:	e853 3f00 	ldrex	r3, [r3]
 800f6d4:	623b      	str	r3, [r7, #32]
   return(result);
 800f6d6:	6a3b      	ldr	r3, [r7, #32]
 800f6d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f6dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f6e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6ee:	e841 2300 	strex	r3, r2, [r1]
 800f6f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1e6      	bne.n	800f6c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	3308      	adds	r3, #8
 800f700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	e853 3f00 	ldrex	r3, [r3]
 800f708:	60fb      	str	r3, [r7, #12]
   return(result);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f023 0301 	bic.w	r3, r3, #1
 800f710:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	3308      	adds	r3, #8
 800f718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f71a:	61fa      	str	r2, [r7, #28]
 800f71c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f71e:	69b9      	ldr	r1, [r7, #24]
 800f720:	69fa      	ldr	r2, [r7, #28]
 800f722:	e841 2300 	strex	r3, r2, [r1]
 800f726:	617b      	str	r3, [r7, #20]
   return(result);
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d1e5      	bne.n	800f6fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2220      	movs	r2, #32
 800f732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2200      	movs	r2, #0
 800f73a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f73e:	2303      	movs	r3, #3
 800f740:	e012      	b.n	800f768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2220      	movs	r2, #32
 800f746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2220      	movs	r2, #32
 800f74e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2200      	movs	r2, #0
 800f75c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f766:	2300      	movs	r3, #0
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3758      	adds	r7, #88	@ 0x58
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	603b      	str	r3, [r7, #0]
 800f77c:	4613      	mov	r3, r2
 800f77e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f780:	e04f      	b.n	800f822 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f788:	d04b      	beq.n	800f822 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f78a:	f7f4 fa03 	bl	8003b94 <HAL_GetTick>
 800f78e:	4602      	mov	r2, r0
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	1ad3      	subs	r3, r2, r3
 800f794:	69ba      	ldr	r2, [r7, #24]
 800f796:	429a      	cmp	r2, r3
 800f798:	d302      	bcc.n	800f7a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d101      	bne.n	800f7a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f7a0:	2303      	movs	r3, #3
 800f7a2:	e04e      	b.n	800f842 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	f003 0304 	and.w	r3, r3, #4
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d037      	beq.n	800f822 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	2b80      	cmp	r3, #128	@ 0x80
 800f7b6:	d034      	beq.n	800f822 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	2b40      	cmp	r3, #64	@ 0x40
 800f7bc:	d031      	beq.n	800f822 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	69db      	ldr	r3, [r3, #28]
 800f7c4:	f003 0308 	and.w	r3, r3, #8
 800f7c8:	2b08      	cmp	r3, #8
 800f7ca:	d110      	bne.n	800f7ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2208      	movs	r2, #8
 800f7d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f7d4:	68f8      	ldr	r0, [r7, #12]
 800f7d6:	f000 f879 	bl	800f8cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	2208      	movs	r2, #8
 800f7de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	e029      	b.n	800f842 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	69db      	ldr	r3, [r3, #28]
 800f7f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f7f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f7fc:	d111      	bne.n	800f822 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f000 f85f 	bl	800f8cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2220      	movs	r2, #32
 800f812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2200      	movs	r2, #0
 800f81a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f81e:	2303      	movs	r3, #3
 800f820:	e00f      	b.n	800f842 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	69da      	ldr	r2, [r3, #28]
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	4013      	ands	r3, r2
 800f82c:	68ba      	ldr	r2, [r7, #8]
 800f82e:	429a      	cmp	r2, r3
 800f830:	bf0c      	ite	eq
 800f832:	2301      	moveq	r3, #1
 800f834:	2300      	movne	r3, #0
 800f836:	b2db      	uxtb	r3, r3
 800f838:	461a      	mov	r2, r3
 800f83a:	79fb      	ldrb	r3, [r7, #7]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d0a0      	beq.n	800f782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f840:	2300      	movs	r3, #0
}
 800f842:	4618      	mov	r0, r3
 800f844:	3710      	adds	r7, #16
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}

0800f84a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f84a:	b480      	push	{r7}
 800f84c:	b08f      	sub	sp, #60	@ 0x3c
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f858:	6a3b      	ldr	r3, [r7, #32]
 800f85a:	e853 3f00 	ldrex	r3, [r3]
 800f85e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f866:	637b      	str	r3, [r7, #52]	@ 0x34
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	461a      	mov	r2, r3
 800f86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f872:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f878:	e841 2300 	strex	r3, r2, [r1]
 800f87c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f880:	2b00      	cmp	r3, #0
 800f882:	d1e6      	bne.n	800f852 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	3308      	adds	r3, #8
 800f88a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	e853 3f00 	ldrex	r3, [r3]
 800f892:	60bb      	str	r3, [r7, #8]
   return(result);
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f89a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	3308      	adds	r3, #8
 800f8a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8a4:	61ba      	str	r2, [r7, #24]
 800f8a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a8:	6979      	ldr	r1, [r7, #20]
 800f8aa:	69ba      	ldr	r2, [r7, #24]
 800f8ac:	e841 2300 	strex	r3, r2, [r1]
 800f8b0:	613b      	str	r3, [r7, #16]
   return(result);
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1e5      	bne.n	800f884 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2220      	movs	r2, #32
 800f8bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800f8c0:	bf00      	nop
 800f8c2:	373c      	adds	r7, #60	@ 0x3c
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr

0800f8cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b095      	sub	sp, #84	@ 0x54
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8dc:	e853 3f00 	ldrex	r3, [r3]
 800f8e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f8e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f8f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f8f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f8fa:	e841 2300 	strex	r3, r2, [r1]
 800f8fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f902:	2b00      	cmp	r3, #0
 800f904:	d1e6      	bne.n	800f8d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	3308      	adds	r3, #8
 800f90c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f90e:	6a3b      	ldr	r3, [r7, #32]
 800f910:	e853 3f00 	ldrex	r3, [r3]
 800f914:	61fb      	str	r3, [r7, #28]
   return(result);
 800f916:	69fa      	ldr	r2, [r7, #28]
 800f918:	4b1e      	ldr	r3, [pc, #120]	@ (800f994 <UART_EndRxTransfer+0xc8>)
 800f91a:	4013      	ands	r3, r2
 800f91c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	3308      	adds	r3, #8
 800f924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f92a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f92c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f92e:	e841 2300 	strex	r3, r2, [r1]
 800f932:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1e5      	bne.n	800f906 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d118      	bne.n	800f974 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	e853 3f00 	ldrex	r3, [r3]
 800f94e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	f023 0310 	bic.w	r3, r3, #16
 800f956:	647b      	str	r3, [r7, #68]	@ 0x44
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	461a      	mov	r2, r3
 800f95e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f960:	61bb      	str	r3, [r7, #24]
 800f962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f964:	6979      	ldr	r1, [r7, #20]
 800f966:	69ba      	ldr	r2, [r7, #24]
 800f968:	e841 2300 	strex	r3, r2, [r1]
 800f96c:	613b      	str	r3, [r7, #16]
   return(result);
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d1e6      	bne.n	800f942 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2220      	movs	r2, #32
 800f978:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2200      	movs	r2, #0
 800f986:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f988:	bf00      	nop
 800f98a:	3754      	adds	r7, #84	@ 0x54
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr
 800f994:	effffffe 	.word	0xeffffffe

0800f998 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b090      	sub	sp, #64	@ 0x40
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	69db      	ldr	r3, [r3, #28]
 800f9aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f9ae:	d037      	beq.n	800fa20 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800f9b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f9b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	3308      	adds	r3, #8
 800f9be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c2:	e853 3f00 	ldrex	r3, [r3]
 800f9c6:	623b      	str	r3, [r7, #32]
   return(result);
 800f9c8:	6a3b      	ldr	r3, [r7, #32]
 800f9ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f9ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f9d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	3308      	adds	r3, #8
 800f9d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9d8:	633a      	str	r2, [r7, #48]	@ 0x30
 800f9da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f9de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9e0:	e841 2300 	strex	r3, r2, [r1]
 800f9e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d1e5      	bne.n	800f9b8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	e853 3f00 	ldrex	r3, [r3]
 800f9f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa00:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	461a      	mov	r2, r3
 800fa08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa0a:	61fb      	str	r3, [r7, #28]
 800fa0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0e:	69b9      	ldr	r1, [r7, #24]
 800fa10:	69fa      	ldr	r2, [r7, #28]
 800fa12:	e841 2300 	strex	r3, r2, [r1]
 800fa16:	617b      	str	r3, [r7, #20]
   return(result);
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d1e6      	bne.n	800f9ec <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa1e:	e002      	b.n	800fa26 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fa20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fa22:	f7fe fec3 	bl	800e7ac <HAL_UART_TxCpltCallback>
}
 800fa26:	bf00      	nop
 800fa28:	3740      	adds	r7, #64	@ 0x40
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}

0800fa2e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b084      	sub	sp, #16
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f7fe febf 	bl	800e7c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa42:	bf00      	nop
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b086      	sub	sp, #24
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa56:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa5e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fa66:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa72:	2b80      	cmp	r3, #128	@ 0x80
 800fa74:	d109      	bne.n	800fa8a <UART_DMAError+0x40>
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	2b21      	cmp	r3, #33	@ 0x21
 800fa7a:	d106      	bne.n	800fa8a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800fa84:	6978      	ldr	r0, [r7, #20]
 800fa86:	f7ff fee0 	bl	800f84a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa94:	2b40      	cmp	r3, #64	@ 0x40
 800fa96:	d109      	bne.n	800faac <UART_DMAError+0x62>
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2b22      	cmp	r3, #34	@ 0x22
 800fa9c:	d106      	bne.n	800faac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	2200      	movs	r2, #0
 800faa2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800faa6:	6978      	ldr	r0, [r7, #20]
 800faa8:	f7ff ff10 	bl	800f8cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fab2:	f043 0210 	orr.w	r2, r3, #16
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fabc:	6978      	ldr	r0, [r7, #20]
 800fabe:	f7fe fe89 	bl	800e7d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fac2:	bf00      	nop
 800fac4:	3718      	adds	r7, #24
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800faca:	b580      	push	{r7, lr}
 800facc:	b084      	sub	sp, #16
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2200      	movs	r2, #0
 800fadc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fae0:	68f8      	ldr	r0, [r7, #12]
 800fae2:	f7fe fe77 	bl	800e7d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fae6:	bf00      	nop
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b088      	sub	sp, #32
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	e853 3f00 	ldrex	r3, [r3]
 800fb02:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb0a:	61fb      	str	r3, [r7, #28]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	461a      	mov	r2, r3
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	61bb      	str	r3, [r7, #24]
 800fb16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb18:	6979      	ldr	r1, [r7, #20]
 800fb1a:	69ba      	ldr	r2, [r7, #24]
 800fb1c:	e841 2300 	strex	r3, r2, [r1]
 800fb20:	613b      	str	r3, [r7, #16]
   return(result);
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d1e6      	bne.n	800faf6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2220      	movs	r2, #32
 800fb2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2200      	movs	r2, #0
 800fb34:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f7fe fe38 	bl	800e7ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb3c:	bf00      	nop
 800fb3e:	3720      	adds	r7, #32
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb4c:	bf00      	nop
 800fb4e:	370c      	adds	r7, #12
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr

0800fb58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb60:	bf00      	nop
 800fb62:	370c      	adds	r7, #12
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr

0800fb6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb74:	bf00      	nop
 800fb76:	370c      	adds	r7, #12
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d101      	bne.n	800fb96 <HAL_UARTEx_DisableFifoMode+0x16>
 800fb92:	2302      	movs	r3, #2
 800fb94:	e027      	b.n	800fbe6 <HAL_UARTEx_DisableFifoMode+0x66>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2201      	movs	r2, #1
 800fb9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2224      	movs	r2, #36	@ 0x24
 800fba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f022 0201 	bic.w	r2, r2, #1
 800fbbc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fbc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	68fa      	ldr	r2, [r7, #12]
 800fbd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2220      	movs	r2, #32
 800fbd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3714      	adds	r7, #20
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fbf2:	b580      	push	{r7, lr}
 800fbf4:	b084      	sub	sp, #16
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
 800fbfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d101      	bne.n	800fc0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc06:	2302      	movs	r3, #2
 800fc08:	e02d      	b.n	800fc66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2224      	movs	r2, #36	@ 0x24
 800fc16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f022 0201 	bic.w	r2, r2, #1
 800fc30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	689b      	ldr	r3, [r3, #8]
 800fc38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	430a      	orrs	r2, r1
 800fc44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 f850 	bl	800fcec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2220      	movs	r2, #32
 800fc58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3710      	adds	r7, #16
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	b084      	sub	sp, #16
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
 800fc76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d101      	bne.n	800fc86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc82:	2302      	movs	r3, #2
 800fc84:	e02d      	b.n	800fce2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2201      	movs	r2, #1
 800fc8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2224      	movs	r2, #36	@ 0x24
 800fc92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f022 0201 	bic.w	r2, r2, #1
 800fcac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	683a      	ldr	r2, [r7, #0]
 800fcbe:	430a      	orrs	r2, r1
 800fcc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f812 	bl	800fcec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2220      	movs	r2, #32
 800fcd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fce0:	2300      	movs	r3, #0
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3710      	adds	r7, #16
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
	...

0800fcec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b085      	sub	sp, #20
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d108      	bne.n	800fd0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2201      	movs	r2, #1
 800fd08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd0c:	e031      	b.n	800fd72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd0e:	2310      	movs	r3, #16
 800fd10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd12:	2310      	movs	r3, #16
 800fd14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	0e5b      	lsrs	r3, r3, #25
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	f003 0307 	and.w	r3, r3, #7
 800fd24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	689b      	ldr	r3, [r3, #8]
 800fd2c:	0f5b      	lsrs	r3, r3, #29
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	f003 0307 	and.w	r3, r3, #7
 800fd34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd36:	7bbb      	ldrb	r3, [r7, #14]
 800fd38:	7b3a      	ldrb	r2, [r7, #12]
 800fd3a:	4911      	ldr	r1, [pc, #68]	@ (800fd80 <UARTEx_SetNbDataToProcess+0x94>)
 800fd3c:	5c8a      	ldrb	r2, [r1, r2]
 800fd3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd42:	7b3a      	ldrb	r2, [r7, #12]
 800fd44:	490f      	ldr	r1, [pc, #60]	@ (800fd84 <UARTEx_SetNbDataToProcess+0x98>)
 800fd46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd48:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd4c:	b29a      	uxth	r2, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
 800fd56:	7b7a      	ldrb	r2, [r7, #13]
 800fd58:	4909      	ldr	r1, [pc, #36]	@ (800fd80 <UARTEx_SetNbDataToProcess+0x94>)
 800fd5a:	5c8a      	ldrb	r2, [r1, r2]
 800fd5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd60:	7b7a      	ldrb	r2, [r7, #13]
 800fd62:	4908      	ldr	r1, [pc, #32]	@ (800fd84 <UARTEx_SetNbDataToProcess+0x98>)
 800fd64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd66:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd6a:	b29a      	uxth	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fd72:	bf00      	nop
 800fd74:	3714      	adds	r7, #20
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
 800fd7e:	bf00      	nop
 800fd80:	08015460 	.word	0x08015460
 800fd84:	08015468 	.word	0x08015468

0800fd88 <_ZN7VL53L0XC1EP12GPIO_TypeDefti>:

#include "vl53l0x_api.h" // Make sure to include the API header

class VL53L0X {
public:
    VL53L0X(GPIO_TypeDef *TOF_XSHUT_PORT,
 800fd88:	b480      	push	{r7}
 800fd8a:	b085      	sub	sp, #20
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	603b      	str	r3, [r7, #0]
 800fd94:	4613      	mov	r3, r2
 800fd96:	80fb      	strh	r3, [r7, #6]
            uint16_t TOF_XSHUT_PIN,
            int VL53_ADDRESS) {
        this->TOF_XSHUT_PORT = TOF_XSHUT_PORT;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	68ba      	ldr	r2, [r7, #8]
 800fd9c:	601a      	str	r2, [r3, #0]
        this->TOF_XSHUT_PIN = TOF_XSHUT_PIN;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	88fa      	ldrh	r2, [r7, #6]
 800fda2:	809a      	strh	r2, [r3, #4]
        this->VL53_ADDRESS = VL53_ADDRESS;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	683a      	ldr	r2, [r7, #0]
 800fda8:	609a      	str	r2, [r3, #8]
    }
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	4618      	mov	r0, r3
 800fdae:	3714      	adds	r7, #20
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr

0800fdb8 <_Z41__static_initialization_and_destruction_0v>:
}

void lifter_measuredistance() {
    front_sensor.Update();
    back_sensor.Update();
} // Closing brace for the function}
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b084      	sub	sp, #16
 800fdbc:	af04      	add	r7, sp, #16
DC_motor lifter_right_wheel = {&htim8, GPIOD, GPIO_PIN_14, &htim15, TIM_CHANNEL_1, 4, 20, 1};
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	9302      	str	r3, [sp, #8]
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	9301      	str	r3, [sp, #4]
 800fdc6:	4b27      	ldr	r3, [pc, #156]	@ (800fe64 <_Z41__static_initialization_and_destruction_0v+0xac>)
 800fdc8:	9300      	str	r3, [sp, #0]
 800fdca:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800fdce:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800fdd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fdd6:	4a24      	ldr	r2, [pc, #144]	@ (800fe68 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 800fdd8:	4924      	ldr	r1, [pc, #144]	@ (800fe6c <_Z41__static_initialization_and_destruction_0v+0xb4>)
 800fdda:	4825      	ldr	r0, [pc, #148]	@ (800fe70 <_Z41__static_initialization_and_destruction_0v+0xb8>)
 800fddc:	f7f0 fe22 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor lifter_left_wheel  = {&htim23, GPIOD, GPIO_PIN_11, &htim15, TIM_CHANNEL_2, 4, 20, 1};
 800fde0:	2301      	movs	r3, #1
 800fde2:	9302      	str	r3, [sp, #8]
 800fde4:	2304      	movs	r3, #4
 800fde6:	9301      	str	r3, [sp, #4]
 800fde8:	4b1e      	ldr	r3, [pc, #120]	@ (800fe64 <_Z41__static_initialization_and_destruction_0v+0xac>)
 800fdea:	9300      	str	r3, [sp, #0]
 800fdec:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800fdf0:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800fdf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fdf8:	4a1b      	ldr	r2, [pc, #108]	@ (800fe68 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 800fdfa:	491e      	ldr	r1, [pc, #120]	@ (800fe74 <_Z41__static_initialization_and_destruction_0v+0xbc>)
 800fdfc:	481e      	ldr	r0, [pc, #120]	@ (800fe78 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 800fdfe:	f7f0 fe11 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor front_lifter       = {&htim8, GPIOD, GPIO_PIN_9, &htim24, TIM_CHANNEL_1, 4, 20, 1};
 800fe02:	2301      	movs	r3, #1
 800fe04:	9302      	str	r3, [sp, #8]
 800fe06:	2300      	movs	r3, #0
 800fe08:	9301      	str	r3, [sp, #4]
 800fe0a:	4b1c      	ldr	r3, [pc, #112]	@ (800fe7c <_Z41__static_initialization_and_destruction_0v+0xc4>)
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800fe12:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800fe16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe1a:	4a13      	ldr	r2, [pc, #76]	@ (800fe68 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 800fe1c:	4913      	ldr	r1, [pc, #76]	@ (800fe6c <_Z41__static_initialization_and_destruction_0v+0xb4>)
 800fe1e:	4818      	ldr	r0, [pc, #96]	@ (800fe80 <_Z41__static_initialization_and_destruction_0v+0xc8>)
 800fe20:	f7f0 fe00 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor back_lifter        = {&htim8, GPIOD, GPIO_PIN_10, &htim24, TIM_CHANNEL_2, 4, 20, 1};
 800fe24:	2301      	movs	r3, #1
 800fe26:	9302      	str	r3, [sp, #8]
 800fe28:	2304      	movs	r3, #4
 800fe2a:	9301      	str	r3, [sp, #4]
 800fe2c:	4b13      	ldr	r3, [pc, #76]	@ (800fe7c <_Z41__static_initialization_and_destruction_0v+0xc4>)
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800fe34:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800fe38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe3c:	4a0a      	ldr	r2, [pc, #40]	@ (800fe68 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 800fe3e:	490b      	ldr	r1, [pc, #44]	@ (800fe6c <_Z41__static_initialization_and_destruction_0v+0xb4>)
 800fe40:	4810      	ldr	r0, [pc, #64]	@ (800fe84 <_Z41__static_initialization_and_destruction_0v+0xcc>)
 800fe42:	f7f0 fdef 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
VL53L0X front_sensor = {GPIOG, GPIO_PIN_1, 0};
 800fe46:	2300      	movs	r3, #0
 800fe48:	2202      	movs	r2, #2
 800fe4a:	490f      	ldr	r1, [pc, #60]	@ (800fe88 <_Z41__static_initialization_and_destruction_0v+0xd0>)
 800fe4c:	480f      	ldr	r0, [pc, #60]	@ (800fe8c <_Z41__static_initialization_and_destruction_0v+0xd4>)
 800fe4e:	f7ff ff9b 	bl	800fd88 <_ZN7VL53L0XC1EP12GPIO_TypeDefti>
VL53L0X back_sensor = {GPIOG, GPIO_PIN_2, 1};
 800fe52:	2301      	movs	r3, #1
 800fe54:	2204      	movs	r2, #4
 800fe56:	490c      	ldr	r1, [pc, #48]	@ (800fe88 <_Z41__static_initialization_and_destruction_0v+0xd0>)
 800fe58:	480d      	ldr	r0, [pc, #52]	@ (800fe90 <_Z41__static_initialization_and_destruction_0v+0xd8>)
 800fe5a:	f7ff ff95 	bl	800fd88 <_ZN7VL53L0XC1EP12GPIO_TypeDefti>
} // Closing brace for the function}
 800fe5e:	bf00      	nop
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	240007f4 	.word	0x240007f4
 800fe68:	58020c00 	.word	0x58020c00
 800fe6c:	24000710 	.word	0x24000710
 800fe70:	24000c90 	.word	0x24000c90
 800fe74:	240008d8 	.word	0x240008d8
 800fe78:	24000ce8 	.word	0x24000ce8
 800fe7c:	24000924 	.word	0x24000924
 800fe80:	24000d40 	.word	0x24000d40
 800fe84:	24000d98 	.word	0x24000d98
 800fe88:	58021800 	.word	0x58021800
 800fe8c:	24000df0 	.word	0x24000df0
 800fe90:	24000fb8 	.word	0x24000fb8

0800fe94 <_GLOBAL__sub_I_lifter_right_wheel>:
 800fe94:	b580      	push	{r7, lr}
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	f7ff ff8e 	bl	800fdb8 <_Z41__static_initialization_and_destruction_0v>
 800fe9c:	bd80      	pop	{r7, pc}

0800fe9e <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 800fe9e:	b480      	push	{r7}
 800fea0:	b083      	sub	sp, #12
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	ed87 0a01 	vstr	s0, [r7, #4]
 800fea8:	edd7 7a01 	vldr	s15, [r7, #4]
 800feac:	eef0 7ae7 	vabs.f32	s15, s15
 800feb0:	eeb0 0a67 	vmov.f32	s0, s15
 800feb4:	370c      	adds	r7, #12
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
	...

0800fec0 <_ZN8DC_motor6PI_runEv>:
#include <cmath>




void DC_motor::PI_run(){
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b086      	sub	sp, #24
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
    float u = 0;
 800fec8:	f04f 0300 	mov.w	r3, #0
 800fecc:	617b      	str	r3, [r7, #20]
    int pul = 0;
 800fece:	2300      	movs	r3, #0
 800fed0:	613b      	str	r3, [r7, #16]
    float bound = 1/ki;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	ed93 7a01 	vldr	s14, [r3, #4]
 800fed8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fedc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fee0:	edc7 7a03 	vstr	s15, [r7, #12]
    error = sp - speed;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	ed93 7a08 	vldr	s14, [r3, #32]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	edd3 7a07 	vldr	s15, [r3, #28]
 800fef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	edc3 7a03 	vstr	s15, [r3, #12]
    integral += error*span;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	ed93 7a05 	vldr	s14, [r3, #20]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	edd3 6a03 	vldr	s13, [r3, #12]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ff0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff10:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	edc3 7a05 	vstr	s15, [r3, #20]
    differential = error - pre_error;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	ed93 7a03 	vldr	s14, [r3, #12]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	edd3 7a04 	vldr	s15, [r3, #16]
 800ff26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	edc3 7a06 	vstr	s15, [r3, #24]

    if (integral > bound)integral = bound;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	edd3 7a05 	vldr	s15, [r3, #20]
 800ff36:	ed97 7a03 	vldr	s14, [r7, #12]
 800ff3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff42:	d503      	bpl.n	800ff4c <_ZN8DC_motor6PI_runEv+0x8c>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	68fa      	ldr	r2, [r7, #12]
 800ff48:	615a      	str	r2, [r3, #20]
 800ff4a:	e012      	b.n	800ff72 <_ZN8DC_motor6PI_runEv+0xb2>
    else if (integral < -bound)integral = -bound;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	ed93 7a05 	vldr	s14, [r3, #20]
 800ff52:	edd7 7a03 	vldr	s15, [r7, #12]
 800ff56:	eef1 7a67 	vneg.f32	s15, s15
 800ff5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff62:	d506      	bpl.n	800ff72 <_ZN8DC_motor6PI_runEv+0xb2>
 800ff64:	edd7 7a03 	vldr	s15, [r7, #12]
 800ff68:	eef1 7a67 	vneg.f32	s15, s15
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	edc3 7a05 	vstr	s15, [r3, #20]
    u = kp*error + ki*integral + kd*differential;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	ed93 7a00 	vldr	s14, [r3]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	edd3 7a03 	vldr	s15, [r3, #12]
 800ff7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	edd3 6a01 	vldr	s13, [r3, #4]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	edd3 7a05 	vldr	s15, [r3, #20]
 800ff8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff92:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	edd3 6a02 	vldr	s13, [r3, #8]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	edd3 7a06 	vldr	s15, [r3, #24]
 800ffa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ffa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffaa:	edc7 7a05 	vstr	s15, [r7, #20]
    pre_error = error;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	68da      	ldr	r2, [r3, #12]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	611a      	str	r2, [r3, #16]
    
    if (u > 1) u = 1;
 800ffb6:	edd7 7a05 	vldr	s15, [r7, #20]
 800ffba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ffbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ffc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffc6:	dd03      	ble.n	800ffd0 <_ZN8DC_motor6PI_runEv+0x110>
 800ffc8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800ffcc:	617b      	str	r3, [r7, #20]
 800ffce:	e00a      	b.n	800ffe6 <_ZN8DC_motor6PI_runEv+0x126>
    else if (u < -1) u = -1;
 800ffd0:	edd7 7a05 	vldr	s15, [r7, #20]
 800ffd4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ffd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ffdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe0:	d501      	bpl.n	800ffe6 <_ZN8DC_motor6PI_runEv+0x126>
 800ffe2:	4b51      	ldr	r3, [pc, #324]	@ (8010128 <_ZN8DC_motor6PI_runEv+0x268>)
 800ffe4:	617b      	str	r3, [r7, #20]
    pul = (int)(fabs(u)*arr);
 800ffe6:	ed97 0a05 	vldr	s0, [r7, #20]
 800ffea:	f7ff ff58 	bl	800fe9e <_ZSt4fabsf>
 800ffee:	eeb0 7a40 	vmov.f32	s14, s0
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fff6:	ee07 3a90 	vmov	s15, r3
 800fffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010006:	ee17 3a90 	vmov	r3, s15
 801000a:	613b      	str	r3, [r7, #16]
    if(dir_pin == true){
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010012:	2b01      	cmp	r3, #1
 8010014:	d124      	bne.n	8010060 <_ZN8DC_motor6PI_runEv+0x1a0>
       	if(u>0){
 8010016:	edd7 7a05 	vldr	s15, [r7, #20]
 801001a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801001e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010022:	dd09      	ble.n	8010038 <_ZN8DC_motor6PI_runEv+0x178>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 801002e:	2200      	movs	r2, #0
 8010030:	4619      	mov	r1, r3
 8010032:	f7f8 ff3d 	bl	8008eb0 <HAL_GPIO_WritePin>
 8010036:	e03c      	b.n	80100b2 <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else if (u<0){
 8010038:	edd7 7a05 	vldr	s15, [r7, #20]
 801003c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010044:	d509      	bpl.n	801005a <_ZN8DC_motor6PI_runEv+0x19a>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8010050:	2201      	movs	r2, #1
 8010052:	4619      	mov	r1, r3
 8010054:	f7f8 ff2c 	bl	8008eb0 <HAL_GPIO_WritePin>
 8010058:	e02b      	b.n	80100b2 <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else{
       	        pul = 0;
 801005a:	2300      	movs	r3, #0
 801005c:	613b      	str	r3, [r7, #16]
 801005e:	e028      	b.n	80100b2 <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }
       }else if(dir_pin == false){
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010066:	2b00      	cmp	r3, #0
 8010068:	d123      	bne.n	80100b2 <_ZN8DC_motor6PI_runEv+0x1f2>
       	if(u>0){
 801006a:	edd7 7a05 	vldr	s15, [r7, #20]
 801006e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010076:	dd09      	ble.n	801008c <_ZN8DC_motor6PI_runEv+0x1cc>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8010082:	2201      	movs	r2, #1
 8010084:	4619      	mov	r1, r3
 8010086:	f7f8 ff13 	bl	8008eb0 <HAL_GPIO_WritePin>
 801008a:	e012      	b.n	80100b2 <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else if (u<0){
 801008c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010098:	d509      	bpl.n	80100ae <_ZN8DC_motor6PI_runEv+0x1ee>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80100a4:	2200      	movs	r2, #0
 80100a6:	4619      	mov	r1, r3
 80100a8:	f7f8 ff02 	bl	8008eb0 <HAL_GPIO_WritePin>
 80100ac:	e001      	b.n	80100b2 <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else{
       	        pul = 0;
 80100ae:	2300      	movs	r3, #0
 80100b0:	613b      	str	r3, [r7, #16]
       	    }
       }
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d105      	bne.n	80100c6 <_ZN8DC_motor6PI_runEv+0x206>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	693a      	ldr	r2, [r7, #16]
 80100c2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80100c4:	e02c      	b.n	8010120 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100ca:	2b04      	cmp	r3, #4
 80100cc:	d105      	bne.n	80100da <_ZN8DC_motor6PI_runEv+0x21a>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	693a      	ldr	r2, [r7, #16]
 80100d6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80100d8:	e022      	b.n	8010120 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100de:	2b08      	cmp	r3, #8
 80100e0:	d105      	bne.n	80100ee <_ZN8DC_motor6PI_runEv+0x22e>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	693a      	ldr	r2, [r7, #16]
 80100ea:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80100ec:	e018      	b.n	8010120 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100f2:	2b0c      	cmp	r3, #12
 80100f4:	d105      	bne.n	8010102 <_ZN8DC_motor6PI_runEv+0x242>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	693a      	ldr	r2, [r7, #16]
 80100fe:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8010100:	e00e      	b.n	8010120 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010106:	2b10      	cmp	r3, #16
 8010108:	d105      	bne.n	8010116 <_ZN8DC_motor6PI_runEv+0x256>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	693a      	ldr	r2, [r7, #16]
 8010112:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8010114:	e004      	b.n	8010120 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	693a      	ldr	r2, [r7, #16]
 801011e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8010120:	bf00      	nop
 8010122:	3718      	adds	r7, #24
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	bf800000 	.word	0xbf800000

0801012c <_ZN8DC_motor8setspeedEf>:


void DC_motor::setspeed(float target_speed){
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	ed87 0a00 	vstr	s0, [r7]
    sp = target_speed;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	683a      	ldr	r2, [r7, #0]
 801013c:	621a      	str	r2, [r3, #32]
}
 801013e:	bf00      	nop
 8010140:	370c      	adds	r7, #12
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr

0801014a <_ZN8DC_motor12update_speedEi>:
void DC_motor::update_speed(int sign){
 801014a:	b480      	push	{r7}
 801014c:	b085      	sub	sp, #20
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
 8010152:	6039      	str	r1, [r7, #0]
    int16_t enc ;
	enc = __HAL_TIM_GetCounter(enc_htim);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801015c:	81fb      	strh	r3, [r7, #14]
	speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	ee07 3a90 	vmov	s15, r3
 8010164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010168:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801016c:	ee07 3a90 	vmov	s15, r3
 8010170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010174:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	ee07 3a90 	vmov	s15, r3
 8010182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801018c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010196:	ee27 7a27 	vmul.f32	s14, s14, s15
 801019a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	edc3 7a07 	vstr	s15, [r3, #28]
    __HAL_TIM_SetCounter(enc_htim,0);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2200      	movs	r2, #0
 80101ac:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80101ae:	bf00      	nop
 80101b0:	3714      	adds	r7, #20
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <_ZN8DC_motor5setupEv>:
void DC_motor::setup(){
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b082      	sub	sp, #8
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101ca:	4619      	mov	r1, r3
 80101cc:	4610      	mov	r0, r2
 80101ce:	f7fc fc79 	bl	800cac4 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101d6:	2100      	movs	r1, #0
 80101d8:	4618      	mov	r0, r3
 80101da:	f7fc fe81 	bl	800cee0 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101e2:	2104      	movs	r1, #4
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7fc fe7b 	bl	800cee0 <HAL_TIM_Encoder_Start>
}    
 80101ea:	bf00      	nop
 80101ec:	3708      	adds	r7, #8
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80101f2:	b480      	push	{r7}
 80101f4:	b083      	sub	sp, #12
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	6078      	str	r0, [r7, #4]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	601a      	str	r2, [r3, #0]
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2200      	movs	r2, #0
 8010204:	605a      	str	r2, [r3, #4]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4618      	mov	r0, r3
 801020a:	370c      	adds	r7, #12
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	4a04      	ldr	r2, [pc, #16]	@ (8010230 <_ZN3ros3MsgC1Ev+0x1c>)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	601a      	str	r2, [r3, #0]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	4618      	mov	r0, r3
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr
 8010230:	08015624 	.word	0x08015624

08010234 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
      data()
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	4618      	mov	r0, r3
 8010240:	f7ff ffe8 	bl	8010214 <_ZN3ros3MsgC1Ev>
 8010244:	4a06      	ldr	r2, [pc, #24]	@ (8010260 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	601a      	str	r2, [r3, #0]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	3304      	adds	r3, #4
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff ffcf 	bl	80101f2 <_ZN3ros4TimeC1Ev>
    {
    }
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	4618      	mov	r0, r3
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	0801560c 	.word	0x0801560c

08010264 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8010264:	b480      	push	{r7}
 8010266:	b085      	sub	sp, #20
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801026e:	2300      	movs	r3, #0
 8010270:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6859      	ldr	r1, [r3, #4]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	683a      	ldr	r2, [r7, #0]
 801027a:	4413      	add	r3, r2
 801027c:	b2ca      	uxtb	r2, r1
 801027e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	685b      	ldr	r3, [r3, #4]
 8010284:	0a19      	lsrs	r1, r3, #8
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	3301      	adds	r3, #1
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	4413      	add	r3, r2
 801028e:	b2ca      	uxtb	r2, r1
 8010290:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	0c19      	lsrs	r1, r3, #16
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	3302      	adds	r3, #2
 801029c:	683a      	ldr	r2, [r7, #0]
 801029e:	4413      	add	r3, r2
 80102a0:	b2ca      	uxtb	r2, r1
 80102a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	0e19      	lsrs	r1, r3, #24
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	3303      	adds	r3, #3
 80102ae:	683a      	ldr	r2, [r7, #0]
 80102b0:	4413      	add	r3, r2
 80102b2:	b2ca      	uxtb	r2, r1
 80102b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	3304      	adds	r3, #4
 80102ba:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6899      	ldr	r1, [r3, #8]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	683a      	ldr	r2, [r7, #0]
 80102c4:	4413      	add	r3, r2
 80102c6:	b2ca      	uxtb	r2, r1
 80102c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	689b      	ldr	r3, [r3, #8]
 80102ce:	0a19      	lsrs	r1, r3, #8
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	3301      	adds	r3, #1
 80102d4:	683a      	ldr	r2, [r7, #0]
 80102d6:	4413      	add	r3, r2
 80102d8:	b2ca      	uxtb	r2, r1
 80102da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	689b      	ldr	r3, [r3, #8]
 80102e0:	0c19      	lsrs	r1, r3, #16
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	3302      	adds	r3, #2
 80102e6:	683a      	ldr	r2, [r7, #0]
 80102e8:	4413      	add	r3, r2
 80102ea:	b2ca      	uxtb	r2, r1
 80102ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	689b      	ldr	r3, [r3, #8]
 80102f2:	0e19      	lsrs	r1, r3, #24
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	3303      	adds	r3, #3
 80102f8:	683a      	ldr	r2, [r7, #0]
 80102fa:	4413      	add	r3, r2
 80102fc:	b2ca      	uxtb	r2, r1
 80102fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	3304      	adds	r3, #4
 8010304:	60fb      	str	r3, [r7, #12]
      return offset;
 8010306:	68fb      	ldr	r3, [r7, #12]
    }
 8010308:	4618      	mov	r0, r3
 801030a:	3714      	adds	r7, #20
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8010314:	b480      	push	{r7}
 8010316:	b085      	sub	sp, #20
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801031e:	2300      	movs	r3, #0
 8010320:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	683a      	ldr	r2, [r7, #0]
 8010326:	4413      	add	r3, r2
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	461a      	mov	r2, r3
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	685a      	ldr	r2, [r3, #4]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	3301      	adds	r3, #1
 8010338:	6839      	ldr	r1, [r7, #0]
 801033a:	440b      	add	r3, r1
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	021b      	lsls	r3, r3, #8
 8010340:	431a      	orrs	r2, r3
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	685a      	ldr	r2, [r3, #4]
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	3302      	adds	r3, #2
 801034e:	6839      	ldr	r1, [r7, #0]
 8010350:	440b      	add	r3, r1
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	041b      	lsls	r3, r3, #16
 8010356:	431a      	orrs	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	685a      	ldr	r2, [r3, #4]
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	3303      	adds	r3, #3
 8010364:	6839      	ldr	r1, [r7, #0]
 8010366:	440b      	add	r3, r1
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	061b      	lsls	r3, r3, #24
 801036c:	431a      	orrs	r2, r3
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	3304      	adds	r3, #4
 8010376:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	683a      	ldr	r2, [r7, #0]
 801037c:	4413      	add	r3, r2
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	461a      	mov	r2, r3
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	689a      	ldr	r2, [r3, #8]
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	3301      	adds	r3, #1
 801038e:	6839      	ldr	r1, [r7, #0]
 8010390:	440b      	add	r3, r1
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	021b      	lsls	r3, r3, #8
 8010396:	431a      	orrs	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	689a      	ldr	r2, [r3, #8]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	3302      	adds	r3, #2
 80103a4:	6839      	ldr	r1, [r7, #0]
 80103a6:	440b      	add	r3, r1
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	041b      	lsls	r3, r3, #16
 80103ac:	431a      	orrs	r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	689a      	ldr	r2, [r3, #8]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	3303      	adds	r3, #3
 80103ba:	6839      	ldr	r1, [r7, #0]
 80103bc:	440b      	add	r3, r1
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	061b      	lsls	r3, r3, #24
 80103c2:	431a      	orrs	r2, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	3304      	adds	r3, #4
 80103cc:	60fb      	str	r3, [r7, #12]
     return offset;
 80103ce:	68fb      	ldr	r3, [r7, #12]
    }
 80103d0:	4618      	mov	r0, r3
 80103d2:	3714      	adds	r7, #20
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	4b03      	ldr	r3, [pc, #12]	@ (80103f4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80103e6:	4618      	mov	r0, r3
 80103e8:	370c      	adds	r7, #12
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	08015160 	.word	0x08015160

080103f8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80103f8:	b480      	push	{r7}
 80103fa:	b083      	sub	sp, #12
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	4b03      	ldr	r3, [pc, #12]	@ (8010410 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8010402:	4618      	mov	r0, r3
 8010404:	370c      	adds	r7, #12
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop
 8010410:	08015170 	.word	0x08015170

08010414 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	4618      	mov	r0, r3
 8010420:	f7ff fef8 	bl	8010214 <_ZN3ros3MsgC1Ev>
 8010424:	4a0b      	ldr	r2, [pc, #44]	@ (8010454 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	601a      	str	r2, [r3, #0]
      topic_id(0),
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2200      	movs	r2, #0
 801042e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	4a09      	ldr	r2, [pc, #36]	@ (8010458 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8010434:	609a      	str	r2, [r3, #8]
      message_type(""),
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	4a07      	ldr	r2, [pc, #28]	@ (8010458 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 801043a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	4a06      	ldr	r2, [pc, #24]	@ (8010458 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8010440:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2200      	movs	r2, #0
 8010446:	615a      	str	r2, [r3, #20]
    {
    }
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	4618      	mov	r0, r3
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	080155f4 	.word	0x080155f4
 8010458:	08015194 	.word	0x08015194

0801045c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 801045c:	b580      	push	{r7, lr}
 801045e:	b088      	sub	sp, #32
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8010466:	2300      	movs	r3, #0
 8010468:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	8899      	ldrh	r1, [r3, #4]
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	683a      	ldr	r2, [r7, #0]
 8010472:	4413      	add	r3, r2
 8010474:	b2ca      	uxtb	r2, r1
 8010476:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	889b      	ldrh	r3, [r3, #4]
 801047c:	0a1b      	lsrs	r3, r3, #8
 801047e:	b299      	uxth	r1, r3
 8010480:	69fb      	ldr	r3, [r7, #28]
 8010482:	3301      	adds	r3, #1
 8010484:	683a      	ldr	r2, [r7, #0]
 8010486:	4413      	add	r3, r2
 8010488:	b2ca      	uxtb	r2, r1
 801048a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	3302      	adds	r3, #2
 8010490:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	689b      	ldr	r3, [r3, #8]
 8010496:	4618      	mov	r0, r3
 8010498:	f7ef ff3a 	bl	8000310 <strlen>
 801049c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 801049e:	69fb      	ldr	r3, [r7, #28]
 80104a0:	683a      	ldr	r2, [r7, #0]
 80104a2:	4413      	add	r3, r2
 80104a4:	69b9      	ldr	r1, [r7, #24]
 80104a6:	4618      	mov	r0, r3
 80104a8:	f003 fa2c 	bl	8013904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	3304      	adds	r3, #4
 80104b0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	683a      	ldr	r2, [r7, #0]
 80104b6:	18d0      	adds	r0, r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	689b      	ldr	r3, [r3, #8]
 80104bc:	69ba      	ldr	r2, [r7, #24]
 80104be:	4619      	mov	r1, r3
 80104c0:	f004 fd22 	bl	8014f08 <memcpy>
      offset += length_topic_name;
 80104c4:	69fa      	ldr	r2, [r7, #28]
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	4413      	add	r3, r2
 80104ca:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7ef ff1d 	bl	8000310 <strlen>
 80104d6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	683a      	ldr	r2, [r7, #0]
 80104dc:	4413      	add	r3, r2
 80104de:	6979      	ldr	r1, [r7, #20]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f003 fa0f 	bl	8013904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	3304      	adds	r3, #4
 80104ea:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	683a      	ldr	r2, [r7, #0]
 80104f0:	18d0      	adds	r0, r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	68db      	ldr	r3, [r3, #12]
 80104f6:	697a      	ldr	r2, [r7, #20]
 80104f8:	4619      	mov	r1, r3
 80104fa:	f004 fd05 	bl	8014f08 <memcpy>
      offset += length_message_type;
 80104fe:	69fa      	ldr	r2, [r7, #28]
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	4413      	add	r3, r2
 8010504:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	4618      	mov	r0, r3
 801050c:	f7ef ff00 	bl	8000310 <strlen>
 8010510:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	683a      	ldr	r2, [r7, #0]
 8010516:	4413      	add	r3, r2
 8010518:	6939      	ldr	r1, [r7, #16]
 801051a:	4618      	mov	r0, r3
 801051c:	f003 f9f2 	bl	8013904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	3304      	adds	r3, #4
 8010524:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	683a      	ldr	r2, [r7, #0]
 801052a:	18d0      	adds	r0, r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	691b      	ldr	r3, [r3, #16]
 8010530:	693a      	ldr	r2, [r7, #16]
 8010532:	4619      	mov	r1, r3
 8010534:	f004 fce8 	bl	8014f08 <memcpy>
      offset += length_md5sum;
 8010538:	69fa      	ldr	r2, [r7, #28]
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	4413      	add	r3, r2
 801053e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	695b      	ldr	r3, [r3, #20]
 8010544:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8010546:	68f9      	ldr	r1, [r7, #12]
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	683a      	ldr	r2, [r7, #0]
 801054c:	4413      	add	r3, r2
 801054e:	b2ca      	uxtb	r2, r1
 8010550:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	0a19      	lsrs	r1, r3, #8
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	3301      	adds	r3, #1
 801055a:	683a      	ldr	r2, [r7, #0]
 801055c:	4413      	add	r3, r2
 801055e:	b2ca      	uxtb	r2, r1
 8010560:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	0c19      	lsrs	r1, r3, #16
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	3302      	adds	r3, #2
 801056a:	683a      	ldr	r2, [r7, #0]
 801056c:	4413      	add	r3, r2
 801056e:	b2ca      	uxtb	r2, r1
 8010570:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	0e19      	lsrs	r1, r3, #24
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	3303      	adds	r3, #3
 801057a:	683a      	ldr	r2, [r7, #0]
 801057c:	4413      	add	r3, r2
 801057e:	b2ca      	uxtb	r2, r1
 8010580:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	3304      	adds	r3, #4
 8010586:	61fb      	str	r3, [r7, #28]
      return offset;
 8010588:	69fb      	ldr	r3, [r7, #28]
    }
 801058a:	4618      	mov	r0, r3
 801058c:	3720      	adds	r7, #32
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8010592:	b580      	push	{r7, lr}
 8010594:	b08a      	sub	sp, #40	@ 0x28
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
 801059a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801059c:	2300      	movs	r3, #0
 801059e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80105a0:	69bb      	ldr	r3, [r7, #24]
 80105a2:	683a      	ldr	r2, [r7, #0]
 80105a4:	4413      	add	r3, r2
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	461a      	mov	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	889b      	ldrh	r3, [r3, #4]
 80105b2:	b21a      	sxth	r2, r3
 80105b4:	69bb      	ldr	r3, [r7, #24]
 80105b6:	3301      	adds	r3, #1
 80105b8:	6839      	ldr	r1, [r7, #0]
 80105ba:	440b      	add	r3, r1
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	b21b      	sxth	r3, r3
 80105c0:	021b      	lsls	r3, r3, #8
 80105c2:	b21b      	sxth	r3, r3
 80105c4:	4313      	orrs	r3, r2
 80105c6:	b21b      	sxth	r3, r3
 80105c8:	b29a      	uxth	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	3302      	adds	r3, #2
 80105d2:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80105d4:	69bb      	ldr	r3, [r7, #24]
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	441a      	add	r2, r3
 80105da:	f107 0314 	add.w	r3, r7, #20
 80105de:	4611      	mov	r1, r2
 80105e0:	4618      	mov	r0, r3
 80105e2:	f003 f9ae 	bl	8013942 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80105e6:	69bb      	ldr	r3, [r7, #24]
 80105e8:	3304      	adds	r3, #4
 80105ea:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80105ec:	69bb      	ldr	r3, [r7, #24]
 80105ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80105f0:	e00b      	b.n	801060a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x78>
          inbuffer[k-1]=inbuffer[k];
 80105f2:	683a      	ldr	r2, [r7, #0]
 80105f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f6:	441a      	add	r2, r3
 80105f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105fa:	3b01      	subs	r3, #1
 80105fc:	6839      	ldr	r1, [r7, #0]
 80105fe:	440b      	add	r3, r1
 8010600:	7812      	ldrb	r2, [r2, #0]
 8010602:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8010604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010606:	3301      	adds	r3, #1
 8010608:	627b      	str	r3, [r7, #36]	@ 0x24
 801060a:	69ba      	ldr	r2, [r7, #24]
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	4413      	add	r3, r2
 8010610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010612:	429a      	cmp	r2, r3
 8010614:	d3ed      	bcc.n	80105f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x60>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8010616:	69ba      	ldr	r2, [r7, #24]
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	4413      	add	r3, r2
 801061c:	3b01      	subs	r3, #1
 801061e:	683a      	ldr	r2, [r7, #0]
 8010620:	4413      	add	r3, r2
 8010622:	2200      	movs	r2, #0
 8010624:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	3b01      	subs	r3, #1
 801062a:	683a      	ldr	r2, [r7, #0]
 801062c:	441a      	add	r2, r3
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8010632:	69ba      	ldr	r2, [r7, #24]
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	4413      	add	r3, r2
 8010638:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	683a      	ldr	r2, [r7, #0]
 801063e:	441a      	add	r2, r3
 8010640:	f107 0310 	add.w	r3, r7, #16
 8010644:	4611      	mov	r1, r2
 8010646:	4618      	mov	r0, r3
 8010648:	f003 f97b 	bl	8013942 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 801064c:	69bb      	ldr	r3, [r7, #24]
 801064e:	3304      	adds	r3, #4
 8010650:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	623b      	str	r3, [r7, #32]
 8010656:	e00b      	b.n	8010670 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xde>
          inbuffer[k-1]=inbuffer[k];
 8010658:	683a      	ldr	r2, [r7, #0]
 801065a:	6a3b      	ldr	r3, [r7, #32]
 801065c:	441a      	add	r2, r3
 801065e:	6a3b      	ldr	r3, [r7, #32]
 8010660:	3b01      	subs	r3, #1
 8010662:	6839      	ldr	r1, [r7, #0]
 8010664:	440b      	add	r3, r1
 8010666:	7812      	ldrb	r2, [r2, #0]
 8010668:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 801066a:	6a3b      	ldr	r3, [r7, #32]
 801066c:	3301      	adds	r3, #1
 801066e:	623b      	str	r3, [r7, #32]
 8010670:	69ba      	ldr	r2, [r7, #24]
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	4413      	add	r3, r2
 8010676:	6a3a      	ldr	r2, [r7, #32]
 8010678:	429a      	cmp	r2, r3
 801067a:	d3ed      	bcc.n	8010658 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc6>
      }
      inbuffer[offset+length_message_type-1]=0;
 801067c:	69ba      	ldr	r2, [r7, #24]
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	4413      	add	r3, r2
 8010682:	3b01      	subs	r3, #1
 8010684:	683a      	ldr	r2, [r7, #0]
 8010686:	4413      	add	r3, r2
 8010688:	2200      	movs	r2, #0
 801068a:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	3b01      	subs	r3, #1
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	441a      	add	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8010698:	69ba      	ldr	r2, [r7, #24]
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	4413      	add	r3, r2
 801069e:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80106a0:	69bb      	ldr	r3, [r7, #24]
 80106a2:	683a      	ldr	r2, [r7, #0]
 80106a4:	441a      	add	r2, r3
 80106a6:	f107 030c 	add.w	r3, r7, #12
 80106aa:	4611      	mov	r1, r2
 80106ac:	4618      	mov	r0, r3
 80106ae:	f003 f948 	bl	8013942 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80106b2:	69bb      	ldr	r3, [r7, #24]
 80106b4:	3304      	adds	r3, #4
 80106b6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	61fb      	str	r3, [r7, #28]
 80106bc:	e00b      	b.n	80106d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x144>
          inbuffer[k-1]=inbuffer[k];
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	69fb      	ldr	r3, [r7, #28]
 80106c2:	441a      	add	r2, r3
 80106c4:	69fb      	ldr	r3, [r7, #28]
 80106c6:	3b01      	subs	r3, #1
 80106c8:	6839      	ldr	r1, [r7, #0]
 80106ca:	440b      	add	r3, r1
 80106cc:	7812      	ldrb	r2, [r2, #0]
 80106ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	3301      	adds	r3, #1
 80106d4:	61fb      	str	r3, [r7, #28]
 80106d6:	69ba      	ldr	r2, [r7, #24]
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	4413      	add	r3, r2
 80106dc:	69fa      	ldr	r2, [r7, #28]
 80106de:	429a      	cmp	r2, r3
 80106e0:	d3ed      	bcc.n	80106be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80106e2:	69ba      	ldr	r2, [r7, #24]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	4413      	add	r3, r2
 80106e8:	3b01      	subs	r3, #1
 80106ea:	683a      	ldr	r2, [r7, #0]
 80106ec:	4413      	add	r3, r2
 80106ee:	2200      	movs	r2, #0
 80106f0:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	3b01      	subs	r3, #1
 80106f6:	683a      	ldr	r2, [r7, #0]
 80106f8:	441a      	add	r2, r3
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80106fe:	69ba      	ldr	r2, [r7, #24]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	4413      	add	r3, r2
 8010704:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8010706:	2300      	movs	r3, #0
 8010708:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	69ba      	ldr	r2, [r7, #24]
 801070e:	6839      	ldr	r1, [r7, #0]
 8010710:	440a      	add	r2, r1
 8010712:	7812      	ldrb	r2, [r2, #0]
 8010714:	4313      	orrs	r3, r2
 8010716:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010718:	68ba      	ldr	r2, [r7, #8]
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	3301      	adds	r3, #1
 801071e:	6839      	ldr	r1, [r7, #0]
 8010720:	440b      	add	r3, r1
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	021b      	lsls	r3, r3, #8
 8010726:	4313      	orrs	r3, r2
 8010728:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	3302      	adds	r3, #2
 8010730:	6839      	ldr	r1, [r7, #0]
 8010732:	440b      	add	r3, r1
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	041b      	lsls	r3, r3, #16
 8010738:	4313      	orrs	r3, r2
 801073a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	69bb      	ldr	r3, [r7, #24]
 8010740:	3303      	adds	r3, #3
 8010742:	6839      	ldr	r1, [r7, #0]
 8010744:	440b      	add	r3, r1
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	061b      	lsls	r3, r3, #24
 801074a:	4313      	orrs	r3, r2
 801074c:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 801074e:	68ba      	ldr	r2, [r7, #8]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	3304      	adds	r3, #4
 8010758:	61bb      	str	r3, [r7, #24]
     return offset;
 801075a:	69bb      	ldr	r3, [r7, #24]
    }
 801075c:	4618      	mov	r0, r3
 801075e:	3728      	adds	r7, #40	@ 0x28
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	4b03      	ldr	r3, [pc, #12]	@ (801077c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 801076e:	4618      	mov	r0, r3
 8010770:	370c      	adds	r7, #12
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	08015198 	.word	0x08015198

08010780 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	4b03      	ldr	r3, [pc, #12]	@ (8010798 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 801078a:	4618      	mov	r0, r3
 801078c:	370c      	adds	r7, #12
 801078e:	46bd      	mov	sp, r7
 8010790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010794:	4770      	bx	lr
 8010796:	bf00      	nop
 8010798:	080151b4 	.word	0x080151b4

0801079c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7ff fd34 	bl	8010214 <_ZN3ros3MsgC1Ev>
 80107ac:	4a06      	ldr	r2, [pc, #24]	@ (80107c8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	601a      	str	r2, [r3, #0]
      level(0),
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2200      	movs	r2, #0
 80107b6:	711a      	strb	r2, [r3, #4]
      msg("")
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	4a04      	ldr	r2, [pc, #16]	@ (80107cc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80107bc:	609a      	str	r2, [r3, #8]
    {
    }
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	4618      	mov	r0, r3
 80107c2:	3708      	adds	r7, #8
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	080155dc 	.word	0x080155dc
 80107cc:	08015194 	.word	0x08015194

080107d0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80107da:	2300      	movs	r3, #0
 80107dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	683a      	ldr	r2, [r7, #0]
 80107e2:	4413      	add	r3, r2
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	7912      	ldrb	r2, [r2, #4]
 80107e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	3301      	adds	r3, #1
 80107ee:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	689b      	ldr	r3, [r3, #8]
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7ef fd8b 	bl	8000310 <strlen>
 80107fa:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	683a      	ldr	r2, [r7, #0]
 8010800:	4413      	add	r3, r2
 8010802:	68b9      	ldr	r1, [r7, #8]
 8010804:	4618      	mov	r0, r3
 8010806:	f003 f87d 	bl	8013904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	3304      	adds	r3, #4
 801080e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	683a      	ldr	r2, [r7, #0]
 8010814:	18d0      	adds	r0, r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	689b      	ldr	r3, [r3, #8]
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	4619      	mov	r1, r3
 801081e:	f004 fb73 	bl	8014f08 <memcpy>
      offset += length_msg;
 8010822:	68fa      	ldr	r2, [r7, #12]
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	4413      	add	r3, r2
 8010828:	60fb      	str	r3, [r7, #12]
      return offset;
 801082a:	68fb      	ldr	r3, [r7, #12]
    }
 801082c:	4618      	mov	r0, r3
 801082e:	3710      	adds	r7, #16
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8010834:	b580      	push	{r7, lr}
 8010836:	b086      	sub	sp, #24
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801083e:	2300      	movs	r3, #0
 8010840:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	683a      	ldr	r2, [r7, #0]
 8010846:	4413      	add	r3, r2
 8010848:	781a      	ldrb	r2, [r3, #0]
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	3301      	adds	r3, #1
 8010852:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	683a      	ldr	r2, [r7, #0]
 8010858:	441a      	add	r2, r3
 801085a:	f107 030c 	add.w	r3, r7, #12
 801085e:	4611      	mov	r1, r2
 8010860:	4618      	mov	r0, r3
 8010862:	f003 f86e 	bl	8013942 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	3304      	adds	r3, #4
 801086a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	617b      	str	r3, [r7, #20]
 8010870:	e00b      	b.n	801088a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8010872:	683a      	ldr	r2, [r7, #0]
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	441a      	add	r2, r3
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	3b01      	subs	r3, #1
 801087c:	6839      	ldr	r1, [r7, #0]
 801087e:	440b      	add	r3, r1
 8010880:	7812      	ldrb	r2, [r2, #0]
 8010882:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	3301      	adds	r3, #1
 8010888:	617b      	str	r3, [r7, #20]
 801088a:	693a      	ldr	r2, [r7, #16]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	4413      	add	r3, r2
 8010890:	697a      	ldr	r2, [r7, #20]
 8010892:	429a      	cmp	r2, r3
 8010894:	d3ed      	bcc.n	8010872 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8010896:	693a      	ldr	r2, [r7, #16]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	4413      	add	r3, r2
 801089c:	3b01      	subs	r3, #1
 801089e:	683a      	ldr	r2, [r7, #0]
 80108a0:	4413      	add	r3, r2
 80108a2:	2200      	movs	r2, #0
 80108a4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	3b01      	subs	r3, #1
 80108aa:	683a      	ldr	r2, [r7, #0]
 80108ac:	441a      	add	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80108b2:	693a      	ldr	r2, [r7, #16]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	4413      	add	r3, r2
 80108b8:	613b      	str	r3, [r7, #16]
     return offset;
 80108ba:	693b      	ldr	r3, [r7, #16]
    }
 80108bc:	4618      	mov	r0, r3
 80108be:	3718      	adds	r7, #24
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	4b03      	ldr	r3, [pc, #12]	@ (80108dc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80108ce:	4618      	mov	r0, r3
 80108d0:	370c      	adds	r7, #12
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr
 80108da:	bf00      	nop
 80108dc:	080151d8 	.word	0x080151d8

080108e0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	4b03      	ldr	r3, [pc, #12]	@ (80108f8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80108ea:	4618      	mov	r0, r3
 80108ec:	370c      	adds	r7, #12
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr
 80108f6:	bf00      	nop
 80108f8:	080151ec 	.word	0x080151ec

080108fc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	4618      	mov	r0, r3
 8010908:	f7ff fc84 	bl	8010214 <_ZN3ros3MsgC1Ev>
 801090c:	4a0c      	ldr	r2, [pc, #48]	@ (8010940 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2200      	movs	r2, #0
 8010916:	605a      	str	r2, [r3, #4]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2200      	movs	r2, #0
 8010922:	611a      	str	r2, [r3, #16]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2200      	movs	r2, #0
 8010928:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2200      	movs	r2, #0
 801092e:	61da      	str	r2, [r3, #28]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	4618      	mov	r0, r3
 801093a:	3708      	adds	r7, #8
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	080155c4 	.word	0x080155c4

08010944 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8010944:	b580      	push	{r7, lr}
 8010946:	b08a      	sub	sp, #40	@ 0x28
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801094e:	2300      	movs	r3, #0
 8010950:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6859      	ldr	r1, [r3, #4]
 8010956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010958:	683a      	ldr	r2, [r7, #0]
 801095a:	4413      	add	r3, r2
 801095c:	b2ca      	uxtb	r2, r1
 801095e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	0a19      	lsrs	r1, r3, #8
 8010966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010968:	3301      	adds	r3, #1
 801096a:	683a      	ldr	r2, [r7, #0]
 801096c:	4413      	add	r3, r2
 801096e:	b2ca      	uxtb	r2, r1
 8010970:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	0c19      	lsrs	r1, r3, #16
 8010978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801097a:	3302      	adds	r3, #2
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	4413      	add	r3, r2
 8010980:	b2ca      	uxtb	r2, r1
 8010982:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	0e19      	lsrs	r1, r3, #24
 801098a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801098c:	3303      	adds	r3, #3
 801098e:	683a      	ldr	r2, [r7, #0]
 8010990:	4413      	add	r3, r2
 8010992:	b2ca      	uxtb	r2, r1
 8010994:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8010996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010998:	3304      	adds	r3, #4
 801099a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 801099c:	2300      	movs	r3, #0
 801099e:	623b      	str	r3, [r7, #32]
 80109a0:	e02a      	b.n	80109f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	68da      	ldr	r2, [r3, #12]
 80109a6:	6a3b      	ldr	r3, [r7, #32]
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	4413      	add	r3, r2
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80109b0:	6939      	ldr	r1, [r7, #16]
 80109b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109b4:	683a      	ldr	r2, [r7, #0]
 80109b6:	4413      	add	r3, r2
 80109b8:	b2ca      	uxtb	r2, r1
 80109ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	0a19      	lsrs	r1, r3, #8
 80109c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c2:	3301      	adds	r3, #1
 80109c4:	683a      	ldr	r2, [r7, #0]
 80109c6:	4413      	add	r3, r2
 80109c8:	b2ca      	uxtb	r2, r1
 80109ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	0c19      	lsrs	r1, r3, #16
 80109d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d2:	3302      	adds	r3, #2
 80109d4:	683a      	ldr	r2, [r7, #0]
 80109d6:	4413      	add	r3, r2
 80109d8:	b2ca      	uxtb	r2, r1
 80109da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	0e19      	lsrs	r1, r3, #24
 80109e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e2:	3303      	adds	r3, #3
 80109e4:	683a      	ldr	r2, [r7, #0]
 80109e6:	4413      	add	r3, r2
 80109e8:	b2ca      	uxtb	r2, r1
 80109ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80109ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ee:	3304      	adds	r3, #4
 80109f0:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80109f2:	6a3b      	ldr	r3, [r7, #32]
 80109f4:	3301      	adds	r3, #1
 80109f6:	623b      	str	r3, [r7, #32]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	6a3a      	ldr	r2, [r7, #32]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d3cf      	bcc.n	80109a2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6919      	ldr	r1, [r3, #16]
 8010a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a08:	683a      	ldr	r2, [r7, #0]
 8010a0a:	4413      	add	r3, r2
 8010a0c:	b2ca      	uxtb	r2, r1
 8010a0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	691b      	ldr	r3, [r3, #16]
 8010a14:	0a19      	lsrs	r1, r3, #8
 8010a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a18:	3301      	adds	r3, #1
 8010a1a:	683a      	ldr	r2, [r7, #0]
 8010a1c:	4413      	add	r3, r2
 8010a1e:	b2ca      	uxtb	r2, r1
 8010a20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	691b      	ldr	r3, [r3, #16]
 8010a26:	0c19      	lsrs	r1, r3, #16
 8010a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a2a:	3302      	adds	r3, #2
 8010a2c:	683a      	ldr	r2, [r7, #0]
 8010a2e:	4413      	add	r3, r2
 8010a30:	b2ca      	uxtb	r2, r1
 8010a32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	691b      	ldr	r3, [r3, #16]
 8010a38:	0e19      	lsrs	r1, r3, #24
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3c:	3303      	adds	r3, #3
 8010a3e:	683a      	ldr	r2, [r7, #0]
 8010a40:	4413      	add	r3, r2
 8010a42:	b2ca      	uxtb	r2, r1
 8010a44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8010a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a48:	3304      	adds	r3, #4
 8010a4a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	61fb      	str	r3, [r7, #28]
 8010a50:	e02a      	b.n	8010aa8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	699a      	ldr	r2, [r3, #24]
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	009b      	lsls	r3, r3, #2
 8010a5a:	4413      	add	r3, r2
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8010a60:	68f9      	ldr	r1, [r7, #12]
 8010a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a64:	683a      	ldr	r2, [r7, #0]
 8010a66:	4413      	add	r3, r2
 8010a68:	b2ca      	uxtb	r2, r1
 8010a6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	0a19      	lsrs	r1, r3, #8
 8010a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a72:	3301      	adds	r3, #1
 8010a74:	683a      	ldr	r2, [r7, #0]
 8010a76:	4413      	add	r3, r2
 8010a78:	b2ca      	uxtb	r2, r1
 8010a7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	0c19      	lsrs	r1, r3, #16
 8010a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a82:	3302      	adds	r3, #2
 8010a84:	683a      	ldr	r2, [r7, #0]
 8010a86:	4413      	add	r3, r2
 8010a88:	b2ca      	uxtb	r2, r1
 8010a8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	0e19      	lsrs	r1, r3, #24
 8010a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a92:	3303      	adds	r3, #3
 8010a94:	683a      	ldr	r2, [r7, #0]
 8010a96:	4413      	add	r3, r2
 8010a98:	b2ca      	uxtb	r2, r1
 8010a9a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a9e:	3304      	adds	r3, #4
 8010aa0:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	61fb      	str	r3, [r7, #28]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	691b      	ldr	r3, [r3, #16]
 8010aac:	69fa      	ldr	r2, [r7, #28]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d3cf      	bcc.n	8010a52 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	69d9      	ldr	r1, [r3, #28]
 8010ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ab8:	683a      	ldr	r2, [r7, #0]
 8010aba:	4413      	add	r3, r2
 8010abc:	b2ca      	uxtb	r2, r1
 8010abe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	69db      	ldr	r3, [r3, #28]
 8010ac4:	0a19      	lsrs	r1, r3, #8
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac8:	3301      	adds	r3, #1
 8010aca:	683a      	ldr	r2, [r7, #0]
 8010acc:	4413      	add	r3, r2
 8010ace:	b2ca      	uxtb	r2, r1
 8010ad0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	69db      	ldr	r3, [r3, #28]
 8010ad6:	0c19      	lsrs	r1, r3, #16
 8010ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ada:	3302      	adds	r3, #2
 8010adc:	683a      	ldr	r2, [r7, #0]
 8010ade:	4413      	add	r3, r2
 8010ae0:	b2ca      	uxtb	r2, r1
 8010ae2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	69db      	ldr	r3, [r3, #28]
 8010ae8:	0e19      	lsrs	r1, r3, #24
 8010aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aec:	3303      	adds	r3, #3
 8010aee:	683a      	ldr	r2, [r7, #0]
 8010af0:	4413      	add	r3, r2
 8010af2:	b2ca      	uxtb	r2, r1
 8010af4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8010af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af8:	3304      	adds	r3, #4
 8010afa:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8010afc:	2300      	movs	r3, #0
 8010afe:	61bb      	str	r3, [r7, #24]
 8010b00:	e027      	b.n	8010b52 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b06:	69bb      	ldr	r3, [r7, #24]
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	4413      	add	r3, r2
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7ef fbfe 	bl	8000310 <strlen>
 8010b14:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8010b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b18:	683a      	ldr	r2, [r7, #0]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	6979      	ldr	r1, [r7, #20]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f002 fef0 	bl	8013904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8010b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b26:	3304      	adds	r3, #4
 8010b28:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8010b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b2c:	683a      	ldr	r2, [r7, #0]
 8010b2e:	18d0      	adds	r0, r2, r3
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	009b      	lsls	r3, r3, #2
 8010b38:	4413      	add	r3, r2
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	697a      	ldr	r2, [r7, #20]
 8010b3e:	4619      	mov	r1, r3
 8010b40:	f004 f9e2 	bl	8014f08 <memcpy>
      offset += length_stringsi;
 8010b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	4413      	add	r3, r2
 8010b4a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8010b4c:	69bb      	ldr	r3, [r7, #24]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	61bb      	str	r3, [r7, #24]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	69db      	ldr	r3, [r3, #28]
 8010b56:	69ba      	ldr	r2, [r7, #24]
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d3d2      	bcc.n	8010b02 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8010b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3728      	adds	r7, #40	@ 0x28
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b08e      	sub	sp, #56	@ 0x38
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
 8010b6e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8010b70:	2300      	movs	r3, #0
 8010b72:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8010b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b76:	683a      	ldr	r2, [r7, #0]
 8010b78:	4413      	add	r3, r2
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8010b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b80:	3301      	adds	r3, #1
 8010b82:	683a      	ldr	r2, [r7, #0]
 8010b84:	4413      	add	r3, r2
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	021b      	lsls	r3, r3, #8
 8010b8a:	6a3a      	ldr	r2, [r7, #32]
 8010b8c:	4313      	orrs	r3, r2
 8010b8e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8010b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b92:	3302      	adds	r3, #2
 8010b94:	683a      	ldr	r2, [r7, #0]
 8010b96:	4413      	add	r3, r2
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	041b      	lsls	r3, r3, #16
 8010b9c:	6a3a      	ldr	r2, [r7, #32]
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8010ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ba4:	3303      	adds	r3, #3
 8010ba6:	683a      	ldr	r2, [r7, #0]
 8010ba8:	4413      	add	r3, r2
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	061b      	lsls	r3, r3, #24
 8010bae:	6a3a      	ldr	r2, [r7, #32]
 8010bb0:	4313      	orrs	r3, r2
 8010bb2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8010bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bb6:	3304      	adds	r3, #4
 8010bb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	6a3a      	ldr	r2, [r7, #32]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d90a      	bls.n	8010bda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	68da      	ldr	r2, [r3, #12]
 8010bc8:	6a3b      	ldr	r3, [r7, #32]
 8010bca:	009b      	lsls	r3, r3, #2
 8010bcc:	4619      	mov	r1, r3
 8010bce:	4610      	mov	r0, r2
 8010bd0:	f004 f930 	bl	8014e34 <realloc>
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6a3a      	ldr	r2, [r7, #32]
 8010bde:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8010be0:	2300      	movs	r3, #0
 8010be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8010be4:	e035      	b.n	8010c52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8010be6:	2300      	movs	r3, #0
 8010be8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010bee:	6839      	ldr	r1, [r7, #0]
 8010bf0:	440a      	add	r2, r1
 8010bf2:	7812      	ldrb	r2, [r2, #0]
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010bf8:	697a      	ldr	r2, [r7, #20]
 8010bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	6839      	ldr	r1, [r7, #0]
 8010c00:	440b      	add	r3, r1
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	021b      	lsls	r3, r3, #8
 8010c06:	4313      	orrs	r3, r2
 8010c08:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8010c0a:	697a      	ldr	r2, [r7, #20]
 8010c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c0e:	3302      	adds	r3, #2
 8010c10:	6839      	ldr	r1, [r7, #0]
 8010c12:	440b      	add	r3, r1
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	041b      	lsls	r3, r3, #16
 8010c18:	4313      	orrs	r3, r2
 8010c1a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010c1c:	697a      	ldr	r2, [r7, #20]
 8010c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c20:	3303      	adds	r3, #3
 8010c22:	6839      	ldr	r1, [r7, #0]
 8010c24:	440b      	add	r3, r1
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	061b      	lsls	r3, r3, #24
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8010c2e:	697a      	ldr	r2, [r7, #20]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8010c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c36:	3304      	adds	r3, #4
 8010c38:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	68da      	ldr	r2, [r3, #12]
 8010c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	4413      	add	r3, r2
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	3208      	adds	r2, #8
 8010c48:	6812      	ldr	r2, [r2, #0]
 8010c4a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8010c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c4e:	3301      	adds	r3, #1
 8010c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d3c4      	bcc.n	8010be6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8010c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c5e:	683a      	ldr	r2, [r7, #0]
 8010c60:	4413      	add	r3, r2
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8010c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c68:	3301      	adds	r3, #1
 8010c6a:	683a      	ldr	r2, [r7, #0]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	021b      	lsls	r3, r3, #8
 8010c72:	69fa      	ldr	r2, [r7, #28]
 8010c74:	4313      	orrs	r3, r2
 8010c76:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8010c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c7a:	3302      	adds	r3, #2
 8010c7c:	683a      	ldr	r2, [r7, #0]
 8010c7e:	4413      	add	r3, r2
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	041b      	lsls	r3, r3, #16
 8010c84:	69fa      	ldr	r2, [r7, #28]
 8010c86:	4313      	orrs	r3, r2
 8010c88:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8010c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c8c:	3303      	adds	r3, #3
 8010c8e:	683a      	ldr	r2, [r7, #0]
 8010c90:	4413      	add	r3, r2
 8010c92:	781b      	ldrb	r3, [r3, #0]
 8010c94:	061b      	lsls	r3, r3, #24
 8010c96:	69fa      	ldr	r2, [r7, #28]
 8010c98:	4313      	orrs	r3, r2
 8010c9a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8010c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c9e:	3304      	adds	r3, #4
 8010ca0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	69fa      	ldr	r2, [r7, #28]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d90a      	bls.n	8010cc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	699a      	ldr	r2, [r3, #24]
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	009b      	lsls	r3, r3, #2
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	4610      	mov	r0, r2
 8010cb8:	f004 f8bc 	bl	8014e34 <realloc>
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	69fa      	ldr	r2, [r7, #28]
 8010cc6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8010cc8:	2300      	movs	r3, #0
 8010cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ccc:	e035      	b.n	8010d3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cd6:	6839      	ldr	r1, [r7, #0]
 8010cd8:	440a      	add	r2, r1
 8010cda:	7812      	ldrb	r2, [r2, #0]
 8010cdc:	4313      	orrs	r3, r2
 8010cde:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010ce0:	693a      	ldr	r2, [r7, #16]
 8010ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ce4:	3301      	adds	r3, #1
 8010ce6:	6839      	ldr	r1, [r7, #0]
 8010ce8:	440b      	add	r3, r1
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	021b      	lsls	r3, r3, #8
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8010cf2:	693a      	ldr	r2, [r7, #16]
 8010cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cf6:	3302      	adds	r3, #2
 8010cf8:	6839      	ldr	r1, [r7, #0]
 8010cfa:	440b      	add	r3, r1
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	041b      	lsls	r3, r3, #16
 8010d00:	4313      	orrs	r3, r2
 8010d02:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010d04:	693a      	ldr	r2, [r7, #16]
 8010d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d08:	3303      	adds	r3, #3
 8010d0a:	6839      	ldr	r1, [r7, #0]
 8010d0c:	440b      	add	r3, r1
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	061b      	lsls	r3, r3, #24
 8010d12:	4313      	orrs	r3, r2
 8010d14:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8010d16:	693a      	ldr	r2, [r7, #16]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8010d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d1e:	3304      	adds	r3, #4
 8010d20:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	699a      	ldr	r2, [r3, #24]
 8010d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	4413      	add	r3, r2
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	3214      	adds	r2, #20
 8010d30:	6812      	ldr	r2, [r2, #0]
 8010d32:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8010d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d36:	3301      	adds	r3, #1
 8010d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	691b      	ldr	r3, [r3, #16]
 8010d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d3c4      	bcc.n	8010cce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8010d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d46:	683a      	ldr	r2, [r7, #0]
 8010d48:	4413      	add	r3, r2
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8010d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d50:	3301      	adds	r3, #1
 8010d52:	683a      	ldr	r2, [r7, #0]
 8010d54:	4413      	add	r3, r2
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	021b      	lsls	r3, r3, #8
 8010d5a:	69ba      	ldr	r2, [r7, #24]
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8010d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d62:	3302      	adds	r3, #2
 8010d64:	683a      	ldr	r2, [r7, #0]
 8010d66:	4413      	add	r3, r2
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	041b      	lsls	r3, r3, #16
 8010d6c:	69ba      	ldr	r2, [r7, #24]
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8010d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d74:	3303      	adds	r3, #3
 8010d76:	683a      	ldr	r2, [r7, #0]
 8010d78:	4413      	add	r3, r2
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	061b      	lsls	r3, r3, #24
 8010d7e:	69ba      	ldr	r2, [r7, #24]
 8010d80:	4313      	orrs	r3, r2
 8010d82:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8010d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d86:	3304      	adds	r3, #4
 8010d88:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	69db      	ldr	r3, [r3, #28]
 8010d8e:	69ba      	ldr	r2, [r7, #24]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d90a      	bls.n	8010daa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	4610      	mov	r0, r2
 8010da0:	f004 f848 	bl	8014e34 <realloc>
 8010da4:	4602      	mov	r2, r0
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	69ba      	ldr	r2, [r7, #24]
 8010dae:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8010db0:	2300      	movs	r3, #0
 8010db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010db4:	e03e      	b.n	8010e34 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8010db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010db8:	683a      	ldr	r2, [r7, #0]
 8010dba:	441a      	add	r2, r3
 8010dbc:	f107 030c 	add.w	r3, r7, #12
 8010dc0:	4611      	mov	r1, r2
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f002 fdbd 	bl	8013942 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8010dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dca:	3304      	adds	r3, #4
 8010dcc:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8010dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8010dd2:	e00b      	b.n	8010dec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8010dd4:	683a      	ldr	r2, [r7, #0]
 8010dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd8:	441a      	add	r2, r3
 8010dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	6839      	ldr	r1, [r7, #0]
 8010de0:	440b      	add	r3, r1
 8010de2:	7812      	ldrb	r2, [r2, #0]
 8010de4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8010de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de8:	3301      	adds	r3, #1
 8010dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8010dec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	4413      	add	r3, r2
 8010df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d3ed      	bcc.n	8010dd4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8010df8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	4413      	add	r3, r2
 8010dfe:	3b01      	subs	r3, #1
 8010e00:	683a      	ldr	r2, [r7, #0]
 8010e02:	4413      	add	r3, r2
 8010e04:	2200      	movs	r2, #0
 8010e06:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8010e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e0a:	3b01      	subs	r3, #1
 8010e0c:	683a      	ldr	r2, [r7, #0]
 8010e0e:	441a      	add	r2, r3
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8010e14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	4413      	add	r3, r2
 8010e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	4413      	add	r3, r2
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	3220      	adds	r2, #32
 8010e2a:	6812      	ldr	r2, [r2, #0]
 8010e2c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8010e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e30:	3301      	adds	r3, #1
 8010e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	69db      	ldr	r3, [r3, #28]
 8010e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d3bb      	bcc.n	8010db6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8010e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8010e40:	4618      	mov	r0, r3
 8010e42:	3738      	adds	r7, #56	@ 0x38
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8010e48:	b480      	push	{r7}
 8010e4a:	b083      	sub	sp, #12
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	4b03      	ldr	r3, [pc, #12]	@ (8010e60 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8010e52:	4618      	mov	r0, r3
 8010e54:	370c      	adds	r7, #12
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr
 8010e5e:	bf00      	nop
 8010e60:	08015470 	.word	0x08015470

08010e64 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	4b03      	ldr	r3, [pc, #12]	@ (8010e7c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8010e6e:	4618      	mov	r0, r3
 8010e70:	370c      	adds	r7, #12
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	08015210 	.word	0x08015210

08010e80 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8010e80:	b480      	push	{r7}
 8010e82:	b085      	sub	sp, #20
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	607a      	str	r2, [r7, #4]
 8010e8c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	68ba      	ldr	r2, [r7, #8]
 8010e92:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	611a      	str	r2, [r3, #16]
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3714      	adds	r7, #20
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr

08010eae <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8010eae:	b480      	push	{r7}
 8010eb0:	b083      	sub	sp, #12
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	691b      	ldr	r3, [r3, #16]
  }
 8010eba:	4618      	mov	r0, r3
 8010ebc:	370c      	adds	r7, #12
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr
	...

08010ec8 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 4096;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8010ec8:	b480      	push	{r7}
 8010eca:	b083      	sub	sp, #12
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a4b      	ldr	r2, [pc, #300]	@ (8011008 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8010edc:	4293      	cmp	r3, r2
 8010ede:	d077      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4a48      	ldr	r2, [pc, #288]	@ (801100c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d06f      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	4a45      	ldr	r2, [pc, #276]	@ (8011010 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d067      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a42      	ldr	r2, [pc, #264]	@ (8011014 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d05f      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	4a3f      	ldr	r2, [pc, #252]	@ (8011018 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d057      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	4a3c      	ldr	r2, [pc, #240]	@ (801101c <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8010f2c:	4293      	cmp	r3, r2
 8010f2e:	d04f      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	4a39      	ldr	r2, [pc, #228]	@ (8011020 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8010f3c:	4293      	cmp	r3, r2
 8010f3e:	d047      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4a36      	ldr	r2, [pc, #216]	@ (8011024 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d03f      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	4a33      	ldr	r2, [pc, #204]	@ (8011028 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8010f5c:	4293      	cmp	r3, r2
 8010f5e:	d037      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4a30      	ldr	r2, [pc, #192]	@ (801102c <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8010f6c:	4293      	cmp	r3, r2
 8010f6e:	d02f      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	4a2d      	ldr	r2, [pc, #180]	@ (8011030 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	d027      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8011034 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	d01f      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4a27      	ldr	r2, [pc, #156]	@ (8011038 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	d017      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	4a24      	ldr	r2, [pc, #144]	@ (801103c <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d00f      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	4a21      	ldr	r2, [pc, #132]	@ (8011040 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d007      	beq.n	8010fd0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	4a1e      	ldr	r2, [pc, #120]	@ (8011044 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	d10a      	bne.n	8010fe6 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8010fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010fe4:	e009      	b.n	8010ffa <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8010ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	370c      	adds	r7, #12
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop
 8011008:	40020010 	.word	0x40020010
 801100c:	40020028 	.word	0x40020028
 8011010:	40020040 	.word	0x40020040
 8011014:	40020058 	.word	0x40020058
 8011018:	40020070 	.word	0x40020070
 801101c:	40020088 	.word	0x40020088
 8011020:	400200a0 	.word	0x400200a0
 8011024:	400200b8 	.word	0x400200b8
 8011028:	40020410 	.word	0x40020410
 801102c:	40020428 	.word	0x40020428
 8011030:	40020440 	.word	0x40020440
 8011034:	40020458 	.word	0x40020458
 8011038:	40020470 	.word	0x40020470
 801103c:	40020488 	.word	0x40020488
 8011040:	400204a0 	.word	0x400204a0
 8011044:	400204b8 	.word	0x400204b8

08011048 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 4096;
    uint8_t tbuf[tbuflen];
    uint16_t twind, tfind;

  public:
    STM32Hardware():
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4a0c      	ldr	r2, [pc, #48]	@ (8011084 <_ZN13STM32HardwareC1Ev+0x3c>)
 8011054:	601a      	str	r2, [r3, #0]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801105c:	461a      	mov	r2, r3
 801105e:	2300      	movs	r3, #0
 8011060:	6053      	str	r3, [r2, #4]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011068:	2200      	movs	r2, #0
 801106a:	811a      	strh	r2, [r3, #8]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011072:	2200      	movs	r2, #0
 8011074:	815a      	strh	r2, [r3, #10]
    }
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	4618      	mov	r0, r3
 801107a:	370c      	adds	r7, #12
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr
 8011084:	24000970 	.word	0x24000970

08011088 <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 8011088:	b590      	push	{r4, r7, lr}
 801108a:	b085      	sub	sp, #20
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8011090:	f04f 33ff 	mov.w	r3, #4294967295
 8011094:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801109c:	685c      	ldr	r4, [r3, #4]
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f7ff ff12 	bl	8010ec8 <_ZN13STM32Hardware10getRdmaIndEv>
 80110a4:	4603      	mov	r3, r0
 80110a6:	429c      	cmp	r4, r3
 80110a8:	bf14      	ite	ne
 80110aa:	2301      	movne	r3, #1
 80110ac:	2300      	moveq	r3, #0
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d016      	beq.n	80110e2 <_ZN13STM32Hardware4readEv+0x5a>
        c = rbuf[rind++];
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	1c5a      	adds	r2, r3, #1
 80110be:	6879      	ldr	r1, [r7, #4]
 80110c0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80110c4:	604a      	str	r2, [r1, #4]
 80110c6:	687a      	ldr	r2, [r7, #4]
 80110c8:	4413      	add	r3, r2
 80110ca:	791b      	ldrb	r3, [r3, #4]
 80110cc:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80110e0:	6053      	str	r3, [r2, #4]
      }
      return c;
 80110e2:	68fb      	ldr	r3, [r7, #12]
    }
 80110e4:	4618      	mov	r0, r3
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd90      	pop	{r4, r7, pc}

080110ec <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80110fc:	2b20      	cmp	r3, #32
 80110fe:	d108      	bne.n	8011112 <_ZN13STM32Hardware5flushEv+0x26>
 8011100:	4b2d      	ldr	r3, [pc, #180]	@ (80111b8 <_ZN13STM32Hardware5flushEv+0xcc>)
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	f083 0301 	eor.w	r3, r3, #1
 8011108:	b2db      	uxtb	r3, r3
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <_ZN13STM32Hardware5flushEv+0x26>
 801110e:	2301      	movs	r3, #1
 8011110:	e000      	b.n	8011114 <_ZN13STM32Hardware5flushEv+0x28>
 8011112:	2300      	movs	r3, #0
 8011114:	2b00      	cmp	r3, #0
 8011116:	d04a      	beq.n	80111ae <_ZN13STM32Hardware5flushEv+0xc2>
        mutex = true;
 8011118:	4b27      	ldr	r3, [pc, #156]	@ (80111b8 <_ZN13STM32Hardware5flushEv+0xcc>)
 801111a:	2201      	movs	r2, #1
 801111c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011124:	891a      	ldrh	r2, [r3, #8]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801112c:	895b      	ldrh	r3, [r3, #10]
 801112e:	429a      	cmp	r2, r3
 8011130:	d03a      	beq.n	80111a8 <_ZN13STM32Hardware5flushEv+0xbc>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011138:	895a      	ldrh	r2, [r3, #10]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011140:	891b      	ldrh	r3, [r3, #8]
 8011142:	429a      	cmp	r2, r3
 8011144:	d20a      	bcs.n	801115c <_ZN13STM32Hardware5flushEv+0x70>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801114c:	891a      	ldrh	r2, [r3, #8]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011154:	895b      	ldrh	r3, [r3, #10]
 8011156:	1ad3      	subs	r3, r2, r3
 8011158:	b29b      	uxth	r3, r3
 801115a:	e006      	b.n	801116a <_ZN13STM32Hardware5flushEv+0x7e>
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011162:	895b      	ldrh	r3, [r3, #10]
 8011164:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8011168:	b29b      	uxth	r3, r3
 801116a:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6818      	ldr	r0, [r3, #0]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011176:	895b      	ldrh	r3, [r3, #10]
 8011178:	461a      	mov	r2, r3
 801117a:	f241 0308 	movw	r3, #4104	@ 0x1008
 801117e:	4413      	add	r3, r2
 8011180:	687a      	ldr	r2, [r7, #4]
 8011182:	4413      	add	r3, r2
 8011184:	89fa      	ldrh	r2, [r7, #14]
 8011186:	4619      	mov	r1, r3
 8011188:	f7fc feba 	bl	800df00 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011192:	895a      	ldrh	r2, [r3, #10]
 8011194:	89fb      	ldrh	r3, [r7, #14]
 8011196:	4413      	add	r3, r2
 8011198:	b29b      	uxth	r3, r3
 801119a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801119e:	b29a      	uxth	r2, r3
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80111a6:	815a      	strh	r2, [r3, #10]
        }
        mutex = false;
 80111a8:	4b03      	ldr	r3, [pc, #12]	@ (80111b8 <_ZN13STM32Hardware5flushEv+0xcc>)
 80111aa:	2200      	movs	r2, #0
 80111ac:	701a      	strb	r2, [r3, #0]
      }
    }
 80111ae:	bf00      	nop
 80111b0:	3710      	adds	r7, #16
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	24001180 	.word	0x24001180

080111bc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80111bc:	b580      	push	{r7, lr}
 80111be:	b086      	sub	sp, #24
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	607a      	str	r2, [r7, #4]
      int n = length;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80111d2:	bfa8      	it	ge
 80111d4:	f44f 5380 	movge.w	r3, #4096	@ 0x1000
 80111d8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80111e0:	891b      	ldrh	r3, [r3, #8]
 80111e2:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80111e6:	697a      	ldr	r2, [r7, #20]
 80111e8:	4293      	cmp	r3, r2
 80111ea:	bfa8      	it	ge
 80111ec:	4613      	movge	r3, r2
 80111ee:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80111f6:	891b      	ldrh	r3, [r3, #8]
 80111f8:	461a      	mov	r2, r3
 80111fa:	f241 0308 	movw	r3, #4104	@ 0x1008
 80111fe:	4413      	add	r3, r2
 8011200:	68fa      	ldr	r2, [r7, #12]
 8011202:	4413      	add	r3, r2
 8011204:	693a      	ldr	r2, [r7, #16]
 8011206:	68b9      	ldr	r1, [r7, #8]
 8011208:	4618      	mov	r0, r3
 801120a:	f003 fe7d 	bl	8014f08 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011214:	891a      	ldrh	r2, [r3, #8]
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	b29b      	uxth	r3, r3
 801121a:	4413      	add	r3, r2
 801121c:	b29b      	uxth	r3, r3
 801121e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011222:	b29a      	uxth	r2, r3
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801122a:	811a      	strh	r2, [r3, #8]

      if(n != n_tail){
 801122c:	697a      	ldr	r2, [r7, #20]
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	429a      	cmp	r2, r3
 8011232:	d00d      	beq.n	8011250 <_ZN13STM32Hardware5writeEPhi+0x94>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8011234:	68fa      	ldr	r2, [r7, #12]
 8011236:	f241 0308 	movw	r3, #4104	@ 0x1008
 801123a:	4413      	add	r3, r2
 801123c:	693a      	ldr	r2, [r7, #16]
 801123e:	68b9      	ldr	r1, [r7, #8]
 8011240:	1888      	adds	r0, r1, r2
 8011242:	6979      	ldr	r1, [r7, #20]
 8011244:	693a      	ldr	r2, [r7, #16]
 8011246:	1a8a      	subs	r2, r1, r2
 8011248:	4601      	mov	r1, r0
 801124a:	4618      	mov	r0, r3
 801124c:	f003 fe5c 	bl	8014f08 <memcpy>
      }

      flush();
 8011250:	68f8      	ldr	r0, [r7, #12]
 8011252:	f7ff ff4b 	bl	80110ec <_ZN13STM32Hardware5flushEv>
    }
 8011256:	bf00      	nop
 8011258:	3718      	adds	r7, #24
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}

0801125e <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 801125e:	b580      	push	{r7, lr}
 8011260:	b082      	sub	sp, #8
 8011262:	af00      	add	r7, sp, #0
 8011264:	6078      	str	r0, [r7, #4]
 8011266:	f7f2 fc95 	bl	8003b94 <HAL_GetTick>
 801126a:	4603      	mov	r3, r0
 801126c:	4618      	mov	r0, r3
 801126e:	3708      	adds	r7, #8
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}

08011274 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8011274:	b580      	push	{r7, lr}
 8011276:	b082      	sub	sp, #8
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	4618      	mov	r0, r3
 8011280:	f7fe ffc8 	bl	8010214 <_ZN3ros3MsgC1Ev>
 8011284:	4a0e      	ldr	r2, [pc, #56]	@ (80112c0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	601a      	str	r2, [r3, #0]
      x(0),
 801128a:	6879      	ldr	r1, [r7, #4]
 801128c:	f04f 0200 	mov.w	r2, #0
 8011290:	f04f 0300 	mov.w	r3, #0
 8011294:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8011298:	6879      	ldr	r1, [r7, #4]
 801129a:	f04f 0200 	mov.w	r2, #0
 801129e:	f04f 0300 	mov.w	r3, #0
 80112a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80112a6:	6879      	ldr	r1, [r7, #4]
 80112a8:	f04f 0200 	mov.w	r2, #0
 80112ac:	f04f 0300 	mov.w	r3, #0
 80112b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	4618      	mov	r0, r3
 80112b8:	3708      	adds	r7, #8
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	08015580 	.word	0x08015580

080112c4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80112c4:	b480      	push	{r7}
 80112c6:	b08b      	sub	sp, #44	@ 0x2c
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80112ce:	2300      	movs	r3, #0
 80112d0:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80112d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80112dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80112e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80112e2:	6838      	ldr	r0, [r7, #0]
 80112e4:	4401      	add	r1, r0
 80112e6:	b2d3      	uxtb	r3, r2
 80112e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80112ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80112ee:	f04f 0200 	mov.w	r2, #0
 80112f2:	f04f 0300 	mov.w	r3, #0
 80112f6:	0a02      	lsrs	r2, r0, #8
 80112f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80112fc:	0a0b      	lsrs	r3, r1, #8
 80112fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011300:	3101      	adds	r1, #1
 8011302:	6838      	ldr	r0, [r7, #0]
 8011304:	4401      	add	r1, r0
 8011306:	b2d3      	uxtb	r3, r2
 8011308:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 801130a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801130e:	f04f 0200 	mov.w	r2, #0
 8011312:	f04f 0300 	mov.w	r3, #0
 8011316:	0c02      	lsrs	r2, r0, #16
 8011318:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801131c:	0c0b      	lsrs	r3, r1, #16
 801131e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011320:	3102      	adds	r1, #2
 8011322:	6838      	ldr	r0, [r7, #0]
 8011324:	4401      	add	r1, r0
 8011326:	b2d3      	uxtb	r3, r2
 8011328:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 801132a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801132e:	f04f 0200 	mov.w	r2, #0
 8011332:	f04f 0300 	mov.w	r3, #0
 8011336:	0e02      	lsrs	r2, r0, #24
 8011338:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801133c:	0e0b      	lsrs	r3, r1, #24
 801133e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011340:	3103      	adds	r1, #3
 8011342:	6838      	ldr	r0, [r7, #0]
 8011344:	4401      	add	r1, r0
 8011346:	b2d3      	uxtb	r3, r2
 8011348:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 801134a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801134e:	f04f 0200 	mov.w	r2, #0
 8011352:	f04f 0300 	mov.w	r3, #0
 8011356:	000a      	movs	r2, r1
 8011358:	2300      	movs	r3, #0
 801135a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801135c:	3104      	adds	r1, #4
 801135e:	6838      	ldr	r0, [r7, #0]
 8011360:	4401      	add	r1, r0
 8011362:	b2d3      	uxtb	r3, r2
 8011364:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8011366:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801136a:	f04f 0200 	mov.w	r2, #0
 801136e:	f04f 0300 	mov.w	r3, #0
 8011372:	0a0a      	lsrs	r2, r1, #8
 8011374:	2300      	movs	r3, #0
 8011376:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011378:	3105      	adds	r1, #5
 801137a:	6838      	ldr	r0, [r7, #0]
 801137c:	4401      	add	r1, r0
 801137e:	b2d3      	uxtb	r3, r2
 8011380:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8011382:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011386:	f04f 0200 	mov.w	r2, #0
 801138a:	f04f 0300 	mov.w	r3, #0
 801138e:	0c0a      	lsrs	r2, r1, #16
 8011390:	2300      	movs	r3, #0
 8011392:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011394:	3106      	adds	r1, #6
 8011396:	6838      	ldr	r0, [r7, #0]
 8011398:	4401      	add	r1, r0
 801139a:	b2d3      	uxtb	r3, r2
 801139c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 801139e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80113a2:	f04f 0200 	mov.w	r2, #0
 80113a6:	f04f 0300 	mov.w	r3, #0
 80113aa:	0e0a      	lsrs	r2, r1, #24
 80113ac:	2300      	movs	r3, #0
 80113ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80113b0:	3107      	adds	r1, #7
 80113b2:	6838      	ldr	r0, [r7, #0]
 80113b4:	4401      	add	r1, r0
 80113b6:	b2d3      	uxtb	r3, r2
 80113b8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80113ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113bc:	3308      	adds	r3, #8
 80113be:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80113c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80113ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80113ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80113d0:	6838      	ldr	r0, [r7, #0]
 80113d2:	4401      	add	r1, r0
 80113d4:	b2d3      	uxtb	r3, r2
 80113d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80113d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80113dc:	f04f 0200 	mov.w	r2, #0
 80113e0:	f04f 0300 	mov.w	r3, #0
 80113e4:	0a02      	lsrs	r2, r0, #8
 80113e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80113ea:	0a0b      	lsrs	r3, r1, #8
 80113ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80113ee:	3101      	adds	r1, #1
 80113f0:	6838      	ldr	r0, [r7, #0]
 80113f2:	4401      	add	r1, r0
 80113f4:	b2d3      	uxtb	r3, r2
 80113f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80113f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80113fc:	f04f 0200 	mov.w	r2, #0
 8011400:	f04f 0300 	mov.w	r3, #0
 8011404:	0c02      	lsrs	r2, r0, #16
 8011406:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801140a:	0c0b      	lsrs	r3, r1, #16
 801140c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801140e:	3102      	adds	r1, #2
 8011410:	6838      	ldr	r0, [r7, #0]
 8011412:	4401      	add	r1, r0
 8011414:	b2d3      	uxtb	r3, r2
 8011416:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8011418:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801141c:	f04f 0200 	mov.w	r2, #0
 8011420:	f04f 0300 	mov.w	r3, #0
 8011424:	0e02      	lsrs	r2, r0, #24
 8011426:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801142a:	0e0b      	lsrs	r3, r1, #24
 801142c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801142e:	3103      	adds	r1, #3
 8011430:	6838      	ldr	r0, [r7, #0]
 8011432:	4401      	add	r1, r0
 8011434:	b2d3      	uxtb	r3, r2
 8011436:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8011438:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801143c:	f04f 0200 	mov.w	r2, #0
 8011440:	f04f 0300 	mov.w	r3, #0
 8011444:	000a      	movs	r2, r1
 8011446:	2300      	movs	r3, #0
 8011448:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801144a:	3104      	adds	r1, #4
 801144c:	6838      	ldr	r0, [r7, #0]
 801144e:	4401      	add	r1, r0
 8011450:	b2d3      	uxtb	r3, r2
 8011452:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8011454:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011458:	f04f 0200 	mov.w	r2, #0
 801145c:	f04f 0300 	mov.w	r3, #0
 8011460:	0a0a      	lsrs	r2, r1, #8
 8011462:	2300      	movs	r3, #0
 8011464:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011466:	3105      	adds	r1, #5
 8011468:	6838      	ldr	r0, [r7, #0]
 801146a:	4401      	add	r1, r0
 801146c:	b2d3      	uxtb	r3, r2
 801146e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8011470:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011474:	f04f 0200 	mov.w	r2, #0
 8011478:	f04f 0300 	mov.w	r3, #0
 801147c:	0c0a      	lsrs	r2, r1, #16
 801147e:	2300      	movs	r3, #0
 8011480:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011482:	3106      	adds	r1, #6
 8011484:	6838      	ldr	r0, [r7, #0]
 8011486:	4401      	add	r1, r0
 8011488:	b2d3      	uxtb	r3, r2
 801148a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 801148c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011490:	f04f 0200 	mov.w	r2, #0
 8011494:	f04f 0300 	mov.w	r3, #0
 8011498:	0e0a      	lsrs	r2, r1, #24
 801149a:	2300      	movs	r3, #0
 801149c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801149e:	3107      	adds	r1, #7
 80114a0:	6838      	ldr	r0, [r7, #0]
 80114a2:	4401      	add	r1, r0
 80114a4:	b2d3      	uxtb	r3, r2
 80114a6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80114a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114aa:	3308      	adds	r3, #8
 80114ac:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80114b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80114b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80114bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80114be:	6838      	ldr	r0, [r7, #0]
 80114c0:	4401      	add	r1, r0
 80114c2:	b2d3      	uxtb	r3, r2
 80114c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80114c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80114ca:	f04f 0200 	mov.w	r2, #0
 80114ce:	f04f 0300 	mov.w	r3, #0
 80114d2:	0a02      	lsrs	r2, r0, #8
 80114d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80114d8:	0a0b      	lsrs	r3, r1, #8
 80114da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80114dc:	3101      	adds	r1, #1
 80114de:	6838      	ldr	r0, [r7, #0]
 80114e0:	4401      	add	r1, r0
 80114e2:	b2d3      	uxtb	r3, r2
 80114e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80114e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80114ea:	f04f 0200 	mov.w	r2, #0
 80114ee:	f04f 0300 	mov.w	r3, #0
 80114f2:	0c02      	lsrs	r2, r0, #16
 80114f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80114f8:	0c0b      	lsrs	r3, r1, #16
 80114fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80114fc:	3102      	adds	r1, #2
 80114fe:	6838      	ldr	r0, [r7, #0]
 8011500:	4401      	add	r1, r0
 8011502:	b2d3      	uxtb	r3, r2
 8011504:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8011506:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801150a:	f04f 0200 	mov.w	r2, #0
 801150e:	f04f 0300 	mov.w	r3, #0
 8011512:	0e02      	lsrs	r2, r0, #24
 8011514:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011518:	0e0b      	lsrs	r3, r1, #24
 801151a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801151c:	3103      	adds	r1, #3
 801151e:	6838      	ldr	r0, [r7, #0]
 8011520:	4401      	add	r1, r0
 8011522:	b2d3      	uxtb	r3, r2
 8011524:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8011526:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801152a:	f04f 0200 	mov.w	r2, #0
 801152e:	f04f 0300 	mov.w	r3, #0
 8011532:	000a      	movs	r2, r1
 8011534:	2300      	movs	r3, #0
 8011536:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011538:	3104      	adds	r1, #4
 801153a:	6838      	ldr	r0, [r7, #0]
 801153c:	4401      	add	r1, r0
 801153e:	b2d3      	uxtb	r3, r2
 8011540:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8011542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011546:	f04f 0200 	mov.w	r2, #0
 801154a:	f04f 0300 	mov.w	r3, #0
 801154e:	0a0a      	lsrs	r2, r1, #8
 8011550:	2300      	movs	r3, #0
 8011552:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011554:	3105      	adds	r1, #5
 8011556:	6838      	ldr	r0, [r7, #0]
 8011558:	4401      	add	r1, r0
 801155a:	b2d3      	uxtb	r3, r2
 801155c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 801155e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011562:	f04f 0200 	mov.w	r2, #0
 8011566:	f04f 0300 	mov.w	r3, #0
 801156a:	0c0a      	lsrs	r2, r1, #16
 801156c:	2300      	movs	r3, #0
 801156e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011570:	3106      	adds	r1, #6
 8011572:	6838      	ldr	r0, [r7, #0]
 8011574:	4401      	add	r1, r0
 8011576:	b2d3      	uxtb	r3, r2
 8011578:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 801157a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801157e:	f04f 0200 	mov.w	r2, #0
 8011582:	f04f 0300 	mov.w	r3, #0
 8011586:	0e0a      	lsrs	r2, r1, #24
 8011588:	2300      	movs	r3, #0
 801158a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801158c:	3107      	adds	r1, #7
 801158e:	6838      	ldr	r0, [r7, #0]
 8011590:	4401      	add	r1, r0
 8011592:	b2d3      	uxtb	r3, r2
 8011594:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8011596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011598:	3308      	adds	r3, #8
 801159a:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 801159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801159e:	4618      	mov	r0, r3
 80115a0:	372c      	adds	r7, #44	@ 0x2c
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr

080115aa <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80115aa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80115ae:	b0eb      	sub	sp, #428	@ 0x1ac
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 80115b6:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 80115ba:	2300      	movs	r3, #0
 80115bc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80115c0:	f04f 0200 	mov.w	r2, #0
 80115c4:	f04f 0300 	mov.w	r3, #0
 80115c8:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80115cc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80115d0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80115d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80115d8:	4413      	add	r3, r2
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	2200      	movs	r2, #0
 80115e0:	461c      	mov	r4, r3
 80115e2:	4615      	mov	r5, r2
 80115e4:	ea40 0804 	orr.w	r8, r0, r4
 80115e8:	ea41 0905 	orr.w	r9, r1, r5
 80115ec:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80115f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80115f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80115f8:	1c5a      	adds	r2, r3, #1
 80115fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80115fe:	4413      	add	r3, r2
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	b2db      	uxtb	r3, r3
 8011604:	2200      	movs	r2, #0
 8011606:	469a      	mov	sl, r3
 8011608:	4693      	mov	fp, r2
 801160a:	f04f 0200 	mov.w	r2, #0
 801160e:	f04f 0300 	mov.w	r3, #0
 8011612:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8011616:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 801161a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 801161e:	ea40 0402 	orr.w	r4, r0, r2
 8011622:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8011626:	430b      	orrs	r3, r1
 8011628:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 801162c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8011630:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8011634:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8011638:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801163c:	1c9a      	adds	r2, r3, #2
 801163e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011642:	4413      	add	r3, r2
 8011644:	781b      	ldrb	r3, [r3, #0]
 8011646:	b2db      	uxtb	r3, r3
 8011648:	2200      	movs	r2, #0
 801164a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801164e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8011652:	f04f 0200 	mov.w	r2, #0
 8011656:	f04f 0300 	mov.w	r3, #0
 801165a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 801165e:	464c      	mov	r4, r9
 8011660:	0423      	lsls	r3, r4, #16
 8011662:	4644      	mov	r4, r8
 8011664:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8011668:	4644      	mov	r4, r8
 801166a:	0422      	lsls	r2, r4, #16
 801166c:	ea40 0402 	orr.w	r4, r0, r2
 8011670:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8011674:	430b      	orrs	r3, r1
 8011676:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 801167a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 801167e:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8011682:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8011686:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801168a:	1cda      	adds	r2, r3, #3
 801168c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011690:	4413      	add	r3, r2
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	b2db      	uxtb	r3, r3
 8011696:	2200      	movs	r2, #0
 8011698:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 801169c:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80116a0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80116a4:	4623      	mov	r3, r4
 80116a6:	0a1b      	lsrs	r3, r3, #8
 80116a8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80116ac:	4623      	mov	r3, r4
 80116ae:	061b      	lsls	r3, r3, #24
 80116b0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80116b4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 80116b8:	4623      	mov	r3, r4
 80116ba:	4303      	orrs	r3, r0
 80116bc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80116c0:	462b      	mov	r3, r5
 80116c2:	430b      	orrs	r3, r1
 80116c4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80116c8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 80116cc:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80116d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80116d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80116d8:	1d1a      	adds	r2, r3, #4
 80116da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80116de:	4413      	add	r3, r2
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	2200      	movs	r2, #0
 80116e6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80116ea:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80116ee:	f04f 0200 	mov.w	r2, #0
 80116f2:	f04f 0300 	mov.w	r3, #0
 80116f6:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 80116fa:	0023      	movs	r3, r4
 80116fc:	2200      	movs	r2, #0
 80116fe:	ea40 0402 	orr.w	r4, r0, r2
 8011702:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8011706:	430b      	orrs	r3, r1
 8011708:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 801170c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8011710:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8011714:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8011718:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801171c:	1d5a      	adds	r2, r3, #5
 801171e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011722:	4413      	add	r3, r2
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	b2db      	uxtb	r3, r3
 8011728:	2200      	movs	r2, #0
 801172a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801172e:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8011732:	f04f 0200 	mov.w	r2, #0
 8011736:	f04f 0300 	mov.w	r3, #0
 801173a:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 801173e:	0223      	lsls	r3, r4, #8
 8011740:	2200      	movs	r2, #0
 8011742:	ea40 0402 	orr.w	r4, r0, r2
 8011746:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 801174a:	430b      	orrs	r3, r1
 801174c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8011750:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8011754:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8011758:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 801175c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011760:	1d9a      	adds	r2, r3, #6
 8011762:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011766:	4413      	add	r3, r2
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	b2db      	uxtb	r3, r3
 801176c:	2200      	movs	r2, #0
 801176e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8011772:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8011776:	f04f 0200 	mov.w	r2, #0
 801177a:	f04f 0300 	mov.w	r3, #0
 801177e:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8011782:	0423      	lsls	r3, r4, #16
 8011784:	2200      	movs	r2, #0
 8011786:	ea40 0402 	orr.w	r4, r0, r2
 801178a:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 801178e:	430b      	orrs	r3, r1
 8011790:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8011794:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8011798:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 801179c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80117a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80117a4:	1dda      	adds	r2, r3, #7
 80117a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80117aa:	4413      	add	r3, r2
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	b2db      	uxtb	r3, r3
 80117b0:	2200      	movs	r2, #0
 80117b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80117b6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80117ba:	f04f 0200 	mov.w	r2, #0
 80117be:	f04f 0300 	mov.w	r3, #0
 80117c2:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80117c6:	0623      	lsls	r3, r4, #24
 80117c8:	2200      	movs	r2, #0
 80117ca:	ea40 0402 	orr.w	r4, r0, r2
 80117ce:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 80117d2:	430b      	orrs	r3, r1
 80117d4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80117d8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 80117dc:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 80117e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80117e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80117e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80117ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80117f0:	3308      	adds	r3, #8
 80117f2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80117f6:	f04f 0200 	mov.w	r2, #0
 80117fa:	f04f 0300 	mov.w	r3, #0
 80117fe:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8011802:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8011806:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 801180a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801180e:	4413      	add	r3, r2
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	b2db      	uxtb	r3, r3
 8011814:	2200      	movs	r2, #0
 8011816:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801181a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 801181e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8011822:	4623      	mov	r3, r4
 8011824:	4303      	orrs	r3, r0
 8011826:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801182a:	462b      	mov	r3, r5
 801182c:	430b      	orrs	r3, r1
 801182e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8011832:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8011836:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 801183a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801183e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011842:	1c5a      	adds	r2, r3, #1
 8011844:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011848:	4413      	add	r3, r2
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	b2db      	uxtb	r3, r3
 801184e:	2200      	movs	r2, #0
 8011850:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8011854:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8011858:	f04f 0200 	mov.w	r2, #0
 801185c:	f04f 0300 	mov.w	r3, #0
 8011860:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8011864:	464c      	mov	r4, r9
 8011866:	0223      	lsls	r3, r4, #8
 8011868:	4644      	mov	r4, r8
 801186a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801186e:	4644      	mov	r4, r8
 8011870:	0222      	lsls	r2, r4, #8
 8011872:	ea40 0402 	orr.w	r4, r0, r2
 8011876:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 801187a:	430b      	orrs	r3, r1
 801187c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011880:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8011884:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8011888:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801188c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011890:	1c9a      	adds	r2, r3, #2
 8011892:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011896:	4413      	add	r3, r2
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	b2db      	uxtb	r3, r3
 801189c:	2200      	movs	r2, #0
 801189e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80118a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80118a6:	f04f 0200 	mov.w	r2, #0
 80118aa:	f04f 0300 	mov.w	r3, #0
 80118ae:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80118b2:	464c      	mov	r4, r9
 80118b4:	0423      	lsls	r3, r4, #16
 80118b6:	4644      	mov	r4, r8
 80118b8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80118bc:	4644      	mov	r4, r8
 80118be:	0422      	lsls	r2, r4, #16
 80118c0:	ea40 0402 	orr.w	r4, r0, r2
 80118c4:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80118c8:	430b      	orrs	r3, r1
 80118ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80118ce:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80118d2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80118d6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80118da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80118de:	1cda      	adds	r2, r3, #3
 80118e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80118e4:	4413      	add	r3, r2
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	b2db      	uxtb	r3, r3
 80118ea:	2200      	movs	r2, #0
 80118ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80118f0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80118f4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80118f8:	4623      	mov	r3, r4
 80118fa:	0a1b      	lsrs	r3, r3, #8
 80118fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011900:	4623      	mov	r3, r4
 8011902:	061b      	lsls	r3, r3, #24
 8011904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011908:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 801190c:	4623      	mov	r3, r4
 801190e:	4303      	orrs	r3, r0
 8011910:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011914:	462b      	mov	r3, r5
 8011916:	430b      	orrs	r3, r1
 8011918:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801191c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8011920:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8011924:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8011928:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801192c:	1d1a      	adds	r2, r3, #4
 801192e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011932:	4413      	add	r3, r2
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	b2db      	uxtb	r3, r3
 8011938:	2200      	movs	r2, #0
 801193a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801193e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011942:	f04f 0200 	mov.w	r2, #0
 8011946:	f04f 0300 	mov.w	r3, #0
 801194a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 801194e:	0023      	movs	r3, r4
 8011950:	2200      	movs	r2, #0
 8011952:	ea40 0402 	orr.w	r4, r0, r2
 8011956:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 801195a:	430b      	orrs	r3, r1
 801195c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011960:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8011964:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8011968:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801196c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011970:	1d5a      	adds	r2, r3, #5
 8011972:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011976:	4413      	add	r3, r2
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	b2db      	uxtb	r3, r3
 801197c:	2200      	movs	r2, #0
 801197e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011982:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011986:	f04f 0200 	mov.w	r2, #0
 801198a:	f04f 0300 	mov.w	r3, #0
 801198e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8011992:	0223      	lsls	r3, r4, #8
 8011994:	2200      	movs	r2, #0
 8011996:	ea40 0402 	orr.w	r4, r0, r2
 801199a:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 801199e:	430b      	orrs	r3, r1
 80119a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80119a4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80119a8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80119ac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80119b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80119b4:	1d9a      	adds	r2, r3, #6
 80119b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80119ba:	4413      	add	r3, r2
 80119bc:	781b      	ldrb	r3, [r3, #0]
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	2200      	movs	r2, #0
 80119c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80119c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80119ca:	f04f 0200 	mov.w	r2, #0
 80119ce:	f04f 0300 	mov.w	r3, #0
 80119d2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80119d6:	0423      	lsls	r3, r4, #16
 80119d8:	2200      	movs	r2, #0
 80119da:	ea40 0402 	orr.w	r4, r0, r2
 80119de:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80119e2:	430b      	orrs	r3, r1
 80119e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80119e8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80119ec:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80119f0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80119f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80119f8:	1dda      	adds	r2, r3, #7
 80119fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80119fe:	4413      	add	r3, r2
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	2200      	movs	r2, #0
 8011a06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011a0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011a0e:	f04f 0200 	mov.w	r2, #0
 8011a12:	f04f 0300 	mov.w	r3, #0
 8011a16:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8011a1a:	0623      	lsls	r3, r4, #24
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	ea40 0402 	orr.w	r4, r0, r2
 8011a22:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8011a26:	430b      	orrs	r3, r1
 8011a28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011a2c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8011a30:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8011a34:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8011a38:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8011a3c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8011a40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011a44:	3308      	adds	r3, #8
 8011a46:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8011a4a:	f04f 0200 	mov.w	r2, #0
 8011a4e:	f04f 0300 	mov.w	r3, #0
 8011a52:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8011a56:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011a5a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8011a5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011a62:	4413      	add	r3, r2
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011a6e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8011a72:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8011a76:	4623      	mov	r3, r4
 8011a78:	4303      	orrs	r3, r0
 8011a7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011a7c:	462b      	mov	r3, r5
 8011a7e:	430b      	orrs	r3, r1
 8011a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011a82:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8011a86:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8011a8a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011a8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011a92:	1c5a      	adds	r2, r3, #1
 8011a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011a98:	4413      	add	r3, r2
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	b2db      	uxtb	r3, r3
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8011aa2:	677a      	str	r2, [r7, #116]	@ 0x74
 8011aa4:	f04f 0200 	mov.w	r2, #0
 8011aa8:	f04f 0300 	mov.w	r3, #0
 8011aac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011ab0:	464c      	mov	r4, r9
 8011ab2:	0223      	lsls	r3, r4, #8
 8011ab4:	4644      	mov	r4, r8
 8011ab6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8011aba:	4644      	mov	r4, r8
 8011abc:	0222      	lsls	r2, r4, #8
 8011abe:	ea40 0402 	orr.w	r4, r0, r2
 8011ac2:	66bc      	str	r4, [r7, #104]	@ 0x68
 8011ac4:	430b      	orrs	r3, r1
 8011ac6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011ac8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8011acc:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8011ad0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011ad4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011ad8:	1c9a      	adds	r2, r3, #2
 8011ada:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011ade:	4413      	add	r3, r2
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	b2db      	uxtb	r3, r3
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	663b      	str	r3, [r7, #96]	@ 0x60
 8011ae8:	667a      	str	r2, [r7, #100]	@ 0x64
 8011aea:	f04f 0200 	mov.w	r2, #0
 8011aee:	f04f 0300 	mov.w	r3, #0
 8011af2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011af6:	464c      	mov	r4, r9
 8011af8:	0423      	lsls	r3, r4, #16
 8011afa:	4644      	mov	r4, r8
 8011afc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8011b00:	4644      	mov	r4, r8
 8011b02:	0422      	lsls	r2, r4, #16
 8011b04:	ea40 0402 	orr.w	r4, r0, r2
 8011b08:	65bc      	str	r4, [r7, #88]	@ 0x58
 8011b0a:	430b      	orrs	r3, r1
 8011b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011b0e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8011b12:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8011b16:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011b1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011b1e:	1cda      	adds	r2, r3, #3
 8011b20:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011b24:	4413      	add	r3, r2
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	b2db      	uxtb	r3, r3
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b2e:	657a      	str	r2, [r7, #84]	@ 0x54
 8011b30:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8011b34:	4623      	mov	r3, r4
 8011b36:	0a1b      	lsrs	r3, r3, #8
 8011b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b3a:	4623      	mov	r3, r4
 8011b3c:	061b      	lsls	r3, r3, #24
 8011b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011b40:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8011b44:	4623      	mov	r3, r4
 8011b46:	4303      	orrs	r3, r0
 8011b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8011b4a:	462b      	mov	r3, r5
 8011b4c:	430b      	orrs	r3, r1
 8011b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b50:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8011b54:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8011b58:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011b5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011b60:	1d1a      	adds	r2, r3, #4
 8011b62:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011b66:	4413      	add	r3, r2
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011b70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011b72:	f04f 0200 	mov.w	r2, #0
 8011b76:	f04f 0300 	mov.w	r3, #0
 8011b7a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8011b7c:	0023      	movs	r3, r4
 8011b7e:	2200      	movs	r2, #0
 8011b80:	ea40 0402 	orr.w	r4, r0, r2
 8011b84:	633c      	str	r4, [r7, #48]	@ 0x30
 8011b86:	430b      	orrs	r3, r1
 8011b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b8a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8011b8e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8011b92:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011b96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011b9a:	1d5a      	adds	r2, r3, #5
 8011b9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8011ba0:	4413      	add	r3, r2
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	b2db      	uxtb	r3, r3
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011bac:	f04f 0200 	mov.w	r2, #0
 8011bb0:	f04f 0300 	mov.w	r3, #0
 8011bb4:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8011bb6:	0223      	lsls	r3, r4, #8
 8011bb8:	2200      	movs	r2, #0
 8011bba:	ea40 0402 	orr.w	r4, r0, r2
 8011bbe:	623c      	str	r4, [r7, #32]
 8011bc0:	430b      	orrs	r3, r1
 8011bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8011bc4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011bc8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8011bcc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011bd0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011bd4:	3306      	adds	r3, #6
 8011bd6:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8011bda:	4413      	add	r3, r2
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	2200      	movs	r2, #0
 8011be2:	61bb      	str	r3, [r7, #24]
 8011be4:	61fa      	str	r2, [r7, #28]
 8011be6:	f04f 0200 	mov.w	r2, #0
 8011bea:	f04f 0300 	mov.w	r3, #0
 8011bee:	69bc      	ldr	r4, [r7, #24]
 8011bf0:	0423      	lsls	r3, r4, #16
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	ea40 0402 	orr.w	r4, r0, r2
 8011bf8:	613c      	str	r4, [r7, #16]
 8011bfa:	430b      	orrs	r3, r1
 8011bfc:	617b      	str	r3, [r7, #20]
 8011bfe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011c02:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8011c06:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011c0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011c0e:	3307      	adds	r3, #7
 8011c10:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8011c14:	4413      	add	r3, r2
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	60bb      	str	r3, [r7, #8]
 8011c1e:	60fa      	str	r2, [r7, #12]
 8011c20:	f04f 0200 	mov.w	r2, #0
 8011c24:	f04f 0300 	mov.w	r3, #0
 8011c28:	68bc      	ldr	r4, [r7, #8]
 8011c2a:	0623      	lsls	r3, r4, #24
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	ea40 0402 	orr.w	r4, r0, r2
 8011c32:	603c      	str	r4, [r7, #0]
 8011c34:	430b      	orrs	r3, r1
 8011c36:	607b      	str	r3, [r7, #4]
 8011c38:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011c3c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8011c40:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8011c44:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 8011c48:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8011c4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011c50:	3308      	adds	r3, #8
 8011c52:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 8011c56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8011c60:	46bd      	mov	sp, r7
 8011c62:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011c66:	4770      	bx	lr

08011c68 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8011c68:	b480      	push	{r7}
 8011c6a:	b083      	sub	sp, #12
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	4b03      	ldr	r3, [pc, #12]	@ (8011c80 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8011c72:	4618      	mov	r0, r3
 8011c74:	370c      	adds	r7, #12
 8011c76:	46bd      	mov	sp, r7
 8011c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7c:	4770      	bx	lr
 8011c7e:	bf00      	nop
 8011c80:	08015234 	.word	0x08015234

08011c84 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8011c84:	b480      	push	{r7}
 8011c86:	b083      	sub	sp, #12
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	4b03      	ldr	r3, [pc, #12]	@ (8011c9c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8011c8e:	4618      	mov	r0, r3
 8011c90:	370c      	adds	r7, #12
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr
 8011c9a:	bf00      	nop
 8011c9c:	0801524c 	.word	0x0801524c

08011ca0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7fe fab2 	bl	8010214 <_ZN3ros3MsgC1Ev>
 8011cb0:	4a08      	ldr	r2, [pc, #32]	@ (8011cd4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	601a      	str	r2, [r3, #0]
      linear(),
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	3308      	adds	r3, #8
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7ff fada 	bl	8011274 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	3328      	adds	r3, #40	@ 0x28
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7ff fad5 	bl	8011274 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3708      	adds	r7, #8
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	08015568 	.word	0x08015568

08011cd8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f103 0008 	add.w	r0, r3, #8
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	683a      	ldr	r2, [r7, #0]
 8011cf0:	4413      	add	r3, r2
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	f7ff fae6 	bl	80112c4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	683a      	ldr	r2, [r7, #0]
 8011d0a:	4413      	add	r3, r2
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	f7ff fad9 	bl	80112c4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8011d12:	4602      	mov	r2, r0
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	4413      	add	r3, r2
 8011d18:	60fb      	str	r3, [r7, #12]
      return offset;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
    }
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3710      	adds	r7, #16
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}

08011d24 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b084      	sub	sp, #16
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f103 0008 	add.w	r0, r3, #8
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	683a      	ldr	r2, [r7, #0]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	4619      	mov	r1, r3
 8011d40:	f7ff fc33 	bl	80115aa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8011d44:	4602      	mov	r2, r0
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	4413      	add	r3, r2
 8011d4a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	683a      	ldr	r2, [r7, #0]
 8011d56:	4413      	add	r3, r2
 8011d58:	4619      	mov	r1, r3
 8011d5a:	f7ff fc26 	bl	80115aa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8011d5e:	4602      	mov	r2, r0
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	4413      	add	r3, r2
 8011d64:	60fb      	str	r3, [r7, #12]
     return offset;
 8011d66:	68fb      	ldr	r3, [r7, #12]
    }
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8011d70:	b480      	push	{r7}
 8011d72:	b083      	sub	sp, #12
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	4b03      	ldr	r3, [pc, #12]	@ (8011d88 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	370c      	adds	r7, #12
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d84:	4770      	bx	lr
 8011d86:	bf00      	nop
 8011d88:	08015270 	.word	0x08015270

08011d8c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8011d8c:	b480      	push	{r7}
 8011d8e:	b083      	sub	sp, #12
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	4b03      	ldr	r3, [pc, #12]	@ (8011da4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8011d96:	4618      	mov	r0, r3
 8011d98:	370c      	adds	r7, #12
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da0:	4770      	bx	lr
 8011da2:	bf00      	nop
 8011da4:	08015284 	.word	0x08015284

08011da8 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7fe fa2e 	bl	8010214 <_ZN3ros3MsgC1Ev>
 8011db8:	4a0e      	ldr	r2, [pc, #56]	@ (8011df4 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	601a      	str	r2, [r3, #0]
      x(0),
 8011dbe:	6879      	ldr	r1, [r7, #4]
 8011dc0:	f04f 0200 	mov.w	r2, #0
 8011dc4:	f04f 0300 	mov.w	r3, #0
 8011dc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8011dcc:	6879      	ldr	r1, [r7, #4]
 8011dce:	f04f 0200 	mov.w	r2, #0
 8011dd2:	f04f 0300 	mov.w	r3, #0
 8011dd6:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8011dda:	6879      	ldr	r1, [r7, #4]
 8011ddc:	f04f 0200 	mov.w	r2, #0
 8011de0:	f04f 0300 	mov.w	r3, #0
 8011de4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	4618      	mov	r0, r3
 8011dec:	3708      	adds	r7, #8
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	08015550 	.word	0x08015550

08011df8 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8011df8:	b480      	push	{r7}
 8011dfa:	b08b      	sub	sp, #44	@ 0x2c
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8011e02:	2300      	movs	r3, #0
 8011e04:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011e0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8011e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011e14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011e16:	6838      	ldr	r0, [r7, #0]
 8011e18:	4401      	add	r1, r0
 8011e1a:	b2d3      	uxtb	r3, r2
 8011e1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8011e1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011e22:	f04f 0200 	mov.w	r2, #0
 8011e26:	f04f 0300 	mov.w	r3, #0
 8011e2a:	0a02      	lsrs	r2, r0, #8
 8011e2c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011e30:	0a0b      	lsrs	r3, r1, #8
 8011e32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011e34:	3101      	adds	r1, #1
 8011e36:	6838      	ldr	r0, [r7, #0]
 8011e38:	4401      	add	r1, r0
 8011e3a:	b2d3      	uxtb	r3, r2
 8011e3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8011e3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011e42:	f04f 0200 	mov.w	r2, #0
 8011e46:	f04f 0300 	mov.w	r3, #0
 8011e4a:	0c02      	lsrs	r2, r0, #16
 8011e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011e50:	0c0b      	lsrs	r3, r1, #16
 8011e52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011e54:	3102      	adds	r1, #2
 8011e56:	6838      	ldr	r0, [r7, #0]
 8011e58:	4401      	add	r1, r0
 8011e5a:	b2d3      	uxtb	r3, r2
 8011e5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8011e5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011e62:	f04f 0200 	mov.w	r2, #0
 8011e66:	f04f 0300 	mov.w	r3, #0
 8011e6a:	0e02      	lsrs	r2, r0, #24
 8011e6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011e70:	0e0b      	lsrs	r3, r1, #24
 8011e72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011e74:	3103      	adds	r1, #3
 8011e76:	6838      	ldr	r0, [r7, #0]
 8011e78:	4401      	add	r1, r0
 8011e7a:	b2d3      	uxtb	r3, r2
 8011e7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8011e7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011e82:	f04f 0200 	mov.w	r2, #0
 8011e86:	f04f 0300 	mov.w	r3, #0
 8011e8a:	000a      	movs	r2, r1
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011e90:	3104      	adds	r1, #4
 8011e92:	6838      	ldr	r0, [r7, #0]
 8011e94:	4401      	add	r1, r0
 8011e96:	b2d3      	uxtb	r3, r2
 8011e98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8011e9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011e9e:	f04f 0200 	mov.w	r2, #0
 8011ea2:	f04f 0300 	mov.w	r3, #0
 8011ea6:	0a0a      	lsrs	r2, r1, #8
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011eac:	3105      	adds	r1, #5
 8011eae:	6838      	ldr	r0, [r7, #0]
 8011eb0:	4401      	add	r1, r0
 8011eb2:	b2d3      	uxtb	r3, r2
 8011eb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8011eb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011eba:	f04f 0200 	mov.w	r2, #0
 8011ebe:	f04f 0300 	mov.w	r3, #0
 8011ec2:	0c0a      	lsrs	r2, r1, #16
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011ec8:	3106      	adds	r1, #6
 8011eca:	6838      	ldr	r0, [r7, #0]
 8011ecc:	4401      	add	r1, r0
 8011ece:	b2d3      	uxtb	r3, r2
 8011ed0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8011ed2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011ed6:	f04f 0200 	mov.w	r2, #0
 8011eda:	f04f 0300 	mov.w	r3, #0
 8011ede:	0e0a      	lsrs	r2, r1, #24
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011ee4:	3107      	adds	r1, #7
 8011ee6:	6838      	ldr	r0, [r7, #0]
 8011ee8:	4401      	add	r1, r0
 8011eea:	b2d3      	uxtb	r3, r2
 8011eec:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8011eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef0:	3308      	adds	r3, #8
 8011ef2:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011efa:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8011efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011f02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011f04:	6838      	ldr	r0, [r7, #0]
 8011f06:	4401      	add	r1, r0
 8011f08:	b2d3      	uxtb	r3, r2
 8011f0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8011f0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011f10:	f04f 0200 	mov.w	r2, #0
 8011f14:	f04f 0300 	mov.w	r3, #0
 8011f18:	0a02      	lsrs	r2, r0, #8
 8011f1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011f1e:	0a0b      	lsrs	r3, r1, #8
 8011f20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011f22:	3101      	adds	r1, #1
 8011f24:	6838      	ldr	r0, [r7, #0]
 8011f26:	4401      	add	r1, r0
 8011f28:	b2d3      	uxtb	r3, r2
 8011f2a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8011f2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011f30:	f04f 0200 	mov.w	r2, #0
 8011f34:	f04f 0300 	mov.w	r3, #0
 8011f38:	0c02      	lsrs	r2, r0, #16
 8011f3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011f3e:	0c0b      	lsrs	r3, r1, #16
 8011f40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011f42:	3102      	adds	r1, #2
 8011f44:	6838      	ldr	r0, [r7, #0]
 8011f46:	4401      	add	r1, r0
 8011f48:	b2d3      	uxtb	r3, r2
 8011f4a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8011f4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011f50:	f04f 0200 	mov.w	r2, #0
 8011f54:	f04f 0300 	mov.w	r3, #0
 8011f58:	0e02      	lsrs	r2, r0, #24
 8011f5a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011f5e:	0e0b      	lsrs	r3, r1, #24
 8011f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011f62:	3103      	adds	r1, #3
 8011f64:	6838      	ldr	r0, [r7, #0]
 8011f66:	4401      	add	r1, r0
 8011f68:	b2d3      	uxtb	r3, r2
 8011f6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8011f6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011f70:	f04f 0200 	mov.w	r2, #0
 8011f74:	f04f 0300 	mov.w	r3, #0
 8011f78:	000a      	movs	r2, r1
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011f7e:	3104      	adds	r1, #4
 8011f80:	6838      	ldr	r0, [r7, #0]
 8011f82:	4401      	add	r1, r0
 8011f84:	b2d3      	uxtb	r3, r2
 8011f86:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8011f88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011f8c:	f04f 0200 	mov.w	r2, #0
 8011f90:	f04f 0300 	mov.w	r3, #0
 8011f94:	0a0a      	lsrs	r2, r1, #8
 8011f96:	2300      	movs	r3, #0
 8011f98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011f9a:	3105      	adds	r1, #5
 8011f9c:	6838      	ldr	r0, [r7, #0]
 8011f9e:	4401      	add	r1, r0
 8011fa0:	b2d3      	uxtb	r3, r2
 8011fa2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8011fa4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011fa8:	f04f 0200 	mov.w	r2, #0
 8011fac:	f04f 0300 	mov.w	r3, #0
 8011fb0:	0c0a      	lsrs	r2, r1, #16
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011fb6:	3106      	adds	r1, #6
 8011fb8:	6838      	ldr	r0, [r7, #0]
 8011fba:	4401      	add	r1, r0
 8011fbc:	b2d3      	uxtb	r3, r2
 8011fbe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8011fc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011fc4:	f04f 0200 	mov.w	r2, #0
 8011fc8:	f04f 0300 	mov.w	r3, #0
 8011fcc:	0e0a      	lsrs	r2, r1, #24
 8011fce:	2300      	movs	r3, #0
 8011fd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011fd2:	3107      	adds	r1, #7
 8011fd4:	6838      	ldr	r0, [r7, #0]
 8011fd6:	4401      	add	r1, r0
 8011fd8:	b2d3      	uxtb	r3, r2
 8011fda:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8011fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fde:	3308      	adds	r3, #8
 8011fe0:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8011fe8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8011fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011ff2:	6838      	ldr	r0, [r7, #0]
 8011ff4:	4401      	add	r1, r0
 8011ff6:	b2d3      	uxtb	r3, r2
 8011ff8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8011ffa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011ffe:	f04f 0200 	mov.w	r2, #0
 8012002:	f04f 0300 	mov.w	r3, #0
 8012006:	0a02      	lsrs	r2, r0, #8
 8012008:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801200c:	0a0b      	lsrs	r3, r1, #8
 801200e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012010:	3101      	adds	r1, #1
 8012012:	6838      	ldr	r0, [r7, #0]
 8012014:	4401      	add	r1, r0
 8012016:	b2d3      	uxtb	r3, r2
 8012018:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 801201a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801201e:	f04f 0200 	mov.w	r2, #0
 8012022:	f04f 0300 	mov.w	r3, #0
 8012026:	0c02      	lsrs	r2, r0, #16
 8012028:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801202c:	0c0b      	lsrs	r3, r1, #16
 801202e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012030:	3102      	adds	r1, #2
 8012032:	6838      	ldr	r0, [r7, #0]
 8012034:	4401      	add	r1, r0
 8012036:	b2d3      	uxtb	r3, r2
 8012038:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 801203a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801203e:	f04f 0200 	mov.w	r2, #0
 8012042:	f04f 0300 	mov.w	r3, #0
 8012046:	0e02      	lsrs	r2, r0, #24
 8012048:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801204c:	0e0b      	lsrs	r3, r1, #24
 801204e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012050:	3103      	adds	r1, #3
 8012052:	6838      	ldr	r0, [r7, #0]
 8012054:	4401      	add	r1, r0
 8012056:	b2d3      	uxtb	r3, r2
 8012058:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 801205a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801205e:	f04f 0200 	mov.w	r2, #0
 8012062:	f04f 0300 	mov.w	r3, #0
 8012066:	000a      	movs	r2, r1
 8012068:	2300      	movs	r3, #0
 801206a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801206c:	3104      	adds	r1, #4
 801206e:	6838      	ldr	r0, [r7, #0]
 8012070:	4401      	add	r1, r0
 8012072:	b2d3      	uxtb	r3, r2
 8012074:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8012076:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801207a:	f04f 0200 	mov.w	r2, #0
 801207e:	f04f 0300 	mov.w	r3, #0
 8012082:	0a0a      	lsrs	r2, r1, #8
 8012084:	2300      	movs	r3, #0
 8012086:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012088:	3105      	adds	r1, #5
 801208a:	6838      	ldr	r0, [r7, #0]
 801208c:	4401      	add	r1, r0
 801208e:	b2d3      	uxtb	r3, r2
 8012090:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8012092:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012096:	f04f 0200 	mov.w	r2, #0
 801209a:	f04f 0300 	mov.w	r3, #0
 801209e:	0c0a      	lsrs	r2, r1, #16
 80120a0:	2300      	movs	r3, #0
 80120a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80120a4:	3106      	adds	r1, #6
 80120a6:	6838      	ldr	r0, [r7, #0]
 80120a8:	4401      	add	r1, r0
 80120aa:	b2d3      	uxtb	r3, r2
 80120ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80120ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80120b2:	f04f 0200 	mov.w	r2, #0
 80120b6:	f04f 0300 	mov.w	r3, #0
 80120ba:	0e0a      	lsrs	r2, r1, #24
 80120bc:	2300      	movs	r3, #0
 80120be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80120c0:	3107      	adds	r1, #7
 80120c2:	6838      	ldr	r0, [r7, #0]
 80120c4:	4401      	add	r1, r0
 80120c6:	b2d3      	uxtb	r3, r2
 80120c8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80120ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120cc:	3308      	adds	r3, #8
 80120ce:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 80120d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80120d2:	4618      	mov	r0, r3
 80120d4:	372c      	adds	r7, #44	@ 0x2c
 80120d6:	46bd      	mov	sp, r7
 80120d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120dc:	4770      	bx	lr

080120de <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80120de:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80120e2:	b0eb      	sub	sp, #428	@ 0x1ac
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 80120ea:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 80120ee:	2300      	movs	r3, #0
 80120f0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80120f4:	f04f 0200 	mov.w	r2, #0
 80120f8:	f04f 0300 	mov.w	r3, #0
 80120fc:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8012100:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8012104:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8012108:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801210c:	4413      	add	r3, r2
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	b2db      	uxtb	r3, r3
 8012112:	2200      	movs	r2, #0
 8012114:	461c      	mov	r4, r3
 8012116:	4615      	mov	r5, r2
 8012118:	ea40 0804 	orr.w	r8, r0, r4
 801211c:	ea41 0905 	orr.w	r9, r1, r5
 8012120:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8012124:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8012128:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801212c:	1c5a      	adds	r2, r3, #1
 801212e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8012132:	4413      	add	r3, r2
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	b2db      	uxtb	r3, r3
 8012138:	2200      	movs	r2, #0
 801213a:	469a      	mov	sl, r3
 801213c:	4693      	mov	fp, r2
 801213e:	f04f 0200 	mov.w	r2, #0
 8012142:	f04f 0300 	mov.w	r3, #0
 8012146:	ea4f 230b 	mov.w	r3, fp, lsl #8
 801214a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 801214e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8012152:	ea40 0402 	orr.w	r4, r0, r2
 8012156:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 801215a:	430b      	orrs	r3, r1
 801215c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8012160:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8012164:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8012168:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 801216c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012170:	1c9a      	adds	r2, r3, #2
 8012172:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8012176:	4413      	add	r3, r2
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	b2db      	uxtb	r3, r3
 801217c:	2200      	movs	r2, #0
 801217e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8012182:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8012186:	f04f 0200 	mov.w	r2, #0
 801218a:	f04f 0300 	mov.w	r3, #0
 801218e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8012192:	464c      	mov	r4, r9
 8012194:	0423      	lsls	r3, r4, #16
 8012196:	4644      	mov	r4, r8
 8012198:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 801219c:	4644      	mov	r4, r8
 801219e:	0422      	lsls	r2, r4, #16
 80121a0:	ea40 0402 	orr.w	r4, r0, r2
 80121a4:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 80121a8:	430b      	orrs	r3, r1
 80121aa:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80121ae:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 80121b2:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80121b6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80121ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80121be:	1cda      	adds	r2, r3, #3
 80121c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80121c4:	4413      	add	r3, r2
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	b2db      	uxtb	r3, r3
 80121ca:	2200      	movs	r2, #0
 80121cc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80121d0:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80121d4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80121d8:	4623      	mov	r3, r4
 80121da:	0a1b      	lsrs	r3, r3, #8
 80121dc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80121e0:	4623      	mov	r3, r4
 80121e2:	061b      	lsls	r3, r3, #24
 80121e4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80121e8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 80121ec:	4623      	mov	r3, r4
 80121ee:	4303      	orrs	r3, r0
 80121f0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80121f4:	462b      	mov	r3, r5
 80121f6:	430b      	orrs	r3, r1
 80121f8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80121fc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8012200:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8012204:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8012208:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801220c:	1d1a      	adds	r2, r3, #4
 801220e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8012212:	4413      	add	r3, r2
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	b2db      	uxtb	r3, r3
 8012218:	2200      	movs	r2, #0
 801221a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 801221e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8012222:	f04f 0200 	mov.w	r2, #0
 8012226:	f04f 0300 	mov.w	r3, #0
 801222a:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 801222e:	0023      	movs	r3, r4
 8012230:	2200      	movs	r2, #0
 8012232:	ea40 0402 	orr.w	r4, r0, r2
 8012236:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 801223a:	430b      	orrs	r3, r1
 801223c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8012240:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8012244:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8012248:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 801224c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012250:	1d5a      	adds	r2, r3, #5
 8012252:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8012256:	4413      	add	r3, r2
 8012258:	781b      	ldrb	r3, [r3, #0]
 801225a:	b2db      	uxtb	r3, r3
 801225c:	2200      	movs	r2, #0
 801225e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8012262:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8012266:	f04f 0200 	mov.w	r2, #0
 801226a:	f04f 0300 	mov.w	r3, #0
 801226e:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8012272:	0223      	lsls	r3, r4, #8
 8012274:	2200      	movs	r2, #0
 8012276:	ea40 0402 	orr.w	r4, r0, r2
 801227a:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 801227e:	430b      	orrs	r3, r1
 8012280:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8012284:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8012288:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 801228c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8012290:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012294:	1d9a      	adds	r2, r3, #6
 8012296:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801229a:	4413      	add	r3, r2
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	b2db      	uxtb	r3, r3
 80122a0:	2200      	movs	r2, #0
 80122a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80122a6:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80122aa:	f04f 0200 	mov.w	r2, #0
 80122ae:	f04f 0300 	mov.w	r3, #0
 80122b2:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 80122b6:	0423      	lsls	r3, r4, #16
 80122b8:	2200      	movs	r2, #0
 80122ba:	ea40 0402 	orr.w	r4, r0, r2
 80122be:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80122c2:	430b      	orrs	r3, r1
 80122c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80122c8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 80122cc:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80122d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80122d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80122d8:	1dda      	adds	r2, r3, #7
 80122da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80122de:	4413      	add	r3, r2
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	2200      	movs	r2, #0
 80122e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80122ea:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80122ee:	f04f 0200 	mov.w	r2, #0
 80122f2:	f04f 0300 	mov.w	r3, #0
 80122f6:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80122fa:	0623      	lsls	r3, r4, #24
 80122fc:	2200      	movs	r2, #0
 80122fe:	ea40 0402 	orr.w	r4, r0, r2
 8012302:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8012306:	430b      	orrs	r3, r1
 8012308:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 801230c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8012310:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8012314:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8012318:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801231c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8012320:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012324:	3308      	adds	r3, #8
 8012326:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 801232a:	f04f 0200 	mov.w	r2, #0
 801232e:	f04f 0300 	mov.w	r3, #0
 8012332:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8012336:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801233a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 801233e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8012342:	4413      	add	r3, r2
 8012344:	781b      	ldrb	r3, [r3, #0]
 8012346:	b2db      	uxtb	r3, r3
 8012348:	2200      	movs	r2, #0
 801234a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801234e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8012352:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8012356:	4623      	mov	r3, r4
 8012358:	4303      	orrs	r3, r0
 801235a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801235e:	462b      	mov	r3, r5
 8012360:	430b      	orrs	r3, r1
 8012362:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8012366:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 801236a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 801236e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8012372:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012376:	1c5a      	adds	r2, r3, #1
 8012378:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801237c:	4413      	add	r3, r2
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	b2db      	uxtb	r3, r3
 8012382:	2200      	movs	r2, #0
 8012384:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8012388:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 801238c:	f04f 0200 	mov.w	r2, #0
 8012390:	f04f 0300 	mov.w	r3, #0
 8012394:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8012398:	464c      	mov	r4, r9
 801239a:	0223      	lsls	r3, r4, #8
 801239c:	4644      	mov	r4, r8
 801239e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80123a2:	4644      	mov	r4, r8
 80123a4:	0222      	lsls	r2, r4, #8
 80123a6:	ea40 0402 	orr.w	r4, r0, r2
 80123aa:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80123ae:	430b      	orrs	r3, r1
 80123b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80123b4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80123b8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80123bc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80123c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80123c4:	1c9a      	adds	r2, r3, #2
 80123c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80123ca:	4413      	add	r3, r2
 80123cc:	781b      	ldrb	r3, [r3, #0]
 80123ce:	b2db      	uxtb	r3, r3
 80123d0:	2200      	movs	r2, #0
 80123d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80123d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80123da:	f04f 0200 	mov.w	r2, #0
 80123de:	f04f 0300 	mov.w	r3, #0
 80123e2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80123e6:	464c      	mov	r4, r9
 80123e8:	0423      	lsls	r3, r4, #16
 80123ea:	4644      	mov	r4, r8
 80123ec:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80123f0:	4644      	mov	r4, r8
 80123f2:	0422      	lsls	r2, r4, #16
 80123f4:	ea40 0402 	orr.w	r4, r0, r2
 80123f8:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80123fc:	430b      	orrs	r3, r1
 80123fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012402:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8012406:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801240a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801240e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012412:	1cda      	adds	r2, r3, #3
 8012414:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8012418:	4413      	add	r3, r2
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	b2db      	uxtb	r3, r3
 801241e:	2200      	movs	r2, #0
 8012420:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012424:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8012428:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 801242c:	4623      	mov	r3, r4
 801242e:	0a1b      	lsrs	r3, r3, #8
 8012430:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012434:	4623      	mov	r3, r4
 8012436:	061b      	lsls	r3, r3, #24
 8012438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801243c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8012440:	4623      	mov	r3, r4
 8012442:	4303      	orrs	r3, r0
 8012444:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012448:	462b      	mov	r3, r5
 801244a:	430b      	orrs	r3, r1
 801244c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012450:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8012454:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8012458:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801245c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012460:	1d1a      	adds	r2, r3, #4
 8012462:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8012466:	4413      	add	r3, r2
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	b2db      	uxtb	r3, r3
 801246c:	2200      	movs	r2, #0
 801246e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012472:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8012476:	f04f 0200 	mov.w	r2, #0
 801247a:	f04f 0300 	mov.w	r3, #0
 801247e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8012482:	0023      	movs	r3, r4
 8012484:	2200      	movs	r2, #0
 8012486:	ea40 0402 	orr.w	r4, r0, r2
 801248a:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 801248e:	430b      	orrs	r3, r1
 8012490:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012494:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8012498:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 801249c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80124a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80124a4:	1d5a      	adds	r2, r3, #5
 80124a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80124aa:	4413      	add	r3, r2
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	2200      	movs	r2, #0
 80124b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80124b6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80124ba:	f04f 0200 	mov.w	r2, #0
 80124be:	f04f 0300 	mov.w	r3, #0
 80124c2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 80124c6:	0223      	lsls	r3, r4, #8
 80124c8:	2200      	movs	r2, #0
 80124ca:	ea40 0402 	orr.w	r4, r0, r2
 80124ce:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 80124d2:	430b      	orrs	r3, r1
 80124d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80124d8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80124dc:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80124e0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80124e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80124e8:	1d9a      	adds	r2, r3, #6
 80124ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80124ee:	4413      	add	r3, r2
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	b2db      	uxtb	r3, r3
 80124f4:	2200      	movs	r2, #0
 80124f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80124fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80124fe:	f04f 0200 	mov.w	r2, #0
 8012502:	f04f 0300 	mov.w	r3, #0
 8012506:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 801250a:	0423      	lsls	r3, r4, #16
 801250c:	2200      	movs	r2, #0
 801250e:	ea40 0402 	orr.w	r4, r0, r2
 8012512:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8012516:	430b      	orrs	r3, r1
 8012518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801251c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8012520:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8012524:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8012528:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801252c:	1dda      	adds	r2, r3, #7
 801252e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8012532:	4413      	add	r3, r2
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	b2db      	uxtb	r3, r3
 8012538:	2200      	movs	r2, #0
 801253a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801253e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012542:	f04f 0200 	mov.w	r2, #0
 8012546:	f04f 0300 	mov.w	r3, #0
 801254a:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 801254e:	0623      	lsls	r3, r4, #24
 8012550:	2200      	movs	r2, #0
 8012552:	ea40 0402 	orr.w	r4, r0, r2
 8012556:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 801255a:	430b      	orrs	r3, r1
 801255c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012560:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8012564:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8012568:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801256c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8012570:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8012574:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012578:	3308      	adds	r3, #8
 801257a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 801257e:	f04f 0200 	mov.w	r2, #0
 8012582:	f04f 0300 	mov.w	r3, #0
 8012586:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 801258a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 801258e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8012592:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8012596:	4413      	add	r3, r2
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	b2db      	uxtb	r3, r3
 801259c:	2200      	movs	r2, #0
 801259e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80125a2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80125a6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80125aa:	4623      	mov	r3, r4
 80125ac:	4303      	orrs	r3, r0
 80125ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80125b0:	462b      	mov	r3, r5
 80125b2:	430b      	orrs	r3, r1
 80125b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80125b6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80125ba:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80125be:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80125c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80125c6:	1c5a      	adds	r2, r3, #1
 80125c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80125cc:	4413      	add	r3, r2
 80125ce:	781b      	ldrb	r3, [r3, #0]
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	2200      	movs	r2, #0
 80125d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80125d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80125d8:	f04f 0200 	mov.w	r2, #0
 80125dc:	f04f 0300 	mov.w	r3, #0
 80125e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80125e4:	464c      	mov	r4, r9
 80125e6:	0223      	lsls	r3, r4, #8
 80125e8:	4644      	mov	r4, r8
 80125ea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80125ee:	4644      	mov	r4, r8
 80125f0:	0222      	lsls	r2, r4, #8
 80125f2:	ea40 0402 	orr.w	r4, r0, r2
 80125f6:	66bc      	str	r4, [r7, #104]	@ 0x68
 80125f8:	430b      	orrs	r3, r1
 80125fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80125fc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8012600:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8012604:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8012608:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801260c:	1c9a      	adds	r2, r3, #2
 801260e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8012612:	4413      	add	r3, r2
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	b2db      	uxtb	r3, r3
 8012618:	2200      	movs	r2, #0
 801261a:	663b      	str	r3, [r7, #96]	@ 0x60
 801261c:	667a      	str	r2, [r7, #100]	@ 0x64
 801261e:	f04f 0200 	mov.w	r2, #0
 8012622:	f04f 0300 	mov.w	r3, #0
 8012626:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 801262a:	464c      	mov	r4, r9
 801262c:	0423      	lsls	r3, r4, #16
 801262e:	4644      	mov	r4, r8
 8012630:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8012634:	4644      	mov	r4, r8
 8012636:	0422      	lsls	r2, r4, #16
 8012638:	ea40 0402 	orr.w	r4, r0, r2
 801263c:	65bc      	str	r4, [r7, #88]	@ 0x58
 801263e:	430b      	orrs	r3, r1
 8012640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012642:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8012646:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801264a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 801264e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012652:	1cda      	adds	r2, r3, #3
 8012654:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8012658:	4413      	add	r3, r2
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	b2db      	uxtb	r3, r3
 801265e:	2200      	movs	r2, #0
 8012660:	653b      	str	r3, [r7, #80]	@ 0x50
 8012662:	657a      	str	r2, [r7, #84]	@ 0x54
 8012664:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8012668:	4623      	mov	r3, r4
 801266a:	0a1b      	lsrs	r3, r3, #8
 801266c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801266e:	4623      	mov	r3, r4
 8012670:	061b      	lsls	r3, r3, #24
 8012672:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012674:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8012678:	4623      	mov	r3, r4
 801267a:	4303      	orrs	r3, r0
 801267c:	643b      	str	r3, [r7, #64]	@ 0x40
 801267e:	462b      	mov	r3, r5
 8012680:	430b      	orrs	r3, r1
 8012682:	647b      	str	r3, [r7, #68]	@ 0x44
 8012684:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8012688:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 801268c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8012690:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012694:	1d1a      	adds	r2, r3, #4
 8012696:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801269a:	4413      	add	r3, r2
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	2200      	movs	r2, #0
 80126a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80126a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80126a6:	f04f 0200 	mov.w	r2, #0
 80126aa:	f04f 0300 	mov.w	r3, #0
 80126ae:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80126b0:	0023      	movs	r3, r4
 80126b2:	2200      	movs	r2, #0
 80126b4:	ea40 0402 	orr.w	r4, r0, r2
 80126b8:	633c      	str	r4, [r7, #48]	@ 0x30
 80126ba:	430b      	orrs	r3, r1
 80126bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80126be:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80126c2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80126c6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80126ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80126ce:	1d5a      	adds	r2, r3, #5
 80126d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80126d4:	4413      	add	r3, r2
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	b2db      	uxtb	r3, r3
 80126da:	2200      	movs	r2, #0
 80126dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80126de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80126e0:	f04f 0200 	mov.w	r2, #0
 80126e4:	f04f 0300 	mov.w	r3, #0
 80126e8:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80126ea:	0223      	lsls	r3, r4, #8
 80126ec:	2200      	movs	r2, #0
 80126ee:	ea40 0402 	orr.w	r4, r0, r2
 80126f2:	623c      	str	r4, [r7, #32]
 80126f4:	430b      	orrs	r3, r1
 80126f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80126f8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80126fc:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8012700:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8012704:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012708:	3306      	adds	r3, #6
 801270a:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 801270e:	4413      	add	r3, r2
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	b2db      	uxtb	r3, r3
 8012714:	2200      	movs	r2, #0
 8012716:	61bb      	str	r3, [r7, #24]
 8012718:	61fa      	str	r2, [r7, #28]
 801271a:	f04f 0200 	mov.w	r2, #0
 801271e:	f04f 0300 	mov.w	r3, #0
 8012722:	69bc      	ldr	r4, [r7, #24]
 8012724:	0423      	lsls	r3, r4, #16
 8012726:	2200      	movs	r2, #0
 8012728:	ea40 0402 	orr.w	r4, r0, r2
 801272c:	613c      	str	r4, [r7, #16]
 801272e:	430b      	orrs	r3, r1
 8012730:	617b      	str	r3, [r7, #20]
 8012732:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012736:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 801273a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 801273e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012742:	3307      	adds	r3, #7
 8012744:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8012748:	4413      	add	r3, r2
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	b2db      	uxtb	r3, r3
 801274e:	2200      	movs	r2, #0
 8012750:	60bb      	str	r3, [r7, #8]
 8012752:	60fa      	str	r2, [r7, #12]
 8012754:	f04f 0200 	mov.w	r2, #0
 8012758:	f04f 0300 	mov.w	r3, #0
 801275c:	68bc      	ldr	r4, [r7, #8]
 801275e:	0623      	lsls	r3, r4, #24
 8012760:	2200      	movs	r2, #0
 8012762:	ea40 0402 	orr.w	r4, r0, r2
 8012766:	603c      	str	r4, [r7, #0]
 8012768:	430b      	orrs	r3, r1
 801276a:	607b      	str	r3, [r7, #4]
 801276c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012770:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8012774:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8012778:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 801277c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8012780:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8012784:	3308      	adds	r3, #8
 8012786:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 801278a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 801278e:	4618      	mov	r0, r3
 8012790:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8012794:	46bd      	mov	sp, r7
 8012796:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801279a:	4770      	bx	lr

0801279c <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	4b03      	ldr	r3, [pc, #12]	@ (80127b4 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 80127a6:	4618      	mov	r0, r3
 80127a8:	370c      	adds	r7, #12
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr
 80127b2:	bf00      	nop
 80127b4:	080152a8 	.word	0x080152a8

080127b8 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80127b8:	b480      	push	{r7}
 80127ba:	b083      	sub	sp, #12
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	4b03      	ldr	r3, [pc, #12]	@ (80127d0 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 80127c2:	4618      	mov	r0, r3
 80127c4:	370c      	adds	r7, #12
 80127c6:	46bd      	mov	sp, r7
 80127c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127cc:	4770      	bx	lr
 80127ce:	bf00      	nop
 80127d0:	0801524c 	.word	0x0801524c

080127d4 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	4618      	mov	r0, r3
 80127e0:	f7fd fd18 	bl	8010214 <_ZN3ros3MsgC1Ev>
 80127e4:	4a11      	ldr	r2, [pc, #68]	@ (801282c <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	601a      	str	r2, [r3, #0]
      x(0),
 80127ea:	6879      	ldr	r1, [r7, #4]
 80127ec:	f04f 0200 	mov.w	r2, #0
 80127f0:	f04f 0300 	mov.w	r3, #0
 80127f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80127f8:	6879      	ldr	r1, [r7, #4]
 80127fa:	f04f 0200 	mov.w	r2, #0
 80127fe:	f04f 0300 	mov.w	r3, #0
 8012802:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 8012806:	6879      	ldr	r1, [r7, #4]
 8012808:	f04f 0200 	mov.w	r2, #0
 801280c:	f04f 0300 	mov.w	r3, #0
 8012810:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 8012814:	6879      	ldr	r1, [r7, #4]
 8012816:	f04f 0200 	mov.w	r2, #0
 801281a:	f04f 0300 	mov.w	r3, #0
 801281e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	4618      	mov	r0, r3
 8012826:	3708      	adds	r7, #8
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	08015538 	.word	0x08015538

08012830 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8012830:	b480      	push	{r7}
 8012832:	b08d      	sub	sp, #52	@ 0x34
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801283a:	2300      	movs	r3, #0
 801283c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8012844:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8012848:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801284c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801284e:	6838      	ldr	r0, [r7, #0]
 8012850:	4401      	add	r1, r0
 8012852:	b2d3      	uxtb	r3, r2
 8012854:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8012856:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801285a:	f04f 0200 	mov.w	r2, #0
 801285e:	f04f 0300 	mov.w	r3, #0
 8012862:	0a02      	lsrs	r2, r0, #8
 8012864:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8012868:	0a0b      	lsrs	r3, r1, #8
 801286a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801286c:	3101      	adds	r1, #1
 801286e:	6838      	ldr	r0, [r7, #0]
 8012870:	4401      	add	r1, r0
 8012872:	b2d3      	uxtb	r3, r2
 8012874:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8012876:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801287a:	f04f 0200 	mov.w	r2, #0
 801287e:	f04f 0300 	mov.w	r3, #0
 8012882:	0c02      	lsrs	r2, r0, #16
 8012884:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012888:	0c0b      	lsrs	r3, r1, #16
 801288a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801288c:	3102      	adds	r1, #2
 801288e:	6838      	ldr	r0, [r7, #0]
 8012890:	4401      	add	r1, r0
 8012892:	b2d3      	uxtb	r3, r2
 8012894:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8012896:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801289a:	f04f 0200 	mov.w	r2, #0
 801289e:	f04f 0300 	mov.w	r3, #0
 80128a2:	0e02      	lsrs	r2, r0, #24
 80128a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80128a8:	0e0b      	lsrs	r3, r1, #24
 80128aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80128ac:	3103      	adds	r1, #3
 80128ae:	6838      	ldr	r0, [r7, #0]
 80128b0:	4401      	add	r1, r0
 80128b2:	b2d3      	uxtb	r3, r2
 80128b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80128b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80128ba:	f04f 0200 	mov.w	r2, #0
 80128be:	f04f 0300 	mov.w	r3, #0
 80128c2:	000a      	movs	r2, r1
 80128c4:	2300      	movs	r3, #0
 80128c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80128c8:	3104      	adds	r1, #4
 80128ca:	6838      	ldr	r0, [r7, #0]
 80128cc:	4401      	add	r1, r0
 80128ce:	b2d3      	uxtb	r3, r2
 80128d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80128d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80128d6:	f04f 0200 	mov.w	r2, #0
 80128da:	f04f 0300 	mov.w	r3, #0
 80128de:	0a0a      	lsrs	r2, r1, #8
 80128e0:	2300      	movs	r3, #0
 80128e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80128e4:	3105      	adds	r1, #5
 80128e6:	6838      	ldr	r0, [r7, #0]
 80128e8:	4401      	add	r1, r0
 80128ea:	b2d3      	uxtb	r3, r2
 80128ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80128ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80128f2:	f04f 0200 	mov.w	r2, #0
 80128f6:	f04f 0300 	mov.w	r3, #0
 80128fa:	0c0a      	lsrs	r2, r1, #16
 80128fc:	2300      	movs	r3, #0
 80128fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012900:	3106      	adds	r1, #6
 8012902:	6838      	ldr	r0, [r7, #0]
 8012904:	4401      	add	r1, r0
 8012906:	b2d3      	uxtb	r3, r2
 8012908:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 801290a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801290e:	f04f 0200 	mov.w	r2, #0
 8012912:	f04f 0300 	mov.w	r3, #0
 8012916:	0e0a      	lsrs	r2, r1, #24
 8012918:	2300      	movs	r3, #0
 801291a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801291c:	3107      	adds	r1, #7
 801291e:	6838      	ldr	r0, [r7, #0]
 8012920:	4401      	add	r1, r0
 8012922:	b2d3      	uxtb	r3, r2
 8012924:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8012926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012928:	3308      	adds	r3, #8
 801292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012932:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8012936:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801293a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801293c:	6838      	ldr	r0, [r7, #0]
 801293e:	4401      	add	r1, r0
 8012940:	b2d3      	uxtb	r3, r2
 8012942:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8012944:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012948:	f04f 0200 	mov.w	r2, #0
 801294c:	f04f 0300 	mov.w	r3, #0
 8012950:	0a02      	lsrs	r2, r0, #8
 8012952:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8012956:	0a0b      	lsrs	r3, r1, #8
 8012958:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801295a:	3101      	adds	r1, #1
 801295c:	6838      	ldr	r0, [r7, #0]
 801295e:	4401      	add	r1, r0
 8012960:	b2d3      	uxtb	r3, r2
 8012962:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8012964:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012968:	f04f 0200 	mov.w	r2, #0
 801296c:	f04f 0300 	mov.w	r3, #0
 8012970:	0c02      	lsrs	r2, r0, #16
 8012972:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012976:	0c0b      	lsrs	r3, r1, #16
 8012978:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801297a:	3102      	adds	r1, #2
 801297c:	6838      	ldr	r0, [r7, #0]
 801297e:	4401      	add	r1, r0
 8012980:	b2d3      	uxtb	r3, r2
 8012982:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8012984:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012988:	f04f 0200 	mov.w	r2, #0
 801298c:	f04f 0300 	mov.w	r3, #0
 8012990:	0e02      	lsrs	r2, r0, #24
 8012992:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8012996:	0e0b      	lsrs	r3, r1, #24
 8012998:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801299a:	3103      	adds	r1, #3
 801299c:	6838      	ldr	r0, [r7, #0]
 801299e:	4401      	add	r1, r0
 80129a0:	b2d3      	uxtb	r3, r2
 80129a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80129a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80129a8:	f04f 0200 	mov.w	r2, #0
 80129ac:	f04f 0300 	mov.w	r3, #0
 80129b0:	000a      	movs	r2, r1
 80129b2:	2300      	movs	r3, #0
 80129b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80129b6:	3104      	adds	r1, #4
 80129b8:	6838      	ldr	r0, [r7, #0]
 80129ba:	4401      	add	r1, r0
 80129bc:	b2d3      	uxtb	r3, r2
 80129be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80129c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80129c4:	f04f 0200 	mov.w	r2, #0
 80129c8:	f04f 0300 	mov.w	r3, #0
 80129cc:	0a0a      	lsrs	r2, r1, #8
 80129ce:	2300      	movs	r3, #0
 80129d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80129d2:	3105      	adds	r1, #5
 80129d4:	6838      	ldr	r0, [r7, #0]
 80129d6:	4401      	add	r1, r0
 80129d8:	b2d3      	uxtb	r3, r2
 80129da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80129dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80129e0:	f04f 0200 	mov.w	r2, #0
 80129e4:	f04f 0300 	mov.w	r3, #0
 80129e8:	0c0a      	lsrs	r2, r1, #16
 80129ea:	2300      	movs	r3, #0
 80129ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80129ee:	3106      	adds	r1, #6
 80129f0:	6838      	ldr	r0, [r7, #0]
 80129f2:	4401      	add	r1, r0
 80129f4:	b2d3      	uxtb	r3, r2
 80129f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80129f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80129fc:	f04f 0200 	mov.w	r2, #0
 8012a00:	f04f 0300 	mov.w	r3, #0
 8012a04:	0e0a      	lsrs	r2, r1, #24
 8012a06:	2300      	movs	r3, #0
 8012a08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a0a:	3107      	adds	r1, #7
 8012a0c:	6838      	ldr	r0, [r7, #0]
 8012a0e:	4401      	add	r1, r0
 8012a10:	b2d3      	uxtb	r3, r2
 8012a12:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8012a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a16:	3308      	adds	r3, #8
 8012a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8012a20:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8012a24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012a28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a2a:	6838      	ldr	r0, [r7, #0]
 8012a2c:	4401      	add	r1, r0
 8012a2e:	b2d3      	uxtb	r3, r2
 8012a30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8012a32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012a36:	f04f 0200 	mov.w	r2, #0
 8012a3a:	f04f 0300 	mov.w	r3, #0
 8012a3e:	0a02      	lsrs	r2, r0, #8
 8012a40:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8012a44:	0a0b      	lsrs	r3, r1, #8
 8012a46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a48:	3101      	adds	r1, #1
 8012a4a:	6838      	ldr	r0, [r7, #0]
 8012a4c:	4401      	add	r1, r0
 8012a4e:	b2d3      	uxtb	r3, r2
 8012a50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8012a52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012a56:	f04f 0200 	mov.w	r2, #0
 8012a5a:	f04f 0300 	mov.w	r3, #0
 8012a5e:	0c02      	lsrs	r2, r0, #16
 8012a60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012a64:	0c0b      	lsrs	r3, r1, #16
 8012a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a68:	3102      	adds	r1, #2
 8012a6a:	6838      	ldr	r0, [r7, #0]
 8012a6c:	4401      	add	r1, r0
 8012a6e:	b2d3      	uxtb	r3, r2
 8012a70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8012a72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012a76:	f04f 0200 	mov.w	r2, #0
 8012a7a:	f04f 0300 	mov.w	r3, #0
 8012a7e:	0e02      	lsrs	r2, r0, #24
 8012a80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8012a84:	0e0b      	lsrs	r3, r1, #24
 8012a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a88:	3103      	adds	r1, #3
 8012a8a:	6838      	ldr	r0, [r7, #0]
 8012a8c:	4401      	add	r1, r0
 8012a8e:	b2d3      	uxtb	r3, r2
 8012a90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8012a92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012a96:	f04f 0200 	mov.w	r2, #0
 8012a9a:	f04f 0300 	mov.w	r3, #0
 8012a9e:	000a      	movs	r2, r1
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012aa4:	3104      	adds	r1, #4
 8012aa6:	6838      	ldr	r0, [r7, #0]
 8012aa8:	4401      	add	r1, r0
 8012aaa:	b2d3      	uxtb	r3, r2
 8012aac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8012aae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012ab2:	f04f 0200 	mov.w	r2, #0
 8012ab6:	f04f 0300 	mov.w	r3, #0
 8012aba:	0a0a      	lsrs	r2, r1, #8
 8012abc:	2300      	movs	r3, #0
 8012abe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012ac0:	3105      	adds	r1, #5
 8012ac2:	6838      	ldr	r0, [r7, #0]
 8012ac4:	4401      	add	r1, r0
 8012ac6:	b2d3      	uxtb	r3, r2
 8012ac8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8012aca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012ace:	f04f 0200 	mov.w	r2, #0
 8012ad2:	f04f 0300 	mov.w	r3, #0
 8012ad6:	0c0a      	lsrs	r2, r1, #16
 8012ad8:	2300      	movs	r3, #0
 8012ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012adc:	3106      	adds	r1, #6
 8012ade:	6838      	ldr	r0, [r7, #0]
 8012ae0:	4401      	add	r1, r0
 8012ae2:	b2d3      	uxtb	r3, r2
 8012ae4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8012ae6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012aea:	f04f 0200 	mov.w	r2, #0
 8012aee:	f04f 0300 	mov.w	r3, #0
 8012af2:	0e0a      	lsrs	r2, r1, #24
 8012af4:	2300      	movs	r3, #0
 8012af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012af8:	3107      	adds	r1, #7
 8012afa:	6838      	ldr	r0, [r7, #0]
 8012afc:	4401      	add	r1, r0
 8012afe:	b2d3      	uxtb	r3, r2
 8012b00:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8012b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b04:	3308      	adds	r3, #8
 8012b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012b0e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8012b12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012b18:	6838      	ldr	r0, [r7, #0]
 8012b1a:	4401      	add	r1, r0
 8012b1c:	b2d3      	uxtb	r3, r2
 8012b1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8012b20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012b24:	f04f 0200 	mov.w	r2, #0
 8012b28:	f04f 0300 	mov.w	r3, #0
 8012b2c:	0a02      	lsrs	r2, r0, #8
 8012b2e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8012b32:	0a0b      	lsrs	r3, r1, #8
 8012b34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012b36:	3101      	adds	r1, #1
 8012b38:	6838      	ldr	r0, [r7, #0]
 8012b3a:	4401      	add	r1, r0
 8012b3c:	b2d3      	uxtb	r3, r2
 8012b3e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8012b40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012b44:	f04f 0200 	mov.w	r2, #0
 8012b48:	f04f 0300 	mov.w	r3, #0
 8012b4c:	0c02      	lsrs	r2, r0, #16
 8012b4e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012b52:	0c0b      	lsrs	r3, r1, #16
 8012b54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012b56:	3102      	adds	r1, #2
 8012b58:	6838      	ldr	r0, [r7, #0]
 8012b5a:	4401      	add	r1, r0
 8012b5c:	b2d3      	uxtb	r3, r2
 8012b5e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8012b60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012b64:	f04f 0200 	mov.w	r2, #0
 8012b68:	f04f 0300 	mov.w	r3, #0
 8012b6c:	0e02      	lsrs	r2, r0, #24
 8012b6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8012b72:	0e0b      	lsrs	r3, r1, #24
 8012b74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012b76:	3103      	adds	r1, #3
 8012b78:	6838      	ldr	r0, [r7, #0]
 8012b7a:	4401      	add	r1, r0
 8012b7c:	b2d3      	uxtb	r3, r2
 8012b7e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8012b80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012b84:	f04f 0200 	mov.w	r2, #0
 8012b88:	f04f 0300 	mov.w	r3, #0
 8012b8c:	000a      	movs	r2, r1
 8012b8e:	2300      	movs	r3, #0
 8012b90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012b92:	3104      	adds	r1, #4
 8012b94:	6838      	ldr	r0, [r7, #0]
 8012b96:	4401      	add	r1, r0
 8012b98:	b2d3      	uxtb	r3, r2
 8012b9a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8012b9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012ba0:	f04f 0200 	mov.w	r2, #0
 8012ba4:	f04f 0300 	mov.w	r3, #0
 8012ba8:	0a0a      	lsrs	r2, r1, #8
 8012baa:	2300      	movs	r3, #0
 8012bac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012bae:	3105      	adds	r1, #5
 8012bb0:	6838      	ldr	r0, [r7, #0]
 8012bb2:	4401      	add	r1, r0
 8012bb4:	b2d3      	uxtb	r3, r2
 8012bb6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8012bb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012bbc:	f04f 0200 	mov.w	r2, #0
 8012bc0:	f04f 0300 	mov.w	r3, #0
 8012bc4:	0c0a      	lsrs	r2, r1, #16
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012bca:	3106      	adds	r1, #6
 8012bcc:	6838      	ldr	r0, [r7, #0]
 8012bce:	4401      	add	r1, r0
 8012bd0:	b2d3      	uxtb	r3, r2
 8012bd2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8012bd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012bd8:	f04f 0200 	mov.w	r2, #0
 8012bdc:	f04f 0300 	mov.w	r3, #0
 8012be0:	0e0a      	lsrs	r2, r1, #24
 8012be2:	2300      	movs	r3, #0
 8012be4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012be6:	3107      	adds	r1, #7
 8012be8:	6838      	ldr	r0, [r7, #0]
 8012bea:	4401      	add	r1, r0
 8012bec:	b2d3      	uxtb	r3, r2
 8012bee:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8012bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bf2:	3308      	adds	r3, #8
 8012bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      return offset;
 8012bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3734      	adds	r7, #52	@ 0x34
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c02:	4770      	bx	lr

08012c04 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8012c04:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012c08:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
 8012c12:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
    {
      int offset = 0;
 8012c16:	2300      	movs	r3, #0
 8012c18:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8012c1c:	f04f 0200 	mov.w	r2, #0
 8012c20:	f04f 0300 	mov.w	r3, #0
 8012c24:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8012c28:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8012c2c:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8012c30:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012c34:	4413      	add	r3, r2
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	b2db      	uxtb	r3, r3
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	461c      	mov	r4, r3
 8012c3e:	4615      	mov	r5, r2
 8012c40:	ea40 0804 	orr.w	r8, r0, r4
 8012c44:	ea41 0905 	orr.w	r9, r1, r5
 8012c48:	e9c7 898a 	strd	r8, r9, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8012c4c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8012c50:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012c54:	1c5a      	adds	r2, r3, #1
 8012c56:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012c5a:	4413      	add	r3, r2
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	b2db      	uxtb	r3, r3
 8012c60:	2200      	movs	r2, #0
 8012c62:	469a      	mov	sl, r3
 8012c64:	4693      	mov	fp, r2
 8012c66:	f04f 0200 	mov.w	r2, #0
 8012c6a:	f04f 0300 	mov.w	r3, #0
 8012c6e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8012c72:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8012c76:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8012c7a:	ea40 0402 	orr.w	r4, r0, r2
 8012c7e:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 8012c82:	430b      	orrs	r3, r1
 8012c84:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8012c88:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 8012c8c:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8012c90:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8012c94:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012c98:	1c9a      	adds	r2, r3, #2
 8012c9a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012c9e:	4413      	add	r3, r2
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	b2db      	uxtb	r3, r3
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8012caa:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8012cae:	f04f 0200 	mov.w	r2, #0
 8012cb2:	f04f 0300 	mov.w	r3, #0
 8012cb6:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8012cba:	464c      	mov	r4, r9
 8012cbc:	0423      	lsls	r3, r4, #16
 8012cbe:	4644      	mov	r4, r8
 8012cc0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8012cc4:	4644      	mov	r4, r8
 8012cc6:	0422      	lsls	r2, r4, #16
 8012cc8:	ea40 0402 	orr.w	r4, r0, r2
 8012ccc:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 8012cd0:	430b      	orrs	r3, r1
 8012cd2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8012cd6:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 8012cda:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8012cde:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8012ce2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012ce6:	1cda      	adds	r2, r3, #3
 8012ce8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012cec:	4413      	add	r3, r2
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	b2db      	uxtb	r3, r3
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8012cf8:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8012cfc:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8012d00:	4623      	mov	r3, r4
 8012d02:	0a1b      	lsrs	r3, r3, #8
 8012d04:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8012d08:	4623      	mov	r3, r4
 8012d0a:	061b      	lsls	r3, r3, #24
 8012d0c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8012d10:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	@ 0x1e0
 8012d14:	4623      	mov	r3, r4
 8012d16:	4303      	orrs	r3, r0
 8012d18:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8012d1c:	462b      	mov	r3, r5
 8012d1e:	430b      	orrs	r3, r1
 8012d20:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8012d24:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8012d28:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8012d2c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8012d30:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012d34:	1d1a      	adds	r2, r3, #4
 8012d36:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012d3a:	4413      	add	r3, r2
 8012d3c:	781b      	ldrb	r3, [r3, #0]
 8012d3e:	b2db      	uxtb	r3, r3
 8012d40:	2200      	movs	r2, #0
 8012d42:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8012d46:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8012d4a:	f04f 0200 	mov.w	r2, #0
 8012d4e:	f04f 0300 	mov.w	r3, #0
 8012d52:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 8012d56:	0023      	movs	r3, r4
 8012d58:	2200      	movs	r2, #0
 8012d5a:	ea40 0402 	orr.w	r4, r0, r2
 8012d5e:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 8012d62:	430b      	orrs	r3, r1
 8012d64:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8012d68:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 8012d6c:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8012d70:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8012d74:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012d78:	1d5a      	adds	r2, r3, #5
 8012d7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012d7e:	4413      	add	r3, r2
 8012d80:	781b      	ldrb	r3, [r3, #0]
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	2200      	movs	r2, #0
 8012d86:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8012d8a:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8012d8e:	f04f 0200 	mov.w	r2, #0
 8012d92:	f04f 0300 	mov.w	r3, #0
 8012d96:	f8d7 41c0 	ldr.w	r4, [r7, #448]	@ 0x1c0
 8012d9a:	0223      	lsls	r3, r4, #8
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	ea40 0402 	orr.w	r4, r0, r2
 8012da2:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 8012da6:	430b      	orrs	r3, r1
 8012da8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8012dac:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8012db0:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8012db4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8012db8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012dbc:	1d9a      	adds	r2, r3, #6
 8012dbe:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012dc2:	4413      	add	r3, r2
 8012dc4:	781b      	ldrb	r3, [r3, #0]
 8012dc6:	b2db      	uxtb	r3, r3
 8012dc8:	2200      	movs	r2, #0
 8012dca:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8012dce:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8012dd2:	f04f 0200 	mov.w	r2, #0
 8012dd6:	f04f 0300 	mov.w	r3, #0
 8012dda:	f8d7 41b0 	ldr.w	r4, [r7, #432]	@ 0x1b0
 8012dde:	0423      	lsls	r3, r4, #16
 8012de0:	2200      	movs	r2, #0
 8012de2:	ea40 0402 	orr.w	r4, r0, r2
 8012de6:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8012dea:	430b      	orrs	r3, r1
 8012dec:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8012df0:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8012df4:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8012df8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8012dfc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012e00:	1dda      	adds	r2, r3, #7
 8012e02:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012e06:	4413      	add	r3, r2
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8012e12:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8012e16:	f04f 0200 	mov.w	r2, #0
 8012e1a:	f04f 0300 	mov.w	r3, #0
 8012e1e:	f8d7 41a0 	ldr.w	r4, [r7, #416]	@ 0x1a0
 8012e22:	0623      	lsls	r3, r4, #24
 8012e24:	2200      	movs	r2, #0
 8012e26:	ea40 0402 	orr.w	r4, r0, r2
 8012e2a:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 8012e2e:	430b      	orrs	r3, r1
 8012e30:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8012e34:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8012e38:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      this->x = u_x.real;
 8012e3c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8012e40:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8012e44:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8012e48:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012e4c:	3308      	adds	r3, #8
 8012e4e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8012e52:	f04f 0200 	mov.w	r2, #0
 8012e56:	f04f 0300 	mov.w	r3, #0
 8012e5a:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8012e5e:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8012e62:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8012e66:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012e6a:	4413      	add	r3, r2
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	2200      	movs	r2, #0
 8012e72:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8012e76:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8012e7a:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 8012e7e:	4623      	mov	r3, r4
 8012e80:	4303      	orrs	r3, r0
 8012e82:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8012e86:	462b      	mov	r3, r5
 8012e88:	430b      	orrs	r3, r1
 8012e8a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8012e8e:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8012e92:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8012e96:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8012e9a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012e9e:	1c5a      	adds	r2, r3, #1
 8012ea0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012ea4:	4413      	add	r3, r2
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	2200      	movs	r2, #0
 8012eac:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8012eb0:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8012eb4:	f04f 0200 	mov.w	r2, #0
 8012eb8:	f04f 0300 	mov.w	r3, #0
 8012ebc:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8012ec0:	464c      	mov	r4, r9
 8012ec2:	0223      	lsls	r3, r4, #8
 8012ec4:	4644      	mov	r4, r8
 8012ec6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8012eca:	4644      	mov	r4, r8
 8012ecc:	0222      	lsls	r2, r4, #8
 8012ece:	ea40 0402 	orr.w	r4, r0, r2
 8012ed2:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8012ed6:	430b      	orrs	r3, r1
 8012ed8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8012edc:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8012ee0:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8012ee4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8012ee8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012eec:	1c9a      	adds	r2, r3, #2
 8012eee:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012ef2:	4413      	add	r3, r2
 8012ef4:	781b      	ldrb	r3, [r3, #0]
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8012efe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8012f02:	f04f 0200 	mov.w	r2, #0
 8012f06:	f04f 0300 	mov.w	r3, #0
 8012f0a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8012f0e:	464c      	mov	r4, r9
 8012f10:	0423      	lsls	r3, r4, #16
 8012f12:	4644      	mov	r4, r8
 8012f14:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8012f18:	4644      	mov	r4, r8
 8012f1a:	0422      	lsls	r2, r4, #16
 8012f1c:	ea40 0402 	orr.w	r4, r0, r2
 8012f20:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8012f24:	430b      	orrs	r3, r1
 8012f26:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8012f2a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8012f2e:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8012f32:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8012f36:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012f3a:	1cda      	adds	r2, r3, #3
 8012f3c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012f40:	4413      	add	r3, r2
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	b2db      	uxtb	r3, r3
 8012f46:	2200      	movs	r2, #0
 8012f48:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8012f4c:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8012f50:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8012f54:	4623      	mov	r3, r4
 8012f56:	0a1b      	lsrs	r3, r3, #8
 8012f58:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8012f5c:	4623      	mov	r3, r4
 8012f5e:	061b      	lsls	r3, r3, #24
 8012f60:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8012f64:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8012f68:	4623      	mov	r3, r4
 8012f6a:	4303      	orrs	r3, r0
 8012f6c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8012f70:	462b      	mov	r3, r5
 8012f72:	430b      	orrs	r3, r1
 8012f74:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8012f78:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8012f7c:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8012f80:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8012f84:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012f88:	1d1a      	adds	r2, r3, #4
 8012f8a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012f8e:	4413      	add	r3, r2
 8012f90:	781b      	ldrb	r3, [r3, #0]
 8012f92:	b2db      	uxtb	r3, r3
 8012f94:	2200      	movs	r2, #0
 8012f96:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8012f9a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8012f9e:	f04f 0200 	mov.w	r2, #0
 8012fa2:	f04f 0300 	mov.w	r3, #0
 8012fa6:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8012faa:	0023      	movs	r3, r4
 8012fac:	2200      	movs	r2, #0
 8012fae:	ea40 0402 	orr.w	r4, r0, r2
 8012fb2:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8012fb6:	430b      	orrs	r3, r1
 8012fb8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8012fbc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8012fc0:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8012fc4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8012fc8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8012fcc:	1d5a      	adds	r2, r3, #5
 8012fce:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012fd2:	4413      	add	r3, r2
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	b2db      	uxtb	r3, r3
 8012fd8:	2200      	movs	r2, #0
 8012fda:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8012fde:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8012fe2:	f04f 0200 	mov.w	r2, #0
 8012fe6:	f04f 0300 	mov.w	r3, #0
 8012fea:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8012fee:	0223      	lsls	r3, r4, #8
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	ea40 0402 	orr.w	r4, r0, r2
 8012ff6:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8012ffa:	430b      	orrs	r3, r1
 8012ffc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013000:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8013004:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8013008:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 801300c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8013010:	1d9a      	adds	r2, r3, #6
 8013012:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8013016:	4413      	add	r3, r2
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	b2db      	uxtb	r3, r3
 801301c:	2200      	movs	r2, #0
 801301e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8013022:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8013026:	f04f 0200 	mov.w	r2, #0
 801302a:	f04f 0300 	mov.w	r3, #0
 801302e:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8013032:	0423      	lsls	r3, r4, #16
 8013034:	2200      	movs	r2, #0
 8013036:	ea40 0402 	orr.w	r4, r0, r2
 801303a:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 801303e:	430b      	orrs	r3, r1
 8013040:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8013044:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8013048:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 801304c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8013050:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8013054:	1dda      	adds	r2, r3, #7
 8013056:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801305a:	4413      	add	r3, r2
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	b2db      	uxtb	r3, r3
 8013060:	2200      	movs	r2, #0
 8013062:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8013066:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801306a:	f04f 0200 	mov.w	r2, #0
 801306e:	f04f 0300 	mov.w	r3, #0
 8013072:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8013076:	0623      	lsls	r3, r4, #24
 8013078:	2200      	movs	r2, #0
 801307a:	ea40 0402 	orr.w	r4, r0, r2
 801307e:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8013082:	430b      	orrs	r3, r1
 8013084:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8013088:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 801308c:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      this->y = u_y.real;
 8013090:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8013094:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8013098:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 801309c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80130a0:	3308      	adds	r3, #8
 80130a2:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80130a6:	f04f 0200 	mov.w	r2, #0
 80130aa:	f04f 0300 	mov.w	r3, #0
 80130ae:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80130b2:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80130b6:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 80130ba:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80130be:	4413      	add	r3, r2
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	b2db      	uxtb	r3, r3
 80130c4:	2200      	movs	r2, #0
 80130c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80130ca:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80130ce:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80130d2:	4623      	mov	r3, r4
 80130d4:	4303      	orrs	r3, r0
 80130d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80130da:	462b      	mov	r3, r5
 80130dc:	430b      	orrs	r3, r1
 80130de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80130e2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 80130e6:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80130ea:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80130ee:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80130f2:	1c5a      	adds	r2, r3, #1
 80130f4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80130f8:	4413      	add	r3, r2
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	b2db      	uxtb	r3, r3
 80130fe:	2200      	movs	r2, #0
 8013100:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8013104:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8013108:	f04f 0200 	mov.w	r2, #0
 801310c:	f04f 0300 	mov.w	r3, #0
 8013110:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8013114:	464c      	mov	r4, r9
 8013116:	0223      	lsls	r3, r4, #8
 8013118:	4644      	mov	r4, r8
 801311a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801311e:	4644      	mov	r4, r8
 8013120:	0222      	lsls	r2, r4, #8
 8013122:	ea40 0402 	orr.w	r4, r0, r2
 8013126:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 801312a:	430b      	orrs	r3, r1
 801312c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8013130:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8013134:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8013138:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 801313c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8013140:	1c9a      	adds	r2, r3, #2
 8013142:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8013146:	4413      	add	r3, r2
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	b2db      	uxtb	r3, r3
 801314c:	2200      	movs	r2, #0
 801314e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8013152:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8013156:	f04f 0200 	mov.w	r2, #0
 801315a:	f04f 0300 	mov.w	r3, #0
 801315e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8013162:	464c      	mov	r4, r9
 8013164:	0423      	lsls	r3, r4, #16
 8013166:	4644      	mov	r4, r8
 8013168:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 801316c:	4644      	mov	r4, r8
 801316e:	0422      	lsls	r2, r4, #16
 8013170:	ea40 0402 	orr.w	r4, r0, r2
 8013174:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8013178:	430b      	orrs	r3, r1
 801317a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801317e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8013182:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8013186:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 801318a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801318e:	1cda      	adds	r2, r3, #3
 8013190:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8013194:	4413      	add	r3, r2
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	b2db      	uxtb	r3, r3
 801319a:	2200      	movs	r2, #0
 801319c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80131a0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80131a4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80131a8:	4623      	mov	r3, r4
 80131aa:	0a1b      	lsrs	r3, r3, #8
 80131ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80131b0:	4623      	mov	r3, r4
 80131b2:	061b      	lsls	r3, r3, #24
 80131b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80131b8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80131bc:	4623      	mov	r3, r4
 80131be:	4303      	orrs	r3, r0
 80131c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80131c4:	462b      	mov	r3, r5
 80131c6:	430b      	orrs	r3, r1
 80131c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80131cc:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 80131d0:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80131d4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80131d8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80131dc:	1d1a      	adds	r2, r3, #4
 80131de:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80131e2:	4413      	add	r3, r2
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	2200      	movs	r2, #0
 80131ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80131ee:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80131f2:	f04f 0200 	mov.w	r2, #0
 80131f6:	f04f 0300 	mov.w	r3, #0
 80131fa:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 80131fe:	0023      	movs	r3, r4
 8013200:	2200      	movs	r2, #0
 8013202:	ea40 0402 	orr.w	r4, r0, r2
 8013206:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 801320a:	430b      	orrs	r3, r1
 801320c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8013210:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8013214:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8013218:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 801321c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8013220:	1d5a      	adds	r2, r3, #5
 8013222:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8013226:	4413      	add	r3, r2
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	b2db      	uxtb	r3, r3
 801322c:	2200      	movs	r2, #0
 801322e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013232:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8013236:	f04f 0200 	mov.w	r2, #0
 801323a:	f04f 0300 	mov.w	r3, #0
 801323e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8013242:	0223      	lsls	r3, r4, #8
 8013244:	2200      	movs	r2, #0
 8013246:	ea40 0402 	orr.w	r4, r0, r2
 801324a:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 801324e:	430b      	orrs	r3, r1
 8013250:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013254:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8013258:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 801325c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8013260:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8013264:	1d9a      	adds	r2, r3, #6
 8013266:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801326a:	4413      	add	r3, r2
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	b2db      	uxtb	r3, r3
 8013270:	2200      	movs	r2, #0
 8013272:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8013276:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801327a:	f04f 0200 	mov.w	r2, #0
 801327e:	f04f 0300 	mov.w	r3, #0
 8013282:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8013286:	0423      	lsls	r3, r4, #16
 8013288:	2200      	movs	r2, #0
 801328a:	ea40 0402 	orr.w	r4, r0, r2
 801328e:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8013292:	430b      	orrs	r3, r1
 8013294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013298:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 801329c:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80132a0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80132a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80132a8:	1dda      	adds	r2, r3, #7
 80132aa:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80132ae:	4413      	add	r3, r2
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	2200      	movs	r2, #0
 80132b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80132ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80132be:	f04f 0200 	mov.w	r2, #0
 80132c2:	f04f 0300 	mov.w	r3, #0
 80132c6:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 80132ca:	0623      	lsls	r3, r4, #24
 80132cc:	2200      	movs	r2, #0
 80132ce:	ea40 0402 	orr.w	r4, r0, r2
 80132d2:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 80132d6:	430b      	orrs	r3, r1
 80132d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80132dc:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 80132e0:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      this->z = u_z.real;
 80132e4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80132e8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80132ec:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 80132f0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80132f4:	3308      	adds	r3, #8
 80132f6:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 80132fa:	f04f 0200 	mov.w	r2, #0
 80132fe:	f04f 0300 	mov.w	r3, #0
 8013302:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8013306:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 801330a:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801330e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8013312:	4413      	add	r3, r2
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	b2db      	uxtb	r3, r3
 8013318:	2200      	movs	r2, #0
 801331a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801331e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8013322:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8013326:	4623      	mov	r3, r4
 8013328:	4303      	orrs	r3, r0
 801332a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801332c:	462b      	mov	r3, r5
 801332e:	430b      	orrs	r3, r1
 8013330:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013332:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8013336:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 801333a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 801333e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8013342:	1c5a      	adds	r2, r3, #1
 8013344:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8013348:	4413      	add	r3, r2
 801334a:	781b      	ldrb	r3, [r3, #0]
 801334c:	b2db      	uxtb	r3, r3
 801334e:	2200      	movs	r2, #0
 8013350:	673b      	str	r3, [r7, #112]	@ 0x70
 8013352:	677a      	str	r2, [r7, #116]	@ 0x74
 8013354:	f04f 0200 	mov.w	r2, #0
 8013358:	f04f 0300 	mov.w	r3, #0
 801335c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8013360:	464c      	mov	r4, r9
 8013362:	0223      	lsls	r3, r4, #8
 8013364:	4644      	mov	r4, r8
 8013366:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801336a:	4644      	mov	r4, r8
 801336c:	0222      	lsls	r2, r4, #8
 801336e:	ea40 0402 	orr.w	r4, r0, r2
 8013372:	66bc      	str	r4, [r7, #104]	@ 0x68
 8013374:	430b      	orrs	r3, r1
 8013376:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013378:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 801337c:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8013380:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8013384:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8013388:	1c9a      	adds	r2, r3, #2
 801338a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801338e:	4413      	add	r3, r2
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	b2db      	uxtb	r3, r3
 8013394:	2200      	movs	r2, #0
 8013396:	663b      	str	r3, [r7, #96]	@ 0x60
 8013398:	667a      	str	r2, [r7, #100]	@ 0x64
 801339a:	f04f 0200 	mov.w	r2, #0
 801339e:	f04f 0300 	mov.w	r3, #0
 80133a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80133a6:	464c      	mov	r4, r9
 80133a8:	0423      	lsls	r3, r4, #16
 80133aa:	4644      	mov	r4, r8
 80133ac:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80133b0:	4644      	mov	r4, r8
 80133b2:	0422      	lsls	r2, r4, #16
 80133b4:	ea40 0402 	orr.w	r4, r0, r2
 80133b8:	65bc      	str	r4, [r7, #88]	@ 0x58
 80133ba:	430b      	orrs	r3, r1
 80133bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80133be:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80133c2:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80133c6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80133ca:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80133ce:	1cda      	adds	r2, r3, #3
 80133d0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80133d4:	4413      	add	r3, r2
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	b2db      	uxtb	r3, r3
 80133da:	2200      	movs	r2, #0
 80133dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80133de:	657a      	str	r2, [r7, #84]	@ 0x54
 80133e0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80133e4:	4623      	mov	r3, r4
 80133e6:	0a1b      	lsrs	r3, r3, #8
 80133e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80133ea:	4623      	mov	r3, r4
 80133ec:	061b      	lsls	r3, r3, #24
 80133ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80133f0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80133f4:	4623      	mov	r3, r4
 80133f6:	4303      	orrs	r3, r0
 80133f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80133fa:	462b      	mov	r3, r5
 80133fc:	430b      	orrs	r3, r1
 80133fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8013400:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8013404:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8013408:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 801340c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8013410:	1d1a      	adds	r2, r3, #4
 8013412:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8013416:	4413      	add	r3, r2
 8013418:	781b      	ldrb	r3, [r3, #0]
 801341a:	b2db      	uxtb	r3, r3
 801341c:	2200      	movs	r2, #0
 801341e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013420:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8013422:	f04f 0200 	mov.w	r2, #0
 8013426:	f04f 0300 	mov.w	r3, #0
 801342a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801342c:	0023      	movs	r3, r4
 801342e:	2200      	movs	r2, #0
 8013430:	ea40 0402 	orr.w	r4, r0, r2
 8013434:	633c      	str	r4, [r7, #48]	@ 0x30
 8013436:	430b      	orrs	r3, r1
 8013438:	637b      	str	r3, [r7, #52]	@ 0x34
 801343a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 801343e:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8013442:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8013446:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801344a:	1d5a      	adds	r2, r3, #5
 801344c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8013450:	4413      	add	r3, r2
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	b2db      	uxtb	r3, r3
 8013456:	2200      	movs	r2, #0
 8013458:	62bb      	str	r3, [r7, #40]	@ 0x28
 801345a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801345c:	f04f 0200 	mov.w	r2, #0
 8013460:	f04f 0300 	mov.w	r3, #0
 8013464:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8013466:	0223      	lsls	r3, r4, #8
 8013468:	2200      	movs	r2, #0
 801346a:	ea40 0402 	orr.w	r4, r0, r2
 801346e:	623c      	str	r4, [r7, #32]
 8013470:	430b      	orrs	r3, r1
 8013472:	627b      	str	r3, [r7, #36]	@ 0x24
 8013474:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013478:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 801347c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8013480:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8013484:	3306      	adds	r3, #6
 8013486:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 801348a:	4413      	add	r3, r2
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	b2db      	uxtb	r3, r3
 8013490:	2200      	movs	r2, #0
 8013492:	61bb      	str	r3, [r7, #24]
 8013494:	61fa      	str	r2, [r7, #28]
 8013496:	f04f 0200 	mov.w	r2, #0
 801349a:	f04f 0300 	mov.w	r3, #0
 801349e:	69bc      	ldr	r4, [r7, #24]
 80134a0:	0423      	lsls	r3, r4, #16
 80134a2:	2200      	movs	r2, #0
 80134a4:	ea40 0402 	orr.w	r4, r0, r2
 80134a8:	613c      	str	r4, [r7, #16]
 80134aa:	430b      	orrs	r3, r1
 80134ac:	617b      	str	r3, [r7, #20]
 80134ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80134b2:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80134b6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80134ba:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80134be:	3307      	adds	r3, #7
 80134c0:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80134c4:	4413      	add	r3, r2
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	2200      	movs	r2, #0
 80134cc:	60bb      	str	r3, [r7, #8]
 80134ce:	60fa      	str	r2, [r7, #12]
 80134d0:	f04f 0200 	mov.w	r2, #0
 80134d4:	f04f 0300 	mov.w	r3, #0
 80134d8:	68bc      	ldr	r4, [r7, #8]
 80134da:	0623      	lsls	r3, r4, #24
 80134dc:	2200      	movs	r2, #0
 80134de:	ea40 0402 	orr.w	r4, r0, r2
 80134e2:	603c      	str	r4, [r7, #0]
 80134e4:	430b      	orrs	r3, r1
 80134e6:	607b      	str	r3, [r7, #4]
 80134e8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80134ec:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      this->w = u_w.real;
 80134f0:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 80134f4:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 80134f8:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 80134fc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8013500:	3308      	adds	r3, #8
 8013502:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
     return offset;
 8013506:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
    }
 801350a:	4618      	mov	r0, r3
 801350c:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 8013510:	46bd      	mov	sp, r7
 8013512:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8013516:	4770      	bx	lr

08013518 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8013518:	b480      	push	{r7}
 801351a:	b083      	sub	sp, #12
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	4b03      	ldr	r3, [pc, #12]	@ (8013530 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8013522:	4618      	mov	r0, r3
 8013524:	370c      	adds	r7, #12
 8013526:	46bd      	mov	sp, r7
 8013528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352c:	4770      	bx	lr
 801352e:	bf00      	nop
 8013530:	080152bc 	.word	0x080152bc

08013534 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8013534:	b480      	push	{r7}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
 801353c:	4b03      	ldr	r3, [pc, #12]	@ (801354c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 801353e:	4618      	mov	r0, r3
 8013540:	370c      	adds	r7, #12
 8013542:	46bd      	mov	sp, r7
 8013544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013548:	4770      	bx	lr
 801354a:	bf00      	nop
 801354c:	080152d8 	.word	0x080152d8

08013550 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8013550:	b580      	push	{r7, lr}
 8013552:	b082      	sub	sp, #8
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	4618      	mov	r0, r3
 801355c:	f7fc fe5a 	bl	8010214 <_ZN3ros3MsgC1Ev>
 8013560:	4a08      	ldr	r2, [pc, #32]	@ (8013584 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	601a      	str	r2, [r3, #0]
      position(),
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	3308      	adds	r3, #8
 801356a:	4618      	mov	r0, r3
 801356c:	f7fe fc1c 	bl	8011da8 <_ZN13geometry_msgs5PointC1Ev>
      orientation()
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	3328      	adds	r3, #40	@ 0x28
 8013574:	4618      	mov	r0, r3
 8013576:	f7ff f92d 	bl	80127d4 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	4618      	mov	r0, r3
 801357e:	3708      	adds	r7, #8
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}
 8013584:	08015520 	.word	0x08015520

08013588 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8013588:	b580      	push	{r7, lr}
 801358a:	b084      	sub	sp, #16
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8013592:	2300      	movs	r3, #0
 8013594:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f103 0008 	add.w	r0, r3, #8
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	683a      	ldr	r2, [r7, #0]
 80135a0:	4413      	add	r3, r2
 80135a2:	4619      	mov	r1, r3
 80135a4:	f7fe fc28 	bl	8011df8 <_ZNK13geometry_msgs5Point9serializeEPh>
 80135a8:	4602      	mov	r2, r0
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	4413      	add	r3, r2
 80135ae:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	683a      	ldr	r2, [r7, #0]
 80135ba:	4413      	add	r3, r2
 80135bc:	4619      	mov	r1, r3
 80135be:	f7ff f937 	bl	8012830 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80135c2:	4602      	mov	r2, r0
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	4413      	add	r3, r2
 80135c8:	60fb      	str	r3, [r7, #12]
      return offset;
 80135ca:	68fb      	ldr	r3, [r7, #12]
    }
 80135cc:	4618      	mov	r0, r3
 80135ce:	3710      	adds	r7, #16
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}

080135d4 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b084      	sub	sp, #16
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80135de:	2300      	movs	r3, #0
 80135e0:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f103 0008 	add.w	r0, r3, #8
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	683a      	ldr	r2, [r7, #0]
 80135ec:	4413      	add	r3, r2
 80135ee:	4619      	mov	r1, r3
 80135f0:	f7fe fd75 	bl	80120de <_ZN13geometry_msgs5Point11deserializeEPh>
 80135f4:	4602      	mov	r2, r0
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	4413      	add	r3, r2
 80135fa:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	683a      	ldr	r2, [r7, #0]
 8013606:	4413      	add	r3, r2
 8013608:	4619      	mov	r1, r3
 801360a:	f7ff fafb 	bl	8012c04 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 801360e:	4602      	mov	r2, r0
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	4413      	add	r3, r2
 8013614:	60fb      	str	r3, [r7, #12]
     return offset;
 8013616:	68fb      	ldr	r3, [r7, #12]
    }
 8013618:	4618      	mov	r0, r3
 801361a:	3710      	adds	r7, #16
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 8013620:	b480      	push	{r7}
 8013622:	b083      	sub	sp, #12
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	4b03      	ldr	r3, [pc, #12]	@ (8013638 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 801362a:	4618      	mov	r0, r3
 801362c:	370c      	adds	r7, #12
 801362e:	46bd      	mov	sp, r7
 8013630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013634:	4770      	bx	lr
 8013636:	bf00      	nop
 8013638:	080152fc 	.word	0x080152fc

0801363c <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 801363c:	b480      	push	{r7}
 801363e:	b083      	sub	sp, #12
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	4b03      	ldr	r3, [pc, #12]	@ (8013654 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8013646:	4618      	mov	r0, r3
 8013648:	370c      	adds	r7, #12
 801364a:	46bd      	mov	sp, r7
 801364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013650:	4770      	bx	lr
 8013652:	bf00      	nop
 8013654:	08015310 	.word	0x08015310

08013658 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 8013658:	b580      	push	{r7, lr}
 801365a:	b082      	sub	sp, #8
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
      data(0)
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	4618      	mov	r0, r3
 8013664:	f7fc fdd6 	bl	8010214 <_ZN3ros3MsgC1Ev>
 8013668:	4a05      	ldr	r2, [pc, #20]	@ (8013680 <_ZN8std_msgs5Int32C1Ev+0x28>)
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	601a      	str	r2, [r3, #0]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2200      	movs	r2, #0
 8013672:	605a      	str	r2, [r3, #4]
    {
    }
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	4618      	mov	r0, r3
 8013678:	3708      	adds	r7, #8
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
 801367e:	bf00      	nop
 8013680:	08015508 	.word	0x08015508

08013684 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8013684:	b480      	push	{r7}
 8013686:	b085      	sub	sp, #20
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801368e:	2300      	movs	r3, #0
 8013690:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	685b      	ldr	r3, [r3, #4]
 8013696:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8013698:	68b9      	ldr	r1, [r7, #8]
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	683a      	ldr	r2, [r7, #0]
 801369e:	4413      	add	r3, r2
 80136a0:	b2ca      	uxtb	r2, r1
 80136a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	0a19      	lsrs	r1, r3, #8
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	3301      	adds	r3, #1
 80136ac:	683a      	ldr	r2, [r7, #0]
 80136ae:	4413      	add	r3, r2
 80136b0:	b2ca      	uxtb	r2, r1
 80136b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	0c19      	lsrs	r1, r3, #16
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	3302      	adds	r3, #2
 80136bc:	683a      	ldr	r2, [r7, #0]
 80136be:	4413      	add	r3, r2
 80136c0:	b2ca      	uxtb	r2, r1
 80136c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	0e19      	lsrs	r1, r3, #24
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	3303      	adds	r3, #3
 80136cc:	683a      	ldr	r2, [r7, #0]
 80136ce:	4413      	add	r3, r2
 80136d0:	b2ca      	uxtb	r2, r1
 80136d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	3304      	adds	r3, #4
 80136d8:	60fb      	str	r3, [r7, #12]
      return offset;
 80136da:	68fb      	ldr	r3, [r7, #12]
    }
 80136dc:	4618      	mov	r0, r3
 80136de:	3714      	adds	r7, #20
 80136e0:	46bd      	mov	sp, r7
 80136e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e6:	4770      	bx	lr

080136e8 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80136e8:	b480      	push	{r7}
 80136ea:	b085      	sub	sp, #20
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80136f2:	2300      	movs	r3, #0
 80136f4:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 80136f6:	2300      	movs	r3, #0
 80136f8:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	68fa      	ldr	r2, [r7, #12]
 80136fe:	6839      	ldr	r1, [r7, #0]
 8013700:	440a      	add	r2, r1
 8013702:	7812      	ldrb	r2, [r2, #0]
 8013704:	4313      	orrs	r3, r2
 8013706:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8013708:	68ba      	ldr	r2, [r7, #8]
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	3301      	adds	r3, #1
 801370e:	6839      	ldr	r1, [r7, #0]
 8013710:	440b      	add	r3, r1
 8013712:	781b      	ldrb	r3, [r3, #0]
 8013714:	021b      	lsls	r3, r3, #8
 8013716:	4313      	orrs	r3, r2
 8013718:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801371a:	68ba      	ldr	r2, [r7, #8]
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	3302      	adds	r3, #2
 8013720:	6839      	ldr	r1, [r7, #0]
 8013722:	440b      	add	r3, r1
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	041b      	lsls	r3, r3, #16
 8013728:	4313      	orrs	r3, r2
 801372a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801372c:	68ba      	ldr	r2, [r7, #8]
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	3303      	adds	r3, #3
 8013732:	6839      	ldr	r1, [r7, #0]
 8013734:	440b      	add	r3, r1
 8013736:	781b      	ldrb	r3, [r3, #0]
 8013738:	061b      	lsls	r3, r3, #24
 801373a:	4313      	orrs	r3, r2
 801373c:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 801373e:	68ba      	ldr	r2, [r7, #8]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	3304      	adds	r3, #4
 8013748:	60fb      	str	r3, [r7, #12]
     return offset;
 801374a:	68fb      	ldr	r3, [r7, #12]
    }
 801374c:	4618      	mov	r0, r3
 801374e:	3714      	adds	r7, #20
 8013750:	46bd      	mov	sp, r7
 8013752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013756:	4770      	bx	lr

08013758 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	4b03      	ldr	r3, [pc, #12]	@ (8013770 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 8013762:	4618      	mov	r0, r3
 8013764:	370c      	adds	r7, #12
 8013766:	46bd      	mov	sp, r7
 8013768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376c:	4770      	bx	lr
 801376e:	bf00      	nop
 8013770:	08015334 	.word	0x08015334

08013774 <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8013774:	b480      	push	{r7}
 8013776:	b083      	sub	sp, #12
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	4b03      	ldr	r3, [pc, #12]	@ (801378c <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 801377e:	4618      	mov	r0, r3
 8013780:	370c      	adds	r7, #12
 8013782:	46bd      	mov	sp, r7
 8013784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013788:	4770      	bx	lr
 801378a:	bf00      	nop
 801378c:	08015344 	.word	0x08015344

08013790 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
      data(0)
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	4618      	mov	r0, r3
 801379c:	f7fc fd3a 	bl	8010214 <_ZN3ros3MsgC1Ev>
 80137a0:	4a05      	ldr	r2, [pc, #20]	@ (80137b8 <_ZN8std_msgs4BoolC1Ev+0x28>)
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	601a      	str	r2, [r3, #0]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2200      	movs	r2, #0
 80137aa:	711a      	strb	r2, [r3, #4]
    {
    }
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4618      	mov	r0, r3
 80137b0:	3708      	adds	r7, #8
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	080154f0 	.word	0x080154f0

080137bc <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80137bc:	b480      	push	{r7}
 80137be:	b085      	sub	sp, #20
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
 80137c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80137c6:	2300      	movs	r3, #0
 80137c8:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	791b      	ldrb	r3, [r3, #4]
 80137ce:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	683a      	ldr	r2, [r7, #0]
 80137d4:	4413      	add	r3, r2
 80137d6:	7a3a      	ldrb	r2, [r7, #8]
 80137d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	3301      	adds	r3, #1
 80137de:	60fb      	str	r3, [r7, #12]
      return offset;
 80137e0:	68fb      	ldr	r3, [r7, #12]
    }
 80137e2:	4618      	mov	r0, r3
 80137e4:	3714      	adds	r7, #20
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr

080137ee <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80137ee:	b480      	push	{r7}
 80137f0:	b085      	sub	sp, #20
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6078      	str	r0, [r7, #4]
 80137f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80137f8:	2300      	movs	r3, #0
 80137fa:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 80137fc:	2300      	movs	r3, #0
 80137fe:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8013800:	7a3a      	ldrb	r2, [r7, #8]
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	6839      	ldr	r1, [r7, #0]
 8013806:	440b      	add	r3, r1
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	4313      	orrs	r3, r2
 801380c:	b2db      	uxtb	r3, r3
 801380e:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8013810:	7a3a      	ldrb	r2, [r7, #8]
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	3301      	adds	r3, #1
 801381a:	60fb      	str	r3, [r7, #12]
     return offset;
 801381c:	68fb      	ldr	r3, [r7, #12]
    }
 801381e:	4618      	mov	r0, r3
 8013820:	3714      	adds	r7, #20
 8013822:	46bd      	mov	sp, r7
 8013824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013828:	4770      	bx	lr
	...

0801382c <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 801382c:	b480      	push	{r7}
 801382e:	b083      	sub	sp, #12
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
 8013834:	4b03      	ldr	r3, [pc, #12]	@ (8013844 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8013836:	4618      	mov	r0, r3
 8013838:	370c      	adds	r7, #12
 801383a:	46bd      	mov	sp, r7
 801383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013840:	4770      	bx	lr
 8013842:	bf00      	nop
 8013844:	08015368 	.word	0x08015368

08013848 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 8013848:	b480      	push	{r7}
 801384a:	b083      	sub	sp, #12
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	4b03      	ldr	r3, [pc, #12]	@ (8013860 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8013852:	4618      	mov	r0, r3
 8013854:	370c      	adds	r7, #12
 8013856:	46bd      	mov	sp, r7
 8013858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385c:	4770      	bx	lr
 801385e:	bf00      	nop
 8013860:	08015378 	.word	0x08015378

08013864 <_ZN4ROS116callback_ChassisERKN13geometry_msgs5TwistE>:

  /**
   * @brief Chassis 回調函數。
   * @param geometry_msgs::Twist
   */
  void callback_Chassis(const geometry_msgs::Twist &msg){
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
    cmd_v_x = msg.linear.x;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	ed93 7b04 	vldr	d7, [r3, #16]
 8013872:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8013876:	4b0c      	ldr	r3, [pc, #48]	@ (80138a8 <_ZN4ROS116callback_ChassisERKN13geometry_msgs5TwistE+0x44>)
 8013878:	edc3 7a00 	vstr	s15, [r3]
    cmd_v_y = msg.linear.y;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	ed93 7b06 	vldr	d7, [r3, #24]
 8013882:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8013886:	4b09      	ldr	r3, [pc, #36]	@ (80138ac <_ZN4ROS116callback_ChassisERKN13geometry_msgs5TwistE+0x48>)
 8013888:	edc3 7a00 	vstr	s15, [r3]
    cmd_v_w = msg.angular.z;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8013892:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8013896:	4b06      	ldr	r3, [pc, #24]	@ (80138b0 <_ZN4ROS116callback_ChassisERKN13geometry_msgs5TwistE+0x4c>)
 8013898:	edc3 7a00 	vstr	s15, [r3]
    return;
 801389c:	bf00      	nop
  }
 801389e:	370c      	adds	r7, #12
 80138a0:	46bd      	mov	sp, r7
 80138a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a6:	4770      	bx	lr
 80138a8:	24003844 	.word	0x24003844
 80138ac:	24003848 	.word	0x24003848
 80138b0:	2400384c 	.word	0x2400384c

080138b4 <_ZN4ROS115callback_IntakeERKN8std_msgs4BoolE>:

  /**
   * @brief Intake 回調函數。
   * @param std_msgs::Bool
   */
  void callback_Intake(const std_msgs::Bool &msg){
 80138b4:	b480      	push	{r7}
 80138b6:	b083      	sub	sp, #12
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
    // if(msg.data) runIntake = true;
    // else runIntake = false;
    return;
 80138bc:	bf00      	nop
  }
 80138be:	370c      	adds	r7, #12
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr

080138c8 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E>:

  /**
   * @brief Elevator 回調函數。
   * @param std_msgs::Int32
   */
  void callback_Elevator(const std_msgs::Int32 &msg){
 80138c8:	b480      	push	{r7}
 80138ca:	b083      	sub	sp, #12
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
    // runElevator = msg.data;
    return;
 80138d0:	bf00      	nop
  }
 80138d2:	370c      	adds	r7, #12
 80138d4:	46bd      	mov	sp, r7
 80138d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138da:	4770      	bx	lr

080138dc <_ZN4ROS121callback_ElevatorDoorERKN8std_msgs4BoolE>:

  /**
   * @brief ElevatorDoor 回調函數。
   * @param std_msgs::Bool
   */
  void callback_ElevatorDoor(const std_msgs::Bool &msg){
 80138dc:	b480      	push	{r7}
 80138de:	b083      	sub	sp, #12
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
    // if(msg.data) runElevatorDoor = true;
    // else runElevatorDoor = false;
    return;
 80138e4:	bf00      	nop
  }
 80138e6:	370c      	adds	r7, #12
 80138e8:	46bd      	mov	sp, r7
 80138ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ee:	4770      	bx	lr

080138f0 <_ZN4ROS119callback_BasketDoorERKN8std_msgs4BoolE>:

  /**
   * @brief BasketDoor 回調函數。
   * @param std_msgs::Bool
   */
  void callback_BasketDoor(const std_msgs::Bool &msg){
 80138f0:	b480      	push	{r7}
 80138f2:	b083      	sub	sp, #12
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
    // if(msg.data) runBasketDoor = true;
    // else runBasketDoor = false;
    return;
 80138f8:	bf00      	nop
  }
 80138fa:	370c      	adds	r7, #12
 80138fc:	46bd      	mov	sp, r7
 80138fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013902:	4770      	bx	lr

08013904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8013904:	b480      	push	{r7}
 8013906:	b085      	sub	sp, #20
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 801390e:	2300      	movs	r3, #0
 8013910:	60fb      	str	r3, [r7, #12]
 8013912:	e00c      	b.n	801392e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	00db      	lsls	r3, r3, #3
 8013918:	683a      	ldr	r2, [r7, #0]
 801391a:	fa22 f103 	lsr.w	r1, r2, r3
 801391e:	687a      	ldr	r2, [r7, #4]
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	4413      	add	r3, r2
 8013924:	b2ca      	uxtb	r2, r1
 8013926:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	3301      	adds	r3, #1
 801392c:	60fb      	str	r3, [r7, #12]
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2b03      	cmp	r3, #3
 8013932:	d9ef      	bls.n	8013914 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8013934:	bf00      	nop
 8013936:	bf00      	nop
 8013938:	3714      	adds	r7, #20
 801393a:	46bd      	mov	sp, r7
 801393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013940:	4770      	bx	lr

08013942 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8013942:	b480      	push	{r7}
 8013944:	b085      	sub	sp, #20
 8013946:	af00      	add	r7, sp, #0
 8013948:	6078      	str	r0, [r7, #4]
 801394a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2200      	movs	r2, #0
 8013950:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8013952:	2300      	movs	r3, #0
 8013954:	60fb      	str	r3, [r7, #12]
 8013956:	e010      	b.n	801397a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	6839      	ldr	r1, [r7, #0]
 801395e:	68fa      	ldr	r2, [r7, #12]
 8013960:	440a      	add	r2, r1
 8013962:	7812      	ldrb	r2, [r2, #0]
 8013964:	4611      	mov	r1, r2
 8013966:	68fa      	ldr	r2, [r7, #12]
 8013968:	00d2      	lsls	r2, r2, #3
 801396a:	fa01 f202 	lsl.w	r2, r1, r2
 801396e:	431a      	orrs	r2, r3
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	3301      	adds	r3, #1
 8013978:	60fb      	str	r3, [r7, #12]
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	2b03      	cmp	r3, #3
 801397e:	d9eb      	bls.n	8013958 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8013980:	bf00      	nop
 8013982:	bf00      	nop
 8013984:	3714      	adds	r7, #20
 8013986:	46bd      	mov	sp, r7
 8013988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398c:	4770      	bx	lr
	...

08013990 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8013990:	b480      	push	{r7}
 8013992:	b083      	sub	sp, #12
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	4a04      	ldr	r2, [pc, #16]	@ (80139ac <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	601a      	str	r2, [r3, #0]
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	4618      	mov	r0, r3
 80139a2:	370c      	adds	r7, #12
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr
 80139ac:	080155b0 	.word	0x080155b0

080139b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b086      	sub	sp, #24
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7ff ffe8 	bl	8013990 <_ZN3ros15NodeHandleBase_C1Ev>
 80139c0:	4a47      	ldr	r2, [pc, #284]	@ (8013ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	601a      	str	r2, [r3, #0]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	3304      	adds	r3, #4
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7fd fb3c 	bl	8011048 <_ZN13STM32HardwareC1Ev>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80139d6:	2200      	movs	r2, #0
 80139d8:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
 80139dc:	687a      	ldr	r2, [r7, #4]
 80139de:	f242 5310 	movw	r3, #9488	@ 0x2510
 80139e2:	4413      	add	r3, r2
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fc ff89 	bl	80108fc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80139ea:	2300      	movs	r3, #0
 80139ec:	617b      	str	r3, [r7, #20]
 80139ee:	e009      	b.n	8013a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	697a      	ldr	r2, [r7, #20]
 80139f4:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80139f8:	2100      	movs	r1, #0
 80139fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	3301      	adds	r3, #1
 8013a02:	617b      	str	r3, [r7, #20]
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	2b18      	cmp	r3, #24
 8013a08:	d9f2      	bls.n	80139f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	613b      	str	r3, [r7, #16]
 8013a0e:	e00a      	b.n	8013a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8013a10:	687a      	ldr	r2, [r7, #4]
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8013a18:	009b      	lsls	r3, r3, #2
 8013a1a:	4413      	add	r3, r2
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	3301      	adds	r3, #1
 8013a24:	613b      	str	r3, [r7, #16]
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	2b18      	cmp	r3, #24
 8013a2a:	d9f1      	bls.n	8013a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	60fb      	str	r3, [r7, #12]
 8013a30:	e00a      	b.n	8013a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8013a32:	687a      	ldr	r2, [r7, #4]
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	441a      	add	r2, r3
 8013a38:	f242 0320 	movw	r3, #8224	@ 0x2020
 8013a3c:	4413      	add	r3, r2
 8013a3e:	2200      	movs	r2, #0
 8013a40:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	3301      	adds	r3, #1
 8013a46:	60fb      	str	r3, [r7, #12]
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013a4e:	d3f0      	bcc.n	8013a32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8013a50:	2300      	movs	r3, #0
 8013a52:	60bb      	str	r3, [r7, #8]
 8013a54:	e00a      	b.n	8013a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 8013a56:	687a      	ldr	r2, [r7, #4]
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	441a      	add	r2, r3
 8013a5c:	f242 2320 	movw	r3, #8736	@ 0x2220
 8013a60:	4413      	add	r3, r2
 8013a62:	2200      	movs	r2, #0
 8013a64:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	3301      	adds	r3, #1
 8013a6a:	60bb      	str	r3, [r7, #8]
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013a72:	d3f0      	bcc.n	8013a56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	f8c2 3514 	str.w	r3, [r2, #1300]	@ 0x514
    req_param_resp.ints = NULL;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013a88:	461a      	mov	r2, r3
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	f8c2 351c 	str.w	r3, [r2, #1308]	@ 0x51c
    req_param_resp.floats_length = 0;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013a96:	461a      	mov	r2, r3
 8013a98:	2300      	movs	r3, #0
 8013a9a:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520
    req_param_resp.floats = NULL;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	f8c2 3528 	str.w	r3, [r2, #1320]	@ 0x528
    req_param_resp.ints_length = 0;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	f8c2 3514 	str.w	r3, [r2, #1300]	@ 0x514
    req_param_resp.ints = NULL;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ac0:	461a      	mov	r2, r3
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	f8c2 351c 	str.w	r3, [r2, #1308]	@ 0x51c

    spin_timeout_ = 0;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ace:	461a      	mov	r2, r3
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	61d3      	str	r3, [r2, #28]
  }
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3718      	adds	r7, #24
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	080154dc 	.word	0x080154dc

08013ae4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8013ae4:	b480      	push	{r7}
 8013ae6:	b083      	sub	sp, #12
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	4a04      	ldr	r2, [pc, #16]	@ (8013b00 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	601a      	str	r2, [r3, #0]
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	4618      	mov	r0, r3
 8013af6:	370c      	adds	r7, #12
 8013af8:	46bd      	mov	sp, r7
 8013afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afe:	4770      	bx	lr
 8013b00:	08015598 	.word	0x08015598

08013b04 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b084      	sub	sp, #16
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	60f8      	str	r0, [r7, #12]
 8013b0c:	60b9      	str	r1, [r7, #8]
 8013b0e:	607a      	str	r2, [r7, #4]
 8013b10:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7ff ffe5 	bl	8013ae4 <_ZN3ros11Subscriber_C1Ev>
 8013b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8013b48 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	601a      	str	r2, [r3, #0]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	3310      	adds	r3, #16
 8013b24:	4618      	mov	r0, r3
 8013b26:	f7fe f8bb 	bl	8011ca0 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	687a      	ldr	r2, [r7, #4]
 8013b2e:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	683a      	ldr	r2, [r7, #0]
 8013b34:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	68ba      	ldr	r2, [r7, #8]
 8013b3a:	609a      	str	r2, [r3, #8]
  };
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	4618      	mov	r0, r3
 8013b40:	3710      	adds	r7, #16
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}
 8013b46:	bf00      	nop
 8013b48:	080154c4 	.word	0x080154c4

08013b4c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b084      	sub	sp, #16
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	60f8      	str	r0, [r7, #12]
 8013b54:	60b9      	str	r1, [r7, #8]
 8013b56:	607a      	str	r2, [r7, #4]
 8013b58:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7ff ffc1 	bl	8013ae4 <_ZN3ros11Subscriber_C1Ev>
 8013b62:	4a0b      	ldr	r2, [pc, #44]	@ (8013b90 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	601a      	str	r2, [r3, #0]
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	330c      	adds	r3, #12
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7ff fe0f 	bl	8013790 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	687a      	ldr	r2, [r7, #4]
 8013b76:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	683a      	ldr	r2, [r7, #0]
 8013b7c:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	68ba      	ldr	r2, [r7, #8]
 8013b82:	609a      	str	r2, [r3, #8]
  };
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	4618      	mov	r0, r3
 8013b88:	3710      	adds	r7, #16
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	080154ac 	.word	0x080154ac

08013b94 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b084      	sub	sp, #16
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	607a      	str	r2, [r7, #4]
 8013ba0:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7ff ff9d 	bl	8013ae4 <_ZN3ros11Subscriber_C1Ev>
 8013baa:	4a0b      	ldr	r2, [pc, #44]	@ (8013bd8 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	601a      	str	r2, [r3, #0]
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	330c      	adds	r3, #12
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7ff fd4f 	bl	8013658 <_ZN8std_msgs5Int32C1Ev>
    cb_(cb),
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	687a      	ldr	r2, [r7, #4]
 8013bbe:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	683a      	ldr	r2, [r7, #0]
 8013bc4:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	68ba      	ldr	r2, [r7, #8]
 8013bca:	609a      	str	r2, [r3, #8]
  };
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3710      	adds	r7, #16
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bd80      	pop	{r7, pc}
 8013bd6:	bf00      	nop
 8013bd8:	08015494 	.word	0x08015494

08013bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b084      	sub	sp, #16
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	3304      	adds	r3, #4
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7fd fb38 	bl	801125e <_ZN13STM32Hardware4timeEv>
 8013bee:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013bf6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8013bfa:	68fa      	ldr	r2, [r7, #12]
 8013bfc:	1ad3      	subs	r3, r2, r3
 8013bfe:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8013c02:	4293      	cmp	r3, r2
 8013c04:	d905      	bls.n	8013c12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
    {
      configured_ = false;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013c18:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d00e      	beq.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013c26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8013c2a:	68fa      	ldr	r2, [r7, #12]
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d906      	bls.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013c36:	461a      	mov	r2, r3
 8013c38:	2300      	movs	r3, #0
 8013c3a:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013c44:	69db      	ldr	r3, [r3, #28]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d015      	beq.n	8013c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	3304      	adds	r3, #4
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7fd fb05 	bl	801125e <_ZN13STM32Hardware4timeEv>
 8013c54:	4602      	mov	r2, r0
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	1ad2      	subs	r2, r2, r3
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013c60:	69db      	ldr	r3, [r3, #28]
 8013c62:	429a      	cmp	r2, r3
 8013c64:	bf8c      	ite	hi
 8013c66:	2301      	movhi	r3, #1
 8013c68:	2300      	movls	r3, #0
 8013c6a:	b2db      	uxtb	r3, r3
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d002      	beq.n	8013c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8013c70:	f06f 0301 	mvn.w	r3, #1
 8013c74:	e226      	b.n	80140c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
        }
      }
      int data = hardware_.read();
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	3304      	adds	r3, #4
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f7fd fa04 	bl	8011088 <_ZN13STM32Hardware4readEv>
 8013c80:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	f2c0 81ff 	blt.w	8014088 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
        break;
      checksum_ += data;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013c90:	f8d3 24f8 	ldr.w	r2, [r3, #1272]	@ 0x4f8
 8013c94:	68bb      	ldr	r3, [r7, #8]
 8013c96:	4413      	add	r3, r2
 8013c98:	687a      	ldr	r2, [r7, #4]
 8013c9a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8013c9e:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ca8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013cac:	2b07      	cmp	r3, #7
 8013cae:	d12d      	bne.n	8013d0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
      {
        message_in[index_++] = data;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013cb6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8013cba:	1c5a      	adds	r2, r3, #1
 8013cbc:	6879      	ldr	r1, [r7, #4]
 8013cbe:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8013cc2:	f8c1 24f4 	str.w	r2, [r1, #1268]	@ 0x4f4
 8013cc6:	68ba      	ldr	r2, [r7, #8]
 8013cc8:	b2d1      	uxtb	r1, r2
 8013cca:	687a      	ldr	r2, [r7, #4]
 8013ccc:	441a      	add	r2, r3
 8013cce:	f242 0320 	movw	r3, #8224	@ 0x2020
 8013cd2:	4413      	add	r3, r2
 8013cd4:	460a      	mov	r2, r1
 8013cd6:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013cde:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8013ce2:	3b01      	subs	r3, #1
 8013ce4:	687a      	ldr	r2, [r7, #4]
 8013ce6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8013cea:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013cf4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d1a0      	bne.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013d02:	461a      	mov	r2, r3
 8013d04:	2308      	movs	r3, #8
 8013d06:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8013d0a:	e798      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013d12:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d130      	bne.n	8013d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
      {
        if (data == 0xff)
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	2bff      	cmp	r3, #255	@ 0xff
 8013d1e:	d112      	bne.n	8013d46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
        {
          mode_++;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013d26:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013d2a:	3301      	adds	r3, #1
 8013d2c:	687a      	ldr	r2, [r7, #4]
 8013d2e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8013d32:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	3314      	adds	r3, #20
 8013d3a:	687a      	ldr	r2, [r7, #4]
 8013d3c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8013d40:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
 8013d44:	e77b      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	3304      	adds	r3, #4
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7fd fa87 	bl	801125e <_ZN13STM32Hardware4timeEv>
 8013d50:	4602      	mov	r2, r0
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	1ad3      	subs	r3, r2, r3
 8013d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013d5a:	4293      	cmp	r3, r2
 8013d5c:	bf8c      	ite	hi
 8013d5e:	2301      	movhi	r3, #1
 8013d60:	2300      	movls	r3, #0
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f43f af6a 	beq.w	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013d70:	2200      	movs	r2, #0
 8013d72:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
          return SPIN_TIMEOUT;
 8013d76:	f06f 0301 	mvn.w	r3, #1
 8013d7a:	e1a3      	b.n	80140c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013d82:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d121      	bne.n	8013dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
      {
        if (data == PROTOCOL_VER)
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	2bfe      	cmp	r3, #254	@ 0xfe
 8013d8e:	d10b      	bne.n	8013da8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
        {
          mode_++;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013d96:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013d9a:	3301      	adds	r3, #1
 8013d9c:	687a      	ldr	r2, [r7, #4]
 8013d9e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8013da2:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8013da6:	e74a      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013dae:	461a      	mov	r2, r3
 8013db0:	2300      	movs	r3, #0
 8013db2:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
          if (configured_ == false)
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013dbc:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	f47f af3c 	bne.w	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f000 f980 	bl	80140cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8013dcc:	e737      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013dd4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013dd8:	2b02      	cmp	r3, #2
 8013dda:	d120      	bne.n	8013e1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
      {
        bytes_ = data;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013de2:	461a      	mov	r2, r3
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        index_ = 0;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013df0:	461a      	mov	r2, r3
 8013df2:	2300      	movs	r3, #0
 8013df4:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_++;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013dfe:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013e02:	3301      	adds	r3, #1
 8013e04:	687a      	ldr	r2, [r7, #4]
 8013e06:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8013e0a:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        checksum_ = data;               /* first byte for calculating size checksum */
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e14:	461a      	mov	r2, r3
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
 8013e1c:	e70f      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e24:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013e28:	2b03      	cmp	r3, #3
 8013e2a:	d118      	bne.n	8013e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
      {
        bytes_ += data << 8;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e32:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	@ 0x4ec
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	021b      	lsls	r3, r3, #8
 8013e3a:	4413      	add	r3, r2
 8013e3c:	687a      	ldr	r2, [r7, #4]
 8013e3e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8013e42:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        mode_++;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e4c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013e50:	3301      	adds	r3, #1
 8013e52:	687a      	ldr	r2, [r7, #4]
 8013e54:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8013e58:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8013e5c:	e6ef      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e64:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013e68:	2b04      	cmp	r3, #4
 8013e6a:	d11f      	bne.n	8013eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
      {
        if ((checksum_ % 256) == 255)
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e72:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8013e76:	425a      	negs	r2, r3
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	b2d2      	uxtb	r2, r2
 8013e7c:	bf58      	it	pl
 8013e7e:	4253      	negpl	r3, r2
 8013e80:	2bff      	cmp	r3, #255	@ 0xff
 8013e82:	d10b      	bne.n	8013e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e8a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013e8e:	3301      	adds	r3, #1
 8013e90:	687a      	ldr	r2, [r7, #4]
 8013e92:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8013e96:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8013e9a:	e6d0      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ea2:	461a      	mov	r2, r3
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8013eaa:	e6c8      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013eb2:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013eb6:	2b05      	cmp	r3, #5
 8013eb8:	d119      	bne.n	8013eee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
      {
        topic_ = data;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	68bb      	ldr	r3, [r7, #8]
 8013ec4:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_++;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ece:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	687a      	ldr	r2, [r7, #4]
 8013ed6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8013eda:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        checksum_ = data;               /* first byte included in checksum */
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ee4:	461a      	mov	r2, r3
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
 8013eec:	e6a7      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ef4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013ef8:	2b06      	cmp	r3, #6
 8013efa:	d123      	bne.n	8013f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
      {
        topic_ += data << 8;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013f02:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	021b      	lsls	r3, r3, #8
 8013f0a:	4413      	add	r3, r2
 8013f0c:	687a      	ldr	r2, [r7, #4]
 8013f0e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8013f12:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_ = MODE_MESSAGE;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	2307      	movs	r3, #7
 8013f20:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        if (bytes_ == 0)
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013f2a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	f47f ae85 	bne.w	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	2308      	movs	r3, #8
 8013f3e:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8013f42:	e67c      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013f4a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8013f4e:	2b08      	cmp	r3, #8
 8013f50:	f47f ae75 	bne.w	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013f5a:	461a      	mov	r2, r3
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        if ((checksum_ % 256) == 255)
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013f68:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8013f6c:	425a      	negs	r2, r3
 8013f6e:	b2db      	uxtb	r3, r3
 8013f70:	b2d2      	uxtb	r2, r2
 8013f72:	bf58      	it	pl
 8013f74:	4253      	negpl	r3, r2
 8013f76:	2bff      	cmp	r3, #255	@ 0xff
 8013f78:	f47f ae61 	bne.w	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013f82:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d116      	bne.n	8013fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
          {
            requestSyncTime();
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f000 f89e 	bl	80140cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f000 f8ba 	bl	801410a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013f9c:	461a      	mov	r2, r3
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
            last_sync_receive_time = c_time;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013faa:	461a      	mov	r2, r3
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
            return SPIN_ERR;
 8013fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8013fb6:	e085      	b.n	80140c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013fbe:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8013fc2:	2b0a      	cmp	r3, #10
 8013fc4:	d108      	bne.n	8013fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
          {
            syncTime(message_in);
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	f242 0320 	movw	r3, #8224	@ 0x2020
 8013fcc:	4413      	add	r3, r2
 8013fce:	4619      	mov	r1, r3
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f000 f97d 	bl	80142d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8013fd6:	e632      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013fde:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8013fe2:	2b06      	cmp	r3, #6
 8013fe4:	d112      	bne.n	801400c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
          {
            req_param_resp.deserialize(message_in);
 8013fe6:	687a      	ldr	r2, [r7, #4]
 8013fe8:	f242 5310 	movw	r3, #9488	@ 0x2510
 8013fec:	4413      	add	r3, r2
 8013fee:	6879      	ldr	r1, [r7, #4]
 8013ff0:	f242 0220 	movw	r2, #8224	@ 0x2020
 8013ff4:	440a      	add	r2, r1
 8013ff6:	4611      	mov	r1, r2
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7fc fdb4 	bl	8010b66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8014004:	2201      	movs	r2, #1
 8014006:	f883 250c 	strb.w	r2, [r3, #1292]	@ 0x50c
 801400a:	e618      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8014012:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8014016:	2b0b      	cmp	r3, #11
 8014018:	d106      	bne.n	8014028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
          {
            configured_ = false;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8014020:	2200      	movs	r2, #0
 8014022:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
 8014026:	e60a      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801402e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8014032:	3b64      	subs	r3, #100	@ 0x64
 8014034:	687a      	ldr	r2, [r7, #4]
 8014036:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 801403a:	009b      	lsls	r3, r3, #2
 801403c:	4413      	add	r3, r2
 801403e:	685b      	ldr	r3, [r3, #4]
 8014040:	2b00      	cmp	r3, #0
 8014042:	f43f adfc 	beq.w	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801404c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8014050:	3b64      	subs	r3, #100	@ 0x64
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	4413      	add	r3, r2
 801405c:	6858      	ldr	r0, [r3, #4]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8014064:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8014068:	3b64      	subs	r3, #100	@ 0x64
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	4413      	add	r3, r2
 8014074:	685b      	ldr	r3, [r3, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	681a      	ldr	r2, [r3, #0]
 801407a:	6879      	ldr	r1, [r7, #4]
 801407c:	f242 0320 	movw	r3, #8224	@ 0x2020
 8014080:	440b      	add	r3, r1
 8014082:	4619      	mov	r1, r3
 8014084:	4790      	blx	r2
    while (true)
 8014086:	e5da      	b.n	8013c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8014088:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8014090:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
 8014094:	2b00      	cmp	r3, #0
 8014096:	d014      	beq.n	80140c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801409e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80140a2:	68fa      	ldr	r2, [r7, #12]
 80140a4:	1ad3      	subs	r3, r2, r3
 80140a6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80140aa:	4293      	cmp	r3, r2
 80140ac:	d909      	bls.n	80140c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
    {
      requestSyncTime();
 80140ae:	6878      	ldr	r0, [r7, #4]
 80140b0:	f000 f80c 	bl	80140cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80140ba:	461a      	mov	r2, r3
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
    }

    return SPIN_OK;
 80140c2:	2300      	movs	r3, #0
  }
 80140c4:	4618      	mov	r0, r3
 80140c6:	3710      	adds	r7, #16
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}

080140cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b086      	sub	sp, #24
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 80140d4:	f107 030c 	add.w	r3, r7, #12
 80140d8:	4618      	mov	r0, r3
 80140da:	f7fc f8ab 	bl	8010234 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	f107 020c 	add.w	r2, r7, #12
 80140e8:	210a      	movs	r1, #10
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	4798      	blx	r3
    rt_time = hardware_.time();
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	3304      	adds	r3, #4
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7fd f8b3 	bl	801125e <_ZN13STM32Hardware4timeEv>
 80140f8:	4602      	mov	r2, r0
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8014100:	611a      	str	r2, [r3, #16]
  }
 8014102:	bf00      	nop
 8014104:	3718      	adds	r7, #24
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}

0801410a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 801410a:	b590      	push	{r4, r7, lr}
 801410c:	b08b      	sub	sp, #44	@ 0x2c
 801410e:	af00      	add	r7, sp, #0
 8014110:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8014112:	f107 030c 	add.w	r3, r7, #12
 8014116:	4618      	mov	r0, r3
 8014118:	f7fc f97c 	bl	8010414 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 801411c:	2300      	movs	r3, #0
 801411e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014120:	e05a      	b.n	80141d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014126:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 801412a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d04f      	beq.n	80141d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014136:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 801413a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801413e:	689b      	ldr	r3, [r3, #8]
 8014140:	b29b      	uxth	r3, r3
 8014142:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014148:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 801414c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014158:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 801415c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014160:	6859      	ldr	r1, [r3, #4]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014166:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 801416a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	3308      	adds	r3, #8
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	4608      	mov	r0, r1
 8014178:	4798      	blx	r3
 801417a:	4603      	mov	r3, r0
 801417c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014182:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 8014186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801418a:	6859      	ldr	r1, [r3, #4]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014190:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 8014194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014198:	685b      	ldr	r3, [r3, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	330c      	adds	r3, #12
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	4608      	mov	r0, r1
 80141a2:	4798      	blx	r3
 80141a4:	4603      	mov	r3, r0
 80141a6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80141a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80141ac:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	681c      	ldr	r4, [r3, #0]
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80141b8:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80141bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7fc fe74 	bl	8010eae <_ZN3ros9Publisher15getEndpointTypeEv>
 80141c6:	4601      	mov	r1, r0
 80141c8:	f107 030c 	add.w	r3, r7, #12
 80141cc:	461a      	mov	r2, r3
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80141d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141d4:	3301      	adds	r3, #1
 80141d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80141d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141da:	2b18      	cmp	r3, #24
 80141dc:	dda1      	ble.n	8014122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80141de:	2300      	movs	r3, #0
 80141e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80141e2:	e067      	b.n	80142b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 80141e4:	687a      	ldr	r2, [r7, #4]
 80141e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e8:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80141ec:	009b      	lsls	r3, r3, #2
 80141ee:	4413      	add	r3, r2
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d05b      	beq.n	80142ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 80141f6:	687a      	ldr	r2, [r7, #4]
 80141f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141fa:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80141fe:	009b      	lsls	r3, r3, #2
 8014200:	4413      	add	r3, r2
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	b29b      	uxth	r3, r3
 8014208:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801420e:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8014212:	009b      	lsls	r3, r3, #2
 8014214:	4413      	add	r3, r2
 8014216:	685b      	ldr	r3, [r3, #4]
 8014218:	689b      	ldr	r3, [r3, #8]
 801421a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014220:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8014224:	009b      	lsls	r3, r3, #2
 8014226:	4413      	add	r3, r2
 8014228:	6859      	ldr	r1, [r3, #4]
 801422a:	687a      	ldr	r2, [r7, #4]
 801422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801422e:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8014232:	009b      	lsls	r3, r3, #2
 8014234:	4413      	add	r3, r2
 8014236:	685b      	ldr	r3, [r3, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	3308      	adds	r3, #8
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	4608      	mov	r0, r1
 8014240:	4798      	blx	r3
 8014242:	4603      	mov	r3, r0
 8014244:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8014246:	687a      	ldr	r2, [r7, #4]
 8014248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801424a:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 801424e:	009b      	lsls	r3, r3, #2
 8014250:	4413      	add	r3, r2
 8014252:	6859      	ldr	r1, [r3, #4]
 8014254:	687a      	ldr	r2, [r7, #4]
 8014256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014258:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 801425c:	009b      	lsls	r3, r3, #2
 801425e:	4413      	add	r3, r2
 8014260:	685b      	ldr	r3, [r3, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	330c      	adds	r3, #12
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	4608      	mov	r0, r1
 801426a:	4798      	blx	r3
 801426c:	4603      	mov	r3, r0
 801426e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8014270:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014274:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	681c      	ldr	r4, [r3, #0]
 801427c:	687a      	ldr	r2, [r7, #4]
 801427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014280:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8014284:	009b      	lsls	r3, r3, #2
 8014286:	4413      	add	r3, r2
 8014288:	6859      	ldr	r1, [r3, #4]
 801428a:	687a      	ldr	r2, [r7, #4]
 801428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801428e:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8014292:	009b      	lsls	r3, r3, #2
 8014294:	4413      	add	r3, r2
 8014296:	685b      	ldr	r3, [r3, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	3304      	adds	r3, #4
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	4608      	mov	r0, r1
 80142a0:	4798      	blx	r3
 80142a2:	4601      	mov	r1, r0
 80142a4:	f107 030c 	add.w	r3, r7, #12
 80142a8:	461a      	mov	r2, r3
 80142aa:	6878      	ldr	r0, [r7, #4]
 80142ac:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80142ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142b0:	3301      	adds	r3, #1
 80142b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80142b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142b6:	2b18      	cmp	r3, #24
 80142b8:	dd94      	ble.n	80141e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80142c0:	2201      	movs	r2, #1
 80142c2:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
  }
 80142c6:	bf00      	nop
 80142c8:	372c      	adds	r7, #44	@ 0x2c
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd90      	pop	{r4, r7, pc}
	...

080142d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b086      	sub	sp, #24
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80142da:	f107 0308 	add.w	r3, r7, #8
 80142de:	4618      	mov	r0, r3
 80142e0:	f7fb ffa8 	bl	8010234 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	3304      	adds	r3, #4
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7fc ffb8 	bl	801125e <_ZN13STM32Hardware4timeEv>
 80142ee:	4602      	mov	r2, r0
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80142f6:	691b      	ldr	r3, [r3, #16]
 80142f8:	1ad3      	subs	r3, r2, r3
 80142fa:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80142fc:	f107 0308 	add.w	r3, r7, #8
 8014300:	6839      	ldr	r1, [r7, #0]
 8014302:	4618      	mov	r0, r3
 8014304:	f7fc f806 	bl	8010314 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8014308:	68fa      	ldr	r2, [r7, #12]
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	4915      	ldr	r1, [pc, #84]	@ (8014364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 801430e:	fba1 1303 	umull	r1, r3, r1, r3
 8014312:	099b      	lsrs	r3, r3, #6
 8014314:	4413      	add	r3, r2
 8014316:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8014318:	6939      	ldr	r1, [r7, #16]
 801431a:	697a      	ldr	r2, [r7, #20]
 801431c:	4b11      	ldr	r3, [pc, #68]	@ (8014364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 801431e:	fba3 0302 	umull	r0, r3, r3, r2
 8014322:	099b      	lsrs	r3, r3, #6
 8014324:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014328:	fb00 f303 	mul.w	r3, r0, r3
 801432c:	1ad3      	subs	r3, r2, r3
 801432e:	4a0e      	ldr	r2, [pc, #56]	@ (8014368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8014330:	fb02 f303 	mul.w	r3, r2, r3
 8014334:	440b      	add	r3, r1
 8014336:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8014338:	f107 0308 	add.w	r3, r7, #8
 801433c:	3304      	adds	r3, #4
 801433e:	4619      	mov	r1, r3
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f000 f8bf 	bl	80144c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	3304      	adds	r3, #4
 801434a:	4618      	mov	r0, r3
 801434c:	f7fc ff87 	bl	801125e <_ZN13STM32Hardware4timeEv>
 8014350:	4602      	mov	r2, r0
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8014358:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504
  }
 801435c:	bf00      	nop
 801435e:	3718      	adds	r7, #24
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}
 8014364:	10624dd3 	.word	0x10624dd3
 8014368:	000f4240 	.word	0x000f4240

0801436c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 801436c:	b580      	push	{r7, lr}
 801436e:	b088      	sub	sp, #32
 8014370:	af00      	add	r7, sp, #0
 8014372:	60f8      	str	r0, [r7, #12]
 8014374:	60b9      	str	r1, [r7, #8]
 8014376:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	2b63      	cmp	r3, #99	@ 0x63
 801437c:	dd0b      	ble.n	8014396 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8014384:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
 8014388:	f083 0301 	eor.w	r3, r3, #1
 801438c:	b2db      	uxtb	r3, r3
 801438e:	2b00      	cmp	r3, #0
 8014390:	d001      	beq.n	8014396 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8014392:	2300      	movs	r3, #0
 8014394:	e090      	b.n	80144b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	681a      	ldr	r2, [r3, #0]
 801439c:	68f9      	ldr	r1, [r7, #12]
 801439e:	f242 2320 	movw	r3, #8736	@ 0x2220
 80143a2:	440b      	add	r3, r1
 80143a4:	3307      	adds	r3, #7
 80143a6:	4619      	mov	r1, r3
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	4790      	blx	r2
 80143ac:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80143b4:	22ff      	movs	r2, #255	@ 0xff
 80143b6:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
    message_out[1] = PROTOCOL_VER;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80143c0:	22fe      	movs	r2, #254	@ 0xfe
 80143c2:	f883 2221 	strb.w	r2, [r3, #545]	@ 0x221
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	b2da      	uxtb	r2, r3
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80143d0:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	0a1b      	lsrs	r3, r3, #8
 80143da:	b29b      	uxth	r3, r3
 80143dc:	b2da      	uxtb	r2, r3
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80143e4:	f883 2223 	strb.w	r2, [r3, #547]	@ 0x223
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80143ee:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80143f8:	f893 3223 	ldrb.w	r3, [r3, #547]	@ 0x223
 80143fc:	4413      	add	r3, r2
 80143fe:	b2db      	uxtb	r3, r3
 8014400:	43db      	mvns	r3, r3
 8014402:	b2da      	uxtb	r2, r3
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801440a:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    message_out[5] = (uint8_t)((int16_t)id & 255);
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	b2da      	uxtb	r2, r3
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8014418:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	b21b      	sxth	r3, r3
 8014420:	121b      	asrs	r3, r3, #8
 8014422:	b21b      	sxth	r3, r3
 8014424:	b2da      	uxtb	r2, r3
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801442c:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226

    /* calculate checksum */
    int chk = 0;
 8014430:	2300      	movs	r3, #0
 8014432:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8014434:	2305      	movs	r3, #5
 8014436:	61bb      	str	r3, [r7, #24]
 8014438:	e00d      	b.n	8014456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 801443a:	68fa      	ldr	r2, [r7, #12]
 801443c:	69bb      	ldr	r3, [r7, #24]
 801443e:	441a      	add	r2, r3
 8014440:	f242 2320 	movw	r3, #8736	@ 0x2220
 8014444:	4413      	add	r3, r2
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	461a      	mov	r2, r3
 801444a:	69fb      	ldr	r3, [r7, #28]
 801444c:	4413      	add	r3, r2
 801444e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	3301      	adds	r3, #1
 8014454:	61bb      	str	r3, [r7, #24]
 8014456:	697b      	ldr	r3, [r7, #20]
 8014458:	3306      	adds	r3, #6
 801445a:	69ba      	ldr	r2, [r7, #24]
 801445c:	429a      	cmp	r2, r3
 801445e:	ddec      	ble.n	801443a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	3307      	adds	r3, #7
 8014464:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	425a      	negs	r2, r3
 801446a:	b2db      	uxtb	r3, r3
 801446c:	b2d2      	uxtb	r2, r2
 801446e:	bf58      	it	pl
 8014470:	4253      	negpl	r3, r2
 8014472:	b2da      	uxtb	r2, r3
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	1c59      	adds	r1, r3, #1
 8014478:	6179      	str	r1, [r7, #20]
 801447a:	43d2      	mvns	r2, r2
 801447c:	b2d1      	uxtb	r1, r2
 801447e:	68fa      	ldr	r2, [r7, #12]
 8014480:	441a      	add	r2, r3
 8014482:	f242 2320 	movw	r3, #8736	@ 0x2220
 8014486:	4413      	add	r3, r2
 8014488:	460a      	mov	r2, r1
 801448a:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 801448c:	697b      	ldr	r3, [r7, #20]
 801448e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014492:	dc0b      	bgt.n	80144ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	1d18      	adds	r0, r3, #4
 8014498:	68fa      	ldr	r2, [r7, #12]
 801449a:	f242 2320 	movw	r3, #8736	@ 0x2220
 801449e:	4413      	add	r3, r2
 80144a0:	697a      	ldr	r2, [r7, #20]
 80144a2:	4619      	mov	r1, r3
 80144a4:	f7fc fe8a 	bl	80111bc <_ZN13STM32Hardware5writeEPhi>
      return l;
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	e005      	b.n	80144b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80144ac:	4904      	ldr	r1, [pc, #16]	@ (80144c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 80144ae:	68f8      	ldr	r0, [r7, #12]
 80144b0:	f000 f84c 	bl	801454c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80144b4:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80144b8:	4618      	mov	r0, r3
 80144ba:	3720      	adds	r7, #32
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}
 80144c0:	0801539c 	.word	0x0801539c

080144c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b084      	sub	sp, #16
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	3304      	adds	r3, #4
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fc fec3 	bl	801125e <_ZN13STM32Hardware4timeEv>
 80144d8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	4917      	ldr	r1, [pc, #92]	@ (8014540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80144e2:	fba1 1303 	umull	r1, r3, r1, r3
 80144e6:	099b      	lsrs	r3, r3, #6
 80144e8:	1ad3      	subs	r3, r2, r3
 80144ea:	3b01      	subs	r3, #1
 80144ec:	687a      	ldr	r2, [r7, #4]
 80144ee:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80144f2:	6153      	str	r3, [r2, #20]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	6859      	ldr	r1, [r3, #4]
 80144f8:	68fa      	ldr	r2, [r7, #12]
 80144fa:	4b11      	ldr	r3, [pc, #68]	@ (8014540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80144fc:	fba3 0302 	umull	r0, r3, r3, r2
 8014500:	099b      	lsrs	r3, r3, #6
 8014502:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014506:	fb00 f303 	mul.w	r3, r0, r3
 801450a:	1ad3      	subs	r3, r2, r3
 801450c:	4a0d      	ldr	r2, [pc, #52]	@ (8014544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 801450e:	fb02 f303 	mul.w	r3, r2, r3
 8014512:	1aca      	subs	r2, r1, r3
 8014514:	4b0c      	ldr	r3, [pc, #48]	@ (8014548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8014516:	4413      	add	r3, r2
 8014518:	687a      	ldr	r2, [r7, #4]
 801451a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801451e:	6193      	str	r3, [r2, #24]
    normalizeSecNSec(sec_offset, nsec_offset);
 8014520:	687a      	ldr	r2, [r7, #4]
 8014522:	f242 0314 	movw	r3, #8212	@ 0x2014
 8014526:	4413      	add	r3, r2
 8014528:	6879      	ldr	r1, [r7, #4]
 801452a:	f242 0218 	movw	r2, #8216	@ 0x2018
 801452e:	440a      	add	r2, r1
 8014530:	4611      	mov	r1, r2
 8014532:	4618      	mov	r0, r3
 8014534:	f7ec fdbe 	bl	80010b4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8014538:	bf00      	nop
 801453a:	3710      	adds	r7, #16
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}
 8014540:	10624dd3 	.word	0x10624dd3
 8014544:	000f4240 	.word	0x000f4240
 8014548:	3b9aca00 	.word	0x3b9aca00

0801454c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 801454c:	b580      	push	{r7, lr}
 801454e:	b082      	sub	sp, #8
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8014556:	683a      	ldr	r2, [r7, #0]
 8014558:	2103      	movs	r1, #3
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f000 f804 	bl	8014568 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8014560:	bf00      	nop
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}

08014568 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8014568:	b580      	push	{r7, lr}
 801456a:	b088      	sub	sp, #32
 801456c:	af00      	add	r7, sp, #0
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	460b      	mov	r3, r1
 8014572:	607a      	str	r2, [r7, #4]
 8014574:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8014576:	f107 0314 	add.w	r3, r7, #20
 801457a:	4618      	mov	r0, r3
 801457c:	f7fc f90e 	bl	801079c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8014580:	7afb      	ldrb	r3, [r7, #11]
 8014582:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	f107 0214 	add.w	r2, r7, #20
 8014592:	2107      	movs	r1, #7
 8014594:	68f8      	ldr	r0, [r7, #12]
 8014596:	4798      	blx	r3
  }
 8014598:	bf00      	nop
 801459a:	3720      	adds	r7, #32
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <_Z41__static_initialization_and_destruction_0v>:
}
 80145a0:	b580      	push	{r7, lr}
 80145a2:	af00      	add	r7, sp, #0
ros::NodeHandle nh;
 80145a4:	4817      	ldr	r0, [pc, #92]	@ (8014604 <_Z41__static_initialization_and_destruction_0v+0x64>)
 80145a6:	f7ff fa03 	bl	80139b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist chassis_current_speed;
 80145aa:	4817      	ldr	r0, [pc, #92]	@ (8014608 <_Z41__static_initialization_and_destruction_0v+0x68>)
 80145ac:	f7fd fb78 	bl	8011ca0 <_ZN13geometry_msgs5TwistC1Ev>
geometry_msgs::Pose chassis_current_pose;
 80145b0:	4816      	ldr	r0, [pc, #88]	@ (801460c <_Z41__static_initialization_and_destruction_0v+0x6c>)
 80145b2:	f7fe ffcd 	bl	8013550 <_ZN13geometry_msgs4PoseC1Ev>
ros::Publisher pub_chassis("/odometry", &chassis_current_pose);
 80145b6:	2300      	movs	r3, #0
 80145b8:	4a14      	ldr	r2, [pc, #80]	@ (801460c <_Z41__static_initialization_and_destruction_0v+0x6c>)
 80145ba:	4915      	ldr	r1, [pc, #84]	@ (8014610 <_Z41__static_initialization_and_destruction_0v+0x70>)
 80145bc:	4815      	ldr	r0, [pc, #84]	@ (8014614 <_Z41__static_initialization_and_destruction_0v+0x74>)
 80145be:	f7fc fc5f 	bl	8010e80 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub_chassis("/cmd_vel", ROS1::callback_Chassis);
 80145c2:	2301      	movs	r3, #1
 80145c4:	4a14      	ldr	r2, [pc, #80]	@ (8014618 <_Z41__static_initialization_and_destruction_0v+0x78>)
 80145c6:	4915      	ldr	r1, [pc, #84]	@ (801461c <_Z41__static_initialization_and_destruction_0v+0x7c>)
 80145c8:	4815      	ldr	r0, [pc, #84]	@ (8014620 <_Z41__static_initialization_and_destruction_0v+0x80>)
 80145ca:	f7ff fa9b 	bl	8013b04 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_intake("/cmd_intake", ROS1::callback_Intake);
 80145ce:	2301      	movs	r3, #1
 80145d0:	4a14      	ldr	r2, [pc, #80]	@ (8014624 <_Z41__static_initialization_and_destruction_0v+0x84>)
 80145d2:	4915      	ldr	r1, [pc, #84]	@ (8014628 <_Z41__static_initialization_and_destruction_0v+0x88>)
 80145d4:	4815      	ldr	r0, [pc, #84]	@ (801462c <_Z41__static_initialization_and_destruction_0v+0x8c>)
 80145d6:	f7ff fab9 	bl	8013b4c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_elevator("/cmd_elevator", ROS1::callback_Elevator);
 80145da:	2301      	movs	r3, #1
 80145dc:	4a14      	ldr	r2, [pc, #80]	@ (8014630 <_Z41__static_initialization_and_destruction_0v+0x90>)
 80145de:	4915      	ldr	r1, [pc, #84]	@ (8014634 <_Z41__static_initialization_and_destruction_0v+0x94>)
 80145e0:	4815      	ldr	r0, [pc, #84]	@ (8014638 <_Z41__static_initialization_and_destruction_0v+0x98>)
 80145e2:	f7ff fad7 	bl	8013b94 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_elevatorDoor("/cmd_elevatorDoor", ROS1::callback_ElevatorDoor);
 80145e6:	2301      	movs	r3, #1
 80145e8:	4a14      	ldr	r2, [pc, #80]	@ (801463c <_Z41__static_initialization_and_destruction_0v+0x9c>)
 80145ea:	4915      	ldr	r1, [pc, #84]	@ (8014640 <_Z41__static_initialization_and_destruction_0v+0xa0>)
 80145ec:	4815      	ldr	r0, [pc, #84]	@ (8014644 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 80145ee:	f7ff faad 	bl	8013b4c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_basketDoor("/cmd_basketDoor", ROS1::callback_BasketDoor);
 80145f2:	2301      	movs	r3, #1
 80145f4:	4a14      	ldr	r2, [pc, #80]	@ (8014648 <_Z41__static_initialization_and_destruction_0v+0xa8>)
 80145f6:	4915      	ldr	r1, [pc, #84]	@ (801464c <_Z41__static_initialization_and_destruction_0v+0xac>)
 80145f8:	4815      	ldr	r0, [pc, #84]	@ (8014650 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 80145fa:	f7ff faa7 	bl	8013b4c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 80145fe:	bf00      	nop
 8014600:	bd80      	pop	{r7, pc}
 8014602:	bf00      	nop
 8014604:	24001184 	.word	0x24001184
 8014608:	240036c0 	.word	0x240036c0
 801460c:	24003708 	.word	0x24003708
 8014610:	080153d8 	.word	0x080153d8
 8014614:	24003758 	.word	0x24003758
 8014618:	08013865 	.word	0x08013865
 801461c:	080153e4 	.word	0x080153e4
 8014620:	24003770 	.word	0x24003770
 8014624:	080138b5 	.word	0x080138b5
 8014628:	080153f0 	.word	0x080153f0
 801462c:	240037d0 	.word	0x240037d0
 8014630:	080138c9 	.word	0x080138c9
 8014634:	080153fc 	.word	0x080153fc
 8014638:	240037ec 	.word	0x240037ec
 801463c:	080138dd 	.word	0x080138dd
 8014640:	0801540c 	.word	0x0801540c
 8014644:	24003808 	.word	0x24003808
 8014648:	080138f1 	.word	0x080138f1
 801464c:	08015420 	.word	0x08015420
 8014650:	24003824 	.word	0x24003824

08014654 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	330c      	adds	r3, #12
 8014662:	6839      	ldr	r1, [r7, #0]
 8014664:	4618      	mov	r0, r3
 8014666:	f7ff f83f 	bl	80136e8 <_ZN8std_msgs5Int3211deserializeEPh>
    this->cb_(msg);
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	695b      	ldr	r3, [r3, #20]
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	320c      	adds	r2, #12
 8014672:	4610      	mov	r0, r2
 8014674:	4798      	blx	r3
  }
 8014676:	bf00      	nop
 8014678:	3708      	adds	r7, #8
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}

0801467e <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 801467e:	b480      	push	{r7}
 8014680:	b083      	sub	sp, #12
 8014682:	af00      	add	r7, sp, #0
 8014684:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	699b      	ldr	r3, [r3, #24]
  }
 801468a:	4618      	mov	r0, r3
 801468c:	370c      	adds	r7, #12
 801468e:	46bd      	mov	sp, r7
 8014690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014694:	4770      	bx	lr

08014696 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8014696:	b580      	push	{r7, lr}
 8014698:	b082      	sub	sp, #8
 801469a:	af00      	add	r7, sp, #0
 801469c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	330c      	adds	r3, #12
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7ff f858 	bl	8013758 <_ZN8std_msgs5Int327getTypeEv>
 80146a8:	4603      	mov	r3, r0
  }
 80146aa:	4618      	mov	r0, r3
 80146ac:	3708      	adds	r7, #8
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}

080146b2 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80146b2:	b580      	push	{r7, lr}
 80146b4:	b082      	sub	sp, #8
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	330c      	adds	r3, #12
 80146be:	4618      	mov	r0, r3
 80146c0:	f7ff f858 	bl	8013774 <_ZN8std_msgs5Int326getMD5Ev>
 80146c4:	4603      	mov	r3, r0
  }
 80146c6:	4618      	mov	r0, r3
 80146c8:	3708      	adds	r7, #8
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}

080146ce <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 80146ce:	b580      	push	{r7, lr}
 80146d0:	b082      	sub	sp, #8
 80146d2:	af00      	add	r7, sp, #0
 80146d4:	6078      	str	r0, [r7, #4]
 80146d6:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	330c      	adds	r3, #12
 80146dc:	6839      	ldr	r1, [r7, #0]
 80146de:	4618      	mov	r0, r3
 80146e0:	f7ff f885 	bl	80137ee <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	695b      	ldr	r3, [r3, #20]
 80146e8:	687a      	ldr	r2, [r7, #4]
 80146ea:	320c      	adds	r2, #12
 80146ec:	4610      	mov	r0, r2
 80146ee:	4798      	blx	r3
  }
 80146f0:	bf00      	nop
 80146f2:	3708      	adds	r7, #8
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}

080146f8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	699b      	ldr	r3, [r3, #24]
  }
 8014704:	4618      	mov	r0, r3
 8014706:	370c      	adds	r7, #12
 8014708:	46bd      	mov	sp, r7
 801470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470e:	4770      	bx	lr

08014710 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8014710:	b580      	push	{r7, lr}
 8014712:	b082      	sub	sp, #8
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	330c      	adds	r3, #12
 801471c:	4618      	mov	r0, r3
 801471e:	f7ff f885 	bl	801382c <_ZN8std_msgs4Bool7getTypeEv>
 8014722:	4603      	mov	r3, r0
  }
 8014724:	4618      	mov	r0, r3
 8014726:	3708      	adds	r7, #8
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}

0801472c <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 801472c:	b580      	push	{r7, lr}
 801472e:	b082      	sub	sp, #8
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	330c      	adds	r3, #12
 8014738:	4618      	mov	r0, r3
 801473a:	f7ff f885 	bl	8013848 <_ZN8std_msgs4Bool6getMD5Ev>
 801473e:	4603      	mov	r3, r0
  }
 8014740:	4618      	mov	r0, r3
 8014742:	3708      	adds	r7, #8
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}

08014748 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8014748:	b580      	push	{r7, lr}
 801474a:	b082      	sub	sp, #8
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
 8014750:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	3310      	adds	r3, #16
 8014756:	6839      	ldr	r1, [r7, #0]
 8014758:	4618      	mov	r0, r3
 801475a:	f7fd fae3 	bl	8011d24 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014762:	687a      	ldr	r2, [r7, #4]
 8014764:	3210      	adds	r2, #16
 8014766:	4610      	mov	r0, r2
 8014768:	4798      	blx	r3
  }
 801476a:	bf00      	nop
 801476c:	3708      	adds	r7, #8
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}

08014772 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8014772:	b480      	push	{r7}
 8014774:	b083      	sub	sp, #12
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
    return endpoint_;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 801477e:	4618      	mov	r0, r3
 8014780:	370c      	adds	r7, #12
 8014782:	46bd      	mov	sp, r7
 8014784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014788:	4770      	bx	lr

0801478a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 801478a:	b580      	push	{r7, lr}
 801478c:	b082      	sub	sp, #8
 801478e:	af00      	add	r7, sp, #0
 8014790:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	3310      	adds	r3, #16
 8014796:	4618      	mov	r0, r3
 8014798:	f7fd faea 	bl	8011d70 <_ZN13geometry_msgs5Twist7getTypeEv>
 801479c:	4603      	mov	r3, r0
  }
 801479e:	4618      	mov	r0, r3
 80147a0:	3708      	adds	r7, #8
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80147a6:	b580      	push	{r7, lr}
 80147a8:	b082      	sub	sp, #8
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	3310      	adds	r3, #16
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7fd faea 	bl	8011d8c <_ZN13geometry_msgs5Twist6getMD5Ev>
 80147b8:	4603      	mov	r3, r0
  }
 80147ba:	4618      	mov	r0, r3
 80147bc:	3708      	adds	r7, #8
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}

080147c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80147c2:	b480      	push	{r7}
 80147c4:	b083      	sub	sp, #12
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	6078      	str	r0, [r7, #4]
    return configured_;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80147d0:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
  };
 80147d4:	4618      	mov	r0, r3
 80147d6:	370c      	adds	r7, #12
 80147d8:	46bd      	mov	sp, r7
 80147da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147de:	4770      	bx	lr

080147e0 <_GLOBAL__sub_I_nh>:
 80147e0:	b580      	push	{r7, lr}
 80147e2:	af00      	add	r7, sp, #0
 80147e4:	f7ff fedc 	bl	80145a0 <_Z41__static_initialization_and_destruction_0v>
 80147e8:	bd80      	pop	{r7, pc}
	...

080147ec <_Z10path_setupv>:
adcRead_ADC3[3]  adc3-3   PA1    V
adcRead_ADC3[4]  adc3-4   PA0  left
adcRead_ADC3[5]  adc3-5   PB0  middle right
adcRead_ADC3[6]  adc3-6   PB1  middle left
*/
void path_setup(){
 80147ec:	b580      	push	{r7, lr}
 80147ee:	af00      	add	r7, sp, #0
	//    HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adcRead_ADC3, 12);
	    // Start DMA for ADC1, storing 3 channels in adcRead_ADC3_ADC1
	  //  HAL_ADCEx_Calibration_Start(&hadc1);
	    //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRead_ADC1, 3);//	    HAL_DMA_Start_IT(&hdma_adc1, (uint32_t)&hadc1.Instance->DR, (uint32_t)adcRead_ADC1, 3);
	   // HAL_ADC_Start(&hadc1);
	    HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adcRead_ADC3, 12);
 80147f0:	220c      	movs	r2, #12
 80147f2:	4905      	ldr	r1, [pc, #20]	@ (8014808 <_Z10path_setupv+0x1c>)
 80147f4:	4805      	ldr	r0, [pc, #20]	@ (801480c <_Z10path_setupv+0x20>)
 80147f6:	f7ef ff1d 	bl	8004634 <HAL_ADC_Start_DMA>
		check++;
 80147fa:	4b05      	ldr	r3, [pc, #20]	@ (8014810 <_Z10path_setupv+0x24>)
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	3301      	adds	r3, #1
 8014800:	4a03      	ldr	r2, [pc, #12]	@ (8014810 <_Z10path_setupv+0x24>)
 8014802:	6013      	str	r3, [r2, #0]
}
 8014804:	bf00      	nop
 8014806:	bd80      	pop	{r7, pc}
 8014808:	24003850 	.word	0x24003850
 801480c:	240002f4 	.word	0x240002f4
 8014810:	24003868 	.word	0x24003868
 8014814:	00000000 	.word	0x00000000

08014818 <_Z6weighti>:
void weight(int dir) {//0:front,1:back,2:right,3:,left
 8014818:	b480      	push	{r7}
 801481a:	b083      	sub	sp, #12
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
    // Calculate line following error (P and D)
	if (dir == 0){//front
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d162      	bne.n	80148ec <_Z6weighti+0xd4>
    weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[3] + 3*adcRead_ADC3[4]) /
 8014826:	4b9e      	ldr	r3, [pc, #632]	@ (8014aa0 <_Z6weighti+0x288>)
 8014828:	881b      	ldrh	r3, [r3, #0]
 801482a:	461a      	mov	r2, r3
 801482c:	009b      	lsls	r3, r3, #2
 801482e:	1ad3      	subs	r3, r2, r3
 8014830:	4a9b      	ldr	r2, [pc, #620]	@ (8014aa0 <_Z6weighti+0x288>)
 8014832:	8852      	ldrh	r2, [r2, #2]
 8014834:	1a9b      	subs	r3, r3, r2
 8014836:	4a9a      	ldr	r2, [pc, #616]	@ (8014aa0 <_Z6weighti+0x288>)
 8014838:	88d2      	ldrh	r2, [r2, #6]
 801483a:	441a      	add	r2, r3
 801483c:	4b98      	ldr	r3, [pc, #608]	@ (8014aa0 <_Z6weighti+0x288>)
 801483e:	891b      	ldrh	r3, [r3, #8]
 8014840:	4619      	mov	r1, r3
 8014842:	460b      	mov	r3, r1
 8014844:	005b      	lsls	r3, r3, #1
 8014846:	440b      	add	r3, r1
 8014848:	4413      	add	r3, r2
 801484a:	ee07 3a90 	vmov	s15, r3
 801484e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                 (adcRead_ADC3[0] + adcRead_ADC3[1]+ 4096 +adcRead_ADC3[3] + adcRead_ADC3[4]));
 8014852:	4b93      	ldr	r3, [pc, #588]	@ (8014aa0 <_Z6weighti+0x288>)
 8014854:	881b      	ldrh	r3, [r3, #0]
 8014856:	461a      	mov	r2, r3
 8014858:	4b91      	ldr	r3, [pc, #580]	@ (8014aa0 <_Z6weighti+0x288>)
 801485a:	885b      	ldrh	r3, [r3, #2]
 801485c:	4413      	add	r3, r2
 801485e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014862:	4a8f      	ldr	r2, [pc, #572]	@ (8014aa0 <_Z6weighti+0x288>)
 8014864:	88d2      	ldrh	r2, [r2, #6]
 8014866:	4413      	add	r3, r2
 8014868:	4a8d      	ldr	r2, [pc, #564]	@ (8014aa0 <_Z6weighti+0x288>)
 801486a:	8912      	ldrh	r2, [r2, #8]
 801486c:	4413      	add	r3, r2
    weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[3] + 3*adcRead_ADC3[4]) /
 801486e:	ee07 3a90 	vmov	s15, r3
 8014872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801487a:	4b8a      	ldr	r3, [pc, #552]	@ (8014aa4 <_Z6weighti+0x28c>)
 801487c:	edc3 7a00 	vstr	s15, [r3]
    weight_change = weight_err - weight_lasttime;
 8014880:	4b88      	ldr	r3, [pc, #544]	@ (8014aa4 <_Z6weighti+0x28c>)
 8014882:	ed93 7a00 	vldr	s14, [r3]
 8014886:	4b88      	ldr	r3, [pc, #544]	@ (8014aa8 <_Z6weighti+0x290>)
 8014888:	edd3 7a00 	vldr	s15, [r3]
 801488c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014890:	4b86      	ldr	r3, [pc, #536]	@ (8014aac <_Z6weighti+0x294>)
 8014892:	edc3 7a00 	vstr	s15, [r3]
    weight_lasttime = weight_err;
 8014896:	4b83      	ldr	r3, [pc, #524]	@ (8014aa4 <_Z6weighti+0x28c>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	4a83      	ldr	r2, [pc, #524]	@ (8014aa8 <_Z6weighti+0x290>)
 801489c:	6013      	str	r3, [r2, #0]

    // For mecanum: output chassis velocity vector
    cmd_v_y = normal_Speed; // Forward speed (positive: forward)
 801489e:	4b84      	ldr	r3, [pc, #528]	@ (8014ab0 <_Z6weighti+0x298>)
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	ee07 3a90 	vmov	s15, r3
 80148a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148aa:	4b82      	ldr	r3, [pc, #520]	@ (8014ab4 <_Z6weighti+0x29c>)
 80148ac:	edc3 7a00 	vstr	s15, [r3]
    cmd_v_x = 0;            // No strafe (add logic here if you want to strafe)
 80148b0:	4b81      	ldr	r3, [pc, #516]	@ (8014ab8 <_Z6weighti+0x2a0>)
 80148b2:	f04f 0200 	mov.w	r2, #0
 80148b6:	601a      	str	r2, [r3, #0]
    cmd_v_w = (weight_err * w_kp + weight_change * w_kd); // Rotation correction
 80148b8:	4b7a      	ldr	r3, [pc, #488]	@ (8014aa4 <_Z6weighti+0x28c>)
 80148ba:	edd3 7a00 	vldr	s15, [r3]
 80148be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80148c2:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8014a98 <_Z6weighti+0x280>
 80148c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80148ca:	4b78      	ldr	r3, [pc, #480]	@ (8014aac <_Z6weighti+0x294>)
 80148cc:	edd3 7a00 	vldr	s15, [r3]
 80148d0:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8014abc <_Z6weighti+0x2a4>
 80148d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80148d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80148dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80148e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80148e4:	4b76      	ldr	r3, [pc, #472]	@ (8014ac0 <_Z6weighti+0x2a8>)
 80148e6:	edc3 7a00 	vstr	s15, [r3]
	cmd_v_y = 0; // Forward speed (positive: forward)
	cmd_v_x = -normal_Speed;            // No strafe (add logic here if you want to strafe)
	cmd_v_w = (weight_err * w_kp + weight_change * w_kd); // Rotation correction
	}

	}
 80148ea:	e0cf      	b.n	8014a8c <_Z6weighti+0x274>
	else if(dir == 1){//back
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2b01      	cmp	r3, #1
 80148f0:	d163      	bne.n	80149ba <_Z6weighti+0x1a2>
	weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[3] + 3*adcRead_ADC3[4]) /
 80148f2:	4b6b      	ldr	r3, [pc, #428]	@ (8014aa0 <_Z6weighti+0x288>)
 80148f4:	881b      	ldrh	r3, [r3, #0]
 80148f6:	461a      	mov	r2, r3
 80148f8:	009b      	lsls	r3, r3, #2
 80148fa:	1ad3      	subs	r3, r2, r3
 80148fc:	4a68      	ldr	r2, [pc, #416]	@ (8014aa0 <_Z6weighti+0x288>)
 80148fe:	8852      	ldrh	r2, [r2, #2]
 8014900:	1a9b      	subs	r3, r3, r2
 8014902:	4a67      	ldr	r2, [pc, #412]	@ (8014aa0 <_Z6weighti+0x288>)
 8014904:	88d2      	ldrh	r2, [r2, #6]
 8014906:	441a      	add	r2, r3
 8014908:	4b65      	ldr	r3, [pc, #404]	@ (8014aa0 <_Z6weighti+0x288>)
 801490a:	891b      	ldrh	r3, [r3, #8]
 801490c:	4619      	mov	r1, r3
 801490e:	460b      	mov	r3, r1
 8014910:	005b      	lsls	r3, r3, #1
 8014912:	440b      	add	r3, r1
 8014914:	4413      	add	r3, r2
 8014916:	ee07 3a90 	vmov	s15, r3
 801491a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
		            (adcRead_ADC3[0] + adcRead_ADC3[1]+ 4096 +adcRead_ADC3[3] + adcRead_ADC3[4]));
 801491e:	4b60      	ldr	r3, [pc, #384]	@ (8014aa0 <_Z6weighti+0x288>)
 8014920:	881b      	ldrh	r3, [r3, #0]
 8014922:	461a      	mov	r2, r3
 8014924:	4b5e      	ldr	r3, [pc, #376]	@ (8014aa0 <_Z6weighti+0x288>)
 8014926:	885b      	ldrh	r3, [r3, #2]
 8014928:	4413      	add	r3, r2
 801492a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801492e:	4a5c      	ldr	r2, [pc, #368]	@ (8014aa0 <_Z6weighti+0x288>)
 8014930:	88d2      	ldrh	r2, [r2, #6]
 8014932:	4413      	add	r3, r2
 8014934:	4a5a      	ldr	r2, [pc, #360]	@ (8014aa0 <_Z6weighti+0x288>)
 8014936:	8912      	ldrh	r2, [r2, #8]
 8014938:	4413      	add	r3, r2
	weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[3] + 3*adcRead_ADC3[4]) /
 801493a:	ee07 3a90 	vmov	s15, r3
 801493e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014946:	4b57      	ldr	r3, [pc, #348]	@ (8014aa4 <_Z6weighti+0x28c>)
 8014948:	edc3 7a00 	vstr	s15, [r3]
	weight_change = weight_err - weight_lasttime;
 801494c:	4b55      	ldr	r3, [pc, #340]	@ (8014aa4 <_Z6weighti+0x28c>)
 801494e:	ed93 7a00 	vldr	s14, [r3]
 8014952:	4b55      	ldr	r3, [pc, #340]	@ (8014aa8 <_Z6weighti+0x290>)
 8014954:	edd3 7a00 	vldr	s15, [r3]
 8014958:	ee77 7a67 	vsub.f32	s15, s14, s15
 801495c:	4b53      	ldr	r3, [pc, #332]	@ (8014aac <_Z6weighti+0x294>)
 801495e:	edc3 7a00 	vstr	s15, [r3]
	weight_lasttime = weight_err;
 8014962:	4b50      	ldr	r3, [pc, #320]	@ (8014aa4 <_Z6weighti+0x28c>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	4a50      	ldr	r2, [pc, #320]	@ (8014aa8 <_Z6weighti+0x290>)
 8014968:	6013      	str	r3, [r2, #0]
	cmd_v_y = -normal_Speed; // Forward speed (positive: forward)
 801496a:	4b51      	ldr	r3, [pc, #324]	@ (8014ab0 <_Z6weighti+0x298>)
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	425b      	negs	r3, r3
 8014970:	ee07 3a90 	vmov	s15, r3
 8014974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014978:	4b4e      	ldr	r3, [pc, #312]	@ (8014ab4 <_Z6weighti+0x29c>)
 801497a:	edc3 7a00 	vstr	s15, [r3]
	cmd_v_x = 0;            // No strafe (add logic here if you want to strafe)
 801497e:	4b4e      	ldr	r3, [pc, #312]	@ (8014ab8 <_Z6weighti+0x2a0>)
 8014980:	f04f 0200 	mov.w	r2, #0
 8014984:	601a      	str	r2, [r3, #0]
	cmd_v_w = (weight_err * w_kp + weight_change * w_kd); // Rotation correction
 8014986:	4b47      	ldr	r3, [pc, #284]	@ (8014aa4 <_Z6weighti+0x28c>)
 8014988:	edd3 7a00 	vldr	s15, [r3]
 801498c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8014990:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8014a98 <_Z6weighti+0x280>
 8014994:	ee27 6b06 	vmul.f64	d6, d7, d6
 8014998:	4b44      	ldr	r3, [pc, #272]	@ (8014aac <_Z6weighti+0x294>)
 801499a:	edd3 7a00 	vldr	s15, [r3]
 801499e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8014abc <_Z6weighti+0x2a4>
 80149a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80149aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80149ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80149b2:	4b43      	ldr	r3, [pc, #268]	@ (8014ac0 <_Z6weighti+0x2a8>)
 80149b4:	edc3 7a00 	vstr	s15, [r3]
	}
 80149b8:	e068      	b.n	8014a8c <_Z6weighti+0x274>
	else if(dir == 2){//right
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	2b02      	cmp	r3, #2
 80149be:	d065      	beq.n	8014a8c <_Z6weighti+0x274>
	else if(dir == 3){//left
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2b03      	cmp	r3, #3
 80149c4:	d162      	bne.n	8014a8c <_Z6weighti+0x274>
	weight_err = ((float)(-3*adcRead_ADC3[5] - adcRead_ADC3[6] + adcRead_ADC3[8] + 3*adcRead_ADC3[9]) /
 80149c6:	4b36      	ldr	r3, [pc, #216]	@ (8014aa0 <_Z6weighti+0x288>)
 80149c8:	895b      	ldrh	r3, [r3, #10]
 80149ca:	461a      	mov	r2, r3
 80149cc:	009b      	lsls	r3, r3, #2
 80149ce:	1ad3      	subs	r3, r2, r3
 80149d0:	4a33      	ldr	r2, [pc, #204]	@ (8014aa0 <_Z6weighti+0x288>)
 80149d2:	8992      	ldrh	r2, [r2, #12]
 80149d4:	1a9b      	subs	r3, r3, r2
 80149d6:	4a32      	ldr	r2, [pc, #200]	@ (8014aa0 <_Z6weighti+0x288>)
 80149d8:	8a12      	ldrh	r2, [r2, #16]
 80149da:	441a      	add	r2, r3
 80149dc:	4b30      	ldr	r3, [pc, #192]	@ (8014aa0 <_Z6weighti+0x288>)
 80149de:	8a5b      	ldrh	r3, [r3, #18]
 80149e0:	4619      	mov	r1, r3
 80149e2:	460b      	mov	r3, r1
 80149e4:	005b      	lsls	r3, r3, #1
 80149e6:	440b      	add	r3, r1
 80149e8:	4413      	add	r3, r2
 80149ea:	ee07 3a90 	vmov	s15, r3
 80149ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
				     (adcRead_ADC3[5] + adcRead_ADC3[6]+ 4096 +adcRead_ADC3[8] + adcRead_ADC3[9]));
 80149f2:	4b2b      	ldr	r3, [pc, #172]	@ (8014aa0 <_Z6weighti+0x288>)
 80149f4:	895b      	ldrh	r3, [r3, #10]
 80149f6:	461a      	mov	r2, r3
 80149f8:	4b29      	ldr	r3, [pc, #164]	@ (8014aa0 <_Z6weighti+0x288>)
 80149fa:	899b      	ldrh	r3, [r3, #12]
 80149fc:	4413      	add	r3, r2
 80149fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014a02:	4a27      	ldr	r2, [pc, #156]	@ (8014aa0 <_Z6weighti+0x288>)
 8014a04:	8a12      	ldrh	r2, [r2, #16]
 8014a06:	4413      	add	r3, r2
 8014a08:	4a25      	ldr	r2, [pc, #148]	@ (8014aa0 <_Z6weighti+0x288>)
 8014a0a:	8a52      	ldrh	r2, [r2, #18]
 8014a0c:	4413      	add	r3, r2
	weight_err = ((float)(-3*adcRead_ADC3[5] - adcRead_ADC3[6] + adcRead_ADC3[8] + 3*adcRead_ADC3[9]) /
 8014a0e:	ee07 3a90 	vmov	s15, r3
 8014a12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014a1a:	4b22      	ldr	r3, [pc, #136]	@ (8014aa4 <_Z6weighti+0x28c>)
 8014a1c:	edc3 7a00 	vstr	s15, [r3]
	weight_change = weight_err - weight_lasttime;
 8014a20:	4b20      	ldr	r3, [pc, #128]	@ (8014aa4 <_Z6weighti+0x28c>)
 8014a22:	ed93 7a00 	vldr	s14, [r3]
 8014a26:	4b20      	ldr	r3, [pc, #128]	@ (8014aa8 <_Z6weighti+0x290>)
 8014a28:	edd3 7a00 	vldr	s15, [r3]
 8014a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a30:	4b1e      	ldr	r3, [pc, #120]	@ (8014aac <_Z6weighti+0x294>)
 8014a32:	edc3 7a00 	vstr	s15, [r3]
	weight_lasttime = weight_err;
 8014a36:	4b1b      	ldr	r3, [pc, #108]	@ (8014aa4 <_Z6weighti+0x28c>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8014aa8 <_Z6weighti+0x290>)
 8014a3c:	6013      	str	r3, [r2, #0]
	cmd_v_y = 0; // Forward speed (positive: forward)
 8014a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8014ab4 <_Z6weighti+0x29c>)
 8014a40:	f04f 0200 	mov.w	r2, #0
 8014a44:	601a      	str	r2, [r3, #0]
	cmd_v_x = -normal_Speed;            // No strafe (add logic here if you want to strafe)
 8014a46:	4b1a      	ldr	r3, [pc, #104]	@ (8014ab0 <_Z6weighti+0x298>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	425b      	negs	r3, r3
 8014a4c:	ee07 3a90 	vmov	s15, r3
 8014a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a54:	4b18      	ldr	r3, [pc, #96]	@ (8014ab8 <_Z6weighti+0x2a0>)
 8014a56:	edc3 7a00 	vstr	s15, [r3]
	cmd_v_w = (weight_err * w_kp + weight_change * w_kd); // Rotation correction
 8014a5a:	4b12      	ldr	r3, [pc, #72]	@ (8014aa4 <_Z6weighti+0x28c>)
 8014a5c:	edd3 7a00 	vldr	s15, [r3]
 8014a60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8014a64:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8014a98 <_Z6weighti+0x280>
 8014a68:	ee27 6b06 	vmul.f64	d6, d7, d6
 8014a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8014aac <_Z6weighti+0x294>)
 8014a6e:	edd3 7a00 	vldr	s15, [r3]
 8014a72:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8014abc <_Z6weighti+0x2a4>
 8014a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8014a7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8014a82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8014a86:	4b0e      	ldr	r3, [pc, #56]	@ (8014ac0 <_Z6weighti+0x2a8>)
 8014a88:	edc3 7a00 	vstr	s15, [r3]
	}
 8014a8c:	bf00      	nop
 8014a8e:	370c      	adds	r7, #12
 8014a90:	46bd      	mov	sp, r7
 8014a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a96:	4770      	bx	lr
 8014a98:	47ae147b 	.word	0x47ae147b
 8014a9c:	3fb47ae1 	.word	0x3fb47ae1
 8014aa0:	24003850 	.word	0x24003850
 8014aa4:	2400386c 	.word	0x2400386c
 8014aa8:	24003870 	.word	0x24003870
 8014aac:	24003874 	.word	0x24003874
 8014ab0:	24000028 	.word	0x24000028
 8014ab4:	24003848 	.word	0x24003848
 8014ab8:	24003844 	.word	0x24003844
 8014abc:	00000000 	.word	0x00000000
 8014ac0:	2400384c 	.word	0x2400384c

08014ac4 <_Z4pathi>:


//motor_speed[0]:right motor speed, motor_speed[1]:left motor speed
void path(int dir) { // follow path for mecanum chassis
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b082      	sub	sp, #8
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
//		cmd_v_y = normal_Speed; // Forward speed
//		cmd_v_x = 0;            // No strafe
//		cmd_v_w = 0;            // No rotation
//   }
//    else {
         weight(dir); // sets cmd_v_y, cmd_v_x, cmd_v_w
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f7ff fea3 	bl	8014818 <_Z6weighti>
//    }
}
 8014ad2:	bf00      	nop
 8014ad4:	3708      	adds	r7, #8
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}

08014ada <sinf_poly>:
 8014ada:	07cb      	lsls	r3, r1, #31
 8014adc:	d412      	bmi.n	8014b04 <sinf_poly+0x2a>
 8014ade:	ee21 5b00 	vmul.f64	d5, d1, d0
 8014ae2:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8014ae6:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8014aea:	eea6 7b01 	vfma.f64	d7, d6, d1
 8014aee:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8014af2:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014af6:	eea6 0b05 	vfma.f64	d0, d6, d5
 8014afa:	eea7 0b01 	vfma.f64	d0, d7, d1
 8014afe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014b02:	4770      	bx	lr
 8014b04:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8014b08:	ee21 5b01 	vmul.f64	d5, d1, d1
 8014b0c:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8014b10:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8014b14:	eea1 7b06 	vfma.f64	d7, d1, d6
 8014b18:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8014b1c:	eea1 0b06 	vfma.f64	d0, d1, d6
 8014b20:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8014b24:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014b28:	eea5 0b06 	vfma.f64	d0, d5, d6
 8014b2c:	e7e5      	b.n	8014afa <sinf_poly+0x20>
	...

08014b30 <sinf>:
 8014b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b32:	ee10 4a10 	vmov	r4, s0
 8014b36:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014b3a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8014b3e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8014b42:	eef0 7a40 	vmov.f32	s15, s0
 8014b46:	d218      	bcs.n	8014b7a <sinf+0x4a>
 8014b48:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014b4c:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8014b50:	d20a      	bcs.n	8014b68 <sinf+0x38>
 8014b52:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8014b56:	d103      	bne.n	8014b60 <sinf+0x30>
 8014b58:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8014b5c:	ed8d 1a01 	vstr	s2, [sp, #4]
 8014b60:	eeb0 0a67 	vmov.f32	s0, s15
 8014b64:	b003      	add	sp, #12
 8014b66:	bd30      	pop	{r4, r5, pc}
 8014b68:	483b      	ldr	r0, [pc, #236]	@ (8014c58 <sinf+0x128>)
 8014b6a:	eeb0 0b46 	vmov.f64	d0, d6
 8014b6e:	2100      	movs	r1, #0
 8014b70:	b003      	add	sp, #12
 8014b72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b76:	f7ff bfb0 	b.w	8014ada <sinf_poly>
 8014b7a:	f240 422e 	movw	r2, #1070	@ 0x42e
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	d824      	bhi.n	8014bcc <sinf+0x9c>
 8014b82:	4b35      	ldr	r3, [pc, #212]	@ (8014c58 <sinf+0x128>)
 8014b84:	ed93 7b08 	vldr	d7, [r3, #32]
 8014b88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014b8c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014b90:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014b94:	ee17 1a90 	vmov	r1, s15
 8014b98:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8014b9c:	1609      	asrs	r1, r1, #24
 8014b9e:	ee07 1a90 	vmov	s15, r1
 8014ba2:	f001 0203 	and.w	r2, r1, #3
 8014ba6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014baa:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014bae:	ed92 0b00 	vldr	d0, [r2]
 8014bb2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8014bb6:	f011 0f02 	tst.w	r1, #2
 8014bba:	eea5 6b47 	vfms.f64	d6, d5, d7
 8014bbe:	bf08      	it	eq
 8014bc0:	4618      	moveq	r0, r3
 8014bc2:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014bc6:	ee20 0b06 	vmul.f64	d0, d0, d6
 8014bca:	e7d1      	b.n	8014b70 <sinf+0x40>
 8014bcc:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8014bd0:	d237      	bcs.n	8014c42 <sinf+0x112>
 8014bd2:	4922      	ldr	r1, [pc, #136]	@ (8014c5c <sinf+0x12c>)
 8014bd4:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8014bd8:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8014bdc:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8014be0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8014be4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014be8:	6a10      	ldr	r0, [r2, #32]
 8014bea:	6912      	ldr	r2, [r2, #16]
 8014bec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014bf0:	40ab      	lsls	r3, r5
 8014bf2:	fba0 5003 	umull	r5, r0, r0, r3
 8014bf6:	4359      	muls	r1, r3
 8014bf8:	fbe3 0102 	umlal	r0, r1, r3, r2
 8014bfc:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8014c00:	0f9d      	lsrs	r5, r3, #30
 8014c02:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8014c06:	1ac9      	subs	r1, r1, r3
 8014c08:	f7eb fd18 	bl	800063c <__aeabi_l2d>
 8014c0c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8014c10:	4b11      	ldr	r3, [pc, #68]	@ (8014c58 <sinf+0x128>)
 8014c12:	f004 0203 	and.w	r2, r4, #3
 8014c16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014c1a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8014c50 <sinf+0x120>
 8014c1e:	ed92 0b00 	vldr	d0, [r2]
 8014c22:	ec41 0b17 	vmov	d7, r0, r1
 8014c26:	f014 0f02 	tst.w	r4, #2
 8014c2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014c2e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014c32:	4629      	mov	r1, r5
 8014c34:	bf08      	it	eq
 8014c36:	4618      	moveq	r0, r3
 8014c38:	ee27 1b07 	vmul.f64	d1, d7, d7
 8014c3c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014c40:	e796      	b.n	8014b70 <sinf+0x40>
 8014c42:	b003      	add	sp, #12
 8014c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c48:	f000 b8e4 	b.w	8014e14 <__math_invalidf>
 8014c4c:	f3af 8000 	nop.w
 8014c50:	54442d18 	.word	0x54442d18
 8014c54:	3c1921fb 	.word	0x3c1921fb
 8014c58:	08015698 	.word	0x08015698
 8014c5c:	08015634 	.word	0x08015634

08014c60 <sinf_poly>:
 8014c60:	07cb      	lsls	r3, r1, #31
 8014c62:	d412      	bmi.n	8014c8a <sinf_poly+0x2a>
 8014c64:	ee21 5b00 	vmul.f64	d5, d1, d0
 8014c68:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8014c6c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8014c70:	eea6 7b01 	vfma.f64	d7, d6, d1
 8014c74:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8014c78:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014c7c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8014c80:	eea7 0b01 	vfma.f64	d0, d7, d1
 8014c84:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014c88:	4770      	bx	lr
 8014c8a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8014c8e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8014c92:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8014c96:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8014c9a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8014c9e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8014ca2:	eea1 0b06 	vfma.f64	d0, d1, d6
 8014ca6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8014caa:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014cae:	eea5 0b06 	vfma.f64	d0, d5, d6
 8014cb2:	e7e5      	b.n	8014c80 <sinf_poly+0x20>
 8014cb4:	0000      	movs	r0, r0
	...

08014cb8 <cosf>:
 8014cb8:	b538      	push	{r3, r4, r5, lr}
 8014cba:	ee10 4a10 	vmov	r4, s0
 8014cbe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014cc2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8014cc6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8014cca:	d21f      	bcs.n	8014d0c <cosf+0x54>
 8014ccc:	ee27 7b07 	vmul.f64	d7, d7, d7
 8014cd0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8014cd4:	f0c0 8082 	bcc.w	8014ddc <cosf+0x124>
 8014cd8:	ee27 4b07 	vmul.f64	d4, d7, d7
 8014cdc:	4b44      	ldr	r3, [pc, #272]	@ (8014df0 <cosf+0x138>)
 8014cde:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8014ce2:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8014ce6:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8014cea:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014cee:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8014cf2:	eea7 0b05 	vfma.f64	d0, d7, d5
 8014cf6:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8014cfa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014cfe:	eea4 0b05 	vfma.f64	d0, d4, d5
 8014d02:	eea6 0b07 	vfma.f64	d0, d6, d7
 8014d06:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014d0a:	bd38      	pop	{r3, r4, r5, pc}
 8014d0c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8014d10:	4293      	cmp	r3, r2
 8014d12:	d829      	bhi.n	8014d68 <cosf+0xb0>
 8014d14:	4b36      	ldr	r3, [pc, #216]	@ (8014df0 <cosf+0x138>)
 8014d16:	ed93 6b08 	vldr	d6, [r3, #32]
 8014d1a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8014d1e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8014d22:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014d26:	ee16 1a90 	vmov	r1, s13
 8014d2a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8014d2e:	1609      	asrs	r1, r1, #24
 8014d30:	ee06 1a90 	vmov	s13, r1
 8014d34:	f001 0203 	and.w	r2, r1, #3
 8014d38:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014d3c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8014d40:	ed92 0b00 	vldr	d0, [r2]
 8014d44:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8014d48:	f011 0f02 	tst.w	r1, #2
 8014d4c:	f081 0101 	eor.w	r1, r1, #1
 8014d50:	eea5 7b46 	vfms.f64	d7, d5, d6
 8014d54:	bf08      	it	eq
 8014d56:	4618      	moveq	r0, r3
 8014d58:	ee27 1b07 	vmul.f64	d1, d7, d7
 8014d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d60:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014d64:	f7ff bf7c 	b.w	8014c60 <sinf_poly>
 8014d68:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8014d6c:	d232      	bcs.n	8014dd4 <cosf+0x11c>
 8014d6e:	4921      	ldr	r1, [pc, #132]	@ (8014df4 <cosf+0x13c>)
 8014d70:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8014d74:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8014d78:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8014d7c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8014d80:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014d84:	6a10      	ldr	r0, [r2, #32]
 8014d86:	6912      	ldr	r2, [r2, #16]
 8014d88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014d8c:	40ab      	lsls	r3, r5
 8014d8e:	fba0 5003 	umull	r5, r0, r0, r3
 8014d92:	4359      	muls	r1, r3
 8014d94:	fbe3 0102 	umlal	r0, r1, r3, r2
 8014d98:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8014d9c:	0f9d      	lsrs	r5, r3, #30
 8014d9e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8014da2:	1ac9      	subs	r1, r1, r3
 8014da4:	f7eb fc4a 	bl	800063c <__aeabi_l2d>
 8014da8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8014dac:	4b10      	ldr	r3, [pc, #64]	@ (8014df0 <cosf+0x138>)
 8014dae:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8014de8 <cosf+0x130>
 8014db2:	ec41 0b17 	vmov	d7, r0, r1
 8014db6:	f004 0203 	and.w	r2, r4, #3
 8014dba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014dbe:	ed92 0b00 	vldr	d0, [r2]
 8014dc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014dc6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014dca:	f014 0f02 	tst.w	r4, #2
 8014dce:	f085 0101 	eor.w	r1, r5, #1
 8014dd2:	e7bf      	b.n	8014d54 <cosf+0x9c>
 8014dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014dd8:	f000 b81c 	b.w	8014e14 <__math_invalidf>
 8014ddc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014de0:	e793      	b.n	8014d0a <cosf+0x52>
 8014de2:	bf00      	nop
 8014de4:	f3af 8000 	nop.w
 8014de8:	54442d18 	.word	0x54442d18
 8014dec:	3c1921fb 	.word	0x3c1921fb
 8014df0:	08015698 	.word	0x08015698
 8014df4:	08015634 	.word	0x08015634

08014df8 <with_errnof>:
 8014df8:	b510      	push	{r4, lr}
 8014dfa:	ed2d 8b02 	vpush	{d8}
 8014dfe:	eeb0 8a40 	vmov.f32	s16, s0
 8014e02:	4604      	mov	r4, r0
 8014e04:	f000 f854 	bl	8014eb0 <__errno>
 8014e08:	eeb0 0a48 	vmov.f32	s0, s16
 8014e0c:	ecbd 8b02 	vpop	{d8}
 8014e10:	6004      	str	r4, [r0, #0]
 8014e12:	bd10      	pop	{r4, pc}

08014e14 <__math_invalidf>:
 8014e14:	eef0 7a40 	vmov.f32	s15, s0
 8014e18:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014e1c:	eef4 7a67 	vcmp.f32	s15, s15
 8014e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e24:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8014e28:	d602      	bvs.n	8014e30 <__math_invalidf+0x1c>
 8014e2a:	2021      	movs	r0, #33	@ 0x21
 8014e2c:	f7ff bfe4 	b.w	8014df8 <with_errnof>
 8014e30:	4770      	bx	lr
	...

08014e34 <realloc>:
 8014e34:	4b02      	ldr	r3, [pc, #8]	@ (8014e40 <realloc+0xc>)
 8014e36:	460a      	mov	r2, r1
 8014e38:	4601      	mov	r1, r0
 8014e3a:	6818      	ldr	r0, [r3, #0]
 8014e3c:	f000 b802 	b.w	8014e44 <_realloc_r>
 8014e40:	2400002c 	.word	0x2400002c

08014e44 <_realloc_r>:
 8014e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e48:	4607      	mov	r7, r0
 8014e4a:	4614      	mov	r4, r2
 8014e4c:	460d      	mov	r5, r1
 8014e4e:	b921      	cbnz	r1, 8014e5a <_realloc_r+0x16>
 8014e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e54:	4611      	mov	r1, r2
 8014e56:	f000 b8d1 	b.w	8014ffc <_malloc_r>
 8014e5a:	b92a      	cbnz	r2, 8014e68 <_realloc_r+0x24>
 8014e5c:	f000 f862 	bl	8014f24 <_free_r>
 8014e60:	4625      	mov	r5, r4
 8014e62:	4628      	mov	r0, r5
 8014e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e68:	f000 f954 	bl	8015114 <_malloc_usable_size_r>
 8014e6c:	4284      	cmp	r4, r0
 8014e6e:	4606      	mov	r6, r0
 8014e70:	d802      	bhi.n	8014e78 <_realloc_r+0x34>
 8014e72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014e76:	d8f4      	bhi.n	8014e62 <_realloc_r+0x1e>
 8014e78:	4621      	mov	r1, r4
 8014e7a:	4638      	mov	r0, r7
 8014e7c:	f000 f8be 	bl	8014ffc <_malloc_r>
 8014e80:	4680      	mov	r8, r0
 8014e82:	b908      	cbnz	r0, 8014e88 <_realloc_r+0x44>
 8014e84:	4645      	mov	r5, r8
 8014e86:	e7ec      	b.n	8014e62 <_realloc_r+0x1e>
 8014e88:	42b4      	cmp	r4, r6
 8014e8a:	4622      	mov	r2, r4
 8014e8c:	4629      	mov	r1, r5
 8014e8e:	bf28      	it	cs
 8014e90:	4632      	movcs	r2, r6
 8014e92:	f000 f839 	bl	8014f08 <memcpy>
 8014e96:	4629      	mov	r1, r5
 8014e98:	4638      	mov	r0, r7
 8014e9a:	f000 f843 	bl	8014f24 <_free_r>
 8014e9e:	e7f1      	b.n	8014e84 <_realloc_r+0x40>

08014ea0 <memset>:
 8014ea0:	4402      	add	r2, r0
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	d100      	bne.n	8014eaa <memset+0xa>
 8014ea8:	4770      	bx	lr
 8014eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8014eae:	e7f9      	b.n	8014ea4 <memset+0x4>

08014eb0 <__errno>:
 8014eb0:	4b01      	ldr	r3, [pc, #4]	@ (8014eb8 <__errno+0x8>)
 8014eb2:	6818      	ldr	r0, [r3, #0]
 8014eb4:	4770      	bx	lr
 8014eb6:	bf00      	nop
 8014eb8:	2400002c 	.word	0x2400002c

08014ebc <__libc_init_array>:
 8014ebc:	b570      	push	{r4, r5, r6, lr}
 8014ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8014ef4 <__libc_init_array+0x38>)
 8014ec0:	4c0d      	ldr	r4, [pc, #52]	@ (8014ef8 <__libc_init_array+0x3c>)
 8014ec2:	1b64      	subs	r4, r4, r5
 8014ec4:	10a4      	asrs	r4, r4, #2
 8014ec6:	2600      	movs	r6, #0
 8014ec8:	42a6      	cmp	r6, r4
 8014eca:	d109      	bne.n	8014ee0 <__libc_init_array+0x24>
 8014ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8014efc <__libc_init_array+0x40>)
 8014ece:	4c0c      	ldr	r4, [pc, #48]	@ (8014f00 <__libc_init_array+0x44>)
 8014ed0:	f000 f938 	bl	8015144 <_init>
 8014ed4:	1b64      	subs	r4, r4, r5
 8014ed6:	10a4      	asrs	r4, r4, #2
 8014ed8:	2600      	movs	r6, #0
 8014eda:	42a6      	cmp	r6, r4
 8014edc:	d105      	bne.n	8014eea <__libc_init_array+0x2e>
 8014ede:	bd70      	pop	{r4, r5, r6, pc}
 8014ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ee4:	4798      	blx	r3
 8014ee6:	3601      	adds	r6, #1
 8014ee8:	e7ee      	b.n	8014ec8 <__libc_init_array+0xc>
 8014eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8014eee:	4798      	blx	r3
 8014ef0:	3601      	adds	r6, #1
 8014ef2:	e7f2      	b.n	8014eda <__libc_init_array+0x1e>
 8014ef4:	08015780 	.word	0x08015780
 8014ef8:	08015780 	.word	0x08015780
 8014efc:	08015780 	.word	0x08015780
 8014f00:	08015790 	.word	0x08015790

08014f04 <__retarget_lock_acquire_recursive>:
 8014f04:	4770      	bx	lr

08014f06 <__retarget_lock_release_recursive>:
 8014f06:	4770      	bx	lr

08014f08 <memcpy>:
 8014f08:	440a      	add	r2, r1
 8014f0a:	4291      	cmp	r1, r2
 8014f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014f10:	d100      	bne.n	8014f14 <memcpy+0xc>
 8014f12:	4770      	bx	lr
 8014f14:	b510      	push	{r4, lr}
 8014f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f1e:	4291      	cmp	r1, r2
 8014f20:	d1f9      	bne.n	8014f16 <memcpy+0xe>
 8014f22:	bd10      	pop	{r4, pc}

08014f24 <_free_r>:
 8014f24:	b538      	push	{r3, r4, r5, lr}
 8014f26:	4605      	mov	r5, r0
 8014f28:	2900      	cmp	r1, #0
 8014f2a:	d041      	beq.n	8014fb0 <_free_r+0x8c>
 8014f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f30:	1f0c      	subs	r4, r1, #4
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	bfb8      	it	lt
 8014f36:	18e4      	addlt	r4, r4, r3
 8014f38:	f000 f8e0 	bl	80150fc <__malloc_lock>
 8014f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8014fb4 <_free_r+0x90>)
 8014f3e:	6813      	ldr	r3, [r2, #0]
 8014f40:	b933      	cbnz	r3, 8014f50 <_free_r+0x2c>
 8014f42:	6063      	str	r3, [r4, #4]
 8014f44:	6014      	str	r4, [r2, #0]
 8014f46:	4628      	mov	r0, r5
 8014f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f4c:	f000 b8dc 	b.w	8015108 <__malloc_unlock>
 8014f50:	42a3      	cmp	r3, r4
 8014f52:	d908      	bls.n	8014f66 <_free_r+0x42>
 8014f54:	6820      	ldr	r0, [r4, #0]
 8014f56:	1821      	adds	r1, r4, r0
 8014f58:	428b      	cmp	r3, r1
 8014f5a:	bf01      	itttt	eq
 8014f5c:	6819      	ldreq	r1, [r3, #0]
 8014f5e:	685b      	ldreq	r3, [r3, #4]
 8014f60:	1809      	addeq	r1, r1, r0
 8014f62:	6021      	streq	r1, [r4, #0]
 8014f64:	e7ed      	b.n	8014f42 <_free_r+0x1e>
 8014f66:	461a      	mov	r2, r3
 8014f68:	685b      	ldr	r3, [r3, #4]
 8014f6a:	b10b      	cbz	r3, 8014f70 <_free_r+0x4c>
 8014f6c:	42a3      	cmp	r3, r4
 8014f6e:	d9fa      	bls.n	8014f66 <_free_r+0x42>
 8014f70:	6811      	ldr	r1, [r2, #0]
 8014f72:	1850      	adds	r0, r2, r1
 8014f74:	42a0      	cmp	r0, r4
 8014f76:	d10b      	bne.n	8014f90 <_free_r+0x6c>
 8014f78:	6820      	ldr	r0, [r4, #0]
 8014f7a:	4401      	add	r1, r0
 8014f7c:	1850      	adds	r0, r2, r1
 8014f7e:	4283      	cmp	r3, r0
 8014f80:	6011      	str	r1, [r2, #0]
 8014f82:	d1e0      	bne.n	8014f46 <_free_r+0x22>
 8014f84:	6818      	ldr	r0, [r3, #0]
 8014f86:	685b      	ldr	r3, [r3, #4]
 8014f88:	6053      	str	r3, [r2, #4]
 8014f8a:	4408      	add	r0, r1
 8014f8c:	6010      	str	r0, [r2, #0]
 8014f8e:	e7da      	b.n	8014f46 <_free_r+0x22>
 8014f90:	d902      	bls.n	8014f98 <_free_r+0x74>
 8014f92:	230c      	movs	r3, #12
 8014f94:	602b      	str	r3, [r5, #0]
 8014f96:	e7d6      	b.n	8014f46 <_free_r+0x22>
 8014f98:	6820      	ldr	r0, [r4, #0]
 8014f9a:	1821      	adds	r1, r4, r0
 8014f9c:	428b      	cmp	r3, r1
 8014f9e:	bf04      	itt	eq
 8014fa0:	6819      	ldreq	r1, [r3, #0]
 8014fa2:	685b      	ldreq	r3, [r3, #4]
 8014fa4:	6063      	str	r3, [r4, #4]
 8014fa6:	bf04      	itt	eq
 8014fa8:	1809      	addeq	r1, r1, r0
 8014faa:	6021      	streq	r1, [r4, #0]
 8014fac:	6054      	str	r4, [r2, #4]
 8014fae:	e7ca      	b.n	8014f46 <_free_r+0x22>
 8014fb0:	bd38      	pop	{r3, r4, r5, pc}
 8014fb2:	bf00      	nop
 8014fb4:	240039bc 	.word	0x240039bc

08014fb8 <sbrk_aligned>:
 8014fb8:	b570      	push	{r4, r5, r6, lr}
 8014fba:	4e0f      	ldr	r6, [pc, #60]	@ (8014ff8 <sbrk_aligned+0x40>)
 8014fbc:	460c      	mov	r4, r1
 8014fbe:	6831      	ldr	r1, [r6, #0]
 8014fc0:	4605      	mov	r5, r0
 8014fc2:	b911      	cbnz	r1, 8014fca <sbrk_aligned+0x12>
 8014fc4:	f000 f8ae 	bl	8015124 <_sbrk_r>
 8014fc8:	6030      	str	r0, [r6, #0]
 8014fca:	4621      	mov	r1, r4
 8014fcc:	4628      	mov	r0, r5
 8014fce:	f000 f8a9 	bl	8015124 <_sbrk_r>
 8014fd2:	1c43      	adds	r3, r0, #1
 8014fd4:	d103      	bne.n	8014fde <sbrk_aligned+0x26>
 8014fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8014fda:	4620      	mov	r0, r4
 8014fdc:	bd70      	pop	{r4, r5, r6, pc}
 8014fde:	1cc4      	adds	r4, r0, #3
 8014fe0:	f024 0403 	bic.w	r4, r4, #3
 8014fe4:	42a0      	cmp	r0, r4
 8014fe6:	d0f8      	beq.n	8014fda <sbrk_aligned+0x22>
 8014fe8:	1a21      	subs	r1, r4, r0
 8014fea:	4628      	mov	r0, r5
 8014fec:	f000 f89a 	bl	8015124 <_sbrk_r>
 8014ff0:	3001      	adds	r0, #1
 8014ff2:	d1f2      	bne.n	8014fda <sbrk_aligned+0x22>
 8014ff4:	e7ef      	b.n	8014fd6 <sbrk_aligned+0x1e>
 8014ff6:	bf00      	nop
 8014ff8:	240039b8 	.word	0x240039b8

08014ffc <_malloc_r>:
 8014ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015000:	1ccd      	adds	r5, r1, #3
 8015002:	f025 0503 	bic.w	r5, r5, #3
 8015006:	3508      	adds	r5, #8
 8015008:	2d0c      	cmp	r5, #12
 801500a:	bf38      	it	cc
 801500c:	250c      	movcc	r5, #12
 801500e:	2d00      	cmp	r5, #0
 8015010:	4606      	mov	r6, r0
 8015012:	db01      	blt.n	8015018 <_malloc_r+0x1c>
 8015014:	42a9      	cmp	r1, r5
 8015016:	d904      	bls.n	8015022 <_malloc_r+0x26>
 8015018:	230c      	movs	r3, #12
 801501a:	6033      	str	r3, [r6, #0]
 801501c:	2000      	movs	r0, #0
 801501e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80150f8 <_malloc_r+0xfc>
 8015026:	f000 f869 	bl	80150fc <__malloc_lock>
 801502a:	f8d8 3000 	ldr.w	r3, [r8]
 801502e:	461c      	mov	r4, r3
 8015030:	bb44      	cbnz	r4, 8015084 <_malloc_r+0x88>
 8015032:	4629      	mov	r1, r5
 8015034:	4630      	mov	r0, r6
 8015036:	f7ff ffbf 	bl	8014fb8 <sbrk_aligned>
 801503a:	1c43      	adds	r3, r0, #1
 801503c:	4604      	mov	r4, r0
 801503e:	d158      	bne.n	80150f2 <_malloc_r+0xf6>
 8015040:	f8d8 4000 	ldr.w	r4, [r8]
 8015044:	4627      	mov	r7, r4
 8015046:	2f00      	cmp	r7, #0
 8015048:	d143      	bne.n	80150d2 <_malloc_r+0xd6>
 801504a:	2c00      	cmp	r4, #0
 801504c:	d04b      	beq.n	80150e6 <_malloc_r+0xea>
 801504e:	6823      	ldr	r3, [r4, #0]
 8015050:	4639      	mov	r1, r7
 8015052:	4630      	mov	r0, r6
 8015054:	eb04 0903 	add.w	r9, r4, r3
 8015058:	f000 f864 	bl	8015124 <_sbrk_r>
 801505c:	4581      	cmp	r9, r0
 801505e:	d142      	bne.n	80150e6 <_malloc_r+0xea>
 8015060:	6821      	ldr	r1, [r4, #0]
 8015062:	1a6d      	subs	r5, r5, r1
 8015064:	4629      	mov	r1, r5
 8015066:	4630      	mov	r0, r6
 8015068:	f7ff ffa6 	bl	8014fb8 <sbrk_aligned>
 801506c:	3001      	adds	r0, #1
 801506e:	d03a      	beq.n	80150e6 <_malloc_r+0xea>
 8015070:	6823      	ldr	r3, [r4, #0]
 8015072:	442b      	add	r3, r5
 8015074:	6023      	str	r3, [r4, #0]
 8015076:	f8d8 3000 	ldr.w	r3, [r8]
 801507a:	685a      	ldr	r2, [r3, #4]
 801507c:	bb62      	cbnz	r2, 80150d8 <_malloc_r+0xdc>
 801507e:	f8c8 7000 	str.w	r7, [r8]
 8015082:	e00f      	b.n	80150a4 <_malloc_r+0xa8>
 8015084:	6822      	ldr	r2, [r4, #0]
 8015086:	1b52      	subs	r2, r2, r5
 8015088:	d420      	bmi.n	80150cc <_malloc_r+0xd0>
 801508a:	2a0b      	cmp	r2, #11
 801508c:	d917      	bls.n	80150be <_malloc_r+0xc2>
 801508e:	1961      	adds	r1, r4, r5
 8015090:	42a3      	cmp	r3, r4
 8015092:	6025      	str	r5, [r4, #0]
 8015094:	bf18      	it	ne
 8015096:	6059      	strne	r1, [r3, #4]
 8015098:	6863      	ldr	r3, [r4, #4]
 801509a:	bf08      	it	eq
 801509c:	f8c8 1000 	streq.w	r1, [r8]
 80150a0:	5162      	str	r2, [r4, r5]
 80150a2:	604b      	str	r3, [r1, #4]
 80150a4:	4630      	mov	r0, r6
 80150a6:	f000 f82f 	bl	8015108 <__malloc_unlock>
 80150aa:	f104 000b 	add.w	r0, r4, #11
 80150ae:	1d23      	adds	r3, r4, #4
 80150b0:	f020 0007 	bic.w	r0, r0, #7
 80150b4:	1ac2      	subs	r2, r0, r3
 80150b6:	bf1c      	itt	ne
 80150b8:	1a1b      	subne	r3, r3, r0
 80150ba:	50a3      	strne	r3, [r4, r2]
 80150bc:	e7af      	b.n	801501e <_malloc_r+0x22>
 80150be:	6862      	ldr	r2, [r4, #4]
 80150c0:	42a3      	cmp	r3, r4
 80150c2:	bf0c      	ite	eq
 80150c4:	f8c8 2000 	streq.w	r2, [r8]
 80150c8:	605a      	strne	r2, [r3, #4]
 80150ca:	e7eb      	b.n	80150a4 <_malloc_r+0xa8>
 80150cc:	4623      	mov	r3, r4
 80150ce:	6864      	ldr	r4, [r4, #4]
 80150d0:	e7ae      	b.n	8015030 <_malloc_r+0x34>
 80150d2:	463c      	mov	r4, r7
 80150d4:	687f      	ldr	r7, [r7, #4]
 80150d6:	e7b6      	b.n	8015046 <_malloc_r+0x4a>
 80150d8:	461a      	mov	r2, r3
 80150da:	685b      	ldr	r3, [r3, #4]
 80150dc:	42a3      	cmp	r3, r4
 80150de:	d1fb      	bne.n	80150d8 <_malloc_r+0xdc>
 80150e0:	2300      	movs	r3, #0
 80150e2:	6053      	str	r3, [r2, #4]
 80150e4:	e7de      	b.n	80150a4 <_malloc_r+0xa8>
 80150e6:	230c      	movs	r3, #12
 80150e8:	6033      	str	r3, [r6, #0]
 80150ea:	4630      	mov	r0, r6
 80150ec:	f000 f80c 	bl	8015108 <__malloc_unlock>
 80150f0:	e794      	b.n	801501c <_malloc_r+0x20>
 80150f2:	6005      	str	r5, [r0, #0]
 80150f4:	e7d6      	b.n	80150a4 <_malloc_r+0xa8>
 80150f6:	bf00      	nop
 80150f8:	240039bc 	.word	0x240039bc

080150fc <__malloc_lock>:
 80150fc:	4801      	ldr	r0, [pc, #4]	@ (8015104 <__malloc_lock+0x8>)
 80150fe:	f7ff bf01 	b.w	8014f04 <__retarget_lock_acquire_recursive>
 8015102:	bf00      	nop
 8015104:	240039b4 	.word	0x240039b4

08015108 <__malloc_unlock>:
 8015108:	4801      	ldr	r0, [pc, #4]	@ (8015110 <__malloc_unlock+0x8>)
 801510a:	f7ff befc 	b.w	8014f06 <__retarget_lock_release_recursive>
 801510e:	bf00      	nop
 8015110:	240039b4 	.word	0x240039b4

08015114 <_malloc_usable_size_r>:
 8015114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015118:	1f18      	subs	r0, r3, #4
 801511a:	2b00      	cmp	r3, #0
 801511c:	bfbc      	itt	lt
 801511e:	580b      	ldrlt	r3, [r1, r0]
 8015120:	18c0      	addlt	r0, r0, r3
 8015122:	4770      	bx	lr

08015124 <_sbrk_r>:
 8015124:	b538      	push	{r3, r4, r5, lr}
 8015126:	4d06      	ldr	r5, [pc, #24]	@ (8015140 <_sbrk_r+0x1c>)
 8015128:	2300      	movs	r3, #0
 801512a:	4604      	mov	r4, r0
 801512c:	4608      	mov	r0, r1
 801512e:	602b      	str	r3, [r5, #0]
 8015130:	f7ee fba0 	bl	8003874 <_sbrk>
 8015134:	1c43      	adds	r3, r0, #1
 8015136:	d102      	bne.n	801513e <_sbrk_r+0x1a>
 8015138:	682b      	ldr	r3, [r5, #0]
 801513a:	b103      	cbz	r3, 801513e <_sbrk_r+0x1a>
 801513c:	6023      	str	r3, [r4, #0]
 801513e:	bd38      	pop	{r3, r4, r5, pc}
 8015140:	240039b0 	.word	0x240039b0

08015144 <_init>:
 8015144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015146:	bf00      	nop
 8015148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801514a:	bc08      	pop	{r3}
 801514c:	469e      	mov	lr, r3
 801514e:	4770      	bx	lr

08015150 <_fini>:
 8015150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015152:	bf00      	nop
 8015154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015156:	bc08      	pop	{r3}
 8015158:	469e      	mov	lr, r3
 801515a:	4770      	bx	lr
